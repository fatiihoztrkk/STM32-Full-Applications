
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a10  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009b98  08009b98  0000ab98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bb4  08009bb4  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009bb4  08009bb4  0000abb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bbc  08009bbc  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bbc  08009bbc  0000abbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009bc0  08009bc0  0000abc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009bc4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a30  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000aac  20000aac  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015e6c  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ba9  00000000  00000000  00020f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  00024ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dbb  00000000  00000000  00025cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002366b  00000000  00000000  00026a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000192eb  00000000  00000000  0004a0f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbd96  00000000  00000000  000633e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012f177  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e0c  00000000  00000000  0012f1bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00133fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009b80 	.word	0x08009b80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009b80 	.word	0x08009b80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <write_acc>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void write_acc(uint8_t address, uint8_t data){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	460a      	mov	r2, r1
 80004fe:	71fb      	strb	r3, [r7, #7]
 8000500:	4613      	mov	r3, r2
 8000502:	71bb      	strb	r3, [r7, #6]

	uint8_t dta_adres[2];
	dta_adres[0] = address;
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	733b      	strb	r3, [r7, #12]
	dta_adres[1] = data;
 8000508:	79bb      	ldrb	r3, [r7, #6]
 800050a:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2108      	movs	r1, #8
 8000510:	4809      	ldr	r0, [pc, #36]	@ (8000538 <write_acc+0x44>)
 8000512:	f001 f919 	bl	8001748 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, dta_adres, 2, 50);
 8000516:	f107 010c 	add.w	r1, r7, #12
 800051a:	2332      	movs	r3, #50	@ 0x32
 800051c:	2202      	movs	r2, #2
 800051e:	4807      	ldr	r0, [pc, #28]	@ (800053c <write_acc+0x48>)
 8000520:	f004 fe89 	bl	8005236 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	2108      	movs	r1, #8
 8000528:	4803      	ldr	r0, [pc, #12]	@ (8000538 <write_acc+0x44>)
 800052a:	f001 f90d 	bl	8001748 <HAL_GPIO_WritePin>

}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000
 800053c:	20000134 	.word	0x20000134

08000540 <read_acc>:


uint8_t read_acc(uint8_t address){
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]

	uint8_t dta_adres[1];
	dta_adres[0] = address | 0x80; //0x80 -> binary olarak 1000 0000 1.biti 1 yaptık. Okuma yapabilmek için.
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000550:	b2db      	uxtb	r3, r3
 8000552:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2108      	movs	r1, #8
 8000558:	480d      	ldr	r0, [pc, #52]	@ (8000590 <read_acc+0x50>)
 800055a:	f001 f8f5 	bl	8001748 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, dta_adres, 1, 50);
 800055e:	f107 010c 	add.w	r1, r7, #12
 8000562:	2332      	movs	r3, #50	@ 0x32
 8000564:	2201      	movs	r2, #1
 8000566:	480b      	ldr	r0, [pc, #44]	@ (8000594 <read_acc+0x54>)
 8000568:	f004 fe65 	bl	8005236 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, g_data, 1, 50);
 800056c:	2332      	movs	r3, #50	@ 0x32
 800056e:	2201      	movs	r2, #1
 8000570:	4909      	ldr	r1, [pc, #36]	@ (8000598 <read_acc+0x58>)
 8000572:	4808      	ldr	r0, [pc, #32]	@ (8000594 <read_acc+0x54>)
 8000574:	f004 ffa3 	bl	80054be <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2108      	movs	r1, #8
 800057c:	4804      	ldr	r0, [pc, #16]	@ (8000590 <read_acc+0x50>)
 800057e:	f001 f8e3 	bl	8001748 <HAL_GPIO_WritePin>
	return g_data[0];
 8000582:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <read_acc+0x58>)
 8000584:	781b      	ldrb	r3, [r3, #0]

}
 8000586:	4618      	mov	r0, r3
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000
 8000594:	20000134 	.word	0x20000134
 8000598:	20000190 	.word	0x20000190

0800059c <raw_to_angle>:

float raw_to_angle(uint8_t angle){
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]

	if (angle<=30){
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b1e      	cmp	r3, #30
 80005aa:	d809      	bhi.n	80005c0 <raw_to_angle+0x24>

		return (float)angle*(90.0f/30.0f);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	ee07 3a90 	vmov	s15, r3
 80005b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005b6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80005ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005be:	e00f      	b.n	80005e0 <raw_to_angle+0x44>
	}
	else if (angle>=225){
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	2be0      	cmp	r3, #224	@ 0xe0
 80005c4:	d90a      	bls.n	80005dc <raw_to_angle+0x40>

		return (float)(angle-255)*(90.0f/30.0f);
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	3bff      	subs	r3, #255	@ 0xff
 80005ca:	ee07 3a90 	vmov	s15, r3
 80005ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005d2:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80005d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005da:	e001      	b.n	80005e0 <raw_to_angle+0x44>
	}

	else{

		return 0.0f;
 80005dc:	eddf 7a04 	vldr	s15, [pc, #16]	@ 80005f0 <raw_to_angle+0x54>
	}
}
 80005e0:	eeb0 0a67 	vmov.f32	s0, s15
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	00000000 	.word	0x00000000

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fd40 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f8da 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f9d6 	bl	80009b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000604:	f000 f940 	bl	8000888 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000608:	f000 f96c 	bl	80008e4 <MX_I2S3_Init>
  MX_SPI1_Init();
 800060c:	f000 f99a 	bl	8000944 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000610:	f008 fe72 	bl	80092f8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  write_acc(0x20, 0x47);  // Sensörün çalışmasını başlattık
 8000614:	2147      	movs	r1, #71	@ 0x47
 8000616:	2020      	movs	r0, #32
 8000618:	f7ff ff6c 	bl	80004f4 <write_acc>
 // buffer = read_acc(0x20);

  write_acc(0x23, 0x88); // Interrupt ayarını yaptık.
 800061c:	2188      	movs	r1, #136	@ 0x88
 800061e:	2023      	movs	r0, #35	@ 0x23
 8000620:	f7ff ff68 	bl	80004f4 <write_acc>
  buffer = read_acc(0x23);
 8000624:	2023      	movs	r0, #35	@ 0x23
 8000626:	f7ff ff8b 	bl	8000540 <read_acc>
 800062a:	4603      	mov	r3, r0
 800062c:	461a      	mov	r2, r3
 800062e:	4b5c      	ldr	r3, [pc, #368]	@ (80007a0 <main+0x1ac>)
 8000630:	701a      	strb	r2, [r3, #0]

  write_acc(0x24,0x88);
 8000632:	2188      	movs	r1, #136	@ 0x88
 8000634:	2024      	movs	r0, #36	@ 0x24
 8000636:	f7ff ff5d 	bl	80004f4 <write_acc>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800063a:	f008 fe83 	bl	8009344 <MX_USB_HOST_Process>


    if(flag == 1U)
 800063e:	4b59      	ldr	r3, [pc, #356]	@ (80007a4 <main+0x1b0>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d1f9      	bne.n	800063a <main+0x46>
    {
    	flag = 0;
 8000646:	4b57      	ldr	r3, [pc, #348]	@ (80007a4 <main+0x1b0>)
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
		if(angleX>5.0 && angleX<85.0){
 800064c:	4b56      	ldr	r3, [pc, #344]	@ (80007a8 <main+0x1b4>)
 800064e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000652:	2b05      	cmp	r3, #5
 8000654:	dd1d      	ble.n	8000692 <main+0x9e>
 8000656:	4b54      	ldr	r3, [pc, #336]	@ (80007a8 <main+0x1b4>)
 8000658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800065c:	2b54      	cmp	r3, #84	@ 0x54
 800065e:	dc18      	bgt.n	8000692 <main+0x9e>

			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000666:	4851      	ldr	r0, [pc, #324]	@ (80007ac <main+0x1b8>)
 8000668:	f001 f86e 	bl	8001748 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000672:	484e      	ldr	r0, [pc, #312]	@ (80007ac <main+0x1b8>)
 8000674:	f001 f868 	bl	8001748 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800067e:	484b      	ldr	r0, [pc, #300]	@ (80007ac <main+0x1b8>)
 8000680:	f001 f862 	bl	8001748 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 0);
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800068a:	4848      	ldr	r0, [pc, #288]	@ (80007ac <main+0x1b8>)
 800068c:	f001 f85c 	bl	8001748 <HAL_GPIO_WritePin>
 8000690:	e084      	b.n	800079c <main+0x1a8>
		}
		else if(-5.0>angleX && angleX>-85.0 ){
 8000692:	4b45      	ldr	r3, [pc, #276]	@ (80007a8 <main+0x1b4>)
 8000694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000698:	f113 0f05 	cmn.w	r3, #5
 800069c:	da1e      	bge.n	80006dc <main+0xe8>
 800069e:	4b42      	ldr	r3, [pc, #264]	@ (80007a8 <main+0x1b4>)
 80006a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006a4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80006a8:	db18      	blt.n	80006dc <main+0xe8>

			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006b0:	483e      	ldr	r0, [pc, #248]	@ (80007ac <main+0x1b8>)
 80006b2:	f001 f849 	bl	8001748 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006bc:	483b      	ldr	r0, [pc, #236]	@ (80007ac <main+0x1b8>)
 80006be:	f001 f843 	bl	8001748 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c8:	4838      	ldr	r0, [pc, #224]	@ (80007ac <main+0x1b8>)
 80006ca:	f001 f83d 	bl	8001748 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006d4:	4835      	ldr	r0, [pc, #212]	@ (80007ac <main+0x1b8>)
 80006d6:	f001 f837 	bl	8001748 <HAL_GPIO_WritePin>
 80006da:	e05f      	b.n	800079c <main+0x1a8>

		}
		else if(angleY>5.0 && angleY<85.0){
 80006dc:	4b34      	ldr	r3, [pc, #208]	@ (80007b0 <main+0x1bc>)
 80006de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006e2:	2b05      	cmp	r3, #5
 80006e4:	dd1d      	ble.n	8000722 <main+0x12e>
 80006e6:	4b32      	ldr	r3, [pc, #200]	@ (80007b0 <main+0x1bc>)
 80006e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ec:	2b54      	cmp	r3, #84	@ 0x54
 80006ee:	dc18      	bgt.n	8000722 <main+0x12e>

			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006f6:	482d      	ldr	r0, [pc, #180]	@ (80007ac <main+0x1b8>)
 80006f8:	f001 f826 	bl	8001748 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000702:	482a      	ldr	r0, [pc, #168]	@ (80007ac <main+0x1b8>)
 8000704:	f001 f820 	bl	8001748 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800070e:	4827      	ldr	r0, [pc, #156]	@ (80007ac <main+0x1b8>)
 8000710:	f001 f81a 	bl	8001748 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 0);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800071a:	4824      	ldr	r0, [pc, #144]	@ (80007ac <main+0x1b8>)
 800071c:	f001 f814 	bl	8001748 <HAL_GPIO_WritePin>
 8000720:	e03c      	b.n	800079c <main+0x1a8>
		}
		else if(-5.0>angleY && angleY>-85.0 ){
 8000722:	4b23      	ldr	r3, [pc, #140]	@ (80007b0 <main+0x1bc>)
 8000724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000728:	f113 0f05 	cmn.w	r3, #5
 800072c:	da1e      	bge.n	800076c <main+0x178>
 800072e:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <main+0x1bc>)
 8000730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000734:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8000738:	db18      	blt.n	800076c <main+0x178>

			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000740:	481a      	ldr	r0, [pc, #104]	@ (80007ac <main+0x1b8>)
 8000742:	f001 f801 	bl	8001748 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800074c:	4817      	ldr	r0, [pc, #92]	@ (80007ac <main+0x1b8>)
 800074e:	f000 fffb 	bl	8001748 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000758:	4814      	ldr	r0, [pc, #80]	@ (80007ac <main+0x1b8>)
 800075a:	f000 fff5 	bl	8001748 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 1);
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000764:	4811      	ldr	r0, [pc, #68]	@ (80007ac <main+0x1b8>)
 8000766:	f000 ffef 	bl	8001748 <HAL_GPIO_WritePin>
 800076a:	e017      	b.n	800079c <main+0x1a8>
		}
		else{
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, 0);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000772:	480e      	ldr	r0, [pc, #56]	@ (80007ac <main+0x1b8>)
 8000774:	f000 ffe8 	bl	8001748 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800077e:	480b      	ldr	r0, [pc, #44]	@ (80007ac <main+0x1b8>)
 8000780:	f000 ffe2 	bl	8001748 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800078a:	4808      	ldr	r0, [pc, #32]	@ (80007ac <main+0x1b8>)
 800078c:	f000 ffdc 	bl	8001748 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000796:	4805      	ldr	r0, [pc, #20]	@ (80007ac <main+0x1b8>)
 8000798:	f000 ffd6 	bl	8001748 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 800079c:	e74d      	b.n	800063a <main+0x46>
 800079e:	bf00      	nop
 80007a0:	2000018c 	.word	0x2000018c
 80007a4:	2000019e 	.word	0x2000019e
 80007a8:	20000198 	.word	0x20000198
 80007ac:	40020c00 	.word	0x40020c00
 80007b0:	2000019a 	.word	0x2000019a

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	@ 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	2230      	movs	r2, #48	@ 0x30
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f009 f94e 	bl	8009a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	4b28      	ldr	r3, [pc, #160]	@ (8000880 <SystemClock_Config+0xcc>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e0:	4a27      	ldr	r2, [pc, #156]	@ (8000880 <SystemClock_Config+0xcc>)
 80007e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e8:	4b25      	ldr	r3, [pc, #148]	@ (8000880 <SystemClock_Config+0xcc>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	4b22      	ldr	r3, [pc, #136]	@ (8000884 <SystemClock_Config+0xd0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a21      	ldr	r2, [pc, #132]	@ (8000884 <SystemClock_Config+0xd0>)
 80007fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <SystemClock_Config+0xd0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000810:	2301      	movs	r3, #1
 8000812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000814:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000822:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000824:	2308      	movs	r3, #8
 8000826:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000828:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800082c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000832:	2307      	movs	r3, #7
 8000834:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0320 	add.w	r3, r7, #32
 800083a:	4618      	mov	r0, r3
 800083c:	f003 feac 	bl	8004598 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000846:	f000 fa17 	bl	8000c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2302      	movs	r3, #2
 8000850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000856:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800085a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800085c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000860:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2105      	movs	r1, #5
 8000868:	4618      	mov	r0, r3
 800086a:	f004 f90d 	bl	8004a88 <HAL_RCC_ClockConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000874:	f000 fa00 	bl	8000c78 <Error_Handler>
  }
}
 8000878:	bf00      	nop
 800087a:	3750      	adds	r7, #80	@ 0x50
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40007000 	.word	0x40007000

08000888 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <MX_I2C1_Init+0x50>)
 800088e:	4a13      	ldr	r2, [pc, #76]	@ (80008dc <MX_I2C1_Init+0x54>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000892:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_I2C1_Init+0x50>)
 8000894:	4a12      	ldr	r2, [pc, #72]	@ (80008e0 <MX_I2C1_Init+0x58>)
 8000896:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000898:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <MX_I2C1_Init+0x50>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <MX_I2C1_Init+0x50>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <MX_I2C1_Init+0x50>)
 80008a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <MX_I2C1_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008b2:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <MX_I2C1_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	@ (80008d8 <MX_I2C1_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <MX_I2C1_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	@ (80008d8 <MX_I2C1_Init+0x50>)
 80008c6:	f003 f883 	bl	80039d0 <HAL_I2C_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008d0:	f000 f9d2 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000098 	.word	0x20000098
 80008dc:	40005400 	.word	0x40005400
 80008e0:	000186a0 	.word	0x000186a0

080008e4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008e8:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <MX_I2S3_Init+0x54>)
 80008ea:	4a14      	ldr	r2, [pc, #80]	@ (800093c <MX_I2S3_Init+0x58>)
 80008ec:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008ee:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <MX_I2S3_Init+0x54>)
 80008f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008f4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008f6:	4b10      	ldr	r3, [pc, #64]	@ (8000938 <MX_I2S3_Init+0x54>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <MX_I2S3_Init+0x54>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000902:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <MX_I2S3_Init+0x54>)
 8000904:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000908:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800090a:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <MX_I2S3_Init+0x54>)
 800090c:	4a0c      	ldr	r2, [pc, #48]	@ (8000940 <MX_I2S3_Init+0x5c>)
 800090e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000910:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <MX_I2S3_Init+0x54>)
 8000912:	2200      	movs	r2, #0
 8000914:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000916:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <MX_I2S3_Init+0x54>)
 8000918:	2200      	movs	r2, #0
 800091a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <MX_I2S3_Init+0x54>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_I2S3_Init+0x54>)
 8000924:	f003 f998 	bl	8003c58 <HAL_I2S_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800092e:	f000 f9a3 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000ec 	.word	0x200000ec
 800093c:	40003c00 	.word	0x40003c00
 8000940:	00017700 	.word	0x00017700

08000944 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000948:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <MX_SPI1_Init+0x64>)
 800094a:	4a18      	ldr	r2, [pc, #96]	@ (80009ac <MX_SPI1_Init+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800094e:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000950:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000954:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000956:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <MX_SPI1_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_SPI1_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000974:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000976:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000978:	2218      	movs	r2, #24
 800097a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800097c:	4b0a      	ldr	r3, [pc, #40]	@ (80009a8 <MX_SPI1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000988:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <MX_SPI1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000990:	220a      	movs	r2, #10
 8000992:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <MX_SPI1_Init+0x64>)
 8000996:	f004 fbc5 	bl	8005124 <HAL_SPI_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009a0:	f000 f96a 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000134 	.word	0x20000134
 80009ac:	40013000 	.word	0x40013000

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08c      	sub	sp, #48	@ 0x30
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
 80009ca:	4b76      	ldr	r3, [pc, #472]	@ (8000ba4 <MX_GPIO_Init+0x1f4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a75      	ldr	r2, [pc, #468]	@ (8000ba4 <MX_GPIO_Init+0x1f4>)
 80009d0:	f043 0310 	orr.w	r3, r3, #16
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b73      	ldr	r3, [pc, #460]	@ (8000ba4 <MX_GPIO_Init+0x1f4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0310 	and.w	r3, r3, #16
 80009de:	61bb      	str	r3, [r7, #24]
 80009e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	4b6f      	ldr	r3, [pc, #444]	@ (8000ba4 <MX_GPIO_Init+0x1f4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a6e      	ldr	r2, [pc, #440]	@ (8000ba4 <MX_GPIO_Init+0x1f4>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b6c      	ldr	r3, [pc, #432]	@ (8000ba4 <MX_GPIO_Init+0x1f4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b68      	ldr	r3, [pc, #416]	@ (8000ba4 <MX_GPIO_Init+0x1f4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a67      	ldr	r2, [pc, #412]	@ (8000ba4 <MX_GPIO_Init+0x1f4>)
 8000a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b65      	ldr	r3, [pc, #404]	@ (8000ba4 <MX_GPIO_Init+0x1f4>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b61      	ldr	r3, [pc, #388]	@ (8000ba4 <MX_GPIO_Init+0x1f4>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a60      	ldr	r2, [pc, #384]	@ (8000ba4 <MX_GPIO_Init+0x1f4>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b5e      	ldr	r3, [pc, #376]	@ (8000ba4 <MX_GPIO_Init+0x1f4>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ba4 <MX_GPIO_Init+0x1f4>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a59      	ldr	r2, [pc, #356]	@ (8000ba4 <MX_GPIO_Init+0x1f4>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b57      	ldr	r3, [pc, #348]	@ (8000ba4 <MX_GPIO_Init+0x1f4>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b53      	ldr	r3, [pc, #332]	@ (8000ba4 <MX_GPIO_Init+0x1f4>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a52      	ldr	r2, [pc, #328]	@ (8000ba4 <MX_GPIO_Init+0x1f4>)
 8000a5c:	f043 0308 	orr.w	r3, r3, #8
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b50      	ldr	r3, [pc, #320]	@ (8000ba4 <MX_GPIO_Init+0x1f4>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0308 	and.w	r3, r3, #8
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2108      	movs	r1, #8
 8000a72:	484d      	ldr	r0, [pc, #308]	@ (8000ba8 <MX_GPIO_Init+0x1f8>)
 8000a74:	f000 fe68 	bl	8001748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	484b      	ldr	r0, [pc, #300]	@ (8000bac <MX_GPIO_Init+0x1fc>)
 8000a7e:	f000 fe63 	bl	8001748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a82:	2200      	movs	r2, #0
 8000a84:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000a88:	4849      	ldr	r0, [pc, #292]	@ (8000bb0 <MX_GPIO_Init+0x200>)
 8000a8a:	f000 fe5d 	bl	8001748 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4840      	ldr	r0, [pc, #256]	@ (8000ba8 <MX_GPIO_Init+0x1f8>)
 8000aa6:	f000 fcb3 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	483a      	ldr	r0, [pc, #232]	@ (8000bac <MX_GPIO_Init+0x1fc>)
 8000ac2:	f000 fca5 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4832      	ldr	r0, [pc, #200]	@ (8000bac <MX_GPIO_Init+0x1fc>)
 8000ae2:	f000 fc95 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	482e      	ldr	r0, [pc, #184]	@ (8000bb4 <MX_GPIO_Init+0x204>)
 8000afa:	f000 fc89 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000afe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b10:	2305      	movs	r3, #5
 8000b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4826      	ldr	r0, [pc, #152]	@ (8000bb4 <MX_GPIO_Init+0x204>)
 8000b1c:	f000 fc78 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b20:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000b24:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	481d      	ldr	r0, [pc, #116]	@ (8000bb0 <MX_GPIO_Init+0x200>)
 8000b3a:	f000 fc69 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b3e:	2320      	movs	r3, #32
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4817      	ldr	r0, [pc, #92]	@ (8000bb0 <MX_GPIO_Init+0x200>)
 8000b52:	f000 fc5d 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480f      	ldr	r0, [pc, #60]	@ (8000ba8 <MX_GPIO_Init+0x1f8>)
 8000b6c:	f000 fc50 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b74:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	4808      	ldr	r0, [pc, #32]	@ (8000ba8 <MX_GPIO_Init+0x1f8>)
 8000b86:	f000 fc43 	bl	8001410 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2006      	movs	r0, #6
 8000b90:	f000 fbe5 	bl	800135e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b94:	2006      	movs	r0, #6
 8000b96:	f000 fbfe 	bl	8001396 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b9a:	bf00      	nop
 8000b9c:	3730      	adds	r7, #48	@ 0x30
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40020800 	.word	0x40020800
 8000bb0:	40020c00 	.word	0x40020c00
 8000bb4:	40020400 	.word	0x40020400

08000bb8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]

    data_X = (int16_t)read_acc(0x29) ;
 8000bc2:	2029      	movs	r0, #41	@ 0x29
 8000bc4:	f7ff fcbc 	bl	8000540 <read_acc>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	b21a      	sxth	r2, r3
 8000bcc:	4b23      	ldr	r3, [pc, #140]	@ (8000c5c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000bce:	801a      	strh	r2, [r3, #0]
    data_Y = (int16_t)read_acc(0x2B) ;
 8000bd0:	202b      	movs	r0, #43	@ 0x2b
 8000bd2:	f7ff fcb5 	bl	8000540 <read_acc>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	b21a      	sxth	r2, r3
 8000bda:	4b21      	ldr	r3, [pc, #132]	@ (8000c60 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000bdc:	801a      	strh	r2, [r3, #0]
    data_Z = (int16_t)read_acc(0x2D) ;
 8000bde:	202d      	movs	r0, #45	@ 0x2d
 8000be0:	f7ff fcae 	bl	8000540 <read_acc>
 8000be4:	4603      	mov	r3, r0
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c64 <HAL_GPIO_EXTI_Callback+0xac>)
 8000bea:	801a      	strh	r2, [r3, #0]

    angleX = raw_to_angle(data_X);
 8000bec:	4b1b      	ldr	r3, [pc, #108]	@ (8000c5c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fcd1 	bl	800059c <raw_to_angle>
 8000bfa:	eef0 7a40 	vmov.f32	s15, s0
 8000bfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c02:	ee17 3a90 	vmov	r3, s15
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000c0a:	801a      	strh	r2, [r3, #0]
    angleY = raw_to_angle(data_Y);
 8000c0c:	4b14      	ldr	r3, [pc, #80]	@ (8000c60 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fcc1 	bl	800059c <raw_to_angle>
 8000c1a:	eef0 7a40 	vmov.f32	s15, s0
 8000c1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c22:	ee17 3a90 	vmov	r3, s15
 8000c26:	b21a      	sxth	r2, r3
 8000c28:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c2a:	801a      	strh	r2, [r3, #0]
    angleZ = raw_to_angle(data_Z);
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <HAL_GPIO_EXTI_Callback+0xac>)
 8000c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fcb1 	bl	800059c <raw_to_angle>
 8000c3a:	eef0 7a40 	vmov.f32	s15, s0
 8000c3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c42:	ee17 3a90 	vmov	r3, s15
 8000c46:	b21a      	sxth	r2, r3
 8000c48:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c4a:	801a      	strh	r2, [r3, #0]

    flag = 1U;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]

}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000192 	.word	0x20000192
 8000c60:	20000194 	.word	0x20000194
 8000c64:	20000196 	.word	0x20000196
 8000c68:	20000198 	.word	0x20000198
 8000c6c:	2000019a 	.word	0x2000019a
 8000c70:	2000019c 	.word	0x2000019c
 8000c74:	2000019e 	.word	0x2000019e

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <Error_Handler+0x8>

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c92:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	4a08      	ldr	r2, [pc, #32]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb6:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <HAL_MspInit+0x4c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cc2:	2007      	movs	r0, #7
 8000cc4:	f000 fb40 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	@ 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a19      	ldr	r2, [pc, #100]	@ (8000d58 <HAL_I2C_MspInit+0x84>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d12c      	bne.n	8000d50 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <HAL_I2C_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a17      	ldr	r2, [pc, #92]	@ (8000d5c <HAL_I2C_MspInit+0x88>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <HAL_I2C_MspInit+0x88>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d12:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d18:	2312      	movs	r3, #18
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d24:	2304      	movs	r3, #4
 8000d26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480c      	ldr	r0, [pc, #48]	@ (8000d60 <HAL_I2C_MspInit+0x8c>)
 8000d30:	f000 fb6e 	bl	8001410 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <HAL_I2C_MspInit+0x88>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3c:	4a07      	ldr	r2, [pc, #28]	@ (8000d5c <HAL_I2C_MspInit+0x88>)
 8000d3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <HAL_I2C_MspInit+0x88>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d50:	bf00      	nop
 8000d52:	3728      	adds	r7, #40	@ 0x28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020400 	.word	0x40020400

08000d64 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08e      	sub	sp, #56	@ 0x38
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a31      	ldr	r2, [pc, #196]	@ (8000e54 <HAL_I2S_MspInit+0xf0>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d15a      	bne.n	8000e4a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d94:	2301      	movs	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d98:	23c0      	movs	r3, #192	@ 0xc0
 8000d9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4618      	mov	r0, r3
 8000da6:	f004 f87b 	bl	8004ea0 <HAL_RCCEx_PeriphCLKConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000db0:	f7ff ff62 	bl	8000c78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	4b27      	ldr	r3, [pc, #156]	@ (8000e58 <HAL_I2S_MspInit+0xf4>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbc:	4a26      	ldr	r2, [pc, #152]	@ (8000e58 <HAL_I2S_MspInit+0xf4>)
 8000dbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc4:	4b24      	ldr	r3, [pc, #144]	@ (8000e58 <HAL_I2S_MspInit+0xf4>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	4b20      	ldr	r3, [pc, #128]	@ (8000e58 <HAL_I2S_MspInit+0xf4>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd8:	4a1f      	ldr	r2, [pc, #124]	@ (8000e58 <HAL_I2S_MspInit+0xf4>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e58 <HAL_I2S_MspInit+0xf4>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <HAL_I2S_MspInit+0xf4>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df4:	4a18      	ldr	r2, [pc, #96]	@ (8000e58 <HAL_I2S_MspInit+0xf4>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfc:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <HAL_I2S_MspInit+0xf4>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e08:	2310      	movs	r3, #16
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e18:	2306      	movs	r3, #6
 8000e1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e20:	4619      	mov	r1, r3
 8000e22:	480e      	ldr	r0, [pc, #56]	@ (8000e5c <HAL_I2S_MspInit+0xf8>)
 8000e24:	f000 faf4 	bl	8001410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e28:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e3a:	2306      	movs	r3, #6
 8000e3c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	4806      	ldr	r0, [pc, #24]	@ (8000e60 <HAL_I2S_MspInit+0xfc>)
 8000e46:	f000 fae3 	bl	8001410 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3738      	adds	r7, #56	@ 0x38
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40003c00 	.word	0x40003c00
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000
 8000e60:	40020800 	.word	0x40020800

08000e64 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	@ 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef8 <HAL_SPI_MspInit+0x94>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d133      	bne.n	8000eee <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <HAL_SPI_MspInit+0x98>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000efc <HAL_SPI_MspInit+0x98>)
 8000e90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e96:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <HAL_SPI_MspInit+0x98>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <HAL_SPI_MspInit+0x98>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	4a14      	ldr	r2, [pc, #80]	@ (8000efc <HAL_SPI_MspInit+0x98>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb2:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <HAL_SPI_MspInit+0x98>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ebe:	23e0      	movs	r3, #224	@ 0xe0
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ece:	2305      	movs	r3, #5
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4809      	ldr	r0, [pc, #36]	@ (8000f00 <HAL_SPI_MspInit+0x9c>)
 8000eda:	f000 fa99 	bl	8001410 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2023      	movs	r0, #35	@ 0x23
 8000ee4:	f000 fa3b 	bl	800135e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ee8:	2023      	movs	r0, #35	@ 0x23
 8000eea:	f000 fa54 	bl	8001396 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	@ 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40013000 	.word	0x40013000
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020000 	.word	0x40020000

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <NMI_Handler+0x4>

08000f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5a:	f000 f8e1 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f66:	2001      	movs	r0, #1
 8000f68:	f000 fc08 	bl	800177c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f74:	4802      	ldr	r0, [pc, #8]	@ (8000f80 <SPI1_IRQHandler+0x10>)
 8000f76:	f004 fd65 	bl	8005a44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000134 	.word	0x20000134

08000f84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f88:	4802      	ldr	r0, [pc, #8]	@ (8000f94 <OTG_FS_IRQHandler+0x10>)
 8000f8a:	f000 fecd 	bl	8001d28 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000584 	.word	0x20000584

08000f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa0:	4a14      	ldr	r2, [pc, #80]	@ (8000ff4 <_sbrk+0x5c>)
 8000fa2:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <_sbrk+0x60>)
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fac:	4b13      	ldr	r3, [pc, #76]	@ (8000ffc <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d102      	bne.n	8000fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <_sbrk+0x64>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	@ (8001000 <_sbrk+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fba:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d207      	bcs.n	8000fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc8:	f008 fd64 	bl	8009a94 <__errno>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	220c      	movs	r2, #12
 8000fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	e009      	b.n	8000fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fde:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a05      	ldr	r2, [pc, #20]	@ (8000ffc <_sbrk+0x64>)
 8000fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fea:	68fb      	ldr	r3, [r7, #12]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20020000 	.word	0x20020000
 8000ff8:	00000400 	.word	0x00000400
 8000ffc:	200001a0 	.word	0x200001a0
 8001000:	20000ab0 	.word	0x20000ab0

08001004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <SystemInit+0x20>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800100e:	4a05      	ldr	r2, [pc, #20]	@ (8001024 <SystemInit+0x20>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001060 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800102c:	f7ff ffea 	bl	8001004 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001030:	480c      	ldr	r0, [pc, #48]	@ (8001064 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001032:	490d      	ldr	r1, [pc, #52]	@ (8001068 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001034:	4a0d      	ldr	r2, [pc, #52]	@ (800106c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001048:	4c0a      	ldr	r4, [pc, #40]	@ (8001074 <LoopFillZerobss+0x22>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001056:	f008 fd23 	bl	8009aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff facb 	bl	80005f4 <main>
  bx  lr    
 800105e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800106c:	08009bc4 	.word	0x08009bc4
  ldr r2, =_sbss
 8001070:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001074:	20000aac 	.word	0x20000aac

08001078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001080:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0d      	ldr	r2, [pc, #52]	@ (80010bc <HAL_Init+0x40>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800108a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800108c:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <HAL_Init+0x40>)
 8001092:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a07      	ldr	r2, [pc, #28]	@ (80010bc <HAL_Init+0x40>)
 800109e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f94f 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f000 f808 	bl	80010c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b0:	f7ff fde8 	bl	8000c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023c00 	.word	0x40023c00

080010c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c8:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <HAL_InitTick+0x54>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <HAL_InitTick+0x58>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f967 	bl	80013b2 <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00e      	b.n	800110c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d80a      	bhi.n	800110a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f4:	2200      	movs	r2, #0
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f000 f92f 	bl	800135e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001100:	4a06      	ldr	r2, [pc, #24]	@ (800111c <HAL_InitTick+0x5c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e000      	b.n	800110c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000000 	.word	0x20000000
 8001118:	20000008 	.word	0x20000008
 800111c:	20000004 	.word	0x20000004

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	@ (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008
 8001144:	200001a4 	.word	0x200001a4

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	@ (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	200001a4 	.word	0x200001a4

08001160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff ffee 	bl	8001148 <HAL_GetTick>
 800116c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001178:	d005      	beq.n	8001186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117a:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <HAL_Delay+0x44>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001186:	bf00      	nop
 8001188:	f7ff ffde 	bl	8001148 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f7      	bhi.n	8001188 <HAL_Delay+0x28>
  {
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000008 	.word	0x20000008

080011a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	@ (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <__NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	db0b      	blt.n	8001236 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 021f 	and.w	r2, r3, #31
 8001224:	4907      	ldr	r1, [pc, #28]	@ (8001244 <__NVIC_EnableIRQ+0x38>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	@ (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	@ (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	@ 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	@ 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001314:	d301      	bcc.n	800131a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131a:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <SysTick_Config+0x40>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001322:	210f      	movs	r1, #15
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f7ff ff8e 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <SysTick_Config+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	@ (8001344 <SysTick_Config+0x40>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff29 	bl	80011a8 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001370:	f7ff ff3e 	bl	80011f0 <__NVIC_GetPriorityGrouping>
 8001374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff ff8e 	bl	800129c <NVIC_EncodePriority>
 8001380:	4602      	mov	r2, r0
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff5d 	bl	8001248 <__NVIC_SetPriority>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff31 	bl	800120c <__NVIC_EnableIRQ>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffa2 	bl	8001304 <SysTick_Config>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d004      	beq.n	80013e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2280      	movs	r2, #128	@ 0x80
 80013e2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e00c      	b.n	8001402 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2205      	movs	r2, #5
 80013ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0201 	bic.w	r2, r2, #1
 80013fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	@ 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	e16b      	b.n	8001704 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800142c:	2201      	movs	r2, #1
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	429a      	cmp	r2, r3
 8001446:	f040 815a 	bne.w	80016fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	2b01      	cmp	r3, #1
 8001454:	d005      	beq.n	8001462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800145e:	2b02      	cmp	r3, #2
 8001460:	d130      	bne.n	80014c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001498:	2201      	movs	r2, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 0201 	and.w	r2, r3, #1
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d017      	beq.n	8001500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d123      	bne.n	8001554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	08da      	lsrs	r2, r3, #3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3208      	adds	r2, #8
 8001514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	220f      	movs	r2, #15
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	08da      	lsrs	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3208      	adds	r2, #8
 800154e:	69b9      	ldr	r1, [r7, #24]
 8001550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	2203      	movs	r2, #3
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0203 	and.w	r2, r3, #3
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80b4 	beq.w	80016fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b60      	ldr	r3, [pc, #384]	@ (800171c <HAL_GPIO_Init+0x30c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	4a5f      	ldr	r2, [pc, #380]	@ (800171c <HAL_GPIO_Init+0x30c>)
 80015a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015a6:	4b5d      	ldr	r3, [pc, #372]	@ (800171c <HAL_GPIO_Init+0x30c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001720 <HAL_GPIO_Init+0x310>)
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	3302      	adds	r3, #2
 80015ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	220f      	movs	r2, #15
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a52      	ldr	r2, [pc, #328]	@ (8001724 <HAL_GPIO_Init+0x314>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d02b      	beq.n	8001636 <HAL_GPIO_Init+0x226>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a51      	ldr	r2, [pc, #324]	@ (8001728 <HAL_GPIO_Init+0x318>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d025      	beq.n	8001632 <HAL_GPIO_Init+0x222>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a50      	ldr	r2, [pc, #320]	@ (800172c <HAL_GPIO_Init+0x31c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d01f      	beq.n	800162e <HAL_GPIO_Init+0x21e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001730 <HAL_GPIO_Init+0x320>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d019      	beq.n	800162a <HAL_GPIO_Init+0x21a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001734 <HAL_GPIO_Init+0x324>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d013      	beq.n	8001626 <HAL_GPIO_Init+0x216>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4d      	ldr	r2, [pc, #308]	@ (8001738 <HAL_GPIO_Init+0x328>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d00d      	beq.n	8001622 <HAL_GPIO_Init+0x212>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4c      	ldr	r2, [pc, #304]	@ (800173c <HAL_GPIO_Init+0x32c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d007      	beq.n	800161e <HAL_GPIO_Init+0x20e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4b      	ldr	r2, [pc, #300]	@ (8001740 <HAL_GPIO_Init+0x330>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d101      	bne.n	800161a <HAL_GPIO_Init+0x20a>
 8001616:	2307      	movs	r3, #7
 8001618:	e00e      	b.n	8001638 <HAL_GPIO_Init+0x228>
 800161a:	2308      	movs	r3, #8
 800161c:	e00c      	b.n	8001638 <HAL_GPIO_Init+0x228>
 800161e:	2306      	movs	r3, #6
 8001620:	e00a      	b.n	8001638 <HAL_GPIO_Init+0x228>
 8001622:	2305      	movs	r3, #5
 8001624:	e008      	b.n	8001638 <HAL_GPIO_Init+0x228>
 8001626:	2304      	movs	r3, #4
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x228>
 800162a:	2303      	movs	r3, #3
 800162c:	e004      	b.n	8001638 <HAL_GPIO_Init+0x228>
 800162e:	2302      	movs	r3, #2
 8001630:	e002      	b.n	8001638 <HAL_GPIO_Init+0x228>
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <HAL_GPIO_Init+0x228>
 8001636:	2300      	movs	r3, #0
 8001638:	69fa      	ldr	r2, [r7, #28]
 800163a:	f002 0203 	and.w	r2, r2, #3
 800163e:	0092      	lsls	r2, r2, #2
 8001640:	4093      	lsls	r3, r2
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001648:	4935      	ldr	r1, [pc, #212]	@ (8001720 <HAL_GPIO_Init+0x310>)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	3302      	adds	r3, #2
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001656:	4b3b      	ldr	r3, [pc, #236]	@ (8001744 <HAL_GPIO_Init+0x334>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800167a:	4a32      	ldr	r2, [pc, #200]	@ (8001744 <HAL_GPIO_Init+0x334>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001680:	4b30      	ldr	r3, [pc, #192]	@ (8001744 <HAL_GPIO_Init+0x334>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016a4:	4a27      	ldr	r2, [pc, #156]	@ (8001744 <HAL_GPIO_Init+0x334>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016aa:	4b26      	ldr	r3, [pc, #152]	@ (8001744 <HAL_GPIO_Init+0x334>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001744 <HAL_GPIO_Init+0x334>)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <HAL_GPIO_Init+0x334>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016f8:	4a12      	ldr	r2, [pc, #72]	@ (8001744 <HAL_GPIO_Init+0x334>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3301      	adds	r3, #1
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	2b0f      	cmp	r3, #15
 8001708:	f67f ae90 	bls.w	800142c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3724      	adds	r7, #36	@ 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40013800 	.word	0x40013800
 8001724:	40020000 	.word	0x40020000
 8001728:	40020400 	.word	0x40020400
 800172c:	40020800 	.word	0x40020800
 8001730:	40020c00 	.word	0x40020c00
 8001734:	40021000 	.word	0x40021000
 8001738:	40021400 	.word	0x40021400
 800173c:	40021800 	.word	0x40021800
 8001740:	40021c00 	.word	0x40021c00
 8001744:	40013c00 	.word	0x40013c00

08001748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
 8001754:	4613      	mov	r3, r2
 8001756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001758:	787b      	ldrb	r3, [r7, #1]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001764:	e003      	b.n	800176e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001766:	887b      	ldrh	r3, [r7, #2]
 8001768:	041a      	lsls	r2, r3, #16
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	619a      	str	r2, [r3, #24]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001786:	4b08      	ldr	r3, [pc, #32]	@ (80017a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	4013      	ands	r3, r2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d006      	beq.n	80017a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001792:	4a05      	ldr	r2, [pc, #20]	@ (80017a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fa0c 	bl	8000bb8 <HAL_GPIO_EXTI_Callback>
  }
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40013c00 	.word	0x40013c00

080017ac <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e059      	b.n	8001872 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d106      	bne.n	80017de <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f007 fdeb 	bl	80093b4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2203      	movs	r2, #3
 80017e2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017ec:	d102      	bne.n	80017f4 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f004 fbf8 	bl	8005fee <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7c1a      	ldrb	r2, [r3, #16]
 8001806:	f88d 2000 	strb.w	r2, [sp]
 800180a:	3304      	adds	r3, #4
 800180c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800180e:	f004 fb79 	bl	8005f04 <USB_CoreInit>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2202      	movs	r2, #2
 800181c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e026      	b.n	8001872 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2101      	movs	r1, #1
 800182a:	4618      	mov	r0, r3
 800182c:	f004 fbf0 	bl	8006010 <USB_SetCurrentMode>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d005      	beq.n	8001842 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2202      	movs	r2, #2
 800183a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e017      	b.n	8001872 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6818      	ldr	r0, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7c1a      	ldrb	r2, [r3, #16]
 800184a:	f88d 2000 	strb.w	r2, [sp]
 800184e:	3304      	adds	r3, #4
 8001850:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001852:	f004 fd99 	bl	8006388 <USB_HostInit>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e004      	b.n	8001872 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800187a:	b590      	push	{r4, r7, lr}
 800187c:	b08b      	sub	sp, #44	@ 0x2c
 800187e:	af04      	add	r7, sp, #16
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	4608      	mov	r0, r1
 8001884:	4611      	mov	r1, r2
 8001886:	461a      	mov	r2, r3
 8001888:	4603      	mov	r3, r0
 800188a:	70fb      	strb	r3, [r7, #3]
 800188c:	460b      	mov	r3, r1
 800188e:	70bb      	strb	r3, [r7, #2]
 8001890:	4613      	mov	r3, r2
 8001892:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001894:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001896:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d101      	bne.n	80018a6 <HAL_HCD_HC_Init+0x2c>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e09d      	b.n	80019e2 <HAL_HCD_HC_Init+0x168>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80018ae:	78fa      	ldrb	r2, [r7, #3]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	1a9b      	subs	r3, r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	3319      	adds	r3, #25
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80018c2:	78fa      	ldrb	r2, [r7, #3]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	1a9b      	subs	r3, r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	3314      	adds	r3, #20
 80018d2:	787a      	ldrb	r2, [r7, #1]
 80018d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018d6:	78fa      	ldrb	r2, [r7, #3]
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	1a9b      	subs	r3, r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	3315      	adds	r3, #21
 80018e6:	78fa      	ldrb	r2, [r7, #3]
 80018e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80018ea:	78fa      	ldrb	r2, [r7, #3]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	1a9b      	subs	r3, r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	3326      	adds	r3, #38	@ 0x26
 80018fa:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80018fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001900:	78fa      	ldrb	r2, [r7, #3]
 8001902:	78bb      	ldrb	r3, [r7, #2]
 8001904:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001908:	b2d8      	uxtb	r0, r3
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	1a9b      	subs	r3, r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	3316      	adds	r3, #22
 8001918:	4602      	mov	r2, r0
 800191a:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800191c:	78fb      	ldrb	r3, [r7, #3]
 800191e:	4619      	mov	r1, r3
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 fba5 	bl	8002070 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001926:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800192a:	2b00      	cmp	r3, #0
 800192c:	da0a      	bge.n	8001944 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800192e:	78fa      	ldrb	r2, [r7, #3]
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	3317      	adds	r3, #23
 800193e:	2201      	movs	r2, #1
 8001940:	701a      	strb	r2, [r3, #0]
 8001942:	e009      	b.n	8001958 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	3317      	adds	r3, #23
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f004 fe77 	bl	8006650 <USB_GetHostSpeed>
 8001962:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001964:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001968:	2b01      	cmp	r3, #1
 800196a:	d10b      	bne.n	8001984 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800196c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001970:	2b01      	cmp	r3, #1
 8001972:	d107      	bne.n	8001984 <HAL_HCD_HC_Init+0x10a>
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d104      	bne.n	8001984 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	2bbc      	cmp	r3, #188	@ 0xbc
 800197e:	d901      	bls.n	8001984 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001980:	23bc      	movs	r3, #188	@ 0xbc
 8001982:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001984:	78fa      	ldrb	r2, [r7, #3]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	1a9b      	subs	r3, r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	3318      	adds	r3, #24
 8001994:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001998:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	b298      	uxth	r0, r3
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	1a9b      	subs	r3, r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	3328      	adds	r3, #40	@ 0x28
 80019ae:	4602      	mov	r2, r0
 80019b0:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6818      	ldr	r0, [r3, #0]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	787c      	ldrb	r4, [r7, #1]
 80019bc:	78ba      	ldrb	r2, [r7, #2]
 80019be:	78f9      	ldrb	r1, [r7, #3]
 80019c0:	9302      	str	r3, [sp, #8]
 80019c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	4623      	mov	r3, r4
 80019d0:	f004 fe66 	bl	80066a0 <USB_HC_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	371c      	adds	r7, #28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd90      	pop	{r4, r7, pc}
	...

080019ec <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	4608      	mov	r0, r1
 80019f6:	4611      	mov	r1, r2
 80019f8:	461a      	mov	r2, r3
 80019fa:	4603      	mov	r3, r0
 80019fc:	70fb      	strb	r3, [r7, #3]
 80019fe:	460b      	mov	r3, r1
 8001a00:	70bb      	strb	r3, [r7, #2]
 8001a02:	4613      	mov	r3, r2
 8001a04:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a06:	78fa      	ldrb	r2, [r7, #3]
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	1a9b      	subs	r3, r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	3317      	adds	r3, #23
 8001a16:	78ba      	ldrb	r2, [r7, #2]
 8001a18:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001a1a:	78fa      	ldrb	r2, [r7, #3]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	1a9b      	subs	r3, r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	3326      	adds	r3, #38	@ 0x26
 8001a2a:	787a      	ldrb	r2, [r7, #1]
 8001a2c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001a2e:	7c3b      	ldrb	r3, [r7, #16]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d114      	bne.n	8001a5e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	1a9b      	subs	r3, r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	332a      	adds	r3, #42	@ 0x2a
 8001a44:	2203      	movs	r2, #3
 8001a46:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001a48:	78fa      	ldrb	r2, [r7, #3]
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	1a9b      	subs	r3, r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	3319      	adds	r3, #25
 8001a58:	7f3a      	ldrb	r2, [r7, #28]
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	e009      	b.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a5e:	78fa      	ldrb	r2, [r7, #3]
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	1a9b      	subs	r3, r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	332a      	adds	r3, #42	@ 0x2a
 8001a6e:	2202      	movs	r2, #2
 8001a70:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a72:	787b      	ldrb	r3, [r7, #1]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	f200 8102 	bhi.w	8001c7e <HAL_HCD_HC_SubmitRequest+0x292>
 8001a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a80 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a80:	08001a91 	.word	0x08001a91
 8001a84:	08001c69 	.word	0x08001c69
 8001a88:	08001b55 	.word	0x08001b55
 8001a8c:	08001bdf 	.word	0x08001bdf
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001a90:	7c3b      	ldrb	r3, [r7, #16]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	f040 80f5 	bne.w	8001c82 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001a98:	78bb      	ldrb	r3, [r7, #2]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d12d      	bne.n	8001afa <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001a9e:	8b3b      	ldrh	r3, [r7, #24]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d109      	bne.n	8001ab8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001aa4:	78fa      	ldrb	r2, [r7, #3]
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	1a9b      	subs	r3, r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	333d      	adds	r3, #61	@ 0x3d
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ab8:	78fa      	ldrb	r2, [r7, #3]
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	1a9b      	subs	r3, r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	333d      	adds	r3, #61	@ 0x3d
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10a      	bne.n	8001ae4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ace:	78fa      	ldrb	r2, [r7, #3]
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	1a9b      	subs	r3, r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	332a      	adds	r3, #42	@ 0x2a
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001ae2:	e0ce      	b.n	8001c82 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	332a      	adds	r3, #42	@ 0x2a
 8001af4:	2202      	movs	r2, #2
 8001af6:	701a      	strb	r2, [r3, #0]
      break;
 8001af8:	e0c3      	b.n	8001c82 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001afa:	78fa      	ldrb	r2, [r7, #3]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	1a9b      	subs	r3, r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	331a      	adds	r3, #26
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	f040 80b8 	bne.w	8001c82 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b12:	78fa      	ldrb	r2, [r7, #3]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	1a9b      	subs	r3, r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	440b      	add	r3, r1
 8001b20:	333c      	adds	r3, #60	@ 0x3c
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10a      	bne.n	8001b3e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b28:	78fa      	ldrb	r2, [r7, #3]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	1a9b      	subs	r3, r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	332a      	adds	r3, #42	@ 0x2a
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
      break;
 8001b3c:	e0a1      	b.n	8001c82 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b3e:	78fa      	ldrb	r2, [r7, #3]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	1a9b      	subs	r3, r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	332a      	adds	r3, #42	@ 0x2a
 8001b4e:	2202      	movs	r2, #2
 8001b50:	701a      	strb	r2, [r3, #0]
      break;
 8001b52:	e096      	b.n	8001c82 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b54:	78bb      	ldrb	r3, [r7, #2]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d120      	bne.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b5a:	78fa      	ldrb	r2, [r7, #3]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	1a9b      	subs	r3, r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	333d      	adds	r3, #61	@ 0x3d
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10a      	bne.n	8001b86 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b70:	78fa      	ldrb	r2, [r7, #3]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	1a9b      	subs	r3, r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	332a      	adds	r3, #42	@ 0x2a
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001b84:	e07e      	b.n	8001c84 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b86:	78fa      	ldrb	r2, [r7, #3]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	1a9b      	subs	r3, r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	332a      	adds	r3, #42	@ 0x2a
 8001b96:	2202      	movs	r2, #2
 8001b98:	701a      	strb	r2, [r3, #0]
      break;
 8001b9a:	e073      	b.n	8001c84 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	333c      	adds	r3, #60	@ 0x3c
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10a      	bne.n	8001bc8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bb2:	78fa      	ldrb	r2, [r7, #3]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	332a      	adds	r3, #42	@ 0x2a
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
      break;
 8001bc6:	e05d      	b.n	8001c84 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	332a      	adds	r3, #42	@ 0x2a
 8001bd8:	2202      	movs	r2, #2
 8001bda:	701a      	strb	r2, [r3, #0]
      break;
 8001bdc:	e052      	b.n	8001c84 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001bde:	78bb      	ldrb	r3, [r7, #2]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d120      	bne.n	8001c26 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	011b      	lsls	r3, r3, #4
 8001bec:	1a9b      	subs	r3, r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	333d      	adds	r3, #61	@ 0x3d
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10a      	bne.n	8001c10 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bfa:	78fa      	ldrb	r2, [r7, #3]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	011b      	lsls	r3, r3, #4
 8001c02:	1a9b      	subs	r3, r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	332a      	adds	r3, #42	@ 0x2a
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c0e:	e039      	b.n	8001c84 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c10:	78fa      	ldrb	r2, [r7, #3]
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	1a9b      	subs	r3, r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	332a      	adds	r3, #42	@ 0x2a
 8001c20:	2202      	movs	r2, #2
 8001c22:	701a      	strb	r2, [r3, #0]
      break;
 8001c24:	e02e      	b.n	8001c84 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c26:	78fa      	ldrb	r2, [r7, #3]
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	011b      	lsls	r3, r3, #4
 8001c2e:	1a9b      	subs	r3, r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	440b      	add	r3, r1
 8001c34:	333c      	adds	r3, #60	@ 0x3c
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10a      	bne.n	8001c52 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c3c:	78fa      	ldrb	r2, [r7, #3]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	332a      	adds	r3, #42	@ 0x2a
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
      break;
 8001c50:	e018      	b.n	8001c84 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c52:	78fa      	ldrb	r2, [r7, #3]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	332a      	adds	r3, #42	@ 0x2a
 8001c62:	2202      	movs	r2, #2
 8001c64:	701a      	strb	r2, [r3, #0]
      break;
 8001c66:	e00d      	b.n	8001c84 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c68:	78fa      	ldrb	r2, [r7, #3]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	1a9b      	subs	r3, r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	332a      	adds	r3, #42	@ 0x2a
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
      break;
 8001c7c:	e002      	b.n	8001c84 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001c7e:	bf00      	nop
 8001c80:	e000      	b.n	8001c84 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001c82:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001c84:	78fa      	ldrb	r2, [r7, #3]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	1a9b      	subs	r3, r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	332c      	adds	r3, #44	@ 0x2c
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c98:	78fa      	ldrb	r2, [r7, #3]
 8001c9a:	8b39      	ldrh	r1, [r7, #24]
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4403      	add	r3, r0
 8001ca8:	3334      	adds	r3, #52	@ 0x34
 8001caa:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001cac:	78fa      	ldrb	r2, [r7, #3]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	1a9b      	subs	r3, r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	334c      	adds	r3, #76	@ 0x4c
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001cc0:	78fa      	ldrb	r2, [r7, #3]
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	1a9b      	subs	r3, r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	3338      	adds	r3, #56	@ 0x38
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001cd4:	78fa      	ldrb	r2, [r7, #3]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	1a9b      	subs	r3, r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3315      	adds	r3, #21
 8001ce4:	78fa      	ldrb	r2, [r7, #3]
 8001ce6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ce8:	78fa      	ldrb	r2, [r7, #3]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	1a9b      	subs	r3, r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	334d      	adds	r3, #77	@ 0x4d
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	78fa      	ldrb	r2, [r7, #3]
 8001d02:	4613      	mov	r3, r2
 8001d04:	011b      	lsls	r3, r3, #4
 8001d06:	1a9b      	subs	r3, r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	3310      	adds	r3, #16
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	4413      	add	r3, r2
 8001d10:	1d19      	adds	r1, r3, #4
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	799b      	ldrb	r3, [r3, #6]
 8001d16:	461a      	mov	r2, r3
 8001d18:	f004 fdee 	bl	80068f8 <USB_HC_StartXfer>
 8001d1c:	4603      	mov	r3, r0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop

08001d28 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f004 fadc 	bl	80062fc <USB_GetMode>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	f040 80fb 	bne.w	8001f42 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f004 fa9f 	bl	8006294 <USB_ReadInterrupts>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 80f1 	beq.w	8001f40 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f004 fa96 	bl	8006294 <USB_ReadInterrupts>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001d72:	d104      	bne.n	8001d7e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001d7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f004 fa86 	bl	8006294 <USB_ReadInterrupts>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d92:	d104      	bne.n	8001d9e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001d9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f004 fa76 	bl	8006294 <USB_ReadInterrupts>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001db2:	d104      	bne.n	8001dbe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001dbc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f004 fa66 	bl	8006294 <USB_ReadInterrupts>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d103      	bne.n	8001dda <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f004 fa58 	bl	8006294 <USB_ReadInterrupts>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001dea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001dee:	d120      	bne.n	8001e32 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001df8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d113      	bne.n	8001e32 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e0a:	2110      	movs	r1, #16
 8001e0c:	6938      	ldr	r0, [r7, #16]
 8001e0e:	f004 f94b 	bl	80060a8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e12:	6938      	ldr	r0, [r7, #16]
 8001e14:	f004 f97a 	bl	800610c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7a5b      	ldrb	r3, [r3, #9]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d105      	bne.n	8001e2c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2101      	movs	r1, #1
 8001e26:	4618      	mov	r0, r3
 8001e28:	f004 fb72 	bl	8006510 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f007 fb3f 	bl	80094b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f004 fa2c 	bl	8006294 <USB_ReadInterrupts>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e46:	d102      	bne.n	8001e4e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f001 fd4d 	bl	80038e8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f004 fa1e 	bl	8006294 <USB_ReadInterrupts>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d106      	bne.n	8001e70 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f007 fb08 	bl	8009478 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2208      	movs	r2, #8
 8001e6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f004 fa0d 	bl	8006294 <USB_ReadInterrupts>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e84:	d139      	bne.n	8001efa <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f004 ffae 	bl	8006dec <USB_HC_ReadInterrupt>
 8001e90:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e025      	b.n	8001ee4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d018      	beq.n	8001ede <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ebe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ec2:	d106      	bne.n	8001ed2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	4619      	mov	r1, r3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f905 	bl	80020da <HCD_HC_IN_IRQHandler>
 8001ed0:	e005      	b.n	8001ede <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 ff67 	bl	8002dac <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	795b      	ldrb	r3, [r3, #5]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d3d3      	bcc.n	8001e98 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ef8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f004 f9c8 	bl	8006294 <USB_ReadInterrupts>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	2b10      	cmp	r3, #16
 8001f0c:	d101      	bne.n	8001f12 <HAL_HCD_IRQHandler+0x1ea>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <HAL_HCD_IRQHandler+0x1ec>
 8001f12:	2300      	movs	r3, #0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d014      	beq.n	8001f42 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0210 	bic.w	r2, r2, #16
 8001f26:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f001 fbfe 	bl	800372a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	699a      	ldr	r2, [r3, #24]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f042 0210 	orr.w	r2, r2, #16
 8001f3c:	619a      	str	r2, [r3, #24]
 8001f3e:	e000      	b.n	8001f42 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001f40:	bf00      	nop
    }
  }
}
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_HCD_Start+0x16>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e013      	b.n	8001f86 <HAL_HCD_Start+0x3e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f004 fb36 	bl	80065de <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f004 f828 	bl	8005fcc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_HCD_Stop+0x16>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e00d      	b.n	8001fc0 <HAL_HCD_Stop+0x32>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f005 f889 	bl	80070c8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f004 fad8 	bl	800658a <USB_ResetPort>
 8001fda:	4603      	mov	r3, r0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ff0:	78fa      	ldrb	r2, [r7, #3]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	1a9b      	subs	r3, r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	334c      	adds	r3, #76	@ 0x4c
 8002000:	781b      	ldrb	r3, [r3, #0]
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800201a:	78fa      	ldrb	r2, [r7, #3]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	3338      	adds	r3, #56	@ 0x38
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f004 fb1a 	bl	800667e <USB_GetCurrentFrame>
 800204a:	4603      	mov	r3, r0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f004 faf5 	bl	8006650 <USB_GetHostSpeed>
 8002066:	4603      	mov	r3, r0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	331a      	adds	r3, #26
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002090:	78fa      	ldrb	r2, [r7, #3]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	331b      	adds	r3, #27
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80020a4:	78fa      	ldrb	r2, [r7, #3]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	011b      	lsls	r3, r3, #4
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	3325      	adds	r3, #37	@ 0x25
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80020b8:	78fa      	ldrb	r2, [r7, #3]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	3324      	adds	r3, #36	@ 0x24
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	460b      	mov	r3, r1
 80020e4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	78fa      	ldrb	r2, [r7, #3]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f004 f8de 	bl	80062ba <USB_ReadChInterrupts>
 80020fe:	4603      	mov	r3, r0
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b04      	cmp	r3, #4
 8002106:	d11a      	bne.n	800213e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002114:	461a      	mov	r2, r3
 8002116:	2304      	movs	r3, #4
 8002118:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800211a:	78fa      	ldrb	r2, [r7, #3]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	334d      	adds	r3, #77	@ 0x4d
 800212a:	2207      	movs	r2, #7
 800212c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	78fa      	ldrb	r2, [r7, #3]
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f004 fe69 	bl	8006e0e <USB_HC_Halt>
 800213c:	e09e      	b.n	800227c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	78fa      	ldrb	r2, [r7, #3]
 8002144:	4611      	mov	r1, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f004 f8b7 	bl	80062ba <USB_ReadChInterrupts>
 800214c:	4603      	mov	r3, r0
 800214e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002152:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002156:	d11b      	bne.n	8002190 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002164:	461a      	mov	r2, r3
 8002166:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800216a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	334d      	adds	r3, #77	@ 0x4d
 800217c:	2208      	movs	r2, #8
 800217e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f004 fe40 	bl	8006e0e <USB_HC_Halt>
 800218e:	e075      	b.n	800227c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	78fa      	ldrb	r2, [r7, #3]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f004 f88e 	bl	80062ba <USB_ReadChInterrupts>
 800219e:	4603      	mov	r3, r0
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d11a      	bne.n	80021de <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021b4:	461a      	mov	r2, r3
 80021b6:	2308      	movs	r3, #8
 80021b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80021ba:	78fa      	ldrb	r2, [r7, #3]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	1a9b      	subs	r3, r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	334d      	adds	r3, #77	@ 0x4d
 80021ca:	2206      	movs	r2, #6
 80021cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	4611      	mov	r1, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 fe19 	bl	8006e0e <USB_HC_Halt>
 80021dc:	e04e      	b.n	800227c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	4611      	mov	r1, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f004 f867 	bl	80062ba <USB_ReadChInterrupts>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021f6:	d11b      	bne.n	8002230 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002204:	461a      	mov	r2, r3
 8002206:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800220a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	334d      	adds	r3, #77	@ 0x4d
 800221c:	2209      	movs	r2, #9
 800221e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f004 fdf0 	bl	8006e0e <USB_HC_Halt>
 800222e:	e025      	b.n	800227c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	4611      	mov	r1, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f004 f83e 	bl	80062ba <USB_ReadChInterrupts>
 800223e:	4603      	mov	r3, r0
 8002240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002244:	2b80      	cmp	r3, #128	@ 0x80
 8002246:	d119      	bne.n	800227c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002254:	461a      	mov	r2, r3
 8002256:	2380      	movs	r3, #128	@ 0x80
 8002258:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800225a:	78fa      	ldrb	r2, [r7, #3]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	334d      	adds	r3, #77	@ 0x4d
 800226a:	2207      	movs	r2, #7
 800226c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	78fa      	ldrb	r2, [r7, #3]
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f004 fdc9 	bl	8006e0e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f004 f818 	bl	80062ba <USB_ReadChInterrupts>
 800228a:	4603      	mov	r3, r0
 800228c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002294:	d112      	bne.n	80022bc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f004 fdb5 	bl	8006e0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022b0:	461a      	mov	r2, r3
 80022b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022b6:	6093      	str	r3, [r2, #8]
 80022b8:	f000 bd75 	b.w	8002da6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f003 fff8 	bl	80062ba <USB_ReadChInterrupts>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	f040 8128 	bne.w	8002526 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022e2:	461a      	mov	r2, r3
 80022e4:	2320      	movs	r3, #32
 80022e6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	331b      	adds	r3, #27
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d119      	bne.n	8002332 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80022fe:	78fa      	ldrb	r2, [r7, #3]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	1a9b      	subs	r3, r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	331b      	adds	r3, #27
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4413      	add	r3, r2
 800231a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	0151      	lsls	r1, r2, #5
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	440a      	add	r2, r1
 8002328:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800232c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002330:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	799b      	ldrb	r3, [r3, #6]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d01b      	beq.n	8002372 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800233a:	78fa      	ldrb	r2, [r7, #3]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	3330      	adds	r3, #48	@ 0x30
 800234a:	6819      	ldr	r1, [r3, #0]
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	1ac9      	subs	r1, r1, r3
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4403      	add	r3, r0
 800236e:	3338      	adds	r3, #56	@ 0x38
 8002370:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	334d      	adds	r3, #77	@ 0x4d
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	1a9b      	subs	r3, r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	3344      	adds	r3, #68	@ 0x44
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023a6:	461a      	mov	r2, r3
 80023a8:	2301      	movs	r3, #1
 80023aa:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	3326      	adds	r3, #38	@ 0x26
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	3326      	adds	r3, #38	@ 0x26
 80023d2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d110      	bne.n	80023fa <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f004 fd14 	bl	8006e0e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023f2:	461a      	mov	r2, r3
 80023f4:	2310      	movs	r3, #16
 80023f6:	6093      	str	r3, [r2, #8]
 80023f8:	e03d      	b.n	8002476 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80023fa:	78fa      	ldrb	r2, [r7, #3]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	3326      	adds	r3, #38	@ 0x26
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d00a      	beq.n	8002426 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	3326      	adds	r3, #38	@ 0x26
 8002420:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002422:	2b01      	cmp	r3, #1
 8002424:	d127      	bne.n	8002476 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	015a      	lsls	r2, r3, #5
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4413      	add	r3, r2
 800242e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	0151      	lsls	r1, r2, #5
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	440a      	add	r2, r1
 800243c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002440:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002444:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	334c      	adds	r3, #76	@ 0x4c
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	334c      	adds	r3, #76	@ 0x4c
 800246a:	781a      	ldrb	r2, [r3, #0]
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	4619      	mov	r1, r3
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f007 f82b 	bl	80094cc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	799b      	ldrb	r3, [r3, #6]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d13b      	bne.n	80024f6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800247e:	78fa      	ldrb	r2, [r7, #3]
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	1a9b      	subs	r3, r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	440b      	add	r3, r1
 800248c:	3338      	adds	r3, #56	@ 0x38
 800248e:	6819      	ldr	r1, [r3, #0]
 8002490:	78fa      	ldrb	r2, [r7, #3]
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4403      	add	r3, r0
 800249e:	3328      	adds	r3, #40	@ 0x28
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	440b      	add	r3, r1
 80024a4:	1e59      	subs	r1, r3, #1
 80024a6:	78fa      	ldrb	r2, [r7, #3]
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4403      	add	r3, r0
 80024b4:	3328      	adds	r3, #40	@ 0x28
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 8470 	beq.w	8002da6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80024c6:	78fa      	ldrb	r2, [r7, #3]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	1a9b      	subs	r3, r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	333c      	adds	r3, #60	@ 0x3c
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	78fa      	ldrb	r2, [r7, #3]
 80024da:	f083 0301 	eor.w	r3, r3, #1
 80024de:	b2d8      	uxtb	r0, r3
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	333c      	adds	r3, #60	@ 0x3c
 80024ee:	4602      	mov	r2, r0
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	f000 bc58 	b.w	8002da6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	333c      	adds	r3, #60	@ 0x3c
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	f083 0301 	eor.w	r3, r3, #1
 800250e:	b2d8      	uxtb	r0, r3
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	333c      	adds	r3, #60	@ 0x3c
 800251e:	4602      	mov	r2, r0
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	f000 bc40 	b.w	8002da6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f003 fec3 	bl	80062ba <USB_ReadChInterrupts>
 8002534:	4603      	mov	r3, r0
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	2b20      	cmp	r3, #32
 800253c:	d131      	bne.n	80025a2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4413      	add	r3, r2
 8002546:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800254a:	461a      	mov	r2, r3
 800254c:	2320      	movs	r3, #32
 800254e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	331a      	adds	r3, #26
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b01      	cmp	r3, #1
 8002564:	f040 841f 	bne.w	8002da6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	331b      	adds	r3, #27
 8002578:	2201      	movs	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	334d      	adds	r3, #77	@ 0x4d
 800258c:	2203      	movs	r2, #3
 800258e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f004 fc38 	bl	8006e0e <USB_HC_Halt>
 800259e:	f000 bc02 	b.w	8002da6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	78fa      	ldrb	r2, [r7, #3]
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 fe85 	bl	80062ba <USB_ReadChInterrupts>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	f040 8305 	bne.w	8002bc6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025c8:	461a      	mov	r2, r3
 80025ca:	2302      	movs	r3, #2
 80025cc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	334d      	adds	r3, #77	@ 0x4d
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d114      	bne.n	800260e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	334d      	adds	r3, #77	@ 0x4d
 80025f4:	2202      	movs	r2, #2
 80025f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	334c      	adds	r3, #76	@ 0x4c
 8002608:	2201      	movs	r2, #1
 800260a:	701a      	strb	r2, [r3, #0]
 800260c:	e2cc      	b.n	8002ba8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800260e:	78fa      	ldrb	r2, [r7, #3]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	1a9b      	subs	r3, r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	334d      	adds	r3, #77	@ 0x4d
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b06      	cmp	r3, #6
 8002622:	d114      	bne.n	800264e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002624:	78fa      	ldrb	r2, [r7, #3]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	1a9b      	subs	r3, r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	334d      	adds	r3, #77	@ 0x4d
 8002634:	2202      	movs	r2, #2
 8002636:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	1a9b      	subs	r3, r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	334c      	adds	r3, #76	@ 0x4c
 8002648:	2205      	movs	r2, #5
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e2ac      	b.n	8002ba8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800264e:	78fa      	ldrb	r2, [r7, #3]
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	1a9b      	subs	r3, r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	334d      	adds	r3, #77	@ 0x4d
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b07      	cmp	r3, #7
 8002662:	d00b      	beq.n	800267c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	334d      	adds	r3, #77	@ 0x4d
 8002674:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002676:	2b09      	cmp	r3, #9
 8002678:	f040 80a6 	bne.w	80027c8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800267c:	78fa      	ldrb	r2, [r7, #3]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	334d      	adds	r3, #77	@ 0x4d
 800268c:	2202      	movs	r2, #2
 800268e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	3344      	adds	r3, #68	@ 0x44
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	1c59      	adds	r1, r3, #1
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4403      	add	r3, r0
 80026b0:	3344      	adds	r3, #68	@ 0x44
 80026b2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	3344      	adds	r3, #68	@ 0x44
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d943      	bls.n	8002752 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80026ca:	78fa      	ldrb	r2, [r7, #3]
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	1a9b      	subs	r3, r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	3344      	adds	r3, #68	@ 0x44
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	331a      	adds	r3, #26
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d123      	bne.n	800273c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80026f4:	78fa      	ldrb	r2, [r7, #3]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	331b      	adds	r3, #27
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002708:	78fa      	ldrb	r2, [r7, #3]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	331c      	adds	r3, #28
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	0151      	lsls	r1, r2, #5
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	440a      	add	r2, r1
 8002732:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002736:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800273a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800273c:	78fa      	ldrb	r2, [r7, #3]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	334c      	adds	r3, #76	@ 0x4c
 800274c:	2204      	movs	r2, #4
 800274e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002750:	e229      	b.n	8002ba6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	1a9b      	subs	r3, r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	334c      	adds	r3, #76	@ 0x4c
 8002762:	2202      	movs	r2, #2
 8002764:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002766:	78fa      	ldrb	r2, [r7, #3]
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	1a9b      	subs	r3, r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	3326      	adds	r3, #38	@ 0x26
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00b      	beq.n	8002794 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800277c:	78fa      	ldrb	r2, [r7, #3]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	1a9b      	subs	r3, r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	3326      	adds	r3, #38	@ 0x26
 800278c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800278e:	2b02      	cmp	r3, #2
 8002790:	f040 8209 	bne.w	8002ba6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027aa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027b2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027c0:	461a      	mov	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027c6:	e1ee      	b.n	8002ba6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80027c8:	78fa      	ldrb	r2, [r7, #3]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	334d      	adds	r3, #77	@ 0x4d
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b05      	cmp	r3, #5
 80027dc:	f040 80c8 	bne.w	8002970 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027e0:	78fa      	ldrb	r2, [r7, #3]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	1a9b      	subs	r3, r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	334d      	adds	r3, #77	@ 0x4d
 80027f0:	2202      	movs	r2, #2
 80027f2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80027f4:	78fa      	ldrb	r2, [r7, #3]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	331b      	adds	r3, #27
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b01      	cmp	r3, #1
 8002808:	f040 81ce 	bne.w	8002ba8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	3326      	adds	r3, #38	@ 0x26
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b03      	cmp	r3, #3
 8002820:	d16b      	bne.n	80028fa <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002822:	78fa      	ldrb	r2, [r7, #3]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	3348      	adds	r3, #72	@ 0x48
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	1c59      	adds	r1, r3, #1
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4403      	add	r3, r0
 8002842:	3348      	adds	r3, #72	@ 0x48
 8002844:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002846:	78fa      	ldrb	r2, [r7, #3]
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	1a9b      	subs	r3, r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	3348      	adds	r3, #72	@ 0x48
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d943      	bls.n	80028e4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	3348      	adds	r3, #72	@ 0x48
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002870:	78fa      	ldrb	r2, [r7, #3]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	331b      	adds	r3, #27
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	3344      	adds	r3, #68	@ 0x44
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d809      	bhi.n	80028ae <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	331c      	adds	r3, #28
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80028ae:	78fb      	ldrb	r3, [r7, #3]
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	0151      	lsls	r1, r2, #5
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	440a      	add	r2, r1
 80028c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028cc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	334c      	adds	r3, #76	@ 0x4c
 80028de:	2204      	movs	r2, #4
 80028e0:	701a      	strb	r2, [r3, #0]
 80028e2:	e014      	b.n	800290e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	334c      	adds	r3, #76	@ 0x4c
 80028f4:	2202      	movs	r2, #2
 80028f6:	701a      	strb	r2, [r3, #0]
 80028f8:	e009      	b.n	800290e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	334c      	adds	r3, #76	@ 0x4c
 800290a:	2202      	movs	r2, #2
 800290c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	3326      	adds	r3, #38	@ 0x26
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00b      	beq.n	800293c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	3326      	adds	r3, #38	@ 0x26
 8002934:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002936:	2b02      	cmp	r3, #2
 8002938:	f040 8136 	bne.w	8002ba8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002952:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800295a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002968:	461a      	mov	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e11b      	b.n	8002ba8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	334d      	adds	r3, #77	@ 0x4d
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b03      	cmp	r3, #3
 8002984:	f040 8081 	bne.w	8002a8a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	334d      	adds	r3, #77	@ 0x4d
 8002998:	2202      	movs	r2, #2
 800299a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	331b      	adds	r3, #27
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	f040 80fa 	bne.w	8002ba8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	334c      	adds	r3, #76	@ 0x4c
 80029c4:	2202      	movs	r2, #2
 80029c6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	0151      	lsls	r1, r2, #5
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	440a      	add	r2, r1
 80029de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	0151      	lsls	r1, r2, #5
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	440a      	add	r2, r1
 80029fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a06:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002a08:	78fb      	ldrb	r3, [r7, #3]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	0151      	lsls	r1, r2, #5
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	440a      	add	r2, r1
 8002a1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a22:	f023 0320 	bic.w	r3, r3, #32
 8002a26:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	3326      	adds	r3, #38	@ 0x26
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00b      	beq.n	8002a56 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3326      	adds	r3, #38	@ 0x26
 8002a4e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	f040 80a9 	bne.w	8002ba8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a56:	78fb      	ldrb	r3, [r7, #3]
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a6c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a74:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a76:	78fb      	ldrb	r3, [r7, #3]
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a82:	461a      	mov	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	e08e      	b.n	8002ba8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	1a9b      	subs	r3, r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	334d      	adds	r3, #77	@ 0x4d
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d143      	bne.n	8002b28 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002aa0:	78fa      	ldrb	r2, [r7, #3]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	334d      	adds	r3, #77	@ 0x4d
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	334c      	adds	r3, #76	@ 0x4c
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	3326      	adds	r3, #38	@ 0x26
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	3326      	adds	r3, #38	@ 0x26
 8002aee:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d159      	bne.n	8002ba8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b0a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b12:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b20:	461a      	mov	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e03f      	b.n	8002ba8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	334d      	adds	r3, #77	@ 0x4d
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d126      	bne.n	8002b8c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b3e:	78fa      	ldrb	r2, [r7, #3]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	334d      	adds	r3, #77	@ 0x4d
 8002b4e:	2202      	movs	r2, #2
 8002b50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	3344      	adds	r3, #68	@ 0x44
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	1c59      	adds	r1, r3, #1
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4403      	add	r3, r0
 8002b72:	3344      	adds	r3, #68	@ 0x44
 8002b74:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b76:	78fa      	ldrb	r2, [r7, #3]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	334c      	adds	r3, #76	@ 0x4c
 8002b86:	2204      	movs	r2, #4
 8002b88:	701a      	strb	r2, [r3, #0]
 8002b8a:	e00d      	b.n	8002ba8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	334d      	adds	r3, #77	@ 0x4d
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	f000 8100 	beq.w	8002da4 <HCD_HC_IN_IRQHandler+0xcca>
 8002ba4:	e000      	b.n	8002ba8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ba6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	334c      	adds	r3, #76	@ 0x4c
 8002bb8:	781a      	ldrb	r2, [r3, #0]
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f006 fc84 	bl	80094cc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002bc4:	e0ef      	b.n	8002da6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	78fa      	ldrb	r2, [r7, #3]
 8002bcc:	4611      	mov	r1, r2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f003 fb73 	bl	80062ba <USB_ReadChInterrupts>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bda:	2b40      	cmp	r3, #64	@ 0x40
 8002bdc:	d12f      	bne.n	8002c3e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002bde:	78fb      	ldrb	r3, [r7, #3]
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bea:	461a      	mov	r2, r3
 8002bec:	2340      	movs	r3, #64	@ 0x40
 8002bee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	334d      	adds	r3, #77	@ 0x4d
 8002c00:	2205      	movs	r2, #5
 8002c02:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	331a      	adds	r3, #26
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	3344      	adds	r3, #68	@ 0x44
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	4611      	mov	r1, r2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f004 f8e9 	bl	8006e0e <USB_HC_Halt>
 8002c3c:	e0b3      	b.n	8002da6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	4611      	mov	r1, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f003 fb37 	bl	80062ba <USB_ReadChInterrupts>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b10      	cmp	r3, #16
 8002c54:	f040 80a7 	bne.w	8002da6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002c58:	78fa      	ldrb	r2, [r7, #3]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	3326      	adds	r3, #38	@ 0x26
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d11b      	bne.n	8002ca6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3344      	adds	r3, #68	@ 0x44
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	334d      	adds	r3, #77	@ 0x4d
 8002c92:	2204      	movs	r2, #4
 8002c94:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f004 f8b5 	bl	8006e0e <USB_HC_Halt>
 8002ca4:	e03f      	b.n	8002d26 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ca6:	78fa      	ldrb	r2, [r7, #3]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3326      	adds	r3, #38	@ 0x26
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	3326      	adds	r3, #38	@ 0x26
 8002ccc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d129      	bne.n	8002d26 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	3344      	adds	r3, #68	@ 0x44
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	799b      	ldrb	r3, [r3, #6]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HCD_HC_IN_IRQHandler+0xc2a>
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	331b      	adds	r3, #27
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d110      	bne.n	8002d26 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002d04:	78fa      	ldrb	r2, [r7, #3]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	334d      	adds	r3, #77	@ 0x4d
 8002d14:	2204      	movs	r2, #4
 8002d16:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	78fa      	ldrb	r2, [r7, #3]
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f004 f874 	bl	8006e0e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	1a9b      	subs	r3, r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	440b      	add	r3, r1
 8002d34:	331b      	adds	r3, #27
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d129      	bne.n	8002d90 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d3c:	78fa      	ldrb	r2, [r7, #3]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	331b      	adds	r3, #27
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	0151      	lsls	r1, r2, #5
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	440a      	add	r2, r1
 8002d66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d6e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	015a      	lsls	r2, r3, #5
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	0151      	lsls	r1, r2, #5
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	440a      	add	r2, r1
 8002d86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d8a:	f043 0320 	orr.w	r3, r3, #32
 8002d8e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2310      	movs	r3, #16
 8002da0:	6093      	str	r3, [r2, #8]
 8002da2:	e000      	b.n	8002da6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002da4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f003 fa75 	bl	80062ba <USB_ReadChInterrupts>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f003 0304 	and.w	r3, r3, #4
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d11b      	bne.n	8002e12 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de6:	461a      	mov	r2, r3
 8002de8:	2304      	movs	r3, #4
 8002dea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	334d      	adds	r3, #77	@ 0x4d
 8002dfc:	2207      	movs	r2, #7
 8002dfe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f004 f800 	bl	8006e0e <USB_HC_Halt>
 8002e0e:	f000 bc89 	b.w	8003724 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	4611      	mov	r1, r2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 fa4d 	bl	80062ba <USB_ReadChInterrupts>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	f040 8082 	bne.w	8002f30 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e38:	461a      	mov	r2, r3
 8002e3a:	2320      	movs	r3, #32
 8002e3c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3319      	adds	r3, #25
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d124      	bne.n	8002e9e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002e54:	78fa      	ldrb	r2, [r7, #3]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	3319      	adds	r3, #25
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	334c      	adds	r3, #76	@ 0x4c
 8002e78:	2202      	movs	r2, #2
 8002e7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	334d      	adds	r3, #77	@ 0x4d
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f003 ffb8 	bl	8006e0e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	331a      	adds	r3, #26
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	f040 8437 	bne.w	8003724 <HCD_HC_OUT_IRQHandler+0x978>
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	331b      	adds	r3, #27
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f040 842b 	bne.w	8003724 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	3326      	adds	r3, #38	@ 0x26
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d009      	beq.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	331b      	adds	r3, #27
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	334d      	adds	r3, #77	@ 0x4d
 8002f08:	2203      	movs	r2, #3
 8002f0a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f003 ff7a 	bl	8006e0e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	3344      	adds	r3, #68	@ 0x44
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	e3f9      	b.n	8003724 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	78fa      	ldrb	r2, [r7, #3]
 8002f36:	4611      	mov	r1, r2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f003 f9be 	bl	80062ba <USB_ReadChInterrupts>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f48:	d111      	bne.n	8002f6e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002f4a:	78fb      	ldrb	r3, [r7, #3]
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f56:	461a      	mov	r2, r3
 8002f58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f5c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	78fa      	ldrb	r2, [r7, #3]
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f003 ff51 	bl	8006e0e <USB_HC_Halt>
 8002f6c:	e3da      	b.n	8003724 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f003 f99f 	bl	80062ba <USB_ReadChInterrupts>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d168      	bne.n	8003058 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f86:	78fa      	ldrb	r2, [r7, #3]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	3344      	adds	r3, #68	@ 0x44
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f003 f989 	bl	80062ba <USB_ReadChInterrupts>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fae:	2b40      	cmp	r3, #64	@ 0x40
 8002fb0:	d112      	bne.n	8002fd8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3319      	adds	r3, #25
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2340      	movs	r3, #64	@ 0x40
 8002fd6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	331b      	adds	r3, #27
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d019      	beq.n	8003022 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	331b      	adds	r3, #27
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4413      	add	r3, r2
 800300a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	78fa      	ldrb	r2, [r7, #3]
 8003012:	0151      	lsls	r1, r2, #5
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	440a      	add	r2, r1
 8003018:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800301c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003020:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003022:	78fb      	ldrb	r3, [r7, #3]
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4413      	add	r3, r2
 800302a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800302e:	461a      	mov	r2, r3
 8003030:	2301      	movs	r3, #1
 8003032:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	334d      	adds	r3, #77	@ 0x4d
 8003044:	2201      	movs	r2, #1
 8003046:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	4611      	mov	r1, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f003 fedc 	bl	8006e0e <USB_HC_Halt>
 8003056:	e365      	b.n	8003724 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	78fa      	ldrb	r2, [r7, #3]
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f003 f92a 	bl	80062ba <USB_ReadChInterrupts>
 8003066:	4603      	mov	r3, r0
 8003068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800306c:	2b40      	cmp	r3, #64	@ 0x40
 800306e:	d139      	bne.n	80030e4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	334d      	adds	r3, #77	@ 0x4d
 8003080:	2205      	movs	r2, #5
 8003082:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	331a      	adds	r3, #26
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	3319      	adds	r3, #25
 80030aa:	2201      	movs	r2, #1
 80030ac:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	3344      	adds	r3, #68	@ 0x44
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	4611      	mov	r1, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f003 fe9f 	bl	8006e0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030dc:	461a      	mov	r2, r3
 80030de:	2340      	movs	r3, #64	@ 0x40
 80030e0:	6093      	str	r3, [r2, #8]
 80030e2:	e31f      	b.n	8003724 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f003 f8e4 	bl	80062ba <USB_ReadChInterrupts>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d11a      	bne.n	8003132 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4413      	add	r3, r2
 8003104:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003108:	461a      	mov	r2, r3
 800310a:	2308      	movs	r3, #8
 800310c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	334d      	adds	r3, #77	@ 0x4d
 800311e:	2206      	movs	r2, #6
 8003120:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f003 fe6f 	bl	8006e0e <USB_HC_Halt>
 8003130:	e2f8      	b.n	8003724 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f003 f8bd 	bl	80062ba <USB_ReadChInterrupts>
 8003140:	4603      	mov	r3, r0
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	2b10      	cmp	r3, #16
 8003148:	d144      	bne.n	80031d4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	3344      	adds	r3, #68	@ 0x44
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	334d      	adds	r3, #77	@ 0x4d
 800316e:	2204      	movs	r2, #4
 8003170:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	3319      	adds	r3, #25
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d114      	bne.n	80031b2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	3318      	adds	r3, #24
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	3319      	adds	r3, #25
 80031ae:	2201      	movs	r2, #1
 80031b0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	4611      	mov	r1, r2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f003 fe27 	bl	8006e0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031cc:	461a      	mov	r2, r3
 80031ce:	2310      	movs	r3, #16
 80031d0:	6093      	str	r3, [r2, #8]
 80031d2:	e2a7      	b.n	8003724 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	4611      	mov	r1, r2
 80031dc:	4618      	mov	r0, r3
 80031de:	f003 f86c 	bl	80062ba <USB_ReadChInterrupts>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e8:	2b80      	cmp	r3, #128	@ 0x80
 80031ea:	f040 8083 	bne.w	80032f4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	799b      	ldrb	r3, [r3, #6]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d111      	bne.n	800321a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	334d      	adds	r3, #77	@ 0x4d
 8003206:	2207      	movs	r2, #7
 8003208:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	78fa      	ldrb	r2, [r7, #3]
 8003210:	4611      	mov	r1, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f003 fdfb 	bl	8006e0e <USB_HC_Halt>
 8003218:	e062      	b.n	80032e0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	3344      	adds	r3, #68	@ 0x44
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	1c59      	adds	r1, r3, #1
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4403      	add	r3, r0
 800323a:	3344      	adds	r3, #68	@ 0x44
 800323c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	3344      	adds	r3, #68	@ 0x44
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d922      	bls.n	800329a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003254:	78fa      	ldrb	r2, [r7, #3]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	3344      	adds	r3, #68	@ 0x44
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003268:	78fa      	ldrb	r2, [r7, #3]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	334c      	adds	r3, #76	@ 0x4c
 8003278:	2204      	movs	r2, #4
 800327a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800327c:	78fa      	ldrb	r2, [r7, #3]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	334c      	adds	r3, #76	@ 0x4c
 800328c:	781a      	ldrb	r2, [r3, #0]
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	4619      	mov	r1, r3
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f006 f91a 	bl	80094cc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003298:	e022      	b.n	80032e0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	334c      	adds	r3, #76	@ 0x4c
 80032aa:	2202      	movs	r2, #2
 80032ac:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80032ae:	78fb      	ldrb	r3, [r7, #3]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80032c4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032cc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032ec:	461a      	mov	r2, r3
 80032ee:	2380      	movs	r3, #128	@ 0x80
 80032f0:	6093      	str	r3, [r2, #8]
 80032f2:	e217      	b.n	8003724 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	4611      	mov	r1, r2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f002 ffdc 	bl	80062ba <USB_ReadChInterrupts>
 8003302:	4603      	mov	r3, r0
 8003304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003308:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800330c:	d11b      	bne.n	8003346 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	334d      	adds	r3, #77	@ 0x4d
 800331e:	2209      	movs	r2, #9
 8003320:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	4611      	mov	r1, r2
 800332a:	4618      	mov	r0, r3
 800332c:	f003 fd6f 	bl	8006e0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800333c:	461a      	mov	r2, r3
 800333e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003342:	6093      	str	r3, [r2, #8]
 8003344:	e1ee      	b.n	8003724 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	4611      	mov	r1, r2
 800334e:	4618      	mov	r0, r3
 8003350:	f002 ffb3 	bl	80062ba <USB_ReadChInterrupts>
 8003354:	4603      	mov	r3, r0
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b02      	cmp	r3, #2
 800335c:	f040 81df 	bne.w	800371e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4413      	add	r3, r2
 8003368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800336c:	461a      	mov	r2, r3
 800336e:	2302      	movs	r3, #2
 8003370:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	334d      	adds	r3, #77	@ 0x4d
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b01      	cmp	r3, #1
 8003386:	f040 8093 	bne.w	80034b0 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800338a:	78fa      	ldrb	r2, [r7, #3]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	334d      	adds	r3, #77	@ 0x4d
 800339a:	2202      	movs	r2, #2
 800339c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	334c      	adds	r3, #76	@ 0x4c
 80033ae:	2201      	movs	r2, #1
 80033b0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	3326      	adds	r3, #38	@ 0x26
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d00b      	beq.n	80033e0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	3326      	adds	r3, #38	@ 0x26
 80033d8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80033da:	2b03      	cmp	r3, #3
 80033dc:	f040 8190 	bne.w	8003700 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	799b      	ldrb	r3, [r3, #6]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d115      	bne.n	8003414 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	333d      	adds	r3, #61	@ 0x3d
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	f083 0301 	eor.w	r3, r3, #1
 8003400:	b2d8      	uxtb	r0, r3
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	333d      	adds	r3, #61	@ 0x3d
 8003410:	4602      	mov	r2, r0
 8003412:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	799b      	ldrb	r3, [r3, #6]
 8003418:	2b01      	cmp	r3, #1
 800341a:	f040 8171 	bne.w	8003700 <HCD_HC_OUT_IRQHandler+0x954>
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	3334      	adds	r3, #52	@ 0x34
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 8165 	beq.w	8003700 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	3334      	adds	r3, #52	@ 0x34
 8003446:	6819      	ldr	r1, [r3, #0]
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4403      	add	r3, r0
 8003456:	3328      	adds	r3, #40	@ 0x28
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	440b      	add	r3, r1
 800345c:	1e59      	subs	r1, r3, #1
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4403      	add	r3, r0
 800346c:	3328      	adds	r3, #40	@ 0x28
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	fbb1 f3f3 	udiv	r3, r1, r3
 8003474:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 813f 	beq.w	8003700 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	333d      	adds	r3, #61	@ 0x3d
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	78fa      	ldrb	r2, [r7, #3]
 8003496:	f083 0301 	eor.w	r3, r3, #1
 800349a:	b2d8      	uxtb	r0, r3
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	333d      	adds	r3, #61	@ 0x3d
 80034aa:	4602      	mov	r2, r0
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	e127      	b.n	8003700 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	334d      	adds	r3, #77	@ 0x4d
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d120      	bne.n	8003508 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	334d      	adds	r3, #77	@ 0x4d
 80034d6:	2202      	movs	r2, #2
 80034d8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	331b      	adds	r3, #27
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	f040 8107 	bne.w	8003700 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	334c      	adds	r3, #76	@ 0x4c
 8003502:	2202      	movs	r2, #2
 8003504:	701a      	strb	r2, [r3, #0]
 8003506:	e0fb      	b.n	8003700 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	334d      	adds	r3, #77	@ 0x4d
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b04      	cmp	r3, #4
 800351c:	d13a      	bne.n	8003594 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800351e:	78fa      	ldrb	r2, [r7, #3]
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	334d      	adds	r3, #77	@ 0x4d
 800352e:	2202      	movs	r2, #2
 8003530:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	334c      	adds	r3, #76	@ 0x4c
 8003542:	2202      	movs	r2, #2
 8003544:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	331b      	adds	r3, #27
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	f040 80d1 	bne.w	8003700 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	331b      	adds	r3, #27
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003572:	78fb      	ldrb	r3, [r7, #3]
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4413      	add	r3, r2
 800357a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	78fa      	ldrb	r2, [r7, #3]
 8003582:	0151      	lsls	r1, r2, #5
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	440a      	add	r2, r1
 8003588:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800358c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003590:	6053      	str	r3, [r2, #4]
 8003592:	e0b5      	b.n	8003700 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003594:	78fa      	ldrb	r2, [r7, #3]
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	334d      	adds	r3, #77	@ 0x4d
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b05      	cmp	r3, #5
 80035a8:	d114      	bne.n	80035d4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035aa:	78fa      	ldrb	r2, [r7, #3]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	334d      	adds	r3, #77	@ 0x4d
 80035ba:	2202      	movs	r2, #2
 80035bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	334c      	adds	r3, #76	@ 0x4c
 80035ce:	2202      	movs	r2, #2
 80035d0:	701a      	strb	r2, [r3, #0]
 80035d2:	e095      	b.n	8003700 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	334d      	adds	r3, #77	@ 0x4d
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b06      	cmp	r3, #6
 80035e8:	d114      	bne.n	8003614 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	334d      	adds	r3, #77	@ 0x4d
 80035fa:	2202      	movs	r2, #2
 80035fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80035fe:	78fa      	ldrb	r2, [r7, #3]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	334c      	adds	r3, #76	@ 0x4c
 800360e:	2205      	movs	r2, #5
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	e075      	b.n	8003700 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	334d      	adds	r3, #77	@ 0x4d
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b07      	cmp	r3, #7
 8003628:	d00a      	beq.n	8003640 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800362a:	78fa      	ldrb	r2, [r7, #3]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	334d      	adds	r3, #77	@ 0x4d
 800363a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800363c:	2b09      	cmp	r3, #9
 800363e:	d170      	bne.n	8003722 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003640:	78fa      	ldrb	r2, [r7, #3]
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	334d      	adds	r3, #77	@ 0x4d
 8003650:	2202      	movs	r2, #2
 8003652:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	3344      	adds	r3, #68	@ 0x44
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	1c59      	adds	r1, r3, #1
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4403      	add	r3, r0
 8003674:	3344      	adds	r3, #68	@ 0x44
 8003676:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	3344      	adds	r3, #68	@ 0x44
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d914      	bls.n	80036b8 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800368e:	78fa      	ldrb	r2, [r7, #3]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	3344      	adds	r3, #68	@ 0x44
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	334c      	adds	r3, #76	@ 0x4c
 80036b2:	2204      	movs	r2, #4
 80036b4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036b6:	e022      	b.n	80036fe <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	334c      	adds	r3, #76	@ 0x4c
 80036c8:	2202      	movs	r2, #2
 80036ca:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036e2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036ea:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036f8:	461a      	mov	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036fe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	334c      	adds	r3, #76	@ 0x4c
 8003710:	781a      	ldrb	r2, [r3, #0]
 8003712:	78fb      	ldrb	r3, [r7, #3]
 8003714:	4619      	mov	r1, r3
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f005 fed8 	bl	80094cc <HAL_HCD_HC_NotifyURBChange_Callback>
 800371c:	e002      	b.n	8003724 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800371e:	bf00      	nop
 8003720:	e000      	b.n	8003724 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003722:	bf00      	nop
  }
}
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b08a      	sub	sp, #40	@ 0x28
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	0c5b      	lsrs	r3, r3, #17
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800375e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d004      	beq.n	8003770 <HCD_RXQLVL_IRQHandler+0x46>
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2b05      	cmp	r3, #5
 800376a:	f000 80b6 	beq.w	80038da <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800376e:	e0b7      	b.n	80038e0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 80b3 	beq.w	80038de <HCD_RXQLVL_IRQHandler+0x1b4>
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	332c      	adds	r3, #44	@ 0x2c
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 80a7 	beq.w	80038de <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4613      	mov	r3, r2
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	3338      	adds	r3, #56	@ 0x38
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	18d1      	adds	r1, r2, r3
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4613      	mov	r3, r2
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4403      	add	r3, r0
 80037b4:	3334      	adds	r3, #52	@ 0x34
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4299      	cmp	r1, r3
 80037ba:	f200 8083 	bhi.w	80038c4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4613      	mov	r3, r2
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	332c      	adds	r3, #44	@ 0x2c
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	b292      	uxth	r2, r2
 80037d8:	4619      	mov	r1, r3
 80037da:	f002 fd03 	bl	80061e4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4613      	mov	r3, r2
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	1a9b      	subs	r3, r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	332c      	adds	r3, #44	@ 0x2c
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	18d1      	adds	r1, r2, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4613      	mov	r3, r2
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4403      	add	r3, r0
 8003802:	332c      	adds	r3, #44	@ 0x2c
 8003804:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4613      	mov	r3, r2
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	1a9b      	subs	r3, r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	3338      	adds	r3, #56	@ 0x38
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	18d1      	adds	r1, r2, r3
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4613      	mov	r3, r2
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4403      	add	r3, r0
 800382a:	3338      	adds	r3, #56	@ 0x38
 800382c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	4413      	add	r3, r2
 8003836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	0cdb      	lsrs	r3, r3, #19
 800383e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003842:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4613      	mov	r3, r2
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	3328      	adds	r3, #40	@ 0x28
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4293      	cmp	r3, r2
 800385c:	d13f      	bne.n	80038de <HCD_RXQLVL_IRQHandler+0x1b4>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d03c      	beq.n	80038de <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	4413      	add	r3, r2
 800386c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800387a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003882:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	4413      	add	r3, r2
 800388c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003890:	461a      	mov	r2, r3
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4613      	mov	r3, r2
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	333c      	adds	r3, #60	@ 0x3c
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	f083 0301 	eor.w	r3, r3, #1
 80038ac:	b2d8      	uxtb	r0, r3
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4613      	mov	r3, r2
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	333c      	adds	r3, #60	@ 0x3c
 80038be:	4602      	mov	r2, r0
 80038c0:	701a      	strb	r2, [r3, #0]
      break;
 80038c2:	e00c      	b.n	80038de <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4613      	mov	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	334c      	adds	r3, #76	@ 0x4c
 80038d4:	2204      	movs	r2, #4
 80038d6:	701a      	strb	r2, [r3, #0]
      break;
 80038d8:	e001      	b.n	80038de <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80038da:	bf00      	nop
 80038dc:	e000      	b.n	80038e0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80038de:	bf00      	nop
  }
}
 80038e0:	bf00      	nop
 80038e2:	3728      	adds	r7, #40	@ 0x28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003914:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b02      	cmp	r3, #2
 800391e:	d10b      	bne.n	8003938 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b01      	cmp	r3, #1
 8003928:	d102      	bne.n	8003930 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f005 fdb2 	bl	8009494 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f043 0302 	orr.w	r3, r3, #2
 8003936:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b08      	cmp	r3, #8
 8003940:	d132      	bne.n	80039a8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f043 0308 	orr.w	r3, r3, #8
 8003948:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b04      	cmp	r3, #4
 8003952:	d126      	bne.n	80039a2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	7a5b      	ldrb	r3, [r3, #9]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d113      	bne.n	8003984 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003962:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003966:	d106      	bne.n	8003976 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2102      	movs	r1, #2
 800396e:	4618      	mov	r0, r3
 8003970:	f002 fdce 	bl	8006510 <USB_InitFSLSPClkSel>
 8003974:	e011      	b.n	800399a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2101      	movs	r1, #1
 800397c:	4618      	mov	r0, r3
 800397e:	f002 fdc7 	bl	8006510 <USB_InitFSLSPClkSel>
 8003982:	e00a      	b.n	800399a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	79db      	ldrb	r3, [r3, #7]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d106      	bne.n	800399a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003992:	461a      	mov	r2, r3
 8003994:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003998:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f005 fda4 	bl	80094e8 <HAL_HCD_PortEnabled_Callback>
 80039a0:	e002      	b.n	80039a8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f005 fdae 	bl	8009504 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d103      	bne.n	80039ba <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f043 0320 	orr.w	r3, r3, #32
 80039b8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80039c0:	461a      	mov	r2, r3
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	6013      	str	r3, [r2, #0]
}
 80039c6:	bf00      	nop
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e12b      	b.n	8003c3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7fd f96c 	bl	8000cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2224      	movs	r2, #36	@ 0x24
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0201 	bic.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a34:	f001 fa20 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 8003a38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	4a81      	ldr	r2, [pc, #516]	@ (8003c44 <HAL_I2C_Init+0x274>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d807      	bhi.n	8003a54 <HAL_I2C_Init+0x84>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4a80      	ldr	r2, [pc, #512]	@ (8003c48 <HAL_I2C_Init+0x278>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	bf94      	ite	ls
 8003a4c:	2301      	movls	r3, #1
 8003a4e:	2300      	movhi	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	e006      	b.n	8003a62 <HAL_I2C_Init+0x92>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4a7d      	ldr	r2, [pc, #500]	@ (8003c4c <HAL_I2C_Init+0x27c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	bf94      	ite	ls
 8003a5c:	2301      	movls	r3, #1
 8003a5e:	2300      	movhi	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e0e7      	b.n	8003c3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4a78      	ldr	r2, [pc, #480]	@ (8003c50 <HAL_I2C_Init+0x280>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	0c9b      	lsrs	r3, r3, #18
 8003a74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	4a6a      	ldr	r2, [pc, #424]	@ (8003c44 <HAL_I2C_Init+0x274>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d802      	bhi.n	8003aa4 <HAL_I2C_Init+0xd4>
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	e009      	b.n	8003ab8 <HAL_I2C_Init+0xe8>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003aaa:	fb02 f303 	mul.w	r3, r2, r3
 8003aae:	4a69      	ldr	r2, [pc, #420]	@ (8003c54 <HAL_I2C_Init+0x284>)
 8003ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab4:	099b      	lsrs	r3, r3, #6
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	430b      	orrs	r3, r1
 8003abe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003aca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	495c      	ldr	r1, [pc, #368]	@ (8003c44 <HAL_I2C_Init+0x274>)
 8003ad4:	428b      	cmp	r3, r1
 8003ad6:	d819      	bhi.n	8003b0c <HAL_I2C_Init+0x13c>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	1e59      	subs	r1, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ae6:	1c59      	adds	r1, r3, #1
 8003ae8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003aec:	400b      	ands	r3, r1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <HAL_I2C_Init+0x138>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1e59      	subs	r1, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b00:	3301      	adds	r3, #1
 8003b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b06:	e051      	b.n	8003bac <HAL_I2C_Init+0x1dc>
 8003b08:	2304      	movs	r3, #4
 8003b0a:	e04f      	b.n	8003bac <HAL_I2C_Init+0x1dc>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d111      	bne.n	8003b38 <HAL_I2C_Init+0x168>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	1e58      	subs	r0, r3, #1
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6859      	ldr	r1, [r3, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	440b      	add	r3, r1
 8003b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b26:	3301      	adds	r3, #1
 8003b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	bf0c      	ite	eq
 8003b30:	2301      	moveq	r3, #1
 8003b32:	2300      	movne	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	e012      	b.n	8003b5e <HAL_I2C_Init+0x18e>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1e58      	subs	r0, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6859      	ldr	r1, [r3, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	0099      	lsls	r1, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b4e:	3301      	adds	r3, #1
 8003b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bf0c      	ite	eq
 8003b58:	2301      	moveq	r3, #1
 8003b5a:	2300      	movne	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_I2C_Init+0x196>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e022      	b.n	8003bac <HAL_I2C_Init+0x1dc>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10e      	bne.n	8003b8c <HAL_I2C_Init+0x1bc>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1e58      	subs	r0, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6859      	ldr	r1, [r3, #4]
 8003b76:	460b      	mov	r3, r1
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	440b      	add	r3, r1
 8003b7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b80:	3301      	adds	r3, #1
 8003b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b8a:	e00f      	b.n	8003bac <HAL_I2C_Init+0x1dc>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1e58      	subs	r0, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6859      	ldr	r1, [r3, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	0099      	lsls	r1, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	6809      	ldr	r1, [r1, #0]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69da      	ldr	r2, [r3, #28]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003bda:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6911      	ldr	r1, [r2, #16]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	68d2      	ldr	r2, [r2, #12]
 8003be6:	4311      	orrs	r1, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6812      	ldr	r2, [r2, #0]
 8003bec:	430b      	orrs	r3, r1
 8003bee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	000186a0 	.word	0x000186a0
 8003c48:	001e847f 	.word	0x001e847f
 8003c4c:	003d08ff 	.word	0x003d08ff
 8003c50:	431bde83 	.word	0x431bde83
 8003c54:	10624dd3 	.word	0x10624dd3

08003c58 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e128      	b.n	8003ebc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d109      	bne.n	8003c8a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a90      	ldr	r2, [pc, #576]	@ (8003ec4 <HAL_I2S_Init+0x26c>)
 8003c82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7fd f86d 	bl	8000d64 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6812      	ldr	r2, [r2, #0]
 8003c9c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003ca0:	f023 030f 	bic.w	r3, r3, #15
 8003ca4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2202      	movs	r2, #2
 8003cac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d060      	beq.n	8003d78 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d102      	bne.n	8003cc4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003cbe:	2310      	movs	r3, #16
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	e001      	b.n	8003cc8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003cc4:	2320      	movs	r3, #32
 8003cc6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d802      	bhi.n	8003cd6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	f001 f9c4 	bl	8005064 <HAL_RCCEx_GetPeriphCLKFreq>
 8003cdc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ce6:	d125      	bne.n	8003d34 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d010      	beq.n	8003d12 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	461a      	mov	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	3305      	adds	r3, #5
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	e01f      	b.n	8003d52 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	461a      	mov	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2e:	3305      	adds	r3, #5
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	e00e      	b.n	8003d52 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	461a      	mov	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4e:	3305      	adds	r3, #5
 8003d50:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4a5c      	ldr	r2, [pc, #368]	@ (8003ec8 <HAL_I2S_Init+0x270>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	08db      	lsrs	r3, r3, #3
 8003d5c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	085b      	lsrs	r3, r3, #1
 8003d6e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	021b      	lsls	r3, r3, #8
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	e003      	b.n	8003d80 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003d78:	2302      	movs	r3, #2
 8003d7a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d902      	bls.n	8003d8c <HAL_I2S_Init+0x134>
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	2bff      	cmp	r3, #255	@ 0xff
 8003d8a:	d907      	bls.n	8003d9c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d90:	f043 0210 	orr.w	r2, r3, #16
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e08f      	b.n	8003ebc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	ea42 0103 	orr.w	r1, r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003dba:	f023 030f 	bic.w	r3, r3, #15
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6851      	ldr	r1, [r2, #4]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6892      	ldr	r2, [r2, #8]
 8003dc6:	4311      	orrs	r1, r2
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	68d2      	ldr	r2, [r2, #12]
 8003dcc:	4311      	orrs	r1, r2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6992      	ldr	r2, [r2, #24]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dde:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d161      	bne.n	8003eac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a38      	ldr	r2, [pc, #224]	@ (8003ecc <HAL_I2S_Init+0x274>)
 8003dec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a37      	ldr	r2, [pc, #220]	@ (8003ed0 <HAL_I2S_Init+0x278>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d101      	bne.n	8003dfc <HAL_I2S_Init+0x1a4>
 8003df8:	4b36      	ldr	r3, [pc, #216]	@ (8003ed4 <HAL_I2S_Init+0x27c>)
 8003dfa:	e001      	b.n	8003e00 <HAL_I2S_Init+0x1a8>
 8003dfc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6812      	ldr	r2, [r2, #0]
 8003e06:	4932      	ldr	r1, [pc, #200]	@ (8003ed0 <HAL_I2S_Init+0x278>)
 8003e08:	428a      	cmp	r2, r1
 8003e0a:	d101      	bne.n	8003e10 <HAL_I2S_Init+0x1b8>
 8003e0c:	4a31      	ldr	r2, [pc, #196]	@ (8003ed4 <HAL_I2S_Init+0x27c>)
 8003e0e:	e001      	b.n	8003e14 <HAL_I2S_Init+0x1bc>
 8003e10:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003e14:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003e18:	f023 030f 	bic.w	r3, r3, #15
 8003e1c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a2b      	ldr	r2, [pc, #172]	@ (8003ed0 <HAL_I2S_Init+0x278>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d101      	bne.n	8003e2c <HAL_I2S_Init+0x1d4>
 8003e28:	4b2a      	ldr	r3, [pc, #168]	@ (8003ed4 <HAL_I2S_Init+0x27c>)
 8003e2a:	e001      	b.n	8003e30 <HAL_I2S_Init+0x1d8>
 8003e2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e30:	2202      	movs	r2, #2
 8003e32:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a25      	ldr	r2, [pc, #148]	@ (8003ed0 <HAL_I2S_Init+0x278>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d101      	bne.n	8003e42 <HAL_I2S_Init+0x1ea>
 8003e3e:	4b25      	ldr	r3, [pc, #148]	@ (8003ed4 <HAL_I2S_Init+0x27c>)
 8003e40:	e001      	b.n	8003e46 <HAL_I2S_Init+0x1ee>
 8003e42:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e52:	d003      	beq.n	8003e5c <HAL_I2S_Init+0x204>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d103      	bne.n	8003e64 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003e5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	e001      	b.n	8003e68 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003e64:	2300      	movs	r3, #0
 8003e66:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e72:	4313      	orrs	r3, r2
 8003e74:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e86:	4313      	orrs	r3, r2
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	897b      	ldrh	r3, [r7, #10]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e94:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a0d      	ldr	r2, [pc, #52]	@ (8003ed0 <HAL_I2S_Init+0x278>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d101      	bne.n	8003ea4 <HAL_I2S_Init+0x24c>
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed4 <HAL_I2S_Init+0x27c>)
 8003ea2:	e001      	b.n	8003ea8 <HAL_I2S_Init+0x250>
 8003ea4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ea8:	897a      	ldrh	r2, [r7, #10]
 8003eaa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3720      	adds	r7, #32
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	08003fcf 	.word	0x08003fcf
 8003ec8:	cccccccd 	.word	0xcccccccd
 8003ecc:	080040e5 	.word	0x080040e5
 8003ed0:	40003800 	.word	0x40003800
 8003ed4:	40003400 	.word	0x40003400

08003ed8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	881a      	ldrh	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	1c9a      	adds	r2, r3, #2
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10e      	bne.n	8003f68 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f58:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff ffb8 	bl	8003ed8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f68:	bf00      	nop
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f82:	b292      	uxth	r2, r2
 8003f84:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8a:	1c9a      	adds	r2, r3, #2
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10e      	bne.n	8003fc6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fb6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff ff93 	bl	8003eec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b086      	sub	sp, #24
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d13a      	bne.n	8004060 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d109      	bne.n	8004008 <I2S_IRQHandler+0x3a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffe:	2b40      	cmp	r3, #64	@ 0x40
 8004000:	d102      	bne.n	8004008 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff ffb4 	bl	8003f70 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400e:	2b40      	cmp	r3, #64	@ 0x40
 8004010:	d126      	bne.n	8004060 <I2S_IRQHandler+0x92>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b20      	cmp	r3, #32
 800401e:	d11f      	bne.n	8004060 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800402e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004030:	2300      	movs	r3, #0
 8004032:	613b      	str	r3, [r7, #16]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004052:	f043 0202 	orr.w	r2, r3, #2
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff ff50 	bl	8003f00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b03      	cmp	r3, #3
 800406a:	d136      	bne.n	80040da <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b02      	cmp	r3, #2
 8004074:	d109      	bne.n	800408a <I2S_IRQHandler+0xbc>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004080:	2b80      	cmp	r3, #128	@ 0x80
 8004082:	d102      	bne.n	800408a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff ff45 	bl	8003f14 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f003 0308 	and.w	r3, r3, #8
 8004090:	2b08      	cmp	r3, #8
 8004092:	d122      	bne.n	80040da <I2S_IRQHandler+0x10c>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f003 0320 	and.w	r3, r3, #32
 800409e:	2b20      	cmp	r3, #32
 80040a0:	d11b      	bne.n	80040da <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040b0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040cc:	f043 0204 	orr.w	r2, r3, #4
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff ff13 	bl	8003f00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040da:	bf00      	nop
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a92      	ldr	r2, [pc, #584]	@ (8004344 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d101      	bne.n	8004102 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80040fe:	4b92      	ldr	r3, [pc, #584]	@ (8004348 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004100:	e001      	b.n	8004106 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004102:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a8b      	ldr	r2, [pc, #556]	@ (8004344 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d101      	bne.n	8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800411c:	4b8a      	ldr	r3, [pc, #552]	@ (8004348 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800411e:	e001      	b.n	8004124 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004120:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004130:	d004      	beq.n	800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	f040 8099 	bne.w	800426e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b02      	cmp	r3, #2
 8004144:	d107      	bne.n	8004156 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f925 	bl	80043a0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b01      	cmp	r3, #1
 800415e:	d107      	bne.n	8004170 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f9c8 	bl	8004500 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004176:	2b40      	cmp	r3, #64	@ 0x40
 8004178:	d13a      	bne.n	80041f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f003 0320 	and.w	r3, r3, #32
 8004180:	2b00      	cmp	r3, #0
 8004182:	d035      	beq.n	80041f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a6e      	ldr	r2, [pc, #440]	@ (8004344 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d101      	bne.n	8004192 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800418e:	4b6e      	ldr	r3, [pc, #440]	@ (8004348 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004190:	e001      	b.n	8004196 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004192:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4969      	ldr	r1, [pc, #420]	@ (8004344 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800419e:	428b      	cmp	r3, r1
 80041a0:	d101      	bne.n	80041a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80041a2:	4b69      	ldr	r3, [pc, #420]	@ (8004348 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041a4:	e001      	b.n	80041aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80041a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041ae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e2:	f043 0202 	orr.w	r2, r3, #2
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff fe88 	bl	8003f00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	f040 80c3 	bne.w	8004382 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 80bd 	beq.w	8004382 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004216:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a49      	ldr	r2, [pc, #292]	@ (8004344 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d101      	bne.n	8004226 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004222:	4b49      	ldr	r3, [pc, #292]	@ (8004348 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004224:	e001      	b.n	800422a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004226:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4944      	ldr	r1, [pc, #272]	@ (8004344 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004232:	428b      	cmp	r3, r1
 8004234:	d101      	bne.n	800423a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004236:	4b44      	ldr	r3, [pc, #272]	@ (8004348 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004238:	e001      	b.n	800423e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800423a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800423e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004242:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004244:	2300      	movs	r3, #0
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425e:	f043 0204 	orr.w	r2, r3, #4
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7ff fe4a 	bl	8003f00 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800426c:	e089      	b.n	8004382 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b02      	cmp	r3, #2
 8004276:	d107      	bne.n	8004288 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f8be 	bl	8004404 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b01      	cmp	r3, #1
 8004290:	d107      	bne.n	80042a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f8fd 	bl	800449c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a8:	2b40      	cmp	r3, #64	@ 0x40
 80042aa:	d12f      	bne.n	800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d02a      	beq.n	800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042c4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004344 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d101      	bne.n	80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80042d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004348 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042d2:	e001      	b.n	80042d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80042d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4919      	ldr	r1, [pc, #100]	@ (8004344 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042e0:	428b      	cmp	r3, r1
 80042e2:	d101      	bne.n	80042e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80042e4:	4b18      	ldr	r3, [pc, #96]	@ (8004348 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042e6:	e001      	b.n	80042ec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80042e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042f0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fe:	f043 0202 	orr.w	r2, r3, #2
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff fdfa 	bl	8003f00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b08      	cmp	r3, #8
 8004314:	d136      	bne.n	8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f003 0320 	and.w	r3, r3, #32
 800431c:	2b00      	cmp	r3, #0
 800431e:	d031      	beq.n	8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a07      	ldr	r2, [pc, #28]	@ (8004344 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d101      	bne.n	800432e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800432a:	4b07      	ldr	r3, [pc, #28]	@ (8004348 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800432c:	e001      	b.n	8004332 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800432e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4902      	ldr	r1, [pc, #8]	@ (8004344 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800433a:	428b      	cmp	r3, r1
 800433c:	d106      	bne.n	800434c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800433e:	4b02      	ldr	r3, [pc, #8]	@ (8004348 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004340:	e006      	b.n	8004350 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004342:	bf00      	nop
 8004344:	40003800 	.word	0x40003800
 8004348:	40003400 	.word	0x40003400
 800434c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004350:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004354:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004364:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004372:	f043 0204 	orr.w	r2, r3, #4
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff fdc0 	bl	8003f00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004380:	e000      	b.n	8004384 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004382:	bf00      	nop
}
 8004384:	bf00      	nop
 8004386:	3720      	adds	r7, #32
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ac:	1c99      	adds	r1, r3, #2
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6251      	str	r1, [r2, #36]	@ 0x24
 80043b2:	881a      	ldrh	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d113      	bne.n	80043fa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d106      	bne.n	80043fa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff ffc9 	bl	800438c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	1c99      	adds	r1, r3, #2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6251      	str	r1, [r2, #36]	@ 0x24
 8004416:	8819      	ldrh	r1, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a1d      	ldr	r2, [pc, #116]	@ (8004494 <I2SEx_TxISR_I2SExt+0x90>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d101      	bne.n	8004426 <I2SEx_TxISR_I2SExt+0x22>
 8004422:	4b1d      	ldr	r3, [pc, #116]	@ (8004498 <I2SEx_TxISR_I2SExt+0x94>)
 8004424:	e001      	b.n	800442a <I2SEx_TxISR_I2SExt+0x26>
 8004426:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800442a:	460a      	mov	r2, r1
 800442c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d121      	bne.n	800448a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a12      	ldr	r2, [pc, #72]	@ (8004494 <I2SEx_TxISR_I2SExt+0x90>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d101      	bne.n	8004454 <I2SEx_TxISR_I2SExt+0x50>
 8004450:	4b11      	ldr	r3, [pc, #68]	@ (8004498 <I2SEx_TxISR_I2SExt+0x94>)
 8004452:	e001      	b.n	8004458 <I2SEx_TxISR_I2SExt+0x54>
 8004454:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	490d      	ldr	r1, [pc, #52]	@ (8004494 <I2SEx_TxISR_I2SExt+0x90>)
 8004460:	428b      	cmp	r3, r1
 8004462:	d101      	bne.n	8004468 <I2SEx_TxISR_I2SExt+0x64>
 8004464:	4b0c      	ldr	r3, [pc, #48]	@ (8004498 <I2SEx_TxISR_I2SExt+0x94>)
 8004466:	e001      	b.n	800446c <I2SEx_TxISR_I2SExt+0x68>
 8004468:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800446c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004470:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004476:	b29b      	uxth	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d106      	bne.n	800448a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff ff81 	bl	800438c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40003800 	.word	0x40003800
 8004498:	40003400 	.word	0x40003400

0800449c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68d8      	ldr	r0, [r3, #12]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ae:	1c99      	adds	r1, r3, #2
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80044b4:	b282      	uxth	r2, r0
 80044b6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d113      	bne.n	80044f8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80044de:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff ff4a 	bl	800438c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044f8:	bf00      	nop
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a20      	ldr	r2, [pc, #128]	@ (8004590 <I2SEx_RxISR_I2SExt+0x90>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d101      	bne.n	8004516 <I2SEx_RxISR_I2SExt+0x16>
 8004512:	4b20      	ldr	r3, [pc, #128]	@ (8004594 <I2SEx_RxISR_I2SExt+0x94>)
 8004514:	e001      	b.n	800451a <I2SEx_RxISR_I2SExt+0x1a>
 8004516:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800451a:	68d8      	ldr	r0, [r3, #12]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004520:	1c99      	adds	r1, r3, #2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004526:	b282      	uxth	r2, r0
 8004528:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d121      	bne.n	8004586 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a12      	ldr	r2, [pc, #72]	@ (8004590 <I2SEx_RxISR_I2SExt+0x90>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d101      	bne.n	8004550 <I2SEx_RxISR_I2SExt+0x50>
 800454c:	4b11      	ldr	r3, [pc, #68]	@ (8004594 <I2SEx_RxISR_I2SExt+0x94>)
 800454e:	e001      	b.n	8004554 <I2SEx_RxISR_I2SExt+0x54>
 8004550:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	490d      	ldr	r1, [pc, #52]	@ (8004590 <I2SEx_RxISR_I2SExt+0x90>)
 800455c:	428b      	cmp	r3, r1
 800455e:	d101      	bne.n	8004564 <I2SEx_RxISR_I2SExt+0x64>
 8004560:	4b0c      	ldr	r3, [pc, #48]	@ (8004594 <I2SEx_RxISR_I2SExt+0x94>)
 8004562:	e001      	b.n	8004568 <I2SEx_RxISR_I2SExt+0x68>
 8004564:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004568:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800456c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d106      	bne.n	8004586 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff ff03 	bl	800438c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004586:	bf00      	nop
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40003800 	.word	0x40003800
 8004594:	40003400 	.word	0x40003400

08004598 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e267      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d075      	beq.n	80046a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045b6:	4b88      	ldr	r3, [pc, #544]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 030c 	and.w	r3, r3, #12
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d00c      	beq.n	80045dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045c2:	4b85      	ldr	r3, [pc, #532]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d112      	bne.n	80045f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ce:	4b82      	ldr	r3, [pc, #520]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045da:	d10b      	bne.n	80045f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045dc:	4b7e      	ldr	r3, [pc, #504]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d05b      	beq.n	80046a0 <HAL_RCC_OscConfig+0x108>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d157      	bne.n	80046a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e242      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045fc:	d106      	bne.n	800460c <HAL_RCC_OscConfig+0x74>
 80045fe:	4b76      	ldr	r3, [pc, #472]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a75      	ldr	r2, [pc, #468]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	e01d      	b.n	8004648 <HAL_RCC_OscConfig+0xb0>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004614:	d10c      	bne.n	8004630 <HAL_RCC_OscConfig+0x98>
 8004616:	4b70      	ldr	r3, [pc, #448]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a6f      	ldr	r2, [pc, #444]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 800461c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	4b6d      	ldr	r3, [pc, #436]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a6c      	ldr	r2, [pc, #432]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	e00b      	b.n	8004648 <HAL_RCC_OscConfig+0xb0>
 8004630:	4b69      	ldr	r3, [pc, #420]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a68      	ldr	r2, [pc, #416]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	4b66      	ldr	r3, [pc, #408]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a65      	ldr	r2, [pc, #404]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d013      	beq.n	8004678 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004650:	f7fc fd7a 	bl	8001148 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004658:	f7fc fd76 	bl	8001148 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	@ 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e207      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466a:	4b5b      	ldr	r3, [pc, #364]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0xc0>
 8004676:	e014      	b.n	80046a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004678:	f7fc fd66 	bl	8001148 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004680:	f7fc fd62 	bl	8001148 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	@ 0x64
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e1f3      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004692:	4b51      	ldr	r3, [pc, #324]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0xe8>
 800469e:	e000      	b.n	80046a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d063      	beq.n	8004776 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046ae:	4b4a      	ldr	r3, [pc, #296]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00b      	beq.n	80046d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ba:	4b47      	ldr	r3, [pc, #284]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d11c      	bne.n	8004700 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046c6:	4b44      	ldr	r3, [pc, #272]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d116      	bne.n	8004700 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046d2:	4b41      	ldr	r3, [pc, #260]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <HAL_RCC_OscConfig+0x152>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d001      	beq.n	80046ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e1c7      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ea:	4b3b      	ldr	r3, [pc, #236]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	4937      	ldr	r1, [pc, #220]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046fe:	e03a      	b.n	8004776 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d020      	beq.n	800474a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004708:	4b34      	ldr	r3, [pc, #208]	@ (80047dc <HAL_RCC_OscConfig+0x244>)
 800470a:	2201      	movs	r2, #1
 800470c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470e:	f7fc fd1b 	bl	8001148 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004716:	f7fc fd17 	bl	8001148 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e1a8      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004728:	4b2b      	ldr	r3, [pc, #172]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0f0      	beq.n	8004716 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004734:	4b28      	ldr	r3, [pc, #160]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	4925      	ldr	r1, [pc, #148]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004744:	4313      	orrs	r3, r2
 8004746:	600b      	str	r3, [r1, #0]
 8004748:	e015      	b.n	8004776 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800474a:	4b24      	ldr	r3, [pc, #144]	@ (80047dc <HAL_RCC_OscConfig+0x244>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004750:	f7fc fcfa 	bl	8001148 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004758:	f7fc fcf6 	bl	8001148 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e187      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800476a:	4b1b      	ldr	r3, [pc, #108]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d036      	beq.n	80047f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d016      	beq.n	80047b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800478a:	4b15      	ldr	r3, [pc, #84]	@ (80047e0 <HAL_RCC_OscConfig+0x248>)
 800478c:	2201      	movs	r2, #1
 800478e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004790:	f7fc fcda 	bl	8001148 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004798:	f7fc fcd6 	bl	8001148 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e167      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047aa:	4b0b      	ldr	r3, [pc, #44]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80047ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0f0      	beq.n	8004798 <HAL_RCC_OscConfig+0x200>
 80047b6:	e01b      	b.n	80047f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047b8:	4b09      	ldr	r3, [pc, #36]	@ (80047e0 <HAL_RCC_OscConfig+0x248>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047be:	f7fc fcc3 	bl	8001148 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047c4:	e00e      	b.n	80047e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047c6:	f7fc fcbf 	bl	8001148 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d907      	bls.n	80047e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e150      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
 80047d8:	40023800 	.word	0x40023800
 80047dc:	42470000 	.word	0x42470000
 80047e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047e4:	4b88      	ldr	r3, [pc, #544]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80047e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1ea      	bne.n	80047c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 8097 	beq.w	800492c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047fe:	2300      	movs	r3, #0
 8004800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004802:	4b81      	ldr	r3, [pc, #516]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10f      	bne.n	800482e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800480e:	2300      	movs	r3, #0
 8004810:	60bb      	str	r3, [r7, #8]
 8004812:	4b7d      	ldr	r3, [pc, #500]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004816:	4a7c      	ldr	r2, [pc, #496]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800481c:	6413      	str	r3, [r2, #64]	@ 0x40
 800481e:	4b7a      	ldr	r3, [pc, #488]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004826:	60bb      	str	r3, [r7, #8]
 8004828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800482a:	2301      	movs	r3, #1
 800482c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482e:	4b77      	ldr	r3, [pc, #476]	@ (8004a0c <HAL_RCC_OscConfig+0x474>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004836:	2b00      	cmp	r3, #0
 8004838:	d118      	bne.n	800486c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800483a:	4b74      	ldr	r3, [pc, #464]	@ (8004a0c <HAL_RCC_OscConfig+0x474>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a73      	ldr	r2, [pc, #460]	@ (8004a0c <HAL_RCC_OscConfig+0x474>)
 8004840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004846:	f7fc fc7f 	bl	8001148 <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800484e:	f7fc fc7b 	bl	8001148 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e10c      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004860:	4b6a      	ldr	r3, [pc, #424]	@ (8004a0c <HAL_RCC_OscConfig+0x474>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0f0      	beq.n	800484e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d106      	bne.n	8004882 <HAL_RCC_OscConfig+0x2ea>
 8004874:	4b64      	ldr	r3, [pc, #400]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004878:	4a63      	ldr	r2, [pc, #396]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 800487a:	f043 0301 	orr.w	r3, r3, #1
 800487e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004880:	e01c      	b.n	80048bc <HAL_RCC_OscConfig+0x324>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b05      	cmp	r3, #5
 8004888:	d10c      	bne.n	80048a4 <HAL_RCC_OscConfig+0x30c>
 800488a:	4b5f      	ldr	r3, [pc, #380]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 800488c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488e:	4a5e      	ldr	r2, [pc, #376]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004890:	f043 0304 	orr.w	r3, r3, #4
 8004894:	6713      	str	r3, [r2, #112]	@ 0x70
 8004896:	4b5c      	ldr	r3, [pc, #368]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489a:	4a5b      	ldr	r2, [pc, #364]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 800489c:	f043 0301 	orr.w	r3, r3, #1
 80048a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80048a2:	e00b      	b.n	80048bc <HAL_RCC_OscConfig+0x324>
 80048a4:	4b58      	ldr	r3, [pc, #352]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80048a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a8:	4a57      	ldr	r2, [pc, #348]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80048b0:	4b55      	ldr	r3, [pc, #340]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80048b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b4:	4a54      	ldr	r2, [pc, #336]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80048b6:	f023 0304 	bic.w	r3, r3, #4
 80048ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d015      	beq.n	80048f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c4:	f7fc fc40 	bl	8001148 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ca:	e00a      	b.n	80048e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048cc:	f7fc fc3c 	bl	8001148 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048da:	4293      	cmp	r3, r2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e0cb      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e2:	4b49      	ldr	r3, [pc, #292]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80048e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0ee      	beq.n	80048cc <HAL_RCC_OscConfig+0x334>
 80048ee:	e014      	b.n	800491a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f0:	f7fc fc2a 	bl	8001148 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f6:	e00a      	b.n	800490e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f8:	f7fc fc26 	bl	8001148 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004906:	4293      	cmp	r3, r2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e0b5      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800490e:	4b3e      	ldr	r3, [pc, #248]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1ee      	bne.n	80048f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800491a:	7dfb      	ldrb	r3, [r7, #23]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d105      	bne.n	800492c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004920:	4b39      	ldr	r3, [pc, #228]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004924:	4a38      	ldr	r2, [pc, #224]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004926:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800492a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80a1 	beq.w	8004a78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004936:	4b34      	ldr	r3, [pc, #208]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 030c 	and.w	r3, r3, #12
 800493e:	2b08      	cmp	r3, #8
 8004940:	d05c      	beq.n	80049fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d141      	bne.n	80049ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494a:	4b31      	ldr	r3, [pc, #196]	@ (8004a10 <HAL_RCC_OscConfig+0x478>)
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fc fbfa 	bl	8001148 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004958:	f7fc fbf6 	bl	8001148 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e087      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496a:	4b27      	ldr	r3, [pc, #156]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69da      	ldr	r2, [r3, #28]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004984:	019b      	lsls	r3, r3, #6
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498c:	085b      	lsrs	r3, r3, #1
 800498e:	3b01      	subs	r3, #1
 8004990:	041b      	lsls	r3, r3, #16
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004998:	061b      	lsls	r3, r3, #24
 800499a:	491b      	ldr	r1, [pc, #108]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 800499c:	4313      	orrs	r3, r2
 800499e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a10 <HAL_RCC_OscConfig+0x478>)
 80049a2:	2201      	movs	r2, #1
 80049a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a6:	f7fc fbcf 	bl	8001148 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ae:	f7fc fbcb 	bl	8001148 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e05c      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c0:	4b11      	ldr	r3, [pc, #68]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f0      	beq.n	80049ae <HAL_RCC_OscConfig+0x416>
 80049cc:	e054      	b.n	8004a78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ce:	4b10      	ldr	r3, [pc, #64]	@ (8004a10 <HAL_RCC_OscConfig+0x478>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d4:	f7fc fbb8 	bl	8001148 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049dc:	f7fc fbb4 	bl	8001148 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e045      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ee:	4b06      	ldr	r3, [pc, #24]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x444>
 80049fa:	e03d      	b.n	8004a78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d107      	bne.n	8004a14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e038      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	40007000 	.word	0x40007000
 8004a10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a14:	4b1b      	ldr	r3, [pc, #108]	@ (8004a84 <HAL_RCC_OscConfig+0x4ec>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d028      	beq.n	8004a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d121      	bne.n	8004a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d11a      	bne.n	8004a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a44:	4013      	ands	r3, r2
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d111      	bne.n	8004a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5a:	085b      	lsrs	r3, r3, #1
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d107      	bne.n	8004a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e000      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40023800 	.word	0x40023800

08004a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e0cc      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a9c:	4b68      	ldr	r3, [pc, #416]	@ (8004c40 <HAL_RCC_ClockConfig+0x1b8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d90c      	bls.n	8004ac4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aaa:	4b65      	ldr	r3, [pc, #404]	@ (8004c40 <HAL_RCC_ClockConfig+0x1b8>)
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab2:	4b63      	ldr	r3, [pc, #396]	@ (8004c40 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d001      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0b8      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d020      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d005      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004adc:	4b59      	ldr	r3, [pc, #356]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	4a58      	ldr	r2, [pc, #352]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ae6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004af4:	4b53      	ldr	r3, [pc, #332]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4a52      	ldr	r2, [pc, #328]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004afe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b00:	4b50      	ldr	r3, [pc, #320]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	494d      	ldr	r1, [pc, #308]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d044      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d107      	bne.n	8004b36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b26:	4b47      	ldr	r3, [pc, #284]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d119      	bne.n	8004b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e07f      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d003      	beq.n	8004b46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d107      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b46:	4b3f      	ldr	r3, [pc, #252]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d109      	bne.n	8004b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e06f      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b56:	4b3b      	ldr	r3, [pc, #236]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e067      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b66:	4b37      	ldr	r3, [pc, #220]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f023 0203 	bic.w	r2, r3, #3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	4934      	ldr	r1, [pc, #208]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b78:	f7fc fae6 	bl	8001148 <HAL_GetTick>
 8004b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7e:	e00a      	b.n	8004b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b80:	f7fc fae2 	bl	8001148 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e04f      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b96:	4b2b      	ldr	r3, [pc, #172]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 020c 	and.w	r2, r3, #12
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d1eb      	bne.n	8004b80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ba8:	4b25      	ldr	r3, [pc, #148]	@ (8004c40 <HAL_RCC_ClockConfig+0x1b8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d20c      	bcs.n	8004bd0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb6:	4b22      	ldr	r3, [pc, #136]	@ (8004c40 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bbe:	4b20      	ldr	r3, [pc, #128]	@ (8004c40 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e032      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bdc:	4b19      	ldr	r3, [pc, #100]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	4916      	ldr	r1, [pc, #88]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d009      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bfa:	4b12      	ldr	r3, [pc, #72]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	490e      	ldr	r1, [pc, #56]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c0e:	f000 f821 	bl	8004c54 <HAL_RCC_GetSysClockFreq>
 8004c12:	4602      	mov	r2, r0
 8004c14:	4b0b      	ldr	r3, [pc, #44]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	091b      	lsrs	r3, r3, #4
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	490a      	ldr	r1, [pc, #40]	@ (8004c48 <HAL_RCC_ClockConfig+0x1c0>)
 8004c20:	5ccb      	ldrb	r3, [r1, r3]
 8004c22:	fa22 f303 	lsr.w	r3, r2, r3
 8004c26:	4a09      	ldr	r2, [pc, #36]	@ (8004c4c <HAL_RCC_ClockConfig+0x1c4>)
 8004c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c2a:	4b09      	ldr	r3, [pc, #36]	@ (8004c50 <HAL_RCC_ClockConfig+0x1c8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fc fa46 	bl	80010c0 <HAL_InitTick>

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	40023c00 	.word	0x40023c00
 8004c44:	40023800 	.word	0x40023800
 8004c48:	08009b9c 	.word	0x08009b9c
 8004c4c:	20000000 	.word	0x20000000
 8004c50:	20000004 	.word	0x20000004

08004c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c58:	b094      	sub	sp, #80	@ 0x50
 8004c5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c6c:	4b79      	ldr	r3, [pc, #484]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 030c 	and.w	r3, r3, #12
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d00d      	beq.n	8004c94 <HAL_RCC_GetSysClockFreq+0x40>
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	f200 80e1 	bhi.w	8004e40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_RCC_GetSysClockFreq+0x34>
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d003      	beq.n	8004c8e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c86:	e0db      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c88:	4b73      	ldr	r3, [pc, #460]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c8c:	e0db      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c8e:	4b73      	ldr	r3, [pc, #460]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0x208>)
 8004c90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c92:	e0d8      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c94:	4b6f      	ldr	r3, [pc, #444]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c9c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c9e:	4b6d      	ldr	r3, [pc, #436]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d063      	beq.n	8004d72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004caa:	4b6a      	ldr	r3, [pc, #424]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	099b      	lsrs	r3, r3, #6
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004cc6:	4622      	mov	r2, r4
 8004cc8:	462b      	mov	r3, r5
 8004cca:	f04f 0000 	mov.w	r0, #0
 8004cce:	f04f 0100 	mov.w	r1, #0
 8004cd2:	0159      	lsls	r1, r3, #5
 8004cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cd8:	0150      	lsls	r0, r2, #5
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4621      	mov	r1, r4
 8004ce0:	1a51      	subs	r1, r2, r1
 8004ce2:	6139      	str	r1, [r7, #16]
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	eb63 0301 	sbc.w	r3, r3, r1
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cf8:	4659      	mov	r1, fp
 8004cfa:	018b      	lsls	r3, r1, #6
 8004cfc:	4651      	mov	r1, sl
 8004cfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d02:	4651      	mov	r1, sl
 8004d04:	018a      	lsls	r2, r1, #6
 8004d06:	4651      	mov	r1, sl
 8004d08:	ebb2 0801 	subs.w	r8, r2, r1
 8004d0c:	4659      	mov	r1, fp
 8004d0e:	eb63 0901 	sbc.w	r9, r3, r1
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d26:	4690      	mov	r8, r2
 8004d28:	4699      	mov	r9, r3
 8004d2a:	4623      	mov	r3, r4
 8004d2c:	eb18 0303 	adds.w	r3, r8, r3
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	462b      	mov	r3, r5
 8004d34:	eb49 0303 	adc.w	r3, r9, r3
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d46:	4629      	mov	r1, r5
 8004d48:	024b      	lsls	r3, r1, #9
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d50:	4621      	mov	r1, r4
 8004d52:	024a      	lsls	r2, r1, #9
 8004d54:	4610      	mov	r0, r2
 8004d56:	4619      	mov	r1, r3
 8004d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d64:	f7fb fa30 	bl	80001c8 <__aeabi_uldivmod>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d70:	e058      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d72:	4b38      	ldr	r3, [pc, #224]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	099b      	lsrs	r3, r3, #6
 8004d78:	2200      	movs	r2, #0
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	4611      	mov	r1, r2
 8004d7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d82:	623b      	str	r3, [r7, #32]
 8004d84:	2300      	movs	r3, #0
 8004d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	464b      	mov	r3, r9
 8004d90:	f04f 0000 	mov.w	r0, #0
 8004d94:	f04f 0100 	mov.w	r1, #0
 8004d98:	0159      	lsls	r1, r3, #5
 8004d9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d9e:	0150      	lsls	r0, r2, #5
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4641      	mov	r1, r8
 8004da6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004daa:	4649      	mov	r1, r9
 8004dac:	eb63 0b01 	sbc.w	fp, r3, r1
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004dbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004dc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004dc4:	ebb2 040a 	subs.w	r4, r2, sl
 8004dc8:	eb63 050b 	sbc.w	r5, r3, fp
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	00eb      	lsls	r3, r5, #3
 8004dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dda:	00e2      	lsls	r2, r4, #3
 8004ddc:	4614      	mov	r4, r2
 8004dde:	461d      	mov	r5, r3
 8004de0:	4643      	mov	r3, r8
 8004de2:	18e3      	adds	r3, r4, r3
 8004de4:	603b      	str	r3, [r7, #0]
 8004de6:	464b      	mov	r3, r9
 8004de8:	eb45 0303 	adc.w	r3, r5, r3
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	028b      	lsls	r3, r1, #10
 8004dfe:	4621      	mov	r1, r4
 8004e00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e04:	4621      	mov	r1, r4
 8004e06:	028a      	lsls	r2, r1, #10
 8004e08:	4610      	mov	r0, r2
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e0e:	2200      	movs	r2, #0
 8004e10:	61bb      	str	r3, [r7, #24]
 8004e12:	61fa      	str	r2, [r7, #28]
 8004e14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e18:	f7fb f9d6 	bl	80001c8 <__aeabi_uldivmod>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4613      	mov	r3, r2
 8004e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e24:	4b0b      	ldr	r3, [pc, #44]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	0c1b      	lsrs	r3, r3, #16
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	3301      	adds	r3, #1
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004e34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e3e:	e002      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e40:	4b05      	ldr	r3, [pc, #20]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3750      	adds	r7, #80	@ 0x50
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e52:	bf00      	nop
 8004e54:	40023800 	.word	0x40023800
 8004e58:	00f42400 	.word	0x00f42400
 8004e5c:	007a1200 	.word	0x007a1200

08004e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e64:	4b03      	ldr	r3, [pc, #12]	@ (8004e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e66:	681b      	ldr	r3, [r3, #0]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20000000 	.word	0x20000000

08004e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e7c:	f7ff fff0 	bl	8004e60 <HAL_RCC_GetHCLKFreq>
 8004e80:	4602      	mov	r2, r0
 8004e82:	4b05      	ldr	r3, [pc, #20]	@ (8004e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	0a9b      	lsrs	r3, r3, #10
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	4903      	ldr	r1, [pc, #12]	@ (8004e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e8e:	5ccb      	ldrb	r3, [r1, r3]
 8004e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	08009bac 	.word	0x08009bac

08004ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d105      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d035      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ec8:	4b62      	ldr	r3, [pc, #392]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ece:	f7fc f93b 	bl	8001148 <HAL_GetTick>
 8004ed2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ed6:	f7fc f937 	bl	8001148 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e0b0      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ee8:	4b5b      	ldr	r3, [pc, #364]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1f0      	bne.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	019a      	lsls	r2, r3, #6
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	071b      	lsls	r3, r3, #28
 8004f00:	4955      	ldr	r1, [pc, #340]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f08:	4b52      	ldr	r3, [pc, #328]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f0e:	f7fc f91b 	bl	8001148 <HAL_GetTick>
 8004f12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f14:	e008      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f16:	f7fc f917 	bl	8001148 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e090      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f28:	4b4b      	ldr	r3, [pc, #300]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 8083 	beq.w	8005048 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	4b44      	ldr	r3, [pc, #272]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4a:	4a43      	ldr	r2, [pc, #268]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f52:	4b41      	ldr	r3, [pc, #260]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f5e:	4b3f      	ldr	r3, [pc, #252]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a3e      	ldr	r2, [pc, #248]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f68:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f6a:	f7fc f8ed 	bl	8001148 <HAL_GetTick>
 8004f6e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004f70:	e008      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f72:	f7fc f8e9 	bl	8001148 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e062      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004f84:	4b35      	ldr	r3, [pc, #212]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f0      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f90:	4b31      	ldr	r3, [pc, #196]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f98:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d02f      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d028      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fae:	4b2a      	ldr	r3, [pc, #168]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fb6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fb8:	4b29      	ldr	r3, [pc, #164]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fbe:	4b28      	ldr	r3, [pc, #160]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004fc4:	4a24      	ldr	r2, [pc, #144]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fca:	4b23      	ldr	r3, [pc, #140]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d114      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004fd6:	f7fc f8b7 	bl	8001148 <HAL_GetTick>
 8004fda:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fdc:	e00a      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fde:	f7fc f8b3 	bl	8001148 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e02a      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff4:	4b18      	ldr	r3, [pc, #96]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0ee      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005008:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800500c:	d10d      	bne.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800500e:	4b12      	ldr	r3, [pc, #72]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800501e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005022:	490d      	ldr	r1, [pc, #52]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005024:	4313      	orrs	r3, r2
 8005026:	608b      	str	r3, [r1, #8]
 8005028:	e005      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800502a:	4b0b      	ldr	r3, [pc, #44]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	4a0a      	ldr	r2, [pc, #40]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005030:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005034:	6093      	str	r3, [r2, #8]
 8005036:	4b08      	ldr	r3, [pc, #32]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005038:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005042:	4905      	ldr	r1, [pc, #20]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005044:	4313      	orrs	r3, r2
 8005046:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3718      	adds	r7, #24
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	42470068 	.word	0x42470068
 8005058:	40023800 	.word	0x40023800
 800505c:	40007000 	.word	0x40007000
 8005060:	42470e40 	.word	0x42470e40

08005064 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d13f      	bne.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005082:	4b24      	ldr	r3, [pc, #144]	@ (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800508a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d006      	beq.n	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005098:	d12f      	bne.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800509a:	4b1f      	ldr	r3, [pc, #124]	@ (8005118 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800509c:	617b      	str	r3, [r7, #20]
          break;
 800509e:	e02f      	b.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80050a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050ac:	d108      	bne.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050ae:	4b19      	ldr	r3, [pc, #100]	@ (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050b6:	4a19      	ldr	r2, [pc, #100]	@ (800511c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80050b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050bc:	613b      	str	r3, [r7, #16]
 80050be:	e007      	b.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050c0:	4b14      	ldr	r3, [pc, #80]	@ (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050c8:	4a15      	ldr	r2, [pc, #84]	@ (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80050ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ce:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80050d0:	4b10      	ldr	r3, [pc, #64]	@ (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050d6:	099b      	lsrs	r3, r3, #6
 80050d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	fb02 f303 	mul.w	r3, r2, r3
 80050e2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80050e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050ea:	0f1b      	lsrs	r3, r3, #28
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f6:	617b      	str	r3, [r7, #20]
          break;
 80050f8:	e002      	b.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]
          break;
 80050fe:	bf00      	nop
        }
      }
      break;
 8005100:	e000      	b.n	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005102:	bf00      	nop
    }
  }
  return frequency;
 8005104:	697b      	ldr	r3, [r7, #20]
}
 8005106:	4618      	mov	r0, r3
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	40023800 	.word	0x40023800
 8005118:	00bb8000 	.word	0x00bb8000
 800511c:	007a1200 	.word	0x007a1200
 8005120:	00f42400 	.word	0x00f42400

08005124 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e07b      	b.n	800522e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513a:	2b00      	cmp	r3, #0
 800513c:	d108      	bne.n	8005150 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005146:	d009      	beq.n	800515c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	61da      	str	r2, [r3, #28]
 800514e:	e005      	b.n	800515c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d106      	bne.n	800517c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7fb fe74 	bl	8000e64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005192:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e0:	ea42 0103 	orr.w	r1, r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	0c1b      	lsrs	r3, r3, #16
 80051fa:	f003 0104 	and.w	r1, r3, #4
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005202:	f003 0210 	and.w	r2, r3, #16
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69da      	ldr	r2, [r3, #28]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800521c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b088      	sub	sp, #32
 800523a:	af00      	add	r7, sp, #0
 800523c:	60f8      	str	r0, [r7, #12]
 800523e:	60b9      	str	r1, [r7, #8]
 8005240:	603b      	str	r3, [r7, #0]
 8005242:	4613      	mov	r3, r2
 8005244:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005246:	f7fb ff7f 	bl	8001148 <HAL_GetTick>
 800524a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	d001      	beq.n	8005260 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800525c:	2302      	movs	r3, #2
 800525e:	e12a      	b.n	80054b6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <HAL_SPI_Transmit+0x36>
 8005266:	88fb      	ldrh	r3, [r7, #6]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e122      	b.n	80054b6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <HAL_SPI_Transmit+0x48>
 800527a:	2302      	movs	r3, #2
 800527c:	e11b      	b.n	80054b6 <HAL_SPI_Transmit+0x280>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2203      	movs	r2, #3
 800528a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	88fa      	ldrh	r2, [r7, #6]
 800529e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	88fa      	ldrh	r2, [r7, #6]
 80052a4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052cc:	d10f      	bne.n	80052ee <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f8:	2b40      	cmp	r3, #64	@ 0x40
 80052fa:	d007      	beq.n	800530c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800530a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005314:	d152      	bne.n	80053bc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <HAL_SPI_Transmit+0xee>
 800531e:	8b7b      	ldrh	r3, [r7, #26]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d145      	bne.n	80053b0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005328:	881a      	ldrh	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005334:	1c9a      	adds	r2, r3, #2
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005348:	e032      	b.n	80053b0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b02      	cmp	r3, #2
 8005356:	d112      	bne.n	800537e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535c:	881a      	ldrh	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005368:	1c9a      	adds	r2, r3, #2
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005372:	b29b      	uxth	r3, r3
 8005374:	3b01      	subs	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800537c:	e018      	b.n	80053b0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800537e:	f7fb fee3 	bl	8001148 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d803      	bhi.n	8005396 <HAL_SPI_Transmit+0x160>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005394:	d102      	bne.n	800539c <HAL_SPI_Transmit+0x166>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d109      	bne.n	80053b0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e082      	b.n	80054b6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1c7      	bne.n	800534a <HAL_SPI_Transmit+0x114>
 80053ba:	e053      	b.n	8005464 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <HAL_SPI_Transmit+0x194>
 80053c4:	8b7b      	ldrh	r3, [r7, #26]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d147      	bne.n	800545a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	330c      	adds	r3, #12
 80053d4:	7812      	ldrb	r2, [r2, #0]
 80053d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053f0:	e033      	b.n	800545a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d113      	bne.n	8005428 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	330c      	adds	r3, #12
 800540a:	7812      	ldrb	r2, [r2, #0]
 800540c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800541c:	b29b      	uxth	r3, r3
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005426:	e018      	b.n	800545a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005428:	f7fb fe8e 	bl	8001148 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	429a      	cmp	r2, r3
 8005436:	d803      	bhi.n	8005440 <HAL_SPI_Transmit+0x20a>
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543e:	d102      	bne.n	8005446 <HAL_SPI_Transmit+0x210>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d109      	bne.n	800545a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e02d      	b.n	80054b6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1c6      	bne.n	80053f2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005464:	69fa      	ldr	r2, [r7, #28]
 8005466:	6839      	ldr	r1, [r7, #0]
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 fcf7 	bl	8005e5c <SPI_EndRxTxTransaction>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2220      	movs	r2, #32
 8005478:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10a      	bne.n	8005498 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005482:	2300      	movs	r3, #0
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e000      	b.n	80054b6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80054b4:	2300      	movs	r3, #0
  }
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3720      	adds	r7, #32
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b088      	sub	sp, #32
 80054c2:	af02      	add	r7, sp, #8
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	603b      	str	r3, [r7, #0]
 80054ca:	4613      	mov	r3, r2
 80054cc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d001      	beq.n	80054de <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80054da:	2302      	movs	r3, #2
 80054dc:	e104      	b.n	80056e8 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <HAL_SPI_Receive+0x2c>
 80054e4:	88fb      	ldrh	r3, [r7, #6]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e0fc      	b.n	80056e8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054f6:	d112      	bne.n	800551e <HAL_SPI_Receive+0x60>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10e      	bne.n	800551e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2204      	movs	r2, #4
 8005504:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005508:	88fa      	ldrh	r2, [r7, #6]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	4613      	mov	r3, r2
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	68b9      	ldr	r1, [r7, #8]
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f8eb 	bl	80056f0 <HAL_SPI_TransmitReceive>
 800551a:	4603      	mov	r3, r0
 800551c:	e0e4      	b.n	80056e8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800551e:	f7fb fe13 	bl	8001148 <HAL_GetTick>
 8005522:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800552a:	2b01      	cmp	r3, #1
 800552c:	d101      	bne.n	8005532 <HAL_SPI_Receive+0x74>
 800552e:	2302      	movs	r3, #2
 8005530:	e0da      	b.n	80056e8 <HAL_SPI_Receive+0x22a>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2204      	movs	r2, #4
 800553e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	88fa      	ldrh	r2, [r7, #6]
 8005552:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	88fa      	ldrh	r2, [r7, #6]
 8005558:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005580:	d10f      	bne.n	80055a2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005590:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ac:	2b40      	cmp	r3, #64	@ 0x40
 80055ae:	d007      	beq.n	80055c0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d170      	bne.n	80056aa <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055c8:	e035      	b.n	8005636 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d115      	bne.n	8005604 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f103 020c 	add.w	r2, r3, #12
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e4:	7812      	ldrb	r2, [r2, #0]
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	3b01      	subs	r3, #1
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005602:	e018      	b.n	8005636 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005604:	f7fb fda0 	bl	8001148 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d803      	bhi.n	800561c <HAL_SPI_Receive+0x15e>
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561a:	d102      	bne.n	8005622 <HAL_SPI_Receive+0x164>
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e058      	b.n	80056e8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800563a:	b29b      	uxth	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1c4      	bne.n	80055ca <HAL_SPI_Receive+0x10c>
 8005640:	e038      	b.n	80056b4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b01      	cmp	r3, #1
 800564e:	d113      	bne.n	8005678 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565a:	b292      	uxth	r2, r2
 800565c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005662:	1c9a      	adds	r2, r3, #2
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800566c:	b29b      	uxth	r3, r3
 800566e:	3b01      	subs	r3, #1
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005676:	e018      	b.n	80056aa <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005678:	f7fb fd66 	bl	8001148 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d803      	bhi.n	8005690 <HAL_SPI_Receive+0x1d2>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568e:	d102      	bne.n	8005696 <HAL_SPI_Receive+0x1d8>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d109      	bne.n	80056aa <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e01e      	b.n	80056e8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1c6      	bne.n	8005642 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	6839      	ldr	r1, [r7, #0]
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 fb69 	bl	8005d90 <SPI_EndRxTransaction>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e000      	b.n	80056e8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80056e6:	2300      	movs	r3, #0
  }
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08a      	sub	sp, #40	@ 0x28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056fe:	2301      	movs	r3, #1
 8005700:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005702:	f7fb fd21 	bl	8001148 <HAL_GetTick>
 8005706:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800570e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005716:	887b      	ldrh	r3, [r7, #2]
 8005718:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800571a:	7ffb      	ldrb	r3, [r7, #31]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d00c      	beq.n	800573a <HAL_SPI_TransmitReceive+0x4a>
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005726:	d106      	bne.n	8005736 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d102      	bne.n	8005736 <HAL_SPI_TransmitReceive+0x46>
 8005730:	7ffb      	ldrb	r3, [r7, #31]
 8005732:	2b04      	cmp	r3, #4
 8005734:	d001      	beq.n	800573a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005736:	2302      	movs	r3, #2
 8005738:	e17f      	b.n	8005a3a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d005      	beq.n	800574c <HAL_SPI_TransmitReceive+0x5c>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <HAL_SPI_TransmitReceive+0x5c>
 8005746:	887b      	ldrh	r3, [r7, #2]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e174      	b.n	8005a3a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005756:	2b01      	cmp	r3, #1
 8005758:	d101      	bne.n	800575e <HAL_SPI_TransmitReceive+0x6e>
 800575a:	2302      	movs	r3, #2
 800575c:	e16d      	b.n	8005a3a <HAL_SPI_TransmitReceive+0x34a>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b04      	cmp	r3, #4
 8005770:	d003      	beq.n	800577a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2205      	movs	r2, #5
 8005776:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	887a      	ldrh	r2, [r7, #2]
 800578a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	887a      	ldrh	r2, [r7, #2]
 8005790:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	887a      	ldrh	r2, [r7, #2]
 800579c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	887a      	ldrh	r2, [r7, #2]
 80057a2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ba:	2b40      	cmp	r3, #64	@ 0x40
 80057bc:	d007      	beq.n	80057ce <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057d6:	d17e      	bne.n	80058d6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <HAL_SPI_TransmitReceive+0xf6>
 80057e0:	8afb      	ldrh	r3, [r7, #22]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d16c      	bne.n	80058c0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ea:	881a      	ldrh	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f6:	1c9a      	adds	r2, r3, #2
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800580a:	e059      	b.n	80058c0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b02      	cmp	r3, #2
 8005818:	d11b      	bne.n	8005852 <HAL_SPI_TransmitReceive+0x162>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800581e:	b29b      	uxth	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	d016      	beq.n	8005852 <HAL_SPI_TransmitReceive+0x162>
 8005824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005826:	2b01      	cmp	r3, #1
 8005828:	d113      	bne.n	8005852 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582e:	881a      	ldrh	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583a:	1c9a      	adds	r2, r3, #2
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005844:	b29b      	uxth	r3, r3
 8005846:	3b01      	subs	r3, #1
 8005848:	b29a      	uxth	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b01      	cmp	r3, #1
 800585e:	d119      	bne.n	8005894 <HAL_SPI_TransmitReceive+0x1a4>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d014      	beq.n	8005894 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005874:	b292      	uxth	r2, r2
 8005876:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587c:	1c9a      	adds	r2, r3, #2
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005886:	b29b      	uxth	r3, r3
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005890:	2301      	movs	r3, #1
 8005892:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005894:	f7fb fc58 	bl	8001148 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d80d      	bhi.n	80058c0 <HAL_SPI_TransmitReceive+0x1d0>
 80058a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058aa:	d009      	beq.n	80058c0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e0bc      	b.n	8005a3a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1a0      	bne.n	800580c <HAL_SPI_TransmitReceive+0x11c>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d19b      	bne.n	800580c <HAL_SPI_TransmitReceive+0x11c>
 80058d4:	e082      	b.n	80059dc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <HAL_SPI_TransmitReceive+0x1f4>
 80058de:	8afb      	ldrh	r3, [r7, #22]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d171      	bne.n	80059c8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	330c      	adds	r3, #12
 80058ee:	7812      	ldrb	r2, [r2, #0]
 80058f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005900:	b29b      	uxth	r3, r3
 8005902:	3b01      	subs	r3, #1
 8005904:	b29a      	uxth	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800590a:	e05d      	b.n	80059c8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b02      	cmp	r3, #2
 8005918:	d11c      	bne.n	8005954 <HAL_SPI_TransmitReceive+0x264>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800591e:	b29b      	uxth	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d017      	beq.n	8005954 <HAL_SPI_TransmitReceive+0x264>
 8005924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005926:	2b01      	cmp	r3, #1
 8005928:	d114      	bne.n	8005954 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	330c      	adds	r3, #12
 8005934:	7812      	ldrb	r2, [r2, #0]
 8005936:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800593c:	1c5a      	adds	r2, r3, #1
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005946:	b29b      	uxth	r3, r3
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b01      	cmp	r3, #1
 8005960:	d119      	bne.n	8005996 <HAL_SPI_TransmitReceive+0x2a6>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005966:	b29b      	uxth	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	d014      	beq.n	8005996 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005988:	b29b      	uxth	r3, r3
 800598a:	3b01      	subs	r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005992:	2301      	movs	r3, #1
 8005994:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005996:	f7fb fbd7 	bl	8001148 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d803      	bhi.n	80059ae <HAL_SPI_TransmitReceive+0x2be>
 80059a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ac:	d102      	bne.n	80059b4 <HAL_SPI_TransmitReceive+0x2c4>
 80059ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d109      	bne.n	80059c8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e038      	b.n	8005a3a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d19c      	bne.n	800590c <HAL_SPI_TransmitReceive+0x21c>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d197      	bne.n	800590c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059dc:	6a3a      	ldr	r2, [r7, #32]
 80059de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 fa3b 	bl	8005e5c <SPI_EndRxTxTransaction>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d008      	beq.n	80059fe <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2220      	movs	r2, #32
 80059f0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e01d      	b.n	8005a3a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10a      	bne.n	8005a1c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a06:	2300      	movs	r3, #0
 8005a08:	613b      	str	r3, [r7, #16]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	613b      	str	r3, [r7, #16]
 8005a1a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e000      	b.n	8005a3a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005a38:	2300      	movs	r3, #0
  }
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3728      	adds	r7, #40	@ 0x28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
	...

08005a44 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b088      	sub	sp, #32
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	099b      	lsrs	r3, r3, #6
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10f      	bne.n	8005a88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	099b      	lsrs	r3, r3, #6
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d004      	beq.n	8005a88 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	4798      	blx	r3
    return;
 8005a86:	e0d7      	b.n	8005c38 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	085b      	lsrs	r3, r3, #1
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00a      	beq.n	8005aaa <HAL_SPI_IRQHandler+0x66>
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	09db      	lsrs	r3, r3, #7
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d004      	beq.n	8005aaa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	4798      	blx	r3
    return;
 8005aa8:	e0c6      	b.n	8005c38 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	095b      	lsrs	r3, r3, #5
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10c      	bne.n	8005ad0 <HAL_SPI_IRQHandler+0x8c>
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	099b      	lsrs	r3, r3, #6
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	0a1b      	lsrs	r3, r3, #8
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 80b4 	beq.w	8005c38 <HAL_SPI_IRQHandler+0x1f4>
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	095b      	lsrs	r3, r3, #5
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 80ad 	beq.w	8005c38 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	099b      	lsrs	r3, r3, #6
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d023      	beq.n	8005b32 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d011      	beq.n	8005b1a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005afa:	f043 0204 	orr.w	r2, r3, #4
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b02:	2300      	movs	r3, #0
 8005b04:	617b      	str	r3, [r7, #20]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	e00b      	b.n	8005b32 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	613b      	str	r3, [r7, #16]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	613b      	str	r3, [r7, #16]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	693b      	ldr	r3, [r7, #16]
        return;
 8005b30:	e082      	b.n	8005c38 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	095b      	lsrs	r3, r3, #5
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d014      	beq.n	8005b68 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b42:	f043 0201 	orr.w	r2, r3, #1
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	0a1b      	lsrs	r3, r3, #8
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00c      	beq.n	8005b8e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b78:	f043 0208 	orr.w	r2, r3, #8
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005b80:	2300      	movs	r3, #0
 8005b82:	60bb      	str	r3, [r7, #8]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	60bb      	str	r3, [r7, #8]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d04f      	beq.n	8005c36 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ba4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d104      	bne.n	8005bc2 <HAL_SPI_IRQHandler+0x17e>
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d034      	beq.n	8005c2c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0203 	bic.w	r2, r2, #3
 8005bd0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d011      	beq.n	8005bfe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bde:	4a18      	ldr	r2, [pc, #96]	@ (8005c40 <HAL_SPI_IRQHandler+0x1fc>)
 8005be0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fb fbef 	bl	80013ca <HAL_DMA_Abort_IT>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d005      	beq.n	8005bfe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d016      	beq.n	8005c34 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c0a:	4a0d      	ldr	r2, [pc, #52]	@ (8005c40 <HAL_SPI_IRQHandler+0x1fc>)
 8005c0c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fb fbd9 	bl	80013ca <HAL_DMA_Abort_IT>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00a      	beq.n	8005c34 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005c2a:	e003      	b.n	8005c34 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f809 	bl	8005c44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005c32:	e000      	b.n	8005c36 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005c34:	bf00      	nop
    return;
 8005c36:	bf00      	nop
  }
}
 8005c38:	3720      	adds	r7, #32
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	08005c59 	.word	0x08005c59

08005c44 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c64:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f7ff ffe6 	bl	8005c44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c78:	bf00      	nop
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c90:	f7fb fa5a 	bl	8001148 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c98:	1a9b      	subs	r3, r3, r2
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ca0:	f7fb fa52 	bl	8001148 <HAL_GetTick>
 8005ca4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ca6:	4b39      	ldr	r3, [pc, #228]	@ (8005d8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	015b      	lsls	r3, r3, #5
 8005cac:	0d1b      	lsrs	r3, r3, #20
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	fb02 f303 	mul.w	r3, r2, r3
 8005cb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cb6:	e055      	b.n	8005d64 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbe:	d051      	beq.n	8005d64 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cc0:	f7fb fa42 	bl	8001148 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d902      	bls.n	8005cd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d13d      	bne.n	8005d52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ce4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cee:	d111      	bne.n	8005d14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cf8:	d004      	beq.n	8005d04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d02:	d107      	bne.n	8005d14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d1c:	d10f      	bne.n	8005d3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e018      	b.n	8005d84 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d102      	bne.n	8005d5e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	61fb      	str	r3, [r7, #28]
 8005d5c:	e002      	b.n	8005d64 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	3b01      	subs	r3, #1
 8005d62:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	bf0c      	ite	eq
 8005d74:	2301      	moveq	r3, #1
 8005d76:	2300      	movne	r3, #0
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	79fb      	ldrb	r3, [r7, #7]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d19a      	bne.n	8005cb8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3720      	adds	r7, #32
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	20000000 	.word	0x20000000

08005d90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005da4:	d111      	bne.n	8005dca <SPI_EndRxTransaction+0x3a>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dae:	d004      	beq.n	8005dba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005db8:	d107      	bne.n	8005dca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dc8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dd2:	d12a      	bne.n	8005e2a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ddc:	d012      	beq.n	8005e04 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2200      	movs	r2, #0
 8005de6:	2180      	movs	r1, #128	@ 0x80
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f7ff ff49 	bl	8005c80 <SPI_WaitFlagStateUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d02d      	beq.n	8005e50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df8:	f043 0220 	orr.w	r2, r3, #32
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e026      	b.n	8005e52 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f7ff ff36 	bl	8005c80 <SPI_WaitFlagStateUntilTimeout>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d01a      	beq.n	8005e50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e1e:	f043 0220 	orr.w	r2, r3, #32
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e013      	b.n	8005e52 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2200      	movs	r2, #0
 8005e32:	2101      	movs	r1, #1
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f7ff ff23 	bl	8005c80 <SPI_WaitFlagStateUntilTimeout>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d007      	beq.n	8005e50 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e44:	f043 0220 	orr.w	r2, r3, #32
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e000      	b.n	8005e52 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af02      	add	r7, sp, #8
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	2102      	movs	r1, #2
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f7ff ff04 	bl	8005c80 <SPI_WaitFlagStateUntilTimeout>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d007      	beq.n	8005e8e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e82:	f043 0220 	orr.w	r2, r3, #32
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e032      	b.n	8005ef4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8005efc <SPI_EndRxTxTransaction+0xa0>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1b      	ldr	r2, [pc, #108]	@ (8005f00 <SPI_EndRxTxTransaction+0xa4>)
 8005e94:	fba2 2303 	umull	r2, r3, r2, r3
 8005e98:	0d5b      	lsrs	r3, r3, #21
 8005e9a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ea2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005eac:	d112      	bne.n	8005ed4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	2180      	movs	r1, #128	@ 0x80
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f7ff fee1 	bl	8005c80 <SPI_WaitFlagStateUntilTimeout>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d016      	beq.n	8005ef2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec8:	f043 0220 	orr.w	r2, r3, #32
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e00f      	b.n	8005ef4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	3b01      	subs	r3, #1
 8005ede:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eea:	2b80      	cmp	r3, #128	@ 0x80
 8005eec:	d0f2      	beq.n	8005ed4 <SPI_EndRxTxTransaction+0x78>
 8005eee:	e000      	b.n	8005ef2 <SPI_EndRxTxTransaction+0x96>
        break;
 8005ef0:	bf00      	nop
  }

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	20000000 	.word	0x20000000
 8005f00:	165e9f81 	.word	0x165e9f81

08005f04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f04:	b084      	sub	sp, #16
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	f107 001c 	add.w	r0, r7, #28
 8005f12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f16:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d123      	bne.n	8005f66 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f22:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005f32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d105      	bne.n	8005f5a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f9dc 	bl	8006318 <USB_CoreReset>
 8005f60:	4603      	mov	r3, r0
 8005f62:	73fb      	strb	r3, [r7, #15]
 8005f64:	e01b      	b.n	8005f9e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f9d0 	bl	8006318 <USB_CoreReset>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f7c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d106      	bne.n	8005f92 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f88:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f90:	e005      	b.n	8005f9e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f9e:	7fbb      	ldrb	r3, [r7, #30]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d10b      	bne.n	8005fbc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f043 0206 	orr.w	r2, r3, #6
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f043 0220 	orr.w	r2, r3, #32
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fc8:	b004      	add	sp, #16
 8005fca:	4770      	bx	lr

08005fcc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f043 0201 	orr.w	r2, r3, #1
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f023 0201 	bic.w	r2, r3, #1
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800602c:	78fb      	ldrb	r3, [r7, #3]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d115      	bne.n	800605e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800603e:	200a      	movs	r0, #10
 8006040:	f7fb f88e 	bl	8001160 <HAL_Delay>
      ms += 10U;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	330a      	adds	r3, #10
 8006048:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f956 	bl	80062fc <USB_GetMode>
 8006050:	4603      	mov	r3, r0
 8006052:	2b01      	cmp	r3, #1
 8006054:	d01e      	beq.n	8006094 <USB_SetCurrentMode+0x84>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2bc7      	cmp	r3, #199	@ 0xc7
 800605a:	d9f0      	bls.n	800603e <USB_SetCurrentMode+0x2e>
 800605c:	e01a      	b.n	8006094 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800605e:	78fb      	ldrb	r3, [r7, #3]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d115      	bne.n	8006090 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006070:	200a      	movs	r0, #10
 8006072:	f7fb f875 	bl	8001160 <HAL_Delay>
      ms += 10U;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	330a      	adds	r3, #10
 800607a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f93d 	bl	80062fc <USB_GetMode>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d005      	beq.n	8006094 <USB_SetCurrentMode+0x84>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2bc7      	cmp	r3, #199	@ 0xc7
 800608c:	d9f0      	bls.n	8006070 <USB_SetCurrentMode+0x60>
 800608e:	e001      	b.n	8006094 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e005      	b.n	80060a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2bc8      	cmp	r3, #200	@ 0xc8
 8006098:	d101      	bne.n	800609e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e000      	b.n	80060a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	3301      	adds	r3, #1
 80060ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060c2:	d901      	bls.n	80060c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e01b      	b.n	8006100 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	daf2      	bge.n	80060b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	019b      	lsls	r3, r3, #6
 80060d8:	f043 0220 	orr.w	r2, r3, #32
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3301      	adds	r3, #1
 80060e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060ec:	d901      	bls.n	80060f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e006      	b.n	8006100 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f003 0320 	and.w	r3, r3, #32
 80060fa:	2b20      	cmp	r3, #32
 80060fc:	d0f0      	beq.n	80060e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3301      	adds	r3, #1
 800611c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006124:	d901      	bls.n	800612a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e018      	b.n	800615c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	2b00      	cmp	r3, #0
 8006130:	daf2      	bge.n	8006118 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2210      	movs	r2, #16
 800613a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	3301      	adds	r3, #1
 8006140:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006148:	d901      	bls.n	800614e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e006      	b.n	800615c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f003 0310 	and.w	r3, r3, #16
 8006156:	2b10      	cmp	r3, #16
 8006158:	d0f0      	beq.n	800613c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006168:	b480      	push	{r7}
 800616a:	b089      	sub	sp, #36	@ 0x24
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	4611      	mov	r1, r2
 8006174:	461a      	mov	r2, r3
 8006176:	460b      	mov	r3, r1
 8006178:	71fb      	strb	r3, [r7, #7]
 800617a:	4613      	mov	r3, r2
 800617c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006186:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800618a:	2b00      	cmp	r3, #0
 800618c:	d123      	bne.n	80061d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800618e:	88bb      	ldrh	r3, [r7, #4]
 8006190:	3303      	adds	r3, #3
 8006192:	089b      	lsrs	r3, r3, #2
 8006194:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006196:	2300      	movs	r3, #0
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	e018      	b.n	80061ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800619c:	79fb      	ldrb	r3, [r7, #7]
 800619e:	031a      	lsls	r2, r3, #12
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061a8:	461a      	mov	r2, r3
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	3301      	adds	r3, #1
 80061b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	3301      	adds	r3, #1
 80061ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	3301      	adds	r3, #1
 80061c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	3301      	adds	r3, #1
 80061c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	3301      	adds	r3, #1
 80061cc:	61bb      	str	r3, [r7, #24]
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d3e2      	bcc.n	800619c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3724      	adds	r7, #36	@ 0x24
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b08b      	sub	sp, #44	@ 0x2c
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	4613      	mov	r3, r2
 80061f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80061fa:	88fb      	ldrh	r3, [r7, #6]
 80061fc:	089b      	lsrs	r3, r3, #2
 80061fe:	b29b      	uxth	r3, r3
 8006200:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006202:	88fb      	ldrh	r3, [r7, #6]
 8006204:	f003 0303 	and.w	r3, r3, #3
 8006208:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800620a:	2300      	movs	r3, #0
 800620c:	623b      	str	r3, [r7, #32]
 800620e:	e014      	b.n	800623a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621a:	601a      	str	r2, [r3, #0]
    pDest++;
 800621c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621e:	3301      	adds	r3, #1
 8006220:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	3301      	adds	r3, #1
 8006226:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622a:	3301      	adds	r3, #1
 800622c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	3301      	adds	r3, #1
 8006232:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	3301      	adds	r3, #1
 8006238:	623b      	str	r3, [r7, #32]
 800623a:	6a3a      	ldr	r2, [r7, #32]
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	429a      	cmp	r2, r3
 8006240:	d3e6      	bcc.n	8006210 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006242:	8bfb      	ldrh	r3, [r7, #30]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d01e      	beq.n	8006286 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006252:	461a      	mov	r2, r3
 8006254:	f107 0310 	add.w	r3, r7, #16
 8006258:	6812      	ldr	r2, [r2, #0]
 800625a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	b2db      	uxtb	r3, r3
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	fa22 f303 	lsr.w	r3, r2, r3
 8006268:	b2da      	uxtb	r2, r3
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	701a      	strb	r2, [r3, #0]
      i++;
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	3301      	adds	r3, #1
 8006272:	623b      	str	r3, [r7, #32]
      pDest++;
 8006274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006276:	3301      	adds	r3, #1
 8006278:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800627a:	8bfb      	ldrh	r3, [r7, #30]
 800627c:	3b01      	subs	r3, #1
 800627e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006280:	8bfb      	ldrh	r3, [r7, #30]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1ea      	bne.n	800625c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006288:	4618      	mov	r0, r3
 800628a:	372c      	adds	r7, #44	@ 0x2c
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4013      	ands	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062ac:	68fb      	ldr	r3, [r7, #12]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b085      	sub	sp, #20
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	460b      	mov	r3, r1
 80062c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80062ca:	78fb      	ldrb	r3, [r7, #3]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	4013      	ands	r3, r2
 80062ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062ee:	68bb      	ldr	r3, [r7, #8]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	f003 0301 	and.w	r3, r3, #1
}
 800630c:	4618      	mov	r0, r3
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3301      	adds	r3, #1
 8006328:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006330:	d901      	bls.n	8006336 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e022      	b.n	800637c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	daf2      	bge.n	8006324 <USB_CoreReset+0xc>

  count = 10U;
 800633e:	230a      	movs	r3, #10
 8006340:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006342:	e002      	b.n	800634a <USB_CoreReset+0x32>
  {
    count--;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3b01      	subs	r3, #1
 8006348:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1f9      	bne.n	8006344 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	f043 0201 	orr.w	r2, r3, #1
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	3301      	adds	r3, #1
 8006360:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006368:	d901      	bls.n	800636e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e006      	b.n	800637c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b01      	cmp	r3, #1
 8006378:	d0f0      	beq.n	800635c <USB_CoreReset+0x44>

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006388:	b084      	sub	sp, #16
 800638a:	b580      	push	{r7, lr}
 800638c:	b086      	sub	sp, #24
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006396:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80063a8:	461a      	mov	r2, r3
 80063aa:	2300      	movs	r3, #0
 80063ac:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063be:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d119      	bne.n	8006412 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80063de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d10a      	bne.n	80063fc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80063f4:	f043 0304 	orr.w	r3, r3, #4
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	e014      	b.n	8006426 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800640a:	f023 0304 	bic.w	r3, r3, #4
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	e009      	b.n	8006426 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006420:	f023 0304 	bic.w	r3, r3, #4
 8006424:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006426:	2110      	movs	r1, #16
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7ff fe3d 	bl	80060a8 <USB_FlushTxFifo>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7ff fe67 	bl	800610c <USB_FlushRxFifo>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006448:	2300      	movs	r3, #0
 800644a:	613b      	str	r3, [r7, #16]
 800644c:	e015      	b.n	800647a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4413      	add	r3, r2
 8006456:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800645a:	461a      	mov	r2, r3
 800645c:	f04f 33ff 	mov.w	r3, #4294967295
 8006460:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4413      	add	r3, r2
 800646a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800646e:	461a      	mov	r2, r3
 8006470:	2300      	movs	r3, #0
 8006472:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	3301      	adds	r3, #1
 8006478:	613b      	str	r3, [r7, #16]
 800647a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800647e:	461a      	mov	r2, r3
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	4293      	cmp	r3, r2
 8006484:	d3e3      	bcc.n	800644e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f04f 32ff 	mov.w	r2, #4294967295
 8006492:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a18      	ldr	r2, [pc, #96]	@ (80064f8 <USB_HostInit+0x170>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d10b      	bne.n	80064b4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064a2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a15      	ldr	r2, [pc, #84]	@ (80064fc <USB_HostInit+0x174>)
 80064a8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a14      	ldr	r2, [pc, #80]	@ (8006500 <USB_HostInit+0x178>)
 80064ae:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80064b2:	e009      	b.n	80064c8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2280      	movs	r2, #128	@ 0x80
 80064b8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a11      	ldr	r2, [pc, #68]	@ (8006504 <USB_HostInit+0x17c>)
 80064be:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a11      	ldr	r2, [pc, #68]	@ (8006508 <USB_HostInit+0x180>)
 80064c4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80064c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d105      	bne.n	80064dc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	f043 0210 	orr.w	r2, r3, #16
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699a      	ldr	r2, [r3, #24]
 80064e0:	4b0a      	ldr	r3, [pc, #40]	@ (800650c <USB_HostInit+0x184>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064f4:	b004      	add	sp, #16
 80064f6:	4770      	bx	lr
 80064f8:	40040000 	.word	0x40040000
 80064fc:	01000200 	.word	0x01000200
 8006500:	00e00300 	.word	0x00e00300
 8006504:	00600080 	.word	0x00600080
 8006508:	004000e0 	.word	0x004000e0
 800650c:	a3200008 	.word	0xa3200008

08006510 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	460b      	mov	r3, r1
 800651a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800652e:	f023 0303 	bic.w	r3, r3, #3
 8006532:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	68f9      	ldr	r1, [r7, #12]
 8006544:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006548:	4313      	orrs	r3, r2
 800654a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d107      	bne.n	8006562 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006558:	461a      	mov	r2, r3
 800655a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800655e:	6053      	str	r3, [r2, #4]
 8006560:	e00c      	b.n	800657c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006562:	78fb      	ldrb	r3, [r7, #3]
 8006564:	2b02      	cmp	r3, #2
 8006566:	d107      	bne.n	8006578 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800656e:	461a      	mov	r2, r3
 8006570:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006574:	6053      	str	r3, [r2, #4]
 8006576:	e001      	b.n	800657c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e000      	b.n	800657e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80065aa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80065b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065b8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80065ba:	2064      	movs	r0, #100	@ 0x64
 80065bc:	f7fa fdd0 	bl	8001160 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80065c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065cc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80065ce:	200a      	movs	r0, #10
 80065d0:	f7fa fdc6 	bl	8001160 <HAL_Delay>

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80065de:	b480      	push	{r7}
 80065e0:	b085      	sub	sp, #20
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	460b      	mov	r3, r1
 80065e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006602:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d109      	bne.n	8006622 <USB_DriveVbus+0x44>
 800660e:	78fb      	ldrb	r3, [r7, #3]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d106      	bne.n	8006622 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800661c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006620:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006628:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800662c:	d109      	bne.n	8006642 <USB_DriveVbus+0x64>
 800662e:	78fb      	ldrb	r3, [r7, #3]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d106      	bne.n	8006642 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800663c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006640:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	0c5b      	lsrs	r3, r3, #17
 800666e:	f003 0303 	and.w	r3, r3, #3
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800667e:	b480      	push	{r7}
 8006680:	b085      	sub	sp, #20
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	b29b      	uxth	r3, r3
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b088      	sub	sp, #32
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	4608      	mov	r0, r1
 80066aa:	4611      	mov	r1, r2
 80066ac:	461a      	mov	r2, r3
 80066ae:	4603      	mov	r3, r0
 80066b0:	70fb      	strb	r3, [r7, #3]
 80066b2:	460b      	mov	r3, r1
 80066b4:	70bb      	strb	r3, [r7, #2]
 80066b6:	4613      	mov	r3, r2
 80066b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80066c2:	78fb      	ldrb	r3, [r7, #3]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ce:	461a      	mov	r2, r3
 80066d0:	f04f 33ff 	mov.w	r3, #4294967295
 80066d4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80066d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80066da:	2b03      	cmp	r3, #3
 80066dc:	d87c      	bhi.n	80067d8 <USB_HC_Init+0x138>
 80066de:	a201      	add	r2, pc, #4	@ (adr r2, 80066e4 <USB_HC_Init+0x44>)
 80066e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e4:	080066f5 	.word	0x080066f5
 80066e8:	0800679b 	.word	0x0800679b
 80066ec:	080066f5 	.word	0x080066f5
 80066f0:	0800675d 	.word	0x0800675d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006700:	461a      	mov	r2, r3
 8006702:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006706:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006708:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800670c:	2b00      	cmp	r3, #0
 800670e:	da10      	bge.n	8006732 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	4413      	add	r3, r2
 8006718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	78fa      	ldrb	r2, [r7, #3]
 8006720:	0151      	lsls	r1, r2, #5
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	440a      	add	r2, r1
 8006726:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800672a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800672e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006730:	e055      	b.n	80067de <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a6f      	ldr	r2, [pc, #444]	@ (80068f4 <USB_HC_Init+0x254>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d151      	bne.n	80067de <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800673a:	78fb      	ldrb	r3, [r7, #3]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	4413      	add	r3, r2
 8006742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	78fa      	ldrb	r2, [r7, #3]
 800674a:	0151      	lsls	r1, r2, #5
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	440a      	add	r2, r1
 8006750:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006754:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006758:	60d3      	str	r3, [r2, #12]
      break;
 800675a:	e040      	b.n	80067de <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800675c:	78fb      	ldrb	r3, [r7, #3]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	4413      	add	r3, r2
 8006764:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006768:	461a      	mov	r2, r3
 800676a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800676e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006770:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006774:	2b00      	cmp	r3, #0
 8006776:	da34      	bge.n	80067e2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006778:	78fb      	ldrb	r3, [r7, #3]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	4413      	add	r3, r2
 8006780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	78fa      	ldrb	r2, [r7, #3]
 8006788:	0151      	lsls	r1, r2, #5
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	440a      	add	r2, r1
 800678e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006792:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006796:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006798:	e023      	b.n	80067e2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800679a:	78fb      	ldrb	r3, [r7, #3]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067a6:	461a      	mov	r2, r3
 80067a8:	f240 2325 	movw	r3, #549	@ 0x225
 80067ac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80067ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	da17      	bge.n	80067e6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80067b6:	78fb      	ldrb	r3, [r7, #3]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	78fa      	ldrb	r2, [r7, #3]
 80067c6:	0151      	lsls	r1, r2, #5
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	440a      	add	r2, r1
 80067cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067d0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80067d4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80067d6:	e006      	b.n	80067e6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	77fb      	strb	r3, [r7, #31]
      break;
 80067dc:	e004      	b.n	80067e8 <USB_HC_Init+0x148>
      break;
 80067de:	bf00      	nop
 80067e0:	e002      	b.n	80067e8 <USB_HC_Init+0x148>
      break;
 80067e2:	bf00      	nop
 80067e4:	e000      	b.n	80067e8 <USB_HC_Init+0x148>
      break;
 80067e6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80067e8:	78fb      	ldrb	r3, [r7, #3]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067f4:	461a      	mov	r2, r3
 80067f6:	2300      	movs	r3, #0
 80067f8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80067fa:	78fb      	ldrb	r3, [r7, #3]
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	4413      	add	r3, r2
 8006802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	78fa      	ldrb	r2, [r7, #3]
 800680a:	0151      	lsls	r1, r2, #5
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	440a      	add	r2, r1
 8006810:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006814:	f043 0302 	orr.w	r3, r3, #2
 8006818:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006820:	699a      	ldr	r2, [r3, #24]
 8006822:	78fb      	ldrb	r3, [r7, #3]
 8006824:	f003 030f 	and.w	r3, r3, #15
 8006828:	2101      	movs	r1, #1
 800682a:	fa01 f303 	lsl.w	r3, r1, r3
 800682e:	6939      	ldr	r1, [r7, #16]
 8006830:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006834:	4313      	orrs	r3, r2
 8006836:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006844:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006848:	2b00      	cmp	r3, #0
 800684a:	da03      	bge.n	8006854 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800684c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006850:	61bb      	str	r3, [r7, #24]
 8006852:	e001      	b.n	8006858 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff fef9 	bl	8006650 <USB_GetHostSpeed>
 800685e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006860:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006864:	2b02      	cmp	r3, #2
 8006866:	d106      	bne.n	8006876 <USB_HC_Init+0x1d6>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2b02      	cmp	r3, #2
 800686c:	d003      	beq.n	8006876 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800686e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	e001      	b.n	800687a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800687a:	787b      	ldrb	r3, [r7, #1]
 800687c:	059b      	lsls	r3, r3, #22
 800687e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006882:	78bb      	ldrb	r3, [r7, #2]
 8006884:	02db      	lsls	r3, r3, #11
 8006886:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800688a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800688c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006890:	049b      	lsls	r3, r3, #18
 8006892:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006896:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006898:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800689a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800689e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	431a      	orrs	r2, r3
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068a8:	78fa      	ldrb	r2, [r7, #3]
 80068aa:	0151      	lsls	r1, r2, #5
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	440a      	add	r2, r1
 80068b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80068b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068b8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80068ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d003      	beq.n	80068ca <USB_HC_Init+0x22a>
 80068c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d10f      	bne.n	80068ea <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	78fa      	ldrb	r2, [r7, #3]
 80068da:	0151      	lsls	r1, r2, #5
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	440a      	add	r2, r1
 80068e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80068e8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80068ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3720      	adds	r7, #32
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	40040000 	.word	0x40040000

080068f8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08c      	sub	sp, #48	@ 0x30
 80068fc:	af02      	add	r7, sp, #8
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	4613      	mov	r3, r2
 8006904:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	785b      	ldrb	r3, [r3, #1]
 800690e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006910:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006914:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4a5d      	ldr	r2, [pc, #372]	@ (8006a90 <USB_HC_StartXfer+0x198>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d12f      	bne.n	800697e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800691e:	79fb      	ldrb	r3, [r7, #7]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d11c      	bne.n	800695e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	7c9b      	ldrb	r3, [r3, #18]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <USB_HC_StartXfer+0x3c>
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	7c9b      	ldrb	r3, [r3, #18]
 8006930:	2b02      	cmp	r3, #2
 8006932:	d124      	bne.n	800697e <USB_HC_StartXfer+0x86>
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	799b      	ldrb	r3, [r3, #6]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d120      	bne.n	800697e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	4413      	add	r3, r2
 8006944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	69fa      	ldr	r2, [r7, #28]
 800694c:	0151      	lsls	r1, r2, #5
 800694e:	6a3a      	ldr	r2, [r7, #32]
 8006950:	440a      	add	r2, r1
 8006952:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800695a:	60d3      	str	r3, [r2, #12]
 800695c:	e00f      	b.n	800697e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	791b      	ldrb	r3, [r3, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10b      	bne.n	800697e <USB_HC_StartXfer+0x86>
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	795b      	ldrb	r3, [r3, #5]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d107      	bne.n	800697e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	785b      	ldrb	r3, [r3, #1]
 8006972:	4619      	mov	r1, r3
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 fb6b 	bl	8007050 <USB_DoPing>
        return HAL_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	e232      	b.n	8006de4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	799b      	ldrb	r3, [r3, #6]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d158      	bne.n	8006a38 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006986:	2301      	movs	r3, #1
 8006988:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	78db      	ldrb	r3, [r3, #3]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d007      	beq.n	80069a2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006992:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	8a92      	ldrh	r2, [r2, #20]
 8006998:	fb03 f202 	mul.w	r2, r3, r2
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	61da      	str	r2, [r3, #28]
 80069a0:	e07c      	b.n	8006a9c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	7c9b      	ldrb	r3, [r3, #18]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d130      	bne.n	8006a0c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	2bbc      	cmp	r3, #188	@ 0xbc
 80069b0:	d918      	bls.n	80069e4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	8a9b      	ldrh	r3, [r3, #20]
 80069b6:	461a      	mov	r2, r3
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	69da      	ldr	r2, [r3, #28]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d003      	beq.n	80069d4 <USB_HC_StartXfer+0xdc>
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d103      	bne.n	80069dc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2202      	movs	r2, #2
 80069d8:	60da      	str	r2, [r3, #12]
 80069da:	e05f      	b.n	8006a9c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	2201      	movs	r2, #1
 80069e0:	60da      	str	r2, [r3, #12]
 80069e2:	e05b      	b.n	8006a9c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	6a1a      	ldr	r2, [r3, #32]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d007      	beq.n	8006a04 <USB_HC_StartXfer+0x10c>
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d003      	beq.n	8006a04 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2204      	movs	r2, #4
 8006a00:	60da      	str	r2, [r3, #12]
 8006a02:	e04b      	b.n	8006a9c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2203      	movs	r2, #3
 8006a08:	60da      	str	r2, [r3, #12]
 8006a0a:	e047      	b.n	8006a9c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006a0c:	79fb      	ldrb	r3, [r7, #7]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d10d      	bne.n	8006a2e <USB_HC_StartXfer+0x136>
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	8a92      	ldrh	r2, [r2, #20]
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d907      	bls.n	8006a2e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	8a92      	ldrh	r2, [r2, #20]
 8006a24:	fb03 f202 	mul.w	r2, r3, r2
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	61da      	str	r2, [r3, #28]
 8006a2c:	e036      	b.n	8006a9c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6a1a      	ldr	r2, [r3, #32]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	61da      	str	r2, [r3, #28]
 8006a36:	e031      	b.n	8006a9c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d018      	beq.n	8006a72 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	8a92      	ldrh	r2, [r2, #20]
 8006a48:	4413      	add	r3, r2
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	8a92      	ldrh	r2, [r2, #20]
 8006a50:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a54:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006a56:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006a58:	8b7b      	ldrh	r3, [r7, #26]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d90b      	bls.n	8006a76 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006a5e:	8b7b      	ldrh	r3, [r7, #26]
 8006a60:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	8a92      	ldrh	r2, [r2, #20]
 8006a68:	fb03 f202 	mul.w	r2, r3, r2
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	61da      	str	r2, [r3, #28]
 8006a70:	e001      	b.n	8006a76 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006a72:	2301      	movs	r3, #1
 8006a74:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	78db      	ldrb	r3, [r3, #3]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00a      	beq.n	8006a94 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	8a92      	ldrh	r2, [r2, #20]
 8006a84:	fb03 f202 	mul.w	r2, r3, r2
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	61da      	str	r2, [r3, #28]
 8006a8c:	e006      	b.n	8006a9c <USB_HC_StartXfer+0x1a4>
 8006a8e:	bf00      	nop
 8006a90:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	6a1a      	ldr	r2, [r3, #32]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006aa4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006aa6:	04d9      	lsls	r1, r3, #19
 8006aa8:	4ba3      	ldr	r3, [pc, #652]	@ (8006d38 <USB_HC_StartXfer+0x440>)
 8006aaa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006aac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	7d9b      	ldrb	r3, [r3, #22]
 8006ab2:	075b      	lsls	r3, r3, #29
 8006ab4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ab8:	69f9      	ldr	r1, [r7, #28]
 8006aba:	0148      	lsls	r0, r1, #5
 8006abc:	6a39      	ldr	r1, [r7, #32]
 8006abe:	4401      	add	r1, r0
 8006ac0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ac4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ac6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006ac8:	79fb      	ldrb	r3, [r7, #7]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d009      	beq.n	8006ae2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	6999      	ldr	r1, [r3, #24]
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ade:	460a      	mov	r2, r1
 8006ae0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	bf0c      	ite	eq
 8006af2:	2301      	moveq	r3, #1
 8006af4:	2300      	movne	r3, #0
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	015a      	lsls	r2, r3, #5
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	69fa      	ldr	r2, [r7, #28]
 8006b0a:	0151      	lsls	r1, r2, #5
 8006b0c:	6a3a      	ldr	r2, [r7, #32]
 8006b0e:	440a      	add	r2, r1
 8006b10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006b18:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	7e7b      	ldrb	r3, [r7, #25]
 8006b2a:	075b      	lsls	r3, r3, #29
 8006b2c:	69f9      	ldr	r1, [r7, #28]
 8006b2e:	0148      	lsls	r0, r1, #5
 8006b30:	6a39      	ldr	r1, [r7, #32]
 8006b32:	4401      	add	r1, r0
 8006b34:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	799b      	ldrb	r3, [r3, #6]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	f040 80c3 	bne.w	8006ccc <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	7c5b      	ldrb	r3, [r3, #17]
 8006b4a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006b50:	4313      	orrs	r3, r2
 8006b52:	69fa      	ldr	r2, [r7, #28]
 8006b54:	0151      	lsls	r1, r2, #5
 8006b56:	6a3a      	ldr	r2, [r7, #32]
 8006b58:	440a      	add	r2, r1
 8006b5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006b5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006b62:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	69fa      	ldr	r2, [r7, #28]
 8006b74:	0151      	lsls	r1, r2, #5
 8006b76:	6a3a      	ldr	r2, [r7, #32]
 8006b78:	440a      	add	r2, r1
 8006b7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b7e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006b82:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	79db      	ldrb	r3, [r3, #7]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d123      	bne.n	8006bd4 <USB_HC_StartXfer+0x2dc>
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	78db      	ldrb	r3, [r3, #3]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d11f      	bne.n	8006bd4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	69fa      	ldr	r2, [r7, #28]
 8006ba4:	0151      	lsls	r1, r2, #5
 8006ba6:	6a3a      	ldr	r2, [r7, #32]
 8006ba8:	440a      	add	r2, r1
 8006baa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bb2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	69fa      	ldr	r2, [r7, #28]
 8006bc4:	0151      	lsls	r1, r2, #5
 8006bc6:	6a3a      	ldr	r2, [r7, #32]
 8006bc8:	440a      	add	r2, r1
 8006bca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bd2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	7c9b      	ldrb	r3, [r3, #18]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d003      	beq.n	8006be4 <USB_HC_StartXfer+0x2ec>
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	7c9b      	ldrb	r3, [r3, #18]
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d117      	bne.n	8006c14 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d113      	bne.n	8006c14 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	78db      	ldrb	r3, [r3, #3]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d10f      	bne.n	8006c14 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	69fa      	ldr	r2, [r7, #28]
 8006c04:	0151      	lsls	r1, r2, #5
 8006c06:	6a3a      	ldr	r2, [r7, #32]
 8006c08:	440a      	add	r2, r1
 8006c0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c12:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	7c9b      	ldrb	r3, [r3, #18]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d162      	bne.n	8006ce2 <USB_HC_StartXfer+0x3ea>
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	78db      	ldrb	r3, [r3, #3]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d15e      	bne.n	8006ce2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	d858      	bhi.n	8006ce0 <USB_HC_StartXfer+0x3e8>
 8006c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c34 <USB_HC_StartXfer+0x33c>)
 8006c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c34:	08006c45 	.word	0x08006c45
 8006c38:	08006c67 	.word	0x08006c67
 8006c3c:	08006c89 	.word	0x08006c89
 8006c40:	08006cab 	.word	0x08006cab
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	6a3b      	ldr	r3, [r7, #32]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	0151      	lsls	r1, r2, #5
 8006c56:	6a3a      	ldr	r2, [r7, #32]
 8006c58:	440a      	add	r2, r1
 8006c5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c62:	6053      	str	r3, [r2, #4]
          break;
 8006c64:	e03d      	b.n	8006ce2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	69fa      	ldr	r2, [r7, #28]
 8006c76:	0151      	lsls	r1, r2, #5
 8006c78:	6a3a      	ldr	r2, [r7, #32]
 8006c7a:	440a      	add	r2, r1
 8006c7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c80:	f043 030e 	orr.w	r3, r3, #14
 8006c84:	6053      	str	r3, [r2, #4]
          break;
 8006c86:	e02c      	b.n	8006ce2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	69fa      	ldr	r2, [r7, #28]
 8006c98:	0151      	lsls	r1, r2, #5
 8006c9a:	6a3a      	ldr	r2, [r7, #32]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ca2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ca6:	6053      	str	r3, [r2, #4]
          break;
 8006ca8:	e01b      	b.n	8006ce2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	69fa      	ldr	r2, [r7, #28]
 8006cba:	0151      	lsls	r1, r2, #5
 8006cbc:	6a3a      	ldr	r2, [r7, #32]
 8006cbe:	440a      	add	r2, r1
 8006cc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cc8:	6053      	str	r3, [r2, #4]
          break;
 8006cca:	e00a      	b.n	8006ce2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cd8:	461a      	mov	r2, r3
 8006cda:	2300      	movs	r3, #0
 8006cdc:	6053      	str	r3, [r2, #4]
 8006cde:	e000      	b.n	8006ce2 <USB_HC_StartXfer+0x3ea>
          break;
 8006ce0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006cf8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	78db      	ldrb	r3, [r3, #3]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d004      	beq.n	8006d0c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d08:	613b      	str	r3, [r7, #16]
 8006d0a:	e003      	b.n	8006d14 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d12:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d1a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d28:	461a      	mov	r2, r3
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006d2e:	79fb      	ldrb	r3, [r7, #7]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	e055      	b.n	8006de4 <USB_HC_StartXfer+0x4ec>
 8006d38:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	78db      	ldrb	r3, [r3, #3]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d14e      	bne.n	8006de2 <USB_HC_StartXfer+0x4ea>
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d04a      	beq.n	8006de2 <USB_HC_StartXfer+0x4ea>
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	79db      	ldrb	r3, [r3, #7]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d146      	bne.n	8006de2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	7c9b      	ldrb	r3, [r3, #18]
 8006d58:	2b03      	cmp	r3, #3
 8006d5a:	d831      	bhi.n	8006dc0 <USB_HC_StartXfer+0x4c8>
 8006d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d64 <USB_HC_StartXfer+0x46c>)
 8006d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d62:	bf00      	nop
 8006d64:	08006d75 	.word	0x08006d75
 8006d68:	08006d99 	.word	0x08006d99
 8006d6c:	08006d75 	.word	0x08006d75
 8006d70:	08006d99 	.word	0x08006d99
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	3303      	adds	r3, #3
 8006d7a:	089b      	lsrs	r3, r3, #2
 8006d7c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006d7e:	8afa      	ldrh	r2, [r7, #22]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d91c      	bls.n	8006dc4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	f043 0220 	orr.w	r2, r3, #32
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	619a      	str	r2, [r3, #24]
        }
        break;
 8006d96:	e015      	b.n	8006dc4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	3303      	adds	r3, #3
 8006d9e:	089b      	lsrs	r3, r3, #2
 8006da0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006da2:	8afa      	ldrh	r2, [r7, #22]
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d90a      	bls.n	8006dc8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	619a      	str	r2, [r3, #24]
        }
        break;
 8006dbe:	e003      	b.n	8006dc8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006dc0:	bf00      	nop
 8006dc2:	e002      	b.n	8006dca <USB_HC_StartXfer+0x4d2>
        break;
 8006dc4:	bf00      	nop
 8006dc6:	e000      	b.n	8006dca <USB_HC_StartXfer+0x4d2>
        break;
 8006dc8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	6999      	ldr	r1, [r3, #24]
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	785a      	ldrb	r2, [r3, #1]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	2000      	movs	r0, #0
 8006dda:	9000      	str	r0, [sp, #0]
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7ff f9c3 	bl	8006168 <USB_WritePacket>
  }

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3728      	adds	r7, #40	@ 0x28
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	b29b      	uxth	r3, r3
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b089      	sub	sp, #36	@ 0x24
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	460b      	mov	r3, r1
 8006e18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006e1e:	78fb      	ldrb	r3, [r7, #3]
 8006e20:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	0c9b      	lsrs	r3, r3, #18
 8006e36:	f003 0303 	and.w	r3, r3, #3
 8006e3a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	0fdb      	lsrs	r3, r3, #31
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	0fdb      	lsrs	r3, r3, #31
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f003 0320 	and.w	r3, r3, #32
 8006e70:	2b20      	cmp	r3, #32
 8006e72:	d10d      	bne.n	8006e90 <USB_HC_Halt+0x82>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10a      	bne.n	8006e90 <USB_HC_Halt+0x82>
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d005      	beq.n	8006e8c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d002      	beq.n	8006e8c <USB_HC_Halt+0x7e>
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	d101      	bne.n	8006e90 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	e0d8      	b.n	8007042 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d002      	beq.n	8006e9c <USB_HC_Halt+0x8e>
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d173      	bne.n	8006f84 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	69ba      	ldr	r2, [r7, #24]
 8006eac:	0151      	lsls	r1, r2, #5
 8006eae:	69fa      	ldr	r2, [r7, #28]
 8006eb0:	440a      	add	r2, r1
 8006eb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006eb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006eba:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f003 0320 	and.w	r3, r3, #32
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d14a      	bne.n	8006f5e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ecc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d133      	bne.n	8006f3c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	69ba      	ldr	r2, [r7, #24]
 8006ee4:	0151      	lsls	r1, r2, #5
 8006ee6:	69fa      	ldr	r2, [r7, #28]
 8006ee8:	440a      	add	r2, r1
 8006eea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006eee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006ef2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	0151      	lsls	r1, r2, #5
 8006f06:	69fa      	ldr	r2, [r7, #28]
 8006f08:	440a      	add	r2, r1
 8006f0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f12:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	3301      	adds	r3, #1
 8006f18:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f20:	d82e      	bhi.n	8006f80 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f38:	d0ec      	beq.n	8006f14 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f3a:	e081      	b.n	8007040 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	0151      	lsls	r1, r2, #5
 8006f4e:	69fa      	ldr	r2, [r7, #28]
 8006f50:	440a      	add	r2, r1
 8006f52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f5a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f5c:	e070      	b.n	8007040 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	0151      	lsls	r1, r2, #5
 8006f70:	69fa      	ldr	r2, [r7, #28]
 8006f72:	440a      	add	r2, r1
 8006f74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f7c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f7e:	e05f      	b.n	8007040 <USB_HC_Halt+0x232>
            break;
 8006f80:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f82:	e05d      	b.n	8007040 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	0151      	lsls	r1, r2, #5
 8006f96:	69fa      	ldr	r2, [r7, #28]
 8006f98:	440a      	add	r2, r1
 8006f9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fa2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d133      	bne.n	800701c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69ba      	ldr	r2, [r7, #24]
 8006fc4:	0151      	lsls	r1, r2, #5
 8006fc6:	69fa      	ldr	r2, [r7, #28]
 8006fc8:	440a      	add	r2, r1
 8006fca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006fd2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	0151      	lsls	r1, r2, #5
 8006fe6:	69fa      	ldr	r2, [r7, #28]
 8006fe8:	440a      	add	r2, r1
 8006fea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ff2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007000:	d81d      	bhi.n	800703e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	4413      	add	r3, r2
 800700a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007014:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007018:	d0ec      	beq.n	8006ff4 <USB_HC_Halt+0x1e6>
 800701a:	e011      	b.n	8007040 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	4413      	add	r3, r2
 8007024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	0151      	lsls	r1, r2, #5
 800702e:	69fa      	ldr	r2, [r7, #28]
 8007030:	440a      	add	r2, r1
 8007032:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007036:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800703a:	6013      	str	r3, [r2, #0]
 800703c:	e000      	b.n	8007040 <USB_HC_Halt+0x232>
          break;
 800703e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3724      	adds	r7, #36	@ 0x24
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
	...

08007050 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	460b      	mov	r3, r1
 800705a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007064:	2301      	movs	r3, #1
 8007066:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	04da      	lsls	r2, r3, #19
 800706c:	4b15      	ldr	r3, [pc, #84]	@ (80070c4 <USB_DoPing+0x74>)
 800706e:	4013      	ands	r3, r2
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	0151      	lsls	r1, r2, #5
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	440a      	add	r2, r1
 8007078:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800707c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007080:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	4413      	add	r3, r2
 800708a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007098:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070a0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070ae:	461a      	mov	r2, r3
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	1ff80000 	.word	0x1ff80000

080070c8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7fe ff86 	bl	8005fee <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80070e2:	2110      	movs	r1, #16
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7fe ffdf 	bl	80060a8 <USB_FlushTxFifo>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff f809 	bl	800610c <USB_FlushRxFifo>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007104:	2300      	movs	r3, #0
 8007106:	61bb      	str	r3, [r7, #24]
 8007108:	e01f      	b.n	800714a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	4413      	add	r3, r2
 8007112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007120:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007128:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007130:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	4413      	add	r3, r2
 800713a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800713e:	461a      	mov	r2, r3
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	3301      	adds	r3, #1
 8007148:	61bb      	str	r3, [r7, #24]
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	2b0f      	cmp	r3, #15
 800714e:	d9dc      	bls.n	800710a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007150:	2300      	movs	r3, #0
 8007152:	61bb      	str	r3, [r7, #24]
 8007154:	e034      	b.n	80071c0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	015a      	lsls	r2, r3, #5
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	4413      	add	r3, r2
 800715e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800716c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007174:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800717c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	015a      	lsls	r2, r3, #5
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	4413      	add	r3, r2
 8007186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800718a:	461a      	mov	r2, r3
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	3301      	adds	r3, #1
 8007194:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800719c:	d80c      	bhi.n	80071b8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071b4:	d0ec      	beq.n	8007190 <USB_StopHost+0xc8>
 80071b6:	e000      	b.n	80071ba <USB_StopHost+0xf2>
        break;
 80071b8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	3301      	adds	r3, #1
 80071be:	61bb      	str	r3, [r7, #24]
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	2b0f      	cmp	r3, #15
 80071c4:	d9c7      	bls.n	8007156 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071cc:	461a      	mov	r2, r3
 80071ce:	f04f 33ff 	mov.w	r3, #4294967295
 80071d2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f04f 32ff 	mov.w	r2, #4294967295
 80071da:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7fe fef5 	bl	8005fcc <USB_EnableGlobalInt>

  return ret;
 80071e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3720      	adds	r7, #32
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80071ec:	b590      	push	{r4, r7, lr}
 80071ee:	b089      	sub	sp, #36	@ 0x24
 80071f0:	af04      	add	r7, sp, #16
 80071f2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80071f4:	2301      	movs	r3, #1
 80071f6:	2202      	movs	r2, #2
 80071f8:	2102      	movs	r1, #2
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fc83 	bl	8007b06 <USBH_FindInterface>
 8007200:	4603      	mov	r3, r0
 8007202:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007204:	7bfb      	ldrb	r3, [r7, #15]
 8007206:	2bff      	cmp	r3, #255	@ 0xff
 8007208:	d002      	beq.n	8007210 <USBH_CDC_InterfaceInit+0x24>
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d901      	bls.n	8007214 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007210:	2302      	movs	r3, #2
 8007212:	e13d      	b.n	8007490 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007214:	7bfb      	ldrb	r3, [r7, #15]
 8007216:	4619      	mov	r1, r3
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fc58 	bl	8007ace <USBH_SelectInterface>
 800721e:	4603      	mov	r3, r0
 8007220:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007228:	2302      	movs	r3, #2
 800722a:	e131      	b.n	8007490 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007232:	2050      	movs	r0, #80	@ 0x50
 8007234:	f002 fb58 	bl	80098e8 <malloc>
 8007238:	4603      	mov	r3, r0
 800723a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007242:	69db      	ldr	r3, [r3, #28]
 8007244:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800724c:	2302      	movs	r3, #2
 800724e:	e11f      	b.n	8007490 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007250:	2250      	movs	r2, #80	@ 0x50
 8007252:	2100      	movs	r1, #0
 8007254:	68b8      	ldr	r0, [r7, #8]
 8007256:	f002 fc05 	bl	8009a64 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800725a:	7bfb      	ldrb	r3, [r7, #15]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	211a      	movs	r1, #26
 8007260:	fb01 f303 	mul.w	r3, r1, r3
 8007264:	4413      	add	r3, r2
 8007266:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	b25b      	sxtb	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	da15      	bge.n	800729e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007272:	7bfb      	ldrb	r3, [r7, #15]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	211a      	movs	r1, #26
 8007278:	fb01 f303 	mul.w	r3, r1, r3
 800727c:	4413      	add	r3, r2
 800727e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007282:	781a      	ldrb	r2, [r3, #0]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007288:	7bfb      	ldrb	r3, [r7, #15]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	211a      	movs	r1, #26
 800728e:	fb01 f303 	mul.w	r3, r1, r3
 8007292:	4413      	add	r3, r2
 8007294:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007298:	881a      	ldrh	r2, [r3, #0]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	785b      	ldrb	r3, [r3, #1]
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f001 ffc4 	bl	8009232 <USBH_AllocPipe>
 80072aa:	4603      	mov	r3, r0
 80072ac:	461a      	mov	r2, r3
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	7819      	ldrb	r1, [r3, #0]
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	7858      	ldrb	r0, [r3, #1]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	8952      	ldrh	r2, [r2, #10]
 80072ca:	9202      	str	r2, [sp, #8]
 80072cc:	2203      	movs	r2, #3
 80072ce:	9201      	str	r2, [sp, #4]
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	4623      	mov	r3, r4
 80072d4:	4602      	mov	r2, r0
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f001 ff7c 	bl	80091d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2200      	movs	r2, #0
 80072e2:	4619      	mov	r1, r3
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f002 fa79 	bl	80097dc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80072ea:	2300      	movs	r3, #0
 80072ec:	2200      	movs	r2, #0
 80072ee:	210a      	movs	r1, #10
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fc08 	bl	8007b06 <USBH_FindInterface>
 80072f6:	4603      	mov	r3, r0
 80072f8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
 80072fc:	2bff      	cmp	r3, #255	@ 0xff
 80072fe:	d002      	beq.n	8007306 <USBH_CDC_InterfaceInit+0x11a>
 8007300:	7bfb      	ldrb	r3, [r7, #15]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d901      	bls.n	800730a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007306:	2302      	movs	r3, #2
 8007308:	e0c2      	b.n	8007490 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800730a:	7bfb      	ldrb	r3, [r7, #15]
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	211a      	movs	r1, #26
 8007310:	fb01 f303 	mul.w	r3, r1, r3
 8007314:	4413      	add	r3, r2
 8007316:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	b25b      	sxtb	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	da16      	bge.n	8007350 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007322:	7bfb      	ldrb	r3, [r7, #15]
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	211a      	movs	r1, #26
 8007328:	fb01 f303 	mul.w	r3, r1, r3
 800732c:	4413      	add	r3, r2
 800732e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007332:	781a      	ldrb	r2, [r3, #0]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	211a      	movs	r1, #26
 800733e:	fb01 f303 	mul.w	r3, r1, r3
 8007342:	4413      	add	r3, r2
 8007344:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007348:	881a      	ldrh	r2, [r3, #0]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	835a      	strh	r2, [r3, #26]
 800734e:	e015      	b.n	800737c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007350:	7bfb      	ldrb	r3, [r7, #15]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	211a      	movs	r1, #26
 8007356:	fb01 f303 	mul.w	r3, r1, r3
 800735a:	4413      	add	r3, r2
 800735c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007360:	781a      	ldrb	r2, [r3, #0]
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007366:	7bfb      	ldrb	r3, [r7, #15]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	211a      	movs	r1, #26
 800736c:	fb01 f303 	mul.w	r3, r1, r3
 8007370:	4413      	add	r3, r2
 8007372:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007376:	881a      	ldrh	r2, [r3, #0]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800737c:	7bfb      	ldrb	r3, [r7, #15]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	211a      	movs	r1, #26
 8007382:	fb01 f303 	mul.w	r3, r1, r3
 8007386:	4413      	add	r3, r2
 8007388:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	b25b      	sxtb	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	da16      	bge.n	80073c2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007394:	7bfb      	ldrb	r3, [r7, #15]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	211a      	movs	r1, #26
 800739a:	fb01 f303 	mul.w	r3, r1, r3
 800739e:	4413      	add	r3, r2
 80073a0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80073a4:	781a      	ldrb	r2, [r3, #0]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	211a      	movs	r1, #26
 80073b0:	fb01 f303 	mul.w	r3, r1, r3
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80073ba:	881a      	ldrh	r2, [r3, #0]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	835a      	strh	r2, [r3, #26]
 80073c0:	e015      	b.n	80073ee <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80073c2:	7bfb      	ldrb	r3, [r7, #15]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	211a      	movs	r1, #26
 80073c8:	fb01 f303 	mul.w	r3, r1, r3
 80073cc:	4413      	add	r3, r2
 80073ce:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80073d2:	781a      	ldrb	r2, [r3, #0]
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	211a      	movs	r1, #26
 80073de:	fb01 f303 	mul.w	r3, r1, r3
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80073e8:	881a      	ldrh	r2, [r3, #0]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	7b9b      	ldrb	r3, [r3, #14]
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f001 ff1c 	bl	8009232 <USBH_AllocPipe>
 80073fa:	4603      	mov	r3, r0
 80073fc:	461a      	mov	r2, r3
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	7bdb      	ldrb	r3, [r3, #15]
 8007406:	4619      	mov	r1, r3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f001 ff12 	bl	8009232 <USBH_AllocPipe>
 800740e:	4603      	mov	r3, r0
 8007410:	461a      	mov	r2, r3
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	7b59      	ldrb	r1, [r3, #13]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	7b98      	ldrb	r0, [r3, #14]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	8b12      	ldrh	r2, [r2, #24]
 800742e:	9202      	str	r2, [sp, #8]
 8007430:	2202      	movs	r2, #2
 8007432:	9201      	str	r2, [sp, #4]
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	4623      	mov	r3, r4
 8007438:	4602      	mov	r2, r0
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f001 feca 	bl	80091d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	7b19      	ldrb	r1, [r3, #12]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	7bd8      	ldrb	r0, [r3, #15]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	8b52      	ldrh	r2, [r2, #26]
 8007458:	9202      	str	r2, [sp, #8]
 800745a:	2202      	movs	r2, #2
 800745c:	9201      	str	r2, [sp, #4]
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	4623      	mov	r3, r4
 8007462:	4602      	mov	r2, r0
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f001 feb5 	bl	80091d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	7b5b      	ldrb	r3, [r3, #13]
 8007476:	2200      	movs	r2, #0
 8007478:	4619      	mov	r1, r3
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f002 f9ae 	bl	80097dc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	7b1b      	ldrb	r3, [r3, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f002 f9a7 	bl	80097dc <USBH_LL_SetToggle>

  return USBH_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	bd90      	pop	{r4, r7, pc}

08007498 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00e      	beq.n	80074d0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f001 feaa 	bl	8009212 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f001 fed5 	bl	8009274 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	7b1b      	ldrb	r3, [r3, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00e      	beq.n	80074f6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	7b1b      	ldrb	r3, [r3, #12]
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f001 fe97 	bl	8009212 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	7b1b      	ldrb	r3, [r3, #12]
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f001 fec2 	bl	8009274 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	7b5b      	ldrb	r3, [r3, #13]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00e      	beq.n	800751c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	7b5b      	ldrb	r3, [r3, #13]
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f001 fe84 	bl	8009212 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	7b5b      	ldrb	r3, [r3, #13]
 800750e:	4619      	mov	r1, r3
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f001 feaf 	bl	8009274 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00b      	beq.n	8007540 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	4618      	mov	r0, r3
 8007532:	f002 f9e1 	bl	80098f8 <free>
    phost->pActiveClass->pData = 0U;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800753c:	2200      	movs	r2, #0
 800753e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	3340      	adds	r3, #64	@ 0x40
 8007560:	4619      	mov	r1, r3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f8b1 	bl	80076ca <GetLineCoding>
 8007568:	4603      	mov	r3, r0
 800756a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800756c:	7afb      	ldrb	r3, [r7, #11]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d105      	bne.n	800757e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007578:	2102      	movs	r1, #2
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800757e:	7afb      	ldrb	r3, [r7, #11]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007590:	2301      	movs	r3, #1
 8007592:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007594:	2300      	movs	r3, #0
 8007596:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80075a8:	2b04      	cmp	r3, #4
 80075aa:	d877      	bhi.n	800769c <USBH_CDC_Process+0x114>
 80075ac:	a201      	add	r2, pc, #4	@ (adr r2, 80075b4 <USBH_CDC_Process+0x2c>)
 80075ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b2:	bf00      	nop
 80075b4:	080075c9 	.word	0x080075c9
 80075b8:	080075cf 	.word	0x080075cf
 80075bc:	080075ff 	.word	0x080075ff
 80075c0:	08007673 	.word	0x08007673
 80075c4:	08007681 	.word	0x08007681
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	73fb      	strb	r3, [r7, #15]
      break;
 80075cc:	e06d      	b.n	80076aa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f897 	bl	8007708 <SetLineCoding>
 80075da:	4603      	mov	r3, r0
 80075dc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80075de:	7bbb      	ldrb	r3, [r7, #14]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d104      	bne.n	80075ee <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2202      	movs	r2, #2
 80075e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80075ec:	e058      	b.n	80076a0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80075ee:	7bbb      	ldrb	r3, [r7, #14]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d055      	beq.n	80076a0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2204      	movs	r2, #4
 80075f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80075fc:	e050      	b.n	80076a0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	3340      	adds	r3, #64	@ 0x40
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f860 	bl	80076ca <GetLineCoding>
 800760a:	4603      	mov	r3, r0
 800760c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d126      	bne.n	8007662 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007626:	791b      	ldrb	r3, [r3, #4]
 8007628:	429a      	cmp	r2, r3
 800762a:	d13b      	bne.n	80076a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007636:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007638:	429a      	cmp	r2, r3
 800763a:	d133      	bne.n	80076a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007646:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007648:	429a      	cmp	r2, r3
 800764a:	d12b      	bne.n	80076a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007654:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007656:	429a      	cmp	r2, r3
 8007658:	d124      	bne.n	80076a4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f958 	bl	8007910 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007660:	e020      	b.n	80076a4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007662:	7bbb      	ldrb	r3, [r7, #14]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d01d      	beq.n	80076a4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2204      	movs	r2, #4
 800766c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007670:	e018      	b.n	80076a4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f867 	bl	8007746 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f8da 	bl	8007832 <CDC_ProcessReception>
      break;
 800767e:	e014      	b.n	80076aa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007680:	2100      	movs	r1, #0
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f001 f81e 	bl	80086c4 <USBH_ClrFeature>
 8007688:	4603      	mov	r3, r0
 800768a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800768c:	7bbb      	ldrb	r3, [r7, #14]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10a      	bne.n	80076a8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800769a:	e005      	b.n	80076a8 <USBH_CDC_Process+0x120>

    default:
      break;
 800769c:	bf00      	nop
 800769e:	e004      	b.n	80076aa <USBH_CDC_Process+0x122>
      break;
 80076a0:	bf00      	nop
 80076a2:	e002      	b.n	80076aa <USBH_CDC_Process+0x122>
      break;
 80076a4:	bf00      	nop
 80076a6:	e000      	b.n	80076aa <USBH_CDC_Process+0x122>
      break;
 80076a8:	bf00      	nop

  }

  return status;
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b082      	sub	sp, #8
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	22a1      	movs	r2, #161	@ 0xa1
 80076d8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2221      	movs	r2, #33	@ 0x21
 80076de:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2207      	movs	r2, #7
 80076f0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2207      	movs	r2, #7
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 fb17 	bl	8008d2c <USBH_CtlReq>
 80076fe:	4603      	mov	r3, r0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2221      	movs	r2, #33	@ 0x21
 8007716:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2220      	movs	r2, #32
 800771c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2207      	movs	r2, #7
 800772e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2207      	movs	r2, #7
 8007734:	4619      	mov	r1, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f001 faf8 	bl	8008d2c <USBH_CtlReq>
 800773c:	4603      	mov	r3, r0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b086      	sub	sp, #24
 800774a:	af02      	add	r7, sp, #8
 800774c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007758:	2300      	movs	r3, #0
 800775a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007762:	2b01      	cmp	r3, #1
 8007764:	d002      	beq.n	800776c <CDC_ProcessTransmission+0x26>
 8007766:	2b02      	cmp	r3, #2
 8007768:	d023      	beq.n	80077b2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800776a:	e05e      	b.n	800782a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	8b12      	ldrh	r2, [r2, #24]
 8007774:	4293      	cmp	r3, r2
 8007776:	d90b      	bls.n	8007790 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	69d9      	ldr	r1, [r3, #28]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	8b1a      	ldrh	r2, [r3, #24]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	7b5b      	ldrb	r3, [r3, #13]
 8007784:	2001      	movs	r0, #1
 8007786:	9000      	str	r0, [sp, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f001 fce0 	bl	800914e <USBH_BulkSendData>
 800778e:	e00b      	b.n	80077a8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007798:	b29a      	uxth	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	7b5b      	ldrb	r3, [r3, #13]
 800779e:	2001      	movs	r0, #1
 80077a0:	9000      	str	r0, [sp, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f001 fcd3 	bl	800914e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2202      	movs	r2, #2
 80077ac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80077b0:	e03b      	b.n	800782a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	7b5b      	ldrb	r3, [r3, #13]
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f001 ffe5 	bl	8009788 <USBH_LL_GetURBState>
 80077be:	4603      	mov	r3, r0
 80077c0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80077c2:	7afb      	ldrb	r3, [r7, #11]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d128      	bne.n	800781a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	8b12      	ldrh	r2, [r2, #24]
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d90e      	bls.n	80077f2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	8b12      	ldrh	r2, [r2, #24]
 80077dc:	1a9a      	subs	r2, r3, r2
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	8b12      	ldrh	r2, [r2, #24]
 80077ea:	441a      	add	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	61da      	str	r2, [r3, #28]
 80077f0:	e002      	b.n	80077f8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d004      	beq.n	800780a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007808:	e00e      	b.n	8007828 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f868 	bl	80078e8 <USBH_CDC_TransmitCallback>
      break;
 8007818:	e006      	b.n	8007828 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800781a:	7afb      	ldrb	r3, [r7, #11]
 800781c:	2b02      	cmp	r3, #2
 800781e:	d103      	bne.n	8007828 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007828:	bf00      	nop
  }
}
 800782a:	bf00      	nop
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b086      	sub	sp, #24
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007844:	2300      	movs	r3, #0
 8007846:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800784e:	2b03      	cmp	r3, #3
 8007850:	d002      	beq.n	8007858 <CDC_ProcessReception+0x26>
 8007852:	2b04      	cmp	r3, #4
 8007854:	d00e      	beq.n	8007874 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8007856:	e043      	b.n	80078e0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	6a19      	ldr	r1, [r3, #32]
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	8b5a      	ldrh	r2, [r3, #26]
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	7b1b      	ldrb	r3, [r3, #12]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f001 fc97 	bl	8009198 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2204      	movs	r2, #4
 800786e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007872:	e035      	b.n	80078e0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	7b1b      	ldrb	r3, [r3, #12]
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f001 ff84 	bl	8009788 <USBH_LL_GetURBState>
 8007880:	4603      	mov	r3, r0
 8007882:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007884:	7cfb      	ldrb	r3, [r7, #19]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d129      	bne.n	80078de <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	7b1b      	ldrb	r3, [r3, #12]
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 fef9 	bl	8009688 <USBH_LL_GetLastXferSize>
 8007896:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d016      	beq.n	80078d0 <CDC_ProcessReception+0x9e>
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	8b5b      	ldrh	r3, [r3, #26]
 80078a6:	461a      	mov	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d110      	bne.n	80078d0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	1ad2      	subs	r2, r2, r3
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	6a1a      	ldr	r2, [r3, #32]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	441a      	add	r2, r3
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2203      	movs	r2, #3
 80078ca:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80078ce:	e006      	b.n	80078de <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f80f 	bl	80078fc <USBH_CDC_ReceiveCallback>
      break;
 80078de:	bf00      	nop
  }
}
 80078e0:	bf00      	nop
 80078e2:	3718      	adds	r7, #24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007918:	bf00      	nop
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	4613      	mov	r3, r2
 8007930:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d101      	bne.n	800793c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007938:	2302      	movs	r3, #2
 800793a:	e029      	b.n	8007990 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	79fa      	ldrb	r2, [r7, #7]
 8007940:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 f81f 	bl	8007998 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d003      	beq.n	8007988 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f001 fdc9 	bl	8009520 <USBH_LL_Init>

  return USBH_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80079a0:	2300      	movs	r3, #0
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	e009      	b.n	80079ba <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	33e0      	adds	r3, #224	@ 0xe0
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	2200      	movs	r2, #0
 80079b2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	3301      	adds	r3, #1
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b0f      	cmp	r3, #15
 80079be:	d9f2      	bls.n	80079a6 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80079c0:	2300      	movs	r3, #0
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	e009      	b.n	80079da <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80079d0:	2200      	movs	r2, #0
 80079d2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	3301      	adds	r3, #1
 80079d8:	60fb      	str	r3, [r7, #12]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079e0:	d3f1      	bcc.n	80079c6 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2240      	movs	r2, #64	@ 0x40
 8007a06:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	331c      	adds	r3, #28
 8007a32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a36:	2100      	movs	r1, #0
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f002 f813 	bl	8009a64 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a48:	2100      	movs	r1, #0
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f002 f80a 	bl	8009a64 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007a56:	2212      	movs	r2, #18
 8007a58:	2100      	movs	r1, #0
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f002 f802 	bl	8009a64 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007a66:	223e      	movs	r2, #62	@ 0x3e
 8007a68:	2100      	movs	r1, #0
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f001 fffa 	bl	8009a64 <memset>

  return USBH_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b085      	sub	sp, #20
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d016      	beq.n	8007abc <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10e      	bne.n	8007ab6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007a9e:	1c59      	adds	r1, r3, #1
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	33de      	adds	r3, #222	@ 0xde
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	73fb      	strb	r3, [r7, #15]
 8007ab4:	e004      	b.n	8007ac0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	73fb      	strb	r3, [r7, #15]
 8007aba:	e001      	b.n	8007ac0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007abc:	2302      	movs	r3, #2
 8007abe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b085      	sub	sp, #20
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007ae4:	78fa      	ldrb	r2, [r7, #3]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d204      	bcs.n	8007af4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	78fa      	ldrb	r2, [r7, #3]
 8007aee:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007af2:	e001      	b.n	8007af8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007af4:	2302      	movs	r3, #2
 8007af6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b087      	sub	sp, #28
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	4608      	mov	r0, r1
 8007b10:	4611      	mov	r1, r2
 8007b12:	461a      	mov	r2, r3
 8007b14:	4603      	mov	r3, r0
 8007b16:	70fb      	strb	r3, [r7, #3]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	70bb      	strb	r3, [r7, #2]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007b24:	2300      	movs	r3, #0
 8007b26:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007b2e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007b30:	e025      	b.n	8007b7e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007b32:	7dfb      	ldrb	r3, [r7, #23]
 8007b34:	221a      	movs	r2, #26
 8007b36:	fb02 f303 	mul.w	r3, r2, r3
 8007b3a:	3308      	adds	r3, #8
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	4413      	add	r3, r2
 8007b40:	3302      	adds	r3, #2
 8007b42:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	795b      	ldrb	r3, [r3, #5]
 8007b48:	78fa      	ldrb	r2, [r7, #3]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d002      	beq.n	8007b54 <USBH_FindInterface+0x4e>
 8007b4e:	78fb      	ldrb	r3, [r7, #3]
 8007b50:	2bff      	cmp	r3, #255	@ 0xff
 8007b52:	d111      	bne.n	8007b78 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007b58:	78ba      	ldrb	r2, [r7, #2]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d002      	beq.n	8007b64 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b5e:	78bb      	ldrb	r3, [r7, #2]
 8007b60:	2bff      	cmp	r3, #255	@ 0xff
 8007b62:	d109      	bne.n	8007b78 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b68:	787a      	ldrb	r2, [r7, #1]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d002      	beq.n	8007b74 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007b6e:	787b      	ldrb	r3, [r7, #1]
 8007b70:	2bff      	cmp	r3, #255	@ 0xff
 8007b72:	d101      	bne.n	8007b78 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
 8007b76:	e006      	b.n	8007b86 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007b78:	7dfb      	ldrb	r3, [r7, #23]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d9d6      	bls.n	8007b32 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007b84:	23ff      	movs	r3, #255	@ 0xff
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	371c      	adds	r7, #28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b082      	sub	sp, #8
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f001 fcfc 	bl	8009598 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f001 fe03 	bl	80097ae <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af04      	add	r7, sp, #16
 8007bba:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d102      	bne.n	8007bd6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2203      	movs	r2, #3
 8007bd4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b0b      	cmp	r3, #11
 8007bde:	f200 81bc 	bhi.w	8007f5a <USBH_Process+0x3a6>
 8007be2:	a201      	add	r2, pc, #4	@ (adr r2, 8007be8 <USBH_Process+0x34>)
 8007be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be8:	08007c19 	.word	0x08007c19
 8007bec:	08007c4b 	.word	0x08007c4b
 8007bf0:	08007cb5 	.word	0x08007cb5
 8007bf4:	08007ef5 	.word	0x08007ef5
 8007bf8:	08007f5b 	.word	0x08007f5b
 8007bfc:	08007d55 	.word	0x08007d55
 8007c00:	08007e9b 	.word	0x08007e9b
 8007c04:	08007d8b 	.word	0x08007d8b
 8007c08:	08007dab 	.word	0x08007dab
 8007c0c:	08007dc9 	.word	0x08007dc9
 8007c10:	08007e0d 	.word	0x08007e0d
 8007c14:	08007edd 	.word	0x08007edd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 819c 	beq.w	8007f5e <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007c2c:	20c8      	movs	r0, #200	@ 0xc8
 8007c2e:	f001 fe08 	bl	8009842 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 fd0d 	bl	8009652 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007c48:	e189      	b.n	8007f5e <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d107      	bne.n	8007c66 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2202      	movs	r2, #2
 8007c62:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007c64:	e18a      	b.n	8007f7c <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007c6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c70:	d914      	bls.n	8007c9c <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007c78:	3301      	adds	r3, #1
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d903      	bls.n	8007c94 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	220d      	movs	r2, #13
 8007c90:	701a      	strb	r2, [r3, #0]
      break;
 8007c92:	e173      	b.n	8007f7c <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	701a      	strb	r2, [r3, #0]
      break;
 8007c9a:	e16f      	b.n	8007f7c <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007ca2:	f103 020a 	add.w	r2, r3, #10
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007cac:	200a      	movs	r0, #10
 8007cae:	f001 fdc8 	bl	8009842 <USBH_Delay>
      break;
 8007cb2:	e163      	b.n	8007f7c <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d005      	beq.n	8007cca <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007cc4:	2104      	movs	r1, #4
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007cca:	2064      	movs	r0, #100	@ 0x64
 8007ccc:	f001 fdb9 	bl	8009842 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f001 fc97 	bl	8009604 <USBH_LL_GetSpeed>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	461a      	mov	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2205      	movs	r2, #5
 8007ce4:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f001 faa2 	bl	8009232 <USBH_AllocPipe>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007cf6:	2180      	movs	r1, #128	@ 0x80
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f001 fa9a 	bl	8009232 <USBH_AllocPipe>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	461a      	mov	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	7919      	ldrb	r1, [r3, #4]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007d1a:	9202      	str	r2, [sp, #8]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	9201      	str	r2, [sp, #4]
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	4603      	mov	r3, r0
 8007d24:	2280      	movs	r2, #128	@ 0x80
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f001 fa54 	bl	80091d4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	7959      	ldrb	r1, [r3, #5]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007d40:	9202      	str	r2, [sp, #8]
 8007d42:	2200      	movs	r2, #0
 8007d44:	9201      	str	r2, [sp, #4]
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f001 fa41 	bl	80091d4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007d52:	e113      	b.n	8007f7c <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f917 	bl	8007f88 <USBH_HandleEnum>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007d5e:	7bbb      	ldrb	r3, [r7, #14]
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f040 80fd 	bne.w	8007f62 <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d103      	bne.n	8007d82 <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2208      	movs	r2, #8
 8007d7e:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007d80:	e0ef      	b.n	8007f62 <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2207      	movs	r2, #7
 8007d86:	701a      	strb	r2, [r3, #0]
      break;
 8007d88:	e0eb      	b.n	8007f62 <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f000 80e8 	beq.w	8007f66 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2208      	movs	r2, #8
 8007da6:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8007da8:	e0dd      	b.n	8007f66 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007db0:	4619      	mov	r1, r3
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fc3f 	bl	8008636 <USBH_SetCfg>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f040 80d5 	bne.w	8007f6a <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2209      	movs	r2, #9
 8007dc4:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007dc6:	e0d0      	b.n	8007f6a <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007dce:	f003 0320 	and.w	r3, r3, #32
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d016      	beq.n	8007e04 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fc4f 	bl	800867c <USBH_SetFeature>
 8007dde:	4603      	mov	r3, r0
 8007de0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007de2:	7bbb      	ldrb	r3, [r7, #14]
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d103      	bne.n	8007df2 <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	220a      	movs	r2, #10
 8007dee:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007df0:	e0bd      	b.n	8007f6e <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b03      	cmp	r3, #3
 8007df8:	f040 80b9 	bne.w	8007f6e <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	220a      	movs	r2, #10
 8007e00:	701a      	strb	r2, [r3, #0]
      break;
 8007e02:	e0b4      	b.n	8007f6e <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	220a      	movs	r2, #10
 8007e08:	701a      	strb	r2, [r3, #0]
      break;
 8007e0a:	e0b0      	b.n	8007f6e <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 80ad 	beq.w	8007f72 <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007e20:	2300      	movs	r3, #0
 8007e22:	73fb      	strb	r3, [r7, #15]
 8007e24:	e016      	b.n	8007e54 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007e26:	7bfa      	ldrb	r2, [r7, #15]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	32de      	adds	r2, #222	@ 0xde
 8007e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e30:	791a      	ldrb	r2, [r3, #4]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d108      	bne.n	8007e4e <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007e3c:	7bfa      	ldrb	r2, [r7, #15]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	32de      	adds	r2, #222	@ 0xde
 8007e42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007e4c:	e005      	b.n	8007e5a <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
 8007e50:	3301      	adds	r3, #1
 8007e52:	73fb      	strb	r3, [r7, #15]
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d0e5      	beq.n	8007e26 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d016      	beq.n	8007e92 <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	4798      	blx	r3
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d109      	bne.n	8007e8a <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2206      	movs	r2, #6
 8007e7a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e82:	2103      	movs	r1, #3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007e88:	e073      	b.n	8007f72 <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	220d      	movs	r2, #13
 8007e8e:	701a      	strb	r2, [r3, #0]
      break;
 8007e90:	e06f      	b.n	8007f72 <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	220d      	movs	r2, #13
 8007e96:	701a      	strb	r2, [r3, #0]
      break;
 8007e98:	e06b      	b.n	8007f72 <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d017      	beq.n	8007ed4 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	4798      	blx	r3
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d103      	bne.n	8007ec4 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	220b      	movs	r2, #11
 8007ec0:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007ec2:	e058      	b.n	8007f76 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8007ec4:	7bbb      	ldrb	r3, [r7, #14]
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d154      	bne.n	8007f76 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	220d      	movs	r2, #13
 8007ed0:	701a      	strb	r2, [r3, #0]
      break;
 8007ed2:	e050      	b.n	8007f76 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	220d      	movs	r2, #13
 8007ed8:	701a      	strb	r2, [r3, #0]
      break;
 8007eda:	e04c      	b.n	8007f76 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d049      	beq.n	8007f7a <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	4798      	blx	r3
      }
      break;
 8007ef2:	e042      	b.n	8007f7a <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f7ff fd4b 	bl	8007998 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d009      	beq.n	8007f20 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d005      	beq.n	8007f36 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f30:	2105      	movs	r1, #5
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d107      	bne.n	8007f52 <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7ff fe21 	bl	8007b92 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007f50:	e014      	b.n	8007f7c <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f001 fb20 	bl	8009598 <USBH_LL_Start>
      break;
 8007f58:	e010      	b.n	8007f7c <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8007f5a:	bf00      	nop
 8007f5c:	e00e      	b.n	8007f7c <USBH_Process+0x3c8>
      break;
 8007f5e:	bf00      	nop
 8007f60:	e00c      	b.n	8007f7c <USBH_Process+0x3c8>
      break;
 8007f62:	bf00      	nop
 8007f64:	e00a      	b.n	8007f7c <USBH_Process+0x3c8>
    break;
 8007f66:	bf00      	nop
 8007f68:	e008      	b.n	8007f7c <USBH_Process+0x3c8>
      break;
 8007f6a:	bf00      	nop
 8007f6c:	e006      	b.n	8007f7c <USBH_Process+0x3c8>
      break;
 8007f6e:	bf00      	nop
 8007f70:	e004      	b.n	8007f7c <USBH_Process+0x3c8>
      break;
 8007f72:	bf00      	nop
 8007f74:	e002      	b.n	8007f7c <USBH_Process+0x3c8>
      break;
 8007f76:	bf00      	nop
 8007f78:	e000      	b.n	8007f7c <USBH_Process+0x3c8>
      break;
 8007f7a:	bf00      	nop
  }
  return USBH_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop

08007f88 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b088      	sub	sp, #32
 8007f8c:	af04      	add	r7, sp, #16
 8007f8e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007f90:	2301      	movs	r3, #1
 8007f92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007f94:	2301      	movs	r3, #1
 8007f96:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	785b      	ldrb	r3, [r3, #1]
 8007f9c:	2b07      	cmp	r3, #7
 8007f9e:	f200 81bd 	bhi.w	800831c <USBH_HandleEnum+0x394>
 8007fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa8 <USBH_HandleEnum+0x20>)
 8007fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa8:	08007fc9 	.word	0x08007fc9
 8007fac:	08008083 	.word	0x08008083
 8007fb0:	080080ed 	.word	0x080080ed
 8007fb4:	08008177 	.word	0x08008177
 8007fb8:	080081e1 	.word	0x080081e1
 8007fbc:	08008251 	.word	0x08008251
 8007fc0:	08008297 	.word	0x08008297
 8007fc4:	080082dd 	.word	0x080082dd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007fc8:	2108      	movs	r1, #8
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fa50 	bl	8008470 <USBH_Get_DevDesc>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d12e      	bne.n	8008038 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	7919      	ldrb	r1, [r3, #4]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007ffe:	9202      	str	r2, [sp, #8]
 8008000:	2200      	movs	r2, #0
 8008002:	9201      	str	r2, [sp, #4]
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	4603      	mov	r3, r0
 8008008:	2280      	movs	r2, #128	@ 0x80
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f001 f8e2 	bl	80091d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	7959      	ldrb	r1, [r3, #5]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008024:	9202      	str	r2, [sp, #8]
 8008026:	2200      	movs	r2, #0
 8008028:	9201      	str	r2, [sp, #4]
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	4603      	mov	r3, r0
 800802e:	2200      	movs	r2, #0
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f001 f8cf 	bl	80091d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008036:	e173      	b.n	8008320 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008038:	7bbb      	ldrb	r3, [r7, #14]
 800803a:	2b03      	cmp	r3, #3
 800803c:	f040 8170 	bne.w	8008320 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008046:	3301      	adds	r3, #1
 8008048:	b2da      	uxtb	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008056:	2b03      	cmp	r3, #3
 8008058:	d903      	bls.n	8008062 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	220d      	movs	r2, #13
 800805e:	701a      	strb	r2, [r3, #0]
      break;
 8008060:	e15e      	b.n	8008320 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	795b      	ldrb	r3, [r3, #5]
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 f903 	bl	8009274 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	791b      	ldrb	r3, [r3, #4]
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f001 f8fd 	bl	8009274 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	701a      	strb	r2, [r3, #0]
      break;
 8008080:	e14e      	b.n	8008320 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008082:	2112      	movs	r1, #18
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f9f3 	bl	8008470 <USBH_Get_DevDesc>
 800808a:	4603      	mov	r3, r0
 800808c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d103      	bne.n	800809c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2202      	movs	r2, #2
 8008098:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800809a:	e143      	b.n	8008324 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800809c:	7bbb      	ldrb	r3, [r7, #14]
 800809e:	2b03      	cmp	r3, #3
 80080a0:	f040 8140 	bne.w	8008324 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80080aa:	3301      	adds	r3, #1
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	d903      	bls.n	80080c6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	220d      	movs	r2, #13
 80080c2:	701a      	strb	r2, [r3, #0]
      break;
 80080c4:	e12e      	b.n	8008324 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	795b      	ldrb	r3, [r3, #5]
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f001 f8d1 	bl	8009274 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	791b      	ldrb	r3, [r3, #4]
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f001 f8cb 	bl	8009274 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	701a      	strb	r2, [r3, #0]
      break;
 80080ea:	e11b      	b.n	8008324 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80080ec:	2101      	movs	r1, #1
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fa7d 	bl	80085ee <USBH_SetAddress>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d130      	bne.n	8008160 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80080fe:	2002      	movs	r0, #2
 8008100:	f001 fb9f 	bl	8009842 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2203      	movs	r2, #3
 8008110:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	7919      	ldrb	r1, [r3, #4]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008126:	9202      	str	r2, [sp, #8]
 8008128:	2200      	movs	r2, #0
 800812a:	9201      	str	r2, [sp, #4]
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	4603      	mov	r3, r0
 8008130:	2280      	movs	r2, #128	@ 0x80
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f001 f84e 	bl	80091d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	7959      	ldrb	r1, [r3, #5]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800814c:	9202      	str	r2, [sp, #8]
 800814e:	2200      	movs	r2, #0
 8008150:	9201      	str	r2, [sp, #4]
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	4603      	mov	r3, r0
 8008156:	2200      	movs	r2, #0
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f001 f83b 	bl	80091d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800815e:	e0e3      	b.n	8008328 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	2b03      	cmp	r3, #3
 8008164:	f040 80e0 	bne.w	8008328 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	220d      	movs	r2, #13
 800816c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	705a      	strb	r2, [r3, #1]
      break;
 8008174:	e0d8      	b.n	8008328 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008176:	2109      	movs	r1, #9
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f9a5 	bl	80084c8 <USBH_Get_CfgDesc>
 800817e:	4603      	mov	r3, r0
 8008180:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008182:	7bbb      	ldrb	r3, [r7, #14]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d103      	bne.n	8008190 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2204      	movs	r2, #4
 800818c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800818e:	e0cd      	b.n	800832c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008190:	7bbb      	ldrb	r3, [r7, #14]
 8008192:	2b03      	cmp	r3, #3
 8008194:	f040 80ca 	bne.w	800832c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800819e:	3301      	adds	r3, #1
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80081ae:	2b03      	cmp	r3, #3
 80081b0:	d903      	bls.n	80081ba <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	220d      	movs	r2, #13
 80081b6:	701a      	strb	r2, [r3, #0]
      break;
 80081b8:	e0b8      	b.n	800832c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	795b      	ldrb	r3, [r3, #5]
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f001 f857 	bl	8009274 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	791b      	ldrb	r3, [r3, #4]
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f001 f851 	bl	8009274 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	701a      	strb	r2, [r3, #0]
      break;
 80081de:	e0a5      	b.n	800832c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f96d 	bl	80084c8 <USBH_Get_CfgDesc>
 80081ee:	4603      	mov	r3, r0
 80081f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081f2:	7bbb      	ldrb	r3, [r7, #14]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d103      	bne.n	8008200 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2205      	movs	r2, #5
 80081fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081fe:	e097      	b.n	8008330 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	2b03      	cmp	r3, #3
 8008204:	f040 8094 	bne.w	8008330 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800820e:	3301      	adds	r3, #1
 8008210:	b2da      	uxtb	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800821e:	2b03      	cmp	r3, #3
 8008220:	d903      	bls.n	800822a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	220d      	movs	r2, #13
 8008226:	701a      	strb	r2, [r3, #0]
      break;
 8008228:	e082      	b.n	8008330 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	795b      	ldrb	r3, [r3, #5]
 800822e:	4619      	mov	r1, r3
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f001 f81f 	bl	8009274 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	791b      	ldrb	r3, [r3, #4]
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f001 f819 	bl	8009274 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	701a      	strb	r2, [r3, #0]
      break;
 800824e:	e06f      	b.n	8008330 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008256:	2b00      	cmp	r3, #0
 8008258:	d019      	beq.n	800828e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008266:	23ff      	movs	r3, #255	@ 0xff
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f957 	bl	800851c <USBH_Get_StringDesc>
 800826e:	4603      	mov	r3, r0
 8008270:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008272:	7bbb      	ldrb	r3, [r7, #14]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d103      	bne.n	8008280 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2206      	movs	r2, #6
 800827c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800827e:	e059      	b.n	8008334 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008280:	7bbb      	ldrb	r3, [r7, #14]
 8008282:	2b03      	cmp	r3, #3
 8008284:	d156      	bne.n	8008334 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2206      	movs	r2, #6
 800828a:	705a      	strb	r2, [r3, #1]
      break;
 800828c:	e052      	b.n	8008334 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2206      	movs	r2, #6
 8008292:	705a      	strb	r2, [r3, #1]
      break;
 8008294:	e04e      	b.n	8008334 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800829c:	2b00      	cmp	r3, #0
 800829e:	d019      	beq.n	80082d4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80082ac:	23ff      	movs	r3, #255	@ 0xff
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f934 	bl	800851c <USBH_Get_StringDesc>
 80082b4:	4603      	mov	r3, r0
 80082b6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d103      	bne.n	80082c6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2207      	movs	r2, #7
 80082c2:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80082c4:	e038      	b.n	8008338 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082c6:	7bbb      	ldrb	r3, [r7, #14]
 80082c8:	2b03      	cmp	r3, #3
 80082ca:	d135      	bne.n	8008338 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2207      	movs	r2, #7
 80082d0:	705a      	strb	r2, [r3, #1]
      break;
 80082d2:	e031      	b.n	8008338 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2207      	movs	r2, #7
 80082d8:	705a      	strb	r2, [r3, #1]
      break;
 80082da:	e02d      	b.n	8008338 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d017      	beq.n	8008316 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80082f2:	23ff      	movs	r3, #255	@ 0xff
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f911 	bl	800851c <USBH_Get_StringDesc>
 80082fa:	4603      	mov	r3, r0
 80082fc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80082fe:	7bbb      	ldrb	r3, [r7, #14]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d102      	bne.n	800830a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008304:	2300      	movs	r3, #0
 8008306:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008308:	e018      	b.n	800833c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	2b03      	cmp	r3, #3
 800830e:	d115      	bne.n	800833c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	73fb      	strb	r3, [r7, #15]
      break;
 8008314:	e012      	b.n	800833c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	73fb      	strb	r3, [r7, #15]
      break;
 800831a:	e00f      	b.n	800833c <USBH_HandleEnum+0x3b4>

    default:
      break;
 800831c:	bf00      	nop
 800831e:	e00e      	b.n	800833e <USBH_HandleEnum+0x3b6>
      break;
 8008320:	bf00      	nop
 8008322:	e00c      	b.n	800833e <USBH_HandleEnum+0x3b6>
      break;
 8008324:	bf00      	nop
 8008326:	e00a      	b.n	800833e <USBH_HandleEnum+0x3b6>
      break;
 8008328:	bf00      	nop
 800832a:	e008      	b.n	800833e <USBH_HandleEnum+0x3b6>
      break;
 800832c:	bf00      	nop
 800832e:	e006      	b.n	800833e <USBH_HandleEnum+0x3b6>
      break;
 8008330:	bf00      	nop
 8008332:	e004      	b.n	800833e <USBH_HandleEnum+0x3b6>
      break;
 8008334:	bf00      	nop
 8008336:	e002      	b.n	800833e <USBH_HandleEnum+0x3b6>
      break;
 8008338:	bf00      	nop
 800833a:	e000      	b.n	800833e <USBH_HandleEnum+0x3b6>
      break;
 800833c:	bf00      	nop
  }
  return Status;
 800833e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800835a:	bf00      	nop
 800835c:	370c      	adds	r7, #12
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b082      	sub	sp, #8
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008374:	1c5a      	adds	r2, r3, #1
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f804 	bl	800838a <USBH_HandleSof>
}
 8008382:	bf00      	nop
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b082      	sub	sp, #8
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b0b      	cmp	r3, #11
 800839a:	d10a      	bne.n	80083b2 <USBH_HandleSof+0x28>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d005      	beq.n	80083b2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	4798      	blx	r3
  }
}
 80083b2:	bf00      	nop
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b083      	sub	sp, #12
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 80083ca:	bf00      	nop
}
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b083      	sub	sp, #12
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 80083ee:	bf00      	nop
}
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b083      	sub	sp, #12
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f001 f8c0 	bl	80095ce <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	791b      	ldrb	r3, [r3, #4]
 8008452:	4619      	mov	r1, r3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 ff0d 	bl	8009274 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	795b      	ldrb	r3, [r3, #5]
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 ff07 	bl	8009274 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af02      	add	r7, sp, #8
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	460b      	mov	r3, r1
 800847a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800847c:	887b      	ldrh	r3, [r7, #2]
 800847e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008482:	d901      	bls.n	8008488 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008484:	2303      	movs	r3, #3
 8008486:	e01b      	b.n	80084c0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800848e:	887b      	ldrh	r3, [r7, #2]
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	4613      	mov	r3, r2
 8008494:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008498:	2100      	movs	r1, #0
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f872 	bl	8008584 <USBH_GetDescriptor>
 80084a0:	4603      	mov	r3, r0
 80084a2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d109      	bne.n	80084be <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80084b0:	887a      	ldrh	r2, [r7, #2]
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f929 	bl	800870c <USBH_ParseDevDesc>
 80084ba:	4603      	mov	r3, r0
 80084bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80084be:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af02      	add	r7, sp, #8
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	460b      	mov	r3, r1
 80084d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	331c      	adds	r3, #28
 80084d8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80084da:	887b      	ldrh	r3, [r7, #2]
 80084dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084e0:	d901      	bls.n	80084e6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e016      	b.n	8008514 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80084e6:	887b      	ldrh	r3, [r7, #2]
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084f0:	2100      	movs	r1, #0
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f846 	bl	8008584 <USBH_GetDescriptor>
 80084f8:	4603      	mov	r3, r0
 80084fa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d107      	bne.n	8008512 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008502:	887b      	ldrh	r3, [r7, #2]
 8008504:	461a      	mov	r2, r3
 8008506:	68b9      	ldr	r1, [r7, #8]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f9af 	bl	800886c <USBH_ParseCfgDesc>
 800850e:	4603      	mov	r3, r0
 8008510:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008512:	7bfb      	ldrb	r3, [r7, #15]
}
 8008514:	4618      	mov	r0, r3
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b088      	sub	sp, #32
 8008520:	af02      	add	r7, sp, #8
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	607a      	str	r2, [r7, #4]
 8008526:	461a      	mov	r2, r3
 8008528:	460b      	mov	r3, r1
 800852a:	72fb      	strb	r3, [r7, #11]
 800852c:	4613      	mov	r3, r2
 800852e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008530:	893b      	ldrh	r3, [r7, #8]
 8008532:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008536:	d802      	bhi.n	800853e <USBH_Get_StringDesc+0x22>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d101      	bne.n	8008542 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800853e:	2303      	movs	r3, #3
 8008540:	e01c      	b.n	800857c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008542:	7afb      	ldrb	r3, [r7, #11]
 8008544:	b29b      	uxth	r3, r3
 8008546:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800854a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008552:	893b      	ldrh	r3, [r7, #8]
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	460b      	mov	r3, r1
 8008558:	2100      	movs	r1, #0
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f000 f812 	bl	8008584 <USBH_GetDescriptor>
 8008560:	4603      	mov	r3, r0
 8008562:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008564:	7dfb      	ldrb	r3, [r7, #23]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d107      	bne.n	800857a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008570:	893a      	ldrh	r2, [r7, #8]
 8008572:	6879      	ldr	r1, [r7, #4]
 8008574:	4618      	mov	r0, r3
 8008576:	f000 fb8c 	bl	8008c92 <USBH_ParseStringDesc>
  }

  return status;
 800857a:	7dfb      	ldrb	r3, [r7, #23]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3718      	adds	r7, #24
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	607b      	str	r3, [r7, #4]
 800858e:	460b      	mov	r3, r1
 8008590:	72fb      	strb	r3, [r7, #11]
 8008592:	4613      	mov	r3, r2
 8008594:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	789b      	ldrb	r3, [r3, #2]
 800859a:	2b01      	cmp	r3, #1
 800859c:	d11c      	bne.n	80085d8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800859e:	7afb      	ldrb	r3, [r7, #11]
 80085a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80085a4:	b2da      	uxtb	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2206      	movs	r2, #6
 80085ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	893a      	ldrh	r2, [r7, #8]
 80085b4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80085b6:	893b      	ldrh	r3, [r7, #8]
 80085b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80085bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085c0:	d104      	bne.n	80085cc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f240 4209 	movw	r2, #1033	@ 0x409
 80085c8:	829a      	strh	r2, [r3, #20]
 80085ca:	e002      	b.n	80085d2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	8b3a      	ldrh	r2, [r7, #24]
 80085d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80085d8:	8b3b      	ldrh	r3, [r7, #24]
 80085da:	461a      	mov	r2, r3
 80085dc:	6879      	ldr	r1, [r7, #4]
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f000 fba4 	bl	8008d2c <USBH_CtlReq>
 80085e4:	4603      	mov	r3, r0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b082      	sub	sp, #8
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	460b      	mov	r3, r1
 80085f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	789b      	ldrb	r3, [r3, #2]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d10f      	bne.n	8008622 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2205      	movs	r2, #5
 800860c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800860e:	78fb      	ldrb	r3, [r7, #3]
 8008610:	b29a      	uxth	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008622:	2200      	movs	r2, #0
 8008624:	2100      	movs	r1, #0
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fb80 	bl	8008d2c <USBH_CtlReq>
 800862c:	4603      	mov	r3, r0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3708      	adds	r7, #8
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b082      	sub	sp, #8
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	460b      	mov	r3, r1
 8008640:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	789b      	ldrb	r3, [r3, #2]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d10e      	bne.n	8008668 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2209      	movs	r2, #9
 8008654:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	887a      	ldrh	r2, [r7, #2]
 800865a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008668:	2200      	movs	r2, #0
 800866a:	2100      	movs	r1, #0
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fb5d 	bl	8008d2c <USBH_CtlReq>
 8008672:	4603      	mov	r3, r0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	460b      	mov	r3, r1
 8008686:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	789b      	ldrb	r3, [r3, #2]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d10f      	bne.n	80086b0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2203      	movs	r2, #3
 800869a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800869c:	78fb      	ldrb	r3, [r7, #3]
 800869e:	b29a      	uxth	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80086b0:	2200      	movs	r2, #0
 80086b2:	2100      	movs	r1, #0
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fb39 	bl	8008d2c <USBH_CtlReq>
 80086ba:	4603      	mov	r3, r0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	789b      	ldrb	r3, [r3, #2]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d10f      	bne.n	80086f8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2202      	movs	r2, #2
 80086dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2201      	movs	r2, #1
 80086e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80086ea:	78fb      	ldrb	r3, [r7, #3]
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80086f8:	2200      	movs	r2, #0
 80086fa:	2100      	movs	r1, #0
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fb15 	bl	8008d2c <USBH_CtlReq>
 8008702:	4603      	mov	r3, r0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800870c:	b480      	push	{r7}
 800870e:	b087      	sub	sp, #28
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	4613      	mov	r3, r2
 8008718:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008720:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d101      	bne.n	8008730 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800872c:	2302      	movs	r3, #2
 800872e:	e094      	b.n	800885a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	781a      	ldrb	r2, [r3, #0]
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	785a      	ldrb	r2, [r3, #1]
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	3302      	adds	r3, #2
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	461a      	mov	r2, r3
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	3303      	adds	r3, #3
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	021b      	lsls	r3, r3, #8
 8008750:	b29b      	uxth	r3, r3
 8008752:	4313      	orrs	r3, r2
 8008754:	b29a      	uxth	r2, r3
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	791a      	ldrb	r2, [r3, #4]
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	795a      	ldrb	r2, [r3, #5]
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	799a      	ldrb	r2, [r3, #6]
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	79da      	ldrb	r2, [r3, #7]
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008780:	2b00      	cmp	r3, #0
 8008782:	d004      	beq.n	800878e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800878a:	2b01      	cmp	r3, #1
 800878c:	d11b      	bne.n	80087c6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	79db      	ldrb	r3, [r3, #7]
 8008792:	2b20      	cmp	r3, #32
 8008794:	dc0f      	bgt.n	80087b6 <USBH_ParseDevDesc+0xaa>
 8008796:	2b08      	cmp	r3, #8
 8008798:	db0f      	blt.n	80087ba <USBH_ParseDevDesc+0xae>
 800879a:	3b08      	subs	r3, #8
 800879c:	4a32      	ldr	r2, [pc, #200]	@ (8008868 <USBH_ParseDevDesc+0x15c>)
 800879e:	fa22 f303 	lsr.w	r3, r2, r3
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	bf14      	ite	ne
 80087aa:	2301      	movne	r3, #1
 80087ac:	2300      	moveq	r3, #0
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d106      	bne.n	80087c2 <USBH_ParseDevDesc+0xb6>
 80087b4:	e001      	b.n	80087ba <USBH_ParseDevDesc+0xae>
 80087b6:	2b40      	cmp	r3, #64	@ 0x40
 80087b8:	d003      	beq.n	80087c2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	2208      	movs	r2, #8
 80087be:	71da      	strb	r2, [r3, #7]
        break;
 80087c0:	e000      	b.n	80087c4 <USBH_ParseDevDesc+0xb8>
        break;
 80087c2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80087c4:	e00e      	b.n	80087e4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d107      	bne.n	80087e0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	79db      	ldrb	r3, [r3, #7]
 80087d4:	2b08      	cmp	r3, #8
 80087d6:	d005      	beq.n	80087e4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	2208      	movs	r2, #8
 80087dc:	71da      	strb	r2, [r3, #7]
 80087de:	e001      	b.n	80087e4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80087e0:	2303      	movs	r3, #3
 80087e2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80087e4:	88fb      	ldrh	r3, [r7, #6]
 80087e6:	2b08      	cmp	r3, #8
 80087e8:	d936      	bls.n	8008858 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	3308      	adds	r3, #8
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	461a      	mov	r2, r3
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	3309      	adds	r3, #9
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	021b      	lsls	r3, r3, #8
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	4313      	orrs	r3, r2
 80087fe:	b29a      	uxth	r2, r3
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	330a      	adds	r3, #10
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	330b      	adds	r3, #11
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	021b      	lsls	r3, r3, #8
 8008814:	b29b      	uxth	r3, r3
 8008816:	4313      	orrs	r3, r2
 8008818:	b29a      	uxth	r2, r3
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	330c      	adds	r3, #12
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	461a      	mov	r2, r3
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	330d      	adds	r3, #13
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	021b      	lsls	r3, r3, #8
 800882e:	b29b      	uxth	r3, r3
 8008830:	4313      	orrs	r3, r2
 8008832:	b29a      	uxth	r2, r3
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	7b9a      	ldrb	r2, [r3, #14]
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	7bda      	ldrb	r2, [r3, #15]
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	7c1a      	ldrb	r2, [r3, #16]
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	7c5a      	ldrb	r2, [r3, #17]
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008858:	7dfb      	ldrb	r3, [r7, #23]
}
 800885a:	4618      	mov	r0, r3
 800885c:	371c      	adds	r7, #28
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	01000101 	.word	0x01000101

0800886c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b08c      	sub	sp, #48	@ 0x30
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	4613      	mov	r3, r2
 8008878:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008880:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008888:	2300      	movs	r3, #0
 800888a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d101      	bne.n	800889e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800889a:	2302      	movs	r3, #2
 800889c:	e0de      	b.n	8008a5c <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80088a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	2b09      	cmp	r3, #9
 80088a8:	d002      	beq.n	80088b0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80088aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ac:	2209      	movs	r2, #9
 80088ae:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	781a      	ldrb	r2, [r3, #0]
 80088b4:	6a3b      	ldr	r3, [r7, #32]
 80088b6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	785a      	ldrb	r2, [r3, #1]
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	3302      	adds	r3, #2
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	3303      	adds	r3, #3
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	021b      	lsls	r3, r3, #8
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	4313      	orrs	r3, r2
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088da:	bf28      	it	cs
 80088dc:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	6a3b      	ldr	r3, [r7, #32]
 80088e4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	791a      	ldrb	r2, [r3, #4]
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	795a      	ldrb	r2, [r3, #5]
 80088f2:	6a3b      	ldr	r3, [r7, #32]
 80088f4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	799a      	ldrb	r2, [r3, #6]
 80088fa:	6a3b      	ldr	r3, [r7, #32]
 80088fc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	79da      	ldrb	r2, [r3, #7]
 8008902:	6a3b      	ldr	r3, [r7, #32]
 8008904:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	7a1a      	ldrb	r2, [r3, #8]
 800890a:	6a3b      	ldr	r3, [r7, #32]
 800890c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800890e:	88fb      	ldrh	r3, [r7, #6]
 8008910:	2b09      	cmp	r3, #9
 8008912:	f240 80a1 	bls.w	8008a58 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 8008916:	2309      	movs	r3, #9
 8008918:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800891a:	2300      	movs	r3, #0
 800891c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800891e:	e085      	b.n	8008a2c <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008920:	f107 0316 	add.w	r3, r7, #22
 8008924:	4619      	mov	r1, r3
 8008926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008928:	f000 f9e6 	bl	8008cf8 <USBH_GetNextDesc>
 800892c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800892e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008930:	785b      	ldrb	r3, [r3, #1]
 8008932:	2b04      	cmp	r3, #4
 8008934:	d17a      	bne.n	8008a2c <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	2b09      	cmp	r3, #9
 800893c:	d002      	beq.n	8008944 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800893e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008940:	2209      	movs	r2, #9
 8008942:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008948:	221a      	movs	r2, #26
 800894a:	fb02 f303 	mul.w	r3, r2, r3
 800894e:	3308      	adds	r3, #8
 8008950:	6a3a      	ldr	r2, [r7, #32]
 8008952:	4413      	add	r3, r2
 8008954:	3302      	adds	r3, #2
 8008956:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008958:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800895a:	69f8      	ldr	r0, [r7, #28]
 800895c:	f000 f882 	bl	8008a64 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008960:	2300      	movs	r3, #0
 8008962:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008966:	2300      	movs	r3, #0
 8008968:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800896a:	e043      	b.n	80089f4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800896c:	f107 0316 	add.w	r3, r7, #22
 8008970:	4619      	mov	r1, r3
 8008972:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008974:	f000 f9c0 	bl	8008cf8 <USBH_GetNextDesc>
 8008978:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800897a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800897c:	785b      	ldrb	r3, [r3, #1]
 800897e:	2b05      	cmp	r3, #5
 8008980:	d138      	bne.n	80089f4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	795b      	ldrb	r3, [r3, #5]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d113      	bne.n	80089b2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800898e:	2b02      	cmp	r3, #2
 8008990:	d003      	beq.n	800899a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	799b      	ldrb	r3, [r3, #6]
 8008996:	2b03      	cmp	r3, #3
 8008998:	d10b      	bne.n	80089b2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	79db      	ldrb	r3, [r3, #7]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10b      	bne.n	80089ba <USBH_ParseCfgDesc+0x14e>
 80089a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	2b09      	cmp	r3, #9
 80089a8:	d007      	beq.n	80089ba <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80089aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ac:	2209      	movs	r2, #9
 80089ae:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80089b0:	e003      	b.n	80089ba <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80089b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b4:	2207      	movs	r2, #7
 80089b6:	701a      	strb	r2, [r3, #0]
 80089b8:	e000      	b.n	80089bc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80089ba:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80089bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089c0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80089c4:	3201      	adds	r2, #1
 80089c6:	00d2      	lsls	r2, r2, #3
 80089c8:	211a      	movs	r1, #26
 80089ca:	fb01 f303 	mul.w	r3, r1, r3
 80089ce:	4413      	add	r3, r2
 80089d0:	3308      	adds	r3, #8
 80089d2:	6a3a      	ldr	r2, [r7, #32]
 80089d4:	4413      	add	r3, r2
 80089d6:	3304      	adds	r3, #4
 80089d8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80089da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089dc:	69b9      	ldr	r1, [r7, #24]
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f000 f86f 	bl	8008ac2 <USBH_ParseEPDesc>
 80089e4:	4603      	mov	r3, r0
 80089e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80089ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80089ee:	3301      	adds	r3, #1
 80089f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80089f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d80a      	bhi.n	8008a12 <USBH_ParseCfgDesc+0x1a6>
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	791b      	ldrb	r3, [r3, #4]
 8008a00:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d204      	bcs.n	8008a12 <USBH_ParseCfgDesc+0x1a6>
 8008a08:	6a3b      	ldr	r3, [r7, #32]
 8008a0a:	885a      	ldrh	r2, [r3, #2]
 8008a0c:	8afb      	ldrh	r3, [r7, #22]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d8ac      	bhi.n	800896c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	791b      	ldrb	r3, [r3, #4]
 8008a16:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d201      	bcs.n	8008a22 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e01c      	b.n	8008a5c <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 8008a22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a26:	3301      	adds	r3, #1
 8008a28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d805      	bhi.n	8008a40 <USBH_ParseCfgDesc+0x1d4>
 8008a34:	6a3b      	ldr	r3, [r7, #32]
 8008a36:	885a      	ldrh	r2, [r3, #2]
 8008a38:	8afb      	ldrh	r3, [r7, #22]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	f63f af70 	bhi.w	8008920 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	791b      	ldrb	r3, [r3, #4]
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	bf28      	it	cs
 8008a48:	2302      	movcs	r3, #2
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d201      	bcs.n	8008a58 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e001      	b.n	8008a5c <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8008a58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3730      	adds	r7, #48	@ 0x30
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781a      	ldrb	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	785a      	ldrb	r2, [r3, #1]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	789a      	ldrb	r2, [r3, #2]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	78da      	ldrb	r2, [r3, #3]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	791a      	ldrb	r2, [r3, #4]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	795a      	ldrb	r2, [r3, #5]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	799a      	ldrb	r2, [r3, #6]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	79da      	ldrb	r2, [r3, #7]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	7a1a      	ldrb	r2, [r3, #8]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	721a      	strb	r2, [r3, #8]
}
 8008ab6:	bf00      	nop
 8008ab8:	370c      	adds	r7, #12
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b087      	sub	sp, #28
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	60f8      	str	r0, [r7, #12]
 8008aca:	60b9      	str	r1, [r7, #8]
 8008acc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	781a      	ldrb	r2, [r3, #0]
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	785a      	ldrb	r2, [r3, #1]
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	789a      	ldrb	r2, [r3, #2]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	78da      	ldrb	r2, [r3, #3]
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	3304      	adds	r3, #4
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	461a      	mov	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	3305      	adds	r3, #5
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	021b      	lsls	r3, r3, #8
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	4313      	orrs	r3, r2
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	799a      	ldrb	r2, [r3, #6]
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	889b      	ldrh	r3, [r3, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d009      	beq.n	8008b30 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008b20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b24:	d804      	bhi.n	8008b30 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008b2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b2e:	d901      	bls.n	8008b34 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008b30:	2303      	movs	r3, #3
 8008b32:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d136      	bne.n	8008bac <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	78db      	ldrb	r3, [r3, #3]
 8008b42:	f003 0303 	and.w	r3, r3, #3
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d108      	bne.n	8008b5c <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	889b      	ldrh	r3, [r3, #4]
 8008b4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b52:	f240 8097 	bls.w	8008c84 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b56:	2303      	movs	r3, #3
 8008b58:	75fb      	strb	r3, [r7, #23]
 8008b5a:	e093      	b.n	8008c84 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	78db      	ldrb	r3, [r3, #3]
 8008b60:	f003 0303 	and.w	r3, r3, #3
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d107      	bne.n	8008b78 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	889b      	ldrh	r3, [r3, #4]
 8008b6c:	2b40      	cmp	r3, #64	@ 0x40
 8008b6e:	f240 8089 	bls.w	8008c84 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b72:	2303      	movs	r3, #3
 8008b74:	75fb      	strb	r3, [r7, #23]
 8008b76:	e085      	b.n	8008c84 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	78db      	ldrb	r3, [r3, #3]
 8008b7c:	f003 0303 	and.w	r3, r3, #3
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d005      	beq.n	8008b90 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	78db      	ldrb	r3, [r3, #3]
 8008b88:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008b8c:	2b03      	cmp	r3, #3
 8008b8e:	d10a      	bne.n	8008ba6 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	799b      	ldrb	r3, [r3, #6]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d003      	beq.n	8008ba0 <USBH_ParseEPDesc+0xde>
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	799b      	ldrb	r3, [r3, #6]
 8008b9c:	2b10      	cmp	r3, #16
 8008b9e:	d970      	bls.n	8008c82 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ba4:	e06d      	b.n	8008c82 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	75fb      	strb	r3, [r7, #23]
 8008baa:	e06b      	b.n	8008c84 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d13c      	bne.n	8008c30 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	78db      	ldrb	r3, [r3, #3]
 8008bba:	f003 0303 	and.w	r3, r3, #3
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d005      	beq.n	8008bce <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	78db      	ldrb	r3, [r3, #3]
 8008bc6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d106      	bne.n	8008bdc <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	889b      	ldrh	r3, [r3, #4]
 8008bd2:	2b40      	cmp	r3, #64	@ 0x40
 8008bd4:	d956      	bls.n	8008c84 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008bda:	e053      	b.n	8008c84 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	78db      	ldrb	r3, [r3, #3]
 8008be0:	f003 0303 	and.w	r3, r3, #3
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d10e      	bne.n	8008c06 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	799b      	ldrb	r3, [r3, #6]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d007      	beq.n	8008c00 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008bf4:	2b10      	cmp	r3, #16
 8008bf6:	d803      	bhi.n	8008c00 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008bfc:	2b40      	cmp	r3, #64	@ 0x40
 8008bfe:	d941      	bls.n	8008c84 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c00:	2303      	movs	r3, #3
 8008c02:	75fb      	strb	r3, [r7, #23]
 8008c04:	e03e      	b.n	8008c84 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	78db      	ldrb	r3, [r3, #3]
 8008c0a:	f003 0303 	and.w	r3, r3, #3
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	d10b      	bne.n	8008c2a <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	799b      	ldrb	r3, [r3, #6]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d004      	beq.n	8008c24 <USBH_ParseEPDesc+0x162>
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	889b      	ldrh	r3, [r3, #4]
 8008c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c22:	d32f      	bcc.n	8008c84 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c24:	2303      	movs	r3, #3
 8008c26:	75fb      	strb	r3, [r7, #23]
 8008c28:	e02c      	b.n	8008c84 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	75fb      	strb	r3, [r7, #23]
 8008c2e:	e029      	b.n	8008c84 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d120      	bne.n	8008c7c <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	78db      	ldrb	r3, [r3, #3]
 8008c3e:	f003 0303 	and.w	r3, r3, #3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d106      	bne.n	8008c54 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	889b      	ldrh	r3, [r3, #4]
 8008c4a:	2b08      	cmp	r3, #8
 8008c4c:	d01a      	beq.n	8008c84 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	75fb      	strb	r3, [r7, #23]
 8008c52:	e017      	b.n	8008c84 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	78db      	ldrb	r3, [r3, #3]
 8008c58:	f003 0303 	and.w	r3, r3, #3
 8008c5c:	2b03      	cmp	r3, #3
 8008c5e:	d10a      	bne.n	8008c76 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	799b      	ldrb	r3, [r3, #6]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d003      	beq.n	8008c70 <USBH_ParseEPDesc+0x1ae>
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	889b      	ldrh	r3, [r3, #4]
 8008c6c:	2b08      	cmp	r3, #8
 8008c6e:	d909      	bls.n	8008c84 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c70:	2303      	movs	r3, #3
 8008c72:	75fb      	strb	r3, [r7, #23]
 8008c74:	e006      	b.n	8008c84 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008c76:	2303      	movs	r3, #3
 8008c78:	75fb      	strb	r3, [r7, #23]
 8008c7a:	e003      	b.n	8008c84 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	75fb      	strb	r3, [r7, #23]
 8008c80:	e000      	b.n	8008c84 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008c82:	bf00      	nop
  }

  return status;
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	371c      	adds	r7, #28
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b087      	sub	sp, #28
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	60f8      	str	r0, [r7, #12]
 8008c9a:	60b9      	str	r1, [r7, #8]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	2b03      	cmp	r3, #3
 8008ca8:	d120      	bne.n	8008cec <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	1e9a      	subs	r2, r3, #2
 8008cb0:	88fb      	ldrh	r3, [r7, #6]
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	bf28      	it	cs
 8008cb6:	4613      	movcs	r3, r2
 8008cb8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	3302      	adds	r3, #2
 8008cbe:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	82fb      	strh	r3, [r7, #22]
 8008cc4:	e00b      	b.n	8008cde <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008cc6:	8afb      	ldrh	r3, [r7, #22]
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	4413      	add	r3, r2
 8008ccc:	781a      	ldrb	r2, [r3, #0]
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008cd8:	8afb      	ldrh	r3, [r7, #22]
 8008cda:	3302      	adds	r3, #2
 8008cdc:	82fb      	strh	r3, [r7, #22]
 8008cde:	8afa      	ldrh	r2, [r7, #22]
 8008ce0:	8abb      	ldrh	r3, [r7, #20]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d3ef      	bcc.n	8008cc6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	701a      	strb	r2, [r3, #0]
  }
}
 8008cec:	bf00      	nop
 8008cee:	371c      	adds	r7, #28
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	881b      	ldrh	r3, [r3, #0]
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	7812      	ldrb	r2, [r2, #0]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b086      	sub	sp, #24
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	4613      	mov	r3, r2
 8008d38:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	789b      	ldrb	r3, [r3, #2]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d002      	beq.n	8008d4c <USBH_CtlReq+0x20>
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d00f      	beq.n	8008d6a <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8008d4a:	e027      	b.n	8008d9c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	88fa      	ldrh	r2, [r7, #6]
 8008d56:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2202      	movs	r2, #2
 8008d62:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008d64:	2301      	movs	r3, #1
 8008d66:	75fb      	strb	r3, [r7, #23]
      break;
 8008d68:	e018      	b.n	8008d9c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f000 f81c 	bl	8008da8 <USBH_HandleControl>
 8008d70:	4603      	mov	r3, r0
 8008d72:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008d74:	7dfb      	ldrb	r3, [r7, #23]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d002      	beq.n	8008d80 <USBH_CtlReq+0x54>
 8008d7a:	7dfb      	ldrb	r3, [r7, #23]
 8008d7c:	2b03      	cmp	r3, #3
 8008d7e:	d106      	bne.n	8008d8e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2201      	movs	r2, #1
 8008d84:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	761a      	strb	r2, [r3, #24]
      break;
 8008d8c:	e005      	b.n	8008d9a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d102      	bne.n	8008d9a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2201      	movs	r2, #1
 8008d98:	709a      	strb	r2, [r3, #2]
      break;
 8008d9a:	bf00      	nop
  }
  return status;
 8008d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3718      	adds	r7, #24
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af02      	add	r7, sp, #8
 8008dae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008db0:	2301      	movs	r3, #1
 8008db2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008db4:	2300      	movs	r3, #0
 8008db6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	7e1b      	ldrb	r3, [r3, #24]
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	2b0a      	cmp	r3, #10
 8008dc0:	f200 8157 	bhi.w	8009072 <USBH_HandleControl+0x2ca>
 8008dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8008dcc <USBH_HandleControl+0x24>)
 8008dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dca:	bf00      	nop
 8008dcc:	08008df9 	.word	0x08008df9
 8008dd0:	08008e13 	.word	0x08008e13
 8008dd4:	08008e7d 	.word	0x08008e7d
 8008dd8:	08008ea3 	.word	0x08008ea3
 8008ddc:	08008edd 	.word	0x08008edd
 8008de0:	08008f07 	.word	0x08008f07
 8008de4:	08008f59 	.word	0x08008f59
 8008de8:	08008f7b 	.word	0x08008f7b
 8008dec:	08008fb7 	.word	0x08008fb7
 8008df0:	08008fdd 	.word	0x08008fdd
 8008df4:	0800901b 	.word	0x0800901b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f103 0110 	add.w	r1, r3, #16
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	795b      	ldrb	r3, [r3, #5]
 8008e02:	461a      	mov	r2, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 f945 	bl	8009094 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2202      	movs	r2, #2
 8008e0e:	761a      	strb	r2, [r3, #24]
      break;
 8008e10:	e13a      	b.n	8009088 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	795b      	ldrb	r3, [r3, #5]
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fcb5 	bl	8009788 <USBH_LL_GetURBState>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008e22:	7bbb      	ldrb	r3, [r7, #14]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d11e      	bne.n	8008e66 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	7c1b      	ldrb	r3, [r3, #16]
 8008e2c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008e30:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	8adb      	ldrh	r3, [r3, #22]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00a      	beq.n	8008e50 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008e3a:	7b7b      	ldrb	r3, [r7, #13]
 8008e3c:	2b80      	cmp	r3, #128	@ 0x80
 8008e3e:	d103      	bne.n	8008e48 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2203      	movs	r2, #3
 8008e44:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008e46:	e116      	b.n	8009076 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2205      	movs	r2, #5
 8008e4c:	761a      	strb	r2, [r3, #24]
      break;
 8008e4e:	e112      	b.n	8009076 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 8008e50:	7b7b      	ldrb	r3, [r7, #13]
 8008e52:	2b80      	cmp	r3, #128	@ 0x80
 8008e54:	d103      	bne.n	8008e5e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2209      	movs	r2, #9
 8008e5a:	761a      	strb	r2, [r3, #24]
      break;
 8008e5c:	e10b      	b.n	8009076 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2207      	movs	r2, #7
 8008e62:	761a      	strb	r2, [r3, #24]
      break;
 8008e64:	e107      	b.n	8009076 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008e66:	7bbb      	ldrb	r3, [r7, #14]
 8008e68:	2b04      	cmp	r3, #4
 8008e6a:	d003      	beq.n	8008e74 <USBH_HandleControl+0xcc>
 8008e6c:	7bbb      	ldrb	r3, [r7, #14]
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	f040 8101 	bne.w	8009076 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	220b      	movs	r2, #11
 8008e78:	761a      	strb	r2, [r3, #24]
      break;
 8008e7a:	e0fc      	b.n	8009076 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6899      	ldr	r1, [r3, #8]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	899a      	ldrh	r2, [r3, #12]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	791b      	ldrb	r3, [r3, #4]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f93c 	bl	8009112 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2204      	movs	r2, #4
 8008e9e:	761a      	strb	r2, [r3, #24]
      break;
 8008ea0:	e0f2      	b.n	8009088 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	791b      	ldrb	r3, [r3, #4]
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fc6d 	bl	8009788 <USBH_LL_GetURBState>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d103      	bne.n	8008ec0 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2209      	movs	r2, #9
 8008ebc:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008ebe:	e0dc      	b.n	800907a <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 8008ec0:	7bbb      	ldrb	r3, [r7, #14]
 8008ec2:	2b05      	cmp	r3, #5
 8008ec4:	d102      	bne.n	8008ecc <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	73fb      	strb	r3, [r7, #15]
      break;
 8008eca:	e0d6      	b.n	800907a <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	2b04      	cmp	r3, #4
 8008ed0:	f040 80d3 	bne.w	800907a <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	220b      	movs	r2, #11
 8008ed8:	761a      	strb	r2, [r3, #24]
      break;
 8008eda:	e0ce      	b.n	800907a <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6899      	ldr	r1, [r3, #8]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	899a      	ldrh	r2, [r3, #12]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	795b      	ldrb	r3, [r3, #5]
 8008ee8:	2001      	movs	r0, #1
 8008eea:	9000      	str	r0, [sp, #0]
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 f8eb 	bl	80090c8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2206      	movs	r2, #6
 8008f02:	761a      	strb	r2, [r3, #24]
      break;
 8008f04:	e0c0      	b.n	8009088 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	795b      	ldrb	r3, [r3, #5]
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fc3b 	bl	8009788 <USBH_LL_GetURBState>
 8008f12:	4603      	mov	r3, r0
 8008f14:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008f16:	7bbb      	ldrb	r3, [r7, #14]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d103      	bne.n	8008f24 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2207      	movs	r2, #7
 8008f20:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008f22:	e0ac      	b.n	800907e <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 8008f24:	7bbb      	ldrb	r3, [r7, #14]
 8008f26:	2b05      	cmp	r3, #5
 8008f28:	d105      	bne.n	8008f36 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	220c      	movs	r2, #12
 8008f2e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008f30:	2303      	movs	r3, #3
 8008f32:	73fb      	strb	r3, [r7, #15]
      break;
 8008f34:	e0a3      	b.n	800907e <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008f36:	7bbb      	ldrb	r3, [r7, #14]
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d103      	bne.n	8008f44 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2205      	movs	r2, #5
 8008f40:	761a      	strb	r2, [r3, #24]
      break;
 8008f42:	e09c      	b.n	800907e <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 8008f44:	7bbb      	ldrb	r3, [r7, #14]
 8008f46:	2b04      	cmp	r3, #4
 8008f48:	f040 8099 	bne.w	800907e <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	220b      	movs	r2, #11
 8008f50:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008f52:	2302      	movs	r3, #2
 8008f54:	73fb      	strb	r3, [r7, #15]
      break;
 8008f56:	e092      	b.n	800907e <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	791b      	ldrb	r3, [r3, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	2100      	movs	r1, #0
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f8d6 	bl	8009112 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2208      	movs	r2, #8
 8008f76:	761a      	strb	r2, [r3, #24]

      break;
 8008f78:	e086      	b.n	8009088 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	791b      	ldrb	r3, [r3, #4]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fc01 	bl	8009788 <USBH_LL_GetURBState>
 8008f86:	4603      	mov	r3, r0
 8008f88:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008f8a:	7bbb      	ldrb	r3, [r7, #14]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d105      	bne.n	8008f9c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	220d      	movs	r2, #13
 8008f94:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008f9a:	e072      	b.n	8009082 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 8008f9c:	7bbb      	ldrb	r3, [r7, #14]
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d103      	bne.n	8008faa <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	220b      	movs	r2, #11
 8008fa6:	761a      	strb	r2, [r3, #24]
      break;
 8008fa8:	e06b      	b.n	8009082 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 8008faa:	7bbb      	ldrb	r3, [r7, #14]
 8008fac:	2b05      	cmp	r3, #5
 8008fae:	d168      	bne.n	8009082 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8008fb4:	e065      	b.n	8009082 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	795b      	ldrb	r3, [r3, #5]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	9200      	str	r2, [sp, #0]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f880 	bl	80090c8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	220a      	movs	r2, #10
 8008fd8:	761a      	strb	r2, [r3, #24]
      break;
 8008fda:	e055      	b.n	8009088 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	795b      	ldrb	r3, [r3, #5]
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fbd0 	bl	8009788 <USBH_LL_GetURBState>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d105      	bne.n	8008ffe <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	220d      	movs	r2, #13
 8008ffa:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008ffc:	e043      	b.n	8009086 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ffe:	7bbb      	ldrb	r3, [r7, #14]
 8009000:	2b02      	cmp	r3, #2
 8009002:	d103      	bne.n	800900c <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2209      	movs	r2, #9
 8009008:	761a      	strb	r2, [r3, #24]
      break;
 800900a:	e03c      	b.n	8009086 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800900c:	7bbb      	ldrb	r3, [r7, #14]
 800900e:	2b04      	cmp	r3, #4
 8009010:	d139      	bne.n	8009086 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	220b      	movs	r2, #11
 8009016:	761a      	strb	r2, [r3, #24]
      break;
 8009018:	e035      	b.n	8009086 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	7e5b      	ldrb	r3, [r3, #25]
 800901e:	3301      	adds	r3, #1
 8009020:	b2da      	uxtb	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	765a      	strb	r2, [r3, #25]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	7e5b      	ldrb	r3, [r3, #25]
 800902a:	2b02      	cmp	r3, #2
 800902c:	d806      	bhi.n	800903c <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2201      	movs	r2, #1
 8009032:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800903a:	e025      	b.n	8009088 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009042:	2106      	movs	r1, #6
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	795b      	ldrb	r3, [r3, #5]
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f90d 	bl	8009274 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	791b      	ldrb	r3, [r3, #4]
 800905e:	4619      	mov	r1, r3
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f907 	bl	8009274 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800906c:	2302      	movs	r3, #2
 800906e:	73fb      	strb	r3, [r7, #15]
      break;
 8009070:	e00a      	b.n	8009088 <USBH_HandleControl+0x2e0>

    default:
      break;
 8009072:	bf00      	nop
 8009074:	e008      	b.n	8009088 <USBH_HandleControl+0x2e0>
      break;
 8009076:	bf00      	nop
 8009078:	e006      	b.n	8009088 <USBH_HandleControl+0x2e0>
      break;
 800907a:	bf00      	nop
 800907c:	e004      	b.n	8009088 <USBH_HandleControl+0x2e0>
      break;
 800907e:	bf00      	nop
 8009080:	e002      	b.n	8009088 <USBH_HandleControl+0x2e0>
      break;
 8009082:	bf00      	nop
 8009084:	e000      	b.n	8009088 <USBH_HandleControl+0x2e0>
      break;
 8009086:	bf00      	nop
  }

  return status;
 8009088:	7bfb      	ldrb	r3, [r7, #15]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop

08009094 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b088      	sub	sp, #32
 8009098:	af04      	add	r7, sp, #16
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	4613      	mov	r3, r2
 80090a0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80090a2:	79f9      	ldrb	r1, [r7, #7]
 80090a4:	2300      	movs	r3, #0
 80090a6:	9303      	str	r3, [sp, #12]
 80090a8:	2308      	movs	r3, #8
 80090aa:	9302      	str	r3, [sp, #8]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	9301      	str	r3, [sp, #4]
 80090b0:	2300      	movs	r3, #0
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	2300      	movs	r3, #0
 80090b6:	2200      	movs	r2, #0
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f000 fb34 	bl	8009726 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b088      	sub	sp, #32
 80090cc:	af04      	add	r7, sp, #16
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	4611      	mov	r1, r2
 80090d4:	461a      	mov	r2, r3
 80090d6:	460b      	mov	r3, r1
 80090d8:	80fb      	strh	r3, [r7, #6]
 80090da:	4613      	mov	r3, r2
 80090dc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80090e8:	2300      	movs	r3, #0
 80090ea:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80090ec:	7979      	ldrb	r1, [r7, #5]
 80090ee:	7e3b      	ldrb	r3, [r7, #24]
 80090f0:	9303      	str	r3, [sp, #12]
 80090f2:	88fb      	ldrh	r3, [r7, #6]
 80090f4:	9302      	str	r3, [sp, #8]
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	9301      	str	r3, [sp, #4]
 80090fa:	2301      	movs	r3, #1
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	2300      	movs	r3, #0
 8009100:	2200      	movs	r2, #0
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f000 fb0f 	bl	8009726 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b088      	sub	sp, #32
 8009116:	af04      	add	r7, sp, #16
 8009118:	60f8      	str	r0, [r7, #12]
 800911a:	60b9      	str	r1, [r7, #8]
 800911c:	4611      	mov	r1, r2
 800911e:	461a      	mov	r2, r3
 8009120:	460b      	mov	r3, r1
 8009122:	80fb      	strh	r3, [r7, #6]
 8009124:	4613      	mov	r3, r2
 8009126:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009128:	7979      	ldrb	r1, [r7, #5]
 800912a:	2300      	movs	r3, #0
 800912c:	9303      	str	r3, [sp, #12]
 800912e:	88fb      	ldrh	r3, [r7, #6]
 8009130:	9302      	str	r3, [sp, #8]
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	9301      	str	r3, [sp, #4]
 8009136:	2301      	movs	r3, #1
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	2300      	movs	r3, #0
 800913c:	2201      	movs	r2, #1
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f000 faf1 	bl	8009726 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009144:	2300      	movs	r3, #0

}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b088      	sub	sp, #32
 8009152:	af04      	add	r7, sp, #16
 8009154:	60f8      	str	r0, [r7, #12]
 8009156:	60b9      	str	r1, [r7, #8]
 8009158:	4611      	mov	r1, r2
 800915a:	461a      	mov	r2, r3
 800915c:	460b      	mov	r3, r1
 800915e:	80fb      	strh	r3, [r7, #6]
 8009160:	4613      	mov	r3, r2
 8009162:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800916a:	2b00      	cmp	r3, #0
 800916c:	d001      	beq.n	8009172 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800916e:	2300      	movs	r3, #0
 8009170:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009172:	7979      	ldrb	r1, [r7, #5]
 8009174:	7e3b      	ldrb	r3, [r7, #24]
 8009176:	9303      	str	r3, [sp, #12]
 8009178:	88fb      	ldrh	r3, [r7, #6]
 800917a:	9302      	str	r3, [sp, #8]
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	9301      	str	r3, [sp, #4]
 8009180:	2301      	movs	r3, #1
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	2302      	movs	r3, #2
 8009186:	2200      	movs	r2, #0
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f000 facc 	bl	8009726 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b088      	sub	sp, #32
 800919c:	af04      	add	r7, sp, #16
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	4611      	mov	r1, r2
 80091a4:	461a      	mov	r2, r3
 80091a6:	460b      	mov	r3, r1
 80091a8:	80fb      	strh	r3, [r7, #6]
 80091aa:	4613      	mov	r3, r2
 80091ac:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091ae:	7979      	ldrb	r1, [r7, #5]
 80091b0:	2300      	movs	r3, #0
 80091b2:	9303      	str	r3, [sp, #12]
 80091b4:	88fb      	ldrh	r3, [r7, #6]
 80091b6:	9302      	str	r3, [sp, #8]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	9301      	str	r3, [sp, #4]
 80091bc:	2301      	movs	r3, #1
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	2302      	movs	r3, #2
 80091c2:	2201      	movs	r2, #1
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f000 faae 	bl	8009726 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b086      	sub	sp, #24
 80091d8:	af04      	add	r7, sp, #16
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	4608      	mov	r0, r1
 80091de:	4611      	mov	r1, r2
 80091e0:	461a      	mov	r2, r3
 80091e2:	4603      	mov	r3, r0
 80091e4:	70fb      	strb	r3, [r7, #3]
 80091e6:	460b      	mov	r3, r1
 80091e8:	70bb      	strb	r3, [r7, #2]
 80091ea:	4613      	mov	r3, r2
 80091ec:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80091ee:	7878      	ldrb	r0, [r7, #1]
 80091f0:	78ba      	ldrb	r2, [r7, #2]
 80091f2:	78f9      	ldrb	r1, [r7, #3]
 80091f4:	8b3b      	ldrh	r3, [r7, #24]
 80091f6:	9302      	str	r3, [sp, #8]
 80091f8:	7d3b      	ldrb	r3, [r7, #20]
 80091fa:	9301      	str	r3, [sp, #4]
 80091fc:	7c3b      	ldrb	r3, [r7, #16]
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	4603      	mov	r3, r0
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fa53 	bl	80096ae <USBH_LL_OpenPipe>

  return USBH_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b082      	sub	sp, #8
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	460b      	mov	r3, r1
 800921c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800921e:	78fb      	ldrb	r3, [r7, #3]
 8009220:	4619      	mov	r1, r3
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fa72 	bl	800970c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b084      	sub	sp, #16
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	460b      	mov	r3, r1
 800923c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f836 	bl	80092b0 <USBH_GetFreePipe>
 8009244:	4603      	mov	r3, r0
 8009246:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009248:	89fb      	ldrh	r3, [r7, #14]
 800924a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800924e:	4293      	cmp	r3, r2
 8009250:	d00a      	beq.n	8009268 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009252:	78fa      	ldrb	r2, [r7, #3]
 8009254:	89fb      	ldrh	r3, [r7, #14]
 8009256:	f003 030f 	and.w	r3, r3, #15
 800925a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800925e:	6879      	ldr	r1, [r7, #4]
 8009260:	33e0      	adds	r3, #224	@ 0xe0
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	440b      	add	r3, r1
 8009266:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009268:	89fb      	ldrh	r3, [r7, #14]
 800926a:	b2db      	uxtb	r3, r3
}
 800926c:	4618      	mov	r0, r3
 800926e:	3710      	adds	r7, #16
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	460b      	mov	r3, r1
 800927e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009280:	78fb      	ldrb	r3, [r7, #3]
 8009282:	2b0f      	cmp	r3, #15
 8009284:	d80d      	bhi.n	80092a2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009286:	78fb      	ldrb	r3, [r7, #3]
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	33e0      	adds	r3, #224	@ 0xe0
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	685a      	ldr	r2, [r3, #4]
 8009292:	78fb      	ldrb	r3, [r7, #3]
 8009294:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009298:	6879      	ldr	r1, [r7, #4]
 800929a:	33e0      	adds	r3, #224	@ 0xe0
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	440b      	add	r3, r1
 80092a0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b085      	sub	sp, #20
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80092b8:	2300      	movs	r3, #0
 80092ba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80092bc:	2300      	movs	r3, #0
 80092be:	73fb      	strb	r3, [r7, #15]
 80092c0:	e00f      	b.n	80092e2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	33e0      	adds	r3, #224	@ 0xe0
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	4413      	add	r3, r2
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d102      	bne.n	80092dc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	b29b      	uxth	r3, r3
 80092da:	e007      	b.n	80092ec <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
 80092de:	3301      	adds	r3, #1
 80092e0:	73fb      	strb	r3, [r7, #15]
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
 80092e4:	2b0f      	cmp	r3, #15
 80092e6:	d9ec      	bls.n	80092c2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80092e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3714      	adds	r7, #20
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80092fc:	2201      	movs	r2, #1
 80092fe:	490e      	ldr	r1, [pc, #56]	@ (8009338 <MX_USB_HOST_Init+0x40>)
 8009300:	480e      	ldr	r0, [pc, #56]	@ (800933c <MX_USB_HOST_Init+0x44>)
 8009302:	f7fe fb0f 	bl	8007924 <USBH_Init>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800930c:	f7f7 fcb4 	bl	8000c78 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009310:	490b      	ldr	r1, [pc, #44]	@ (8009340 <MX_USB_HOST_Init+0x48>)
 8009312:	480a      	ldr	r0, [pc, #40]	@ (800933c <MX_USB_HOST_Init+0x44>)
 8009314:	f7fe fbb1 	bl	8007a7a <USBH_RegisterClass>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d001      	beq.n	8009322 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800931e:	f7f7 fcab 	bl	8000c78 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009322:	4806      	ldr	r0, [pc, #24]	@ (800933c <MX_USB_HOST_Init+0x44>)
 8009324:	f7fe fc35 	bl	8007b92 <USBH_Start>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800932e:	f7f7 fca3 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009332:	bf00      	nop
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	08009359 	.word	0x08009359
 800933c:	200001a8 	.word	0x200001a8
 8009340:	2000000c 	.word	0x2000000c

08009344 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009348:	4802      	ldr	r0, [pc, #8]	@ (8009354 <MX_USB_HOST_Process+0x10>)
 800934a:	f7fe fc33 	bl	8007bb4 <USBH_Process>
}
 800934e:	bf00      	nop
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	200001a8 	.word	0x200001a8

08009358 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	460b      	mov	r3, r1
 8009362:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009364:	78fb      	ldrb	r3, [r7, #3]
 8009366:	3b01      	subs	r3, #1
 8009368:	2b04      	cmp	r3, #4
 800936a:	d819      	bhi.n	80093a0 <USBH_UserProcess+0x48>
 800936c:	a201      	add	r2, pc, #4	@ (adr r2, 8009374 <USBH_UserProcess+0x1c>)
 800936e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009372:	bf00      	nop
 8009374:	080093a1 	.word	0x080093a1
 8009378:	08009391 	.word	0x08009391
 800937c:	080093a1 	.word	0x080093a1
 8009380:	08009399 	.word	0x08009399
 8009384:	08009389 	.word	0x08009389
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009388:	4b09      	ldr	r3, [pc, #36]	@ (80093b0 <USBH_UserProcess+0x58>)
 800938a:	2203      	movs	r2, #3
 800938c:	701a      	strb	r2, [r3, #0]
  break;
 800938e:	e008      	b.n	80093a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009390:	4b07      	ldr	r3, [pc, #28]	@ (80093b0 <USBH_UserProcess+0x58>)
 8009392:	2202      	movs	r2, #2
 8009394:	701a      	strb	r2, [r3, #0]
  break;
 8009396:	e004      	b.n	80093a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009398:	4b05      	ldr	r3, [pc, #20]	@ (80093b0 <USBH_UserProcess+0x58>)
 800939a:	2201      	movs	r2, #1
 800939c:	701a      	strb	r2, [r3, #0]
  break;
 800939e:	e000      	b.n	80093a2 <USBH_UserProcess+0x4a>

  default:
  break;
 80093a0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80093a2:	bf00      	nop
 80093a4:	370c      	adds	r7, #12
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	20000580 	.word	0x20000580

080093b4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b08a      	sub	sp, #40	@ 0x28
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093bc:	f107 0314 	add.w	r3, r7, #20
 80093c0:	2200      	movs	r2, #0
 80093c2:	601a      	str	r2, [r3, #0]
 80093c4:	605a      	str	r2, [r3, #4]
 80093c6:	609a      	str	r2, [r3, #8]
 80093c8:	60da      	str	r2, [r3, #12]
 80093ca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093d4:	d147      	bne.n	8009466 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093d6:	2300      	movs	r3, #0
 80093d8:	613b      	str	r3, [r7, #16]
 80093da:	4b25      	ldr	r3, [pc, #148]	@ (8009470 <HAL_HCD_MspInit+0xbc>)
 80093dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093de:	4a24      	ldr	r2, [pc, #144]	@ (8009470 <HAL_HCD_MspInit+0xbc>)
 80093e0:	f043 0301 	orr.w	r3, r3, #1
 80093e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80093e6:	4b22      	ldr	r3, [pc, #136]	@ (8009470 <HAL_HCD_MspInit+0xbc>)
 80093e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	613b      	str	r3, [r7, #16]
 80093f0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80093f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80093f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80093f8:	2300      	movs	r3, #0
 80093fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093fc:	2300      	movs	r3, #0
 80093fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009400:	f107 0314 	add.w	r3, r7, #20
 8009404:	4619      	mov	r1, r3
 8009406:	481b      	ldr	r0, [pc, #108]	@ (8009474 <HAL_HCD_MspInit+0xc0>)
 8009408:	f7f8 f802 	bl	8001410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800940c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009412:	2302      	movs	r3, #2
 8009414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009416:	2300      	movs	r3, #0
 8009418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800941a:	2300      	movs	r3, #0
 800941c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800941e:	230a      	movs	r3, #10
 8009420:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009422:	f107 0314 	add.w	r3, r7, #20
 8009426:	4619      	mov	r1, r3
 8009428:	4812      	ldr	r0, [pc, #72]	@ (8009474 <HAL_HCD_MspInit+0xc0>)
 800942a:	f7f7 fff1 	bl	8001410 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800942e:	4b10      	ldr	r3, [pc, #64]	@ (8009470 <HAL_HCD_MspInit+0xbc>)
 8009430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009432:	4a0f      	ldr	r2, [pc, #60]	@ (8009470 <HAL_HCD_MspInit+0xbc>)
 8009434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009438:	6353      	str	r3, [r2, #52]	@ 0x34
 800943a:	2300      	movs	r3, #0
 800943c:	60fb      	str	r3, [r7, #12]
 800943e:	4b0c      	ldr	r3, [pc, #48]	@ (8009470 <HAL_HCD_MspInit+0xbc>)
 8009440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009442:	4a0b      	ldr	r2, [pc, #44]	@ (8009470 <HAL_HCD_MspInit+0xbc>)
 8009444:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009448:	6453      	str	r3, [r2, #68]	@ 0x44
 800944a:	4b09      	ldr	r3, [pc, #36]	@ (8009470 <HAL_HCD_MspInit+0xbc>)
 800944c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800944e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009452:	60fb      	str	r3, [r7, #12]
 8009454:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009456:	2200      	movs	r2, #0
 8009458:	2100      	movs	r1, #0
 800945a:	2043      	movs	r0, #67	@ 0x43
 800945c:	f7f7 ff7f 	bl	800135e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009460:	2043      	movs	r0, #67	@ 0x43
 8009462:	f7f7 ff98 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009466:	bf00      	nop
 8009468:	3728      	adds	r7, #40	@ 0x28
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	40023800 	.word	0x40023800
 8009474:	40020000 	.word	0x40020000

08009478 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009486:	4618      	mov	r0, r3
 8009488:	f7fe ff6d 	bl	8008366 <USBH_LL_IncTimer>
}
 800948c:	bf00      	nop
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7fe ffa9 	bl	80083fa <USBH_LL_Connect>
}
 80094a8:	bf00      	nop
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fe ffb2 	bl	8008428 <USBH_LL_Disconnect>
}
 80094c4:	bf00      	nop
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	460b      	mov	r3, r1
 80094d6:	70fb      	strb	r3, [r7, #3]
 80094d8:	4613      	mov	r3, r2
 80094da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fe ff5f 	bl	80083ba <USBH_LL_PortEnabled>
}
 80094fc:	bf00      	nop
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009512:	4618      	mov	r0, r3
 8009514:	f7fe ff5f 	bl	80083d6 <USBH_LL_PortDisabled>
}
 8009518:	bf00      	nop
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800952e:	2b01      	cmp	r3, #1
 8009530:	d12a      	bne.n	8009588 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009532:	4a18      	ldr	r2, [pc, #96]	@ (8009594 <USBH_LL_Init+0x74>)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a15      	ldr	r2, [pc, #84]	@ (8009594 <USBH_LL_Init+0x74>)
 800953e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009542:	4b14      	ldr	r3, [pc, #80]	@ (8009594 <USBH_LL_Init+0x74>)
 8009544:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009548:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800954a:	4b12      	ldr	r3, [pc, #72]	@ (8009594 <USBH_LL_Init+0x74>)
 800954c:	2208      	movs	r2, #8
 800954e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009550:	4b10      	ldr	r3, [pc, #64]	@ (8009594 <USBH_LL_Init+0x74>)
 8009552:	2201      	movs	r2, #1
 8009554:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009556:	4b0f      	ldr	r3, [pc, #60]	@ (8009594 <USBH_LL_Init+0x74>)
 8009558:	2200      	movs	r2, #0
 800955a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800955c:	4b0d      	ldr	r3, [pc, #52]	@ (8009594 <USBH_LL_Init+0x74>)
 800955e:	2202      	movs	r2, #2
 8009560:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009562:	4b0c      	ldr	r3, [pc, #48]	@ (8009594 <USBH_LL_Init+0x74>)
 8009564:	2200      	movs	r2, #0
 8009566:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009568:	480a      	ldr	r0, [pc, #40]	@ (8009594 <USBH_LL_Init+0x74>)
 800956a:	f7f8 f91f 	bl	80017ac <HAL_HCD_Init>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d001      	beq.n	8009578 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009574:	f7f7 fb80 	bl	8000c78 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009578:	4806      	ldr	r0, [pc, #24]	@ (8009594 <USBH_LL_Init+0x74>)
 800957a:	f7f8 fd5d 	bl	8002038 <HAL_HCD_GetCurrentFrame>
 800957e:	4603      	mov	r3, r0
 8009580:	4619      	mov	r1, r3
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f7fe fee0 	bl	8008348 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	20000584 	.word	0x20000584

08009598 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7f8 fcca 	bl	8001f48 <HAL_HCD_Start>
 80095b4:	4603      	mov	r3, r0
 80095b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 f94c 	bl	8009858 <USBH_Get_USB_Status>
 80095c0:	4603      	mov	r3, r0
 80095c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b084      	sub	sp, #16
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095d6:	2300      	movs	r3, #0
 80095d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7f8 fcd2 	bl	8001f8e <HAL_HCD_Stop>
 80095ea:	4603      	mov	r3, r0
 80095ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80095ee:	7bfb      	ldrb	r3, [r7, #15]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f000 f931 	bl	8009858 <USBH_Get_USB_Status>
 80095f6:	4603      	mov	r3, r0
 80095f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800960c:	2301      	movs	r3, #1
 800960e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009616:	4618      	mov	r0, r3
 8009618:	f7f8 fd1c 	bl	8002054 <HAL_HCD_GetCurrentSpeed>
 800961c:	4603      	mov	r3, r0
 800961e:	2b02      	cmp	r3, #2
 8009620:	d00c      	beq.n	800963c <USBH_LL_GetSpeed+0x38>
 8009622:	2b02      	cmp	r3, #2
 8009624:	d80d      	bhi.n	8009642 <USBH_LL_GetSpeed+0x3e>
 8009626:	2b00      	cmp	r3, #0
 8009628:	d002      	beq.n	8009630 <USBH_LL_GetSpeed+0x2c>
 800962a:	2b01      	cmp	r3, #1
 800962c:	d003      	beq.n	8009636 <USBH_LL_GetSpeed+0x32>
 800962e:	e008      	b.n	8009642 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009630:	2300      	movs	r3, #0
 8009632:	73fb      	strb	r3, [r7, #15]
    break;
 8009634:	e008      	b.n	8009648 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009636:	2301      	movs	r3, #1
 8009638:	73fb      	strb	r3, [r7, #15]
    break;
 800963a:	e005      	b.n	8009648 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800963c:	2302      	movs	r3, #2
 800963e:	73fb      	strb	r3, [r7, #15]
    break;
 8009640:	e002      	b.n	8009648 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009642:	2301      	movs	r3, #1
 8009644:	73fb      	strb	r3, [r7, #15]
    break;
 8009646:	bf00      	nop
  }
  return  speed;
 8009648:	7bfb      	ldrb	r3, [r7, #15]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b084      	sub	sp, #16
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800965e:	2300      	movs	r3, #0
 8009660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009668:	4618      	mov	r0, r3
 800966a:	f7f8 fcad 	bl	8001fc8 <HAL_HCD_ResetPort>
 800966e:	4603      	mov	r3, r0
 8009670:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009672:	7bfb      	ldrb	r3, [r7, #15]
 8009674:	4618      	mov	r0, r3
 8009676:	f000 f8ef 	bl	8009858 <USBH_Get_USB_Status>
 800967a:	4603      	mov	r3, r0
 800967c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800967e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009680:	4618      	mov	r0, r3
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800969a:	78fa      	ldrb	r2, [r7, #3]
 800969c:	4611      	mov	r1, r2
 800969e:	4618      	mov	r0, r3
 80096a0:	f7f8 fcb5 	bl	800200e <HAL_HCD_HC_GetXferCount>
 80096a4:	4603      	mov	r3, r0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <USBH_LL_OpenPipe>:
                                    uint8_t epnum,
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 80096ae:	b590      	push	{r4, r7, lr}
 80096b0:	b089      	sub	sp, #36	@ 0x24
 80096b2:	af04      	add	r7, sp, #16
 80096b4:	6078      	str	r0, [r7, #4]
 80096b6:	4608      	mov	r0, r1
 80096b8:	4611      	mov	r1, r2
 80096ba:	461a      	mov	r2, r3
 80096bc:	4603      	mov	r3, r0
 80096be:	70fb      	strb	r3, [r7, #3]
 80096c0:	460b      	mov	r3, r1
 80096c2:	70bb      	strb	r3, [r7, #2]
 80096c4:	4613      	mov	r3, r2
 80096c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c8:	2300      	movs	r3, #0
 80096ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe, epnum,
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80096d6:	787c      	ldrb	r4, [r7, #1]
 80096d8:	78ba      	ldrb	r2, [r7, #2]
 80096da:	78f9      	ldrb	r1, [r7, #3]
 80096dc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80096de:	9302      	str	r3, [sp, #8]
 80096e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80096e4:	9301      	str	r3, [sp, #4]
 80096e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	4623      	mov	r3, r4
 80096ee:	f7f8 f8c4 	bl	800187a <HAL_HCD_HC_Init>
 80096f2:	4603      	mov	r3, r0
 80096f4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f000 f8ad 	bl	8009858 <USBH_Get_USB_Status>
 80096fe:	4603      	mov	r3, r0
 8009700:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009702:	7bbb      	ldrb	r3, [r7, #14]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3714      	adds	r7, #20
 8009708:	46bd      	mov	sp, r7
 800970a:	bd90      	pop	{r4, r7, pc}

0800970c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	460b      	mov	r3, r1
 8009716:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(pipe);

  return USBH_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	370c      	adds	r7, #12
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr

08009726 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009726:	b590      	push	{r4, r7, lr}
 8009728:	b089      	sub	sp, #36	@ 0x24
 800972a:	af04      	add	r7, sp, #16
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	4608      	mov	r0, r1
 8009730:	4611      	mov	r1, r2
 8009732:	461a      	mov	r2, r3
 8009734:	4603      	mov	r3, r0
 8009736:	70fb      	strb	r3, [r7, #3]
 8009738:	460b      	mov	r3, r1
 800973a:	70bb      	strb	r3, [r7, #2]
 800973c:	4613      	mov	r3, r2
 800973e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009744:	2300      	movs	r3, #0
 8009746:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800974e:	787c      	ldrb	r4, [r7, #1]
 8009750:	78ba      	ldrb	r2, [r7, #2]
 8009752:	78f9      	ldrb	r1, [r7, #3]
 8009754:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009758:	9303      	str	r3, [sp, #12]
 800975a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800975c:	9302      	str	r3, [sp, #8]
 800975e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009760:	9301      	str	r3, [sp, #4]
 8009762:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	4623      	mov	r3, r4
 800976a:	f7f8 f93f 	bl	80019ec <HAL_HCD_HC_SubmitRequest>
 800976e:	4603      	mov	r3, r0
 8009770:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009772:	7bfb      	ldrb	r3, [r7, #15]
 8009774:	4618      	mov	r0, r3
 8009776:	f000 f86f 	bl	8009858 <USBH_Get_USB_Status>
 800977a:	4603      	mov	r3, r0
 800977c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800977e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009780:	4618      	mov	r0, r3
 8009782:	3714      	adds	r7, #20
 8009784:	46bd      	mov	sp, r7
 8009786:	bd90      	pop	{r4, r7, pc}

08009788 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	460b      	mov	r3, r1
 8009792:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800979a:	78fa      	ldrb	r2, [r7, #3]
 800979c:	4611      	mov	r1, r2
 800979e:	4618      	mov	r0, r3
 80097a0:	f7f8 fc20 	bl	8001fe4 <HAL_HCD_HC_GetURBState>
 80097a4:	4603      	mov	r3, r0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b082      	sub	sp, #8
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	460b      	mov	r3, r1
 80097b8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d103      	bne.n	80097cc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80097c4:	78fb      	ldrb	r3, [r7, #3]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 f872 	bl	80098b0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80097cc:	20c8      	movs	r0, #200	@ 0xc8
 80097ce:	f7f7 fcc7 	bl	8001160 <HAL_Delay>
  return USBH_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	460b      	mov	r3, r1
 80097e6:	70fb      	strb	r3, [r7, #3]
 80097e8:	4613      	mov	r3, r2
 80097ea:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80097f2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80097f4:	78fa      	ldrb	r2, [r7, #3]
 80097f6:	68f9      	ldr	r1, [r7, #12]
 80097f8:	4613      	mov	r3, r2
 80097fa:	011b      	lsls	r3, r3, #4
 80097fc:	1a9b      	subs	r3, r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	440b      	add	r3, r1
 8009802:	3317      	adds	r3, #23
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00a      	beq.n	8009820 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800980a:	78fa      	ldrb	r2, [r7, #3]
 800980c:	68f9      	ldr	r1, [r7, #12]
 800980e:	4613      	mov	r3, r2
 8009810:	011b      	lsls	r3, r3, #4
 8009812:	1a9b      	subs	r3, r3, r2
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	440b      	add	r3, r1
 8009818:	333c      	adds	r3, #60	@ 0x3c
 800981a:	78ba      	ldrb	r2, [r7, #2]
 800981c:	701a      	strb	r2, [r3, #0]
 800981e:	e009      	b.n	8009834 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009820:	78fa      	ldrb	r2, [r7, #3]
 8009822:	68f9      	ldr	r1, [r7, #12]
 8009824:	4613      	mov	r3, r2
 8009826:	011b      	lsls	r3, r3, #4
 8009828:	1a9b      	subs	r3, r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	440b      	add	r3, r1
 800982e:	333d      	adds	r3, #61	@ 0x3d
 8009830:	78ba      	ldrb	r2, [r7, #2]
 8009832:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3714      	adds	r7, #20
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr

08009842 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b082      	sub	sp, #8
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7f7 fc88 	bl	8001160 <HAL_Delay>
}
 8009850:	bf00      	nop
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	4603      	mov	r3, r0
 8009860:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009866:	79fb      	ldrb	r3, [r7, #7]
 8009868:	2b03      	cmp	r3, #3
 800986a:	d817      	bhi.n	800989c <USBH_Get_USB_Status+0x44>
 800986c:	a201      	add	r2, pc, #4	@ (adr r2, 8009874 <USBH_Get_USB_Status+0x1c>)
 800986e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009872:	bf00      	nop
 8009874:	08009885 	.word	0x08009885
 8009878:	0800988b 	.word	0x0800988b
 800987c:	08009891 	.word	0x08009891
 8009880:	08009897 	.word	0x08009897
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009884:	2300      	movs	r3, #0
 8009886:	73fb      	strb	r3, [r7, #15]
    break;
 8009888:	e00b      	b.n	80098a2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800988a:	2302      	movs	r3, #2
 800988c:	73fb      	strb	r3, [r7, #15]
    break;
 800988e:	e008      	b.n	80098a2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009890:	2301      	movs	r3, #1
 8009892:	73fb      	strb	r3, [r7, #15]
    break;
 8009894:	e005      	b.n	80098a2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009896:	2302      	movs	r3, #2
 8009898:	73fb      	strb	r3, [r7, #15]
    break;
 800989a:	e002      	b.n	80098a2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800989c:	2302      	movs	r3, #2
 800989e:	73fb      	strb	r3, [r7, #15]
    break;
 80098a0:	bf00      	nop
  }
  return usb_status;
 80098a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3714      	adds	r7, #20
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	4603      	mov	r3, r0
 80098b8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80098be:	79fb      	ldrb	r3, [r7, #7]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d102      	bne.n	80098ca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80098c4:	2300      	movs	r3, #0
 80098c6:	73fb      	strb	r3, [r7, #15]
 80098c8:	e001      	b.n	80098ce <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80098ca:	2301      	movs	r3, #1
 80098cc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
 80098d0:	461a      	mov	r2, r3
 80098d2:	2101      	movs	r1, #1
 80098d4:	4803      	ldr	r0, [pc, #12]	@ (80098e4 <MX_DriverVbusFS+0x34>)
 80098d6:	f7f7 ff37 	bl	8001748 <HAL_GPIO_WritePin>
}
 80098da:	bf00      	nop
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	40020800 	.word	0x40020800

080098e8 <malloc>:
 80098e8:	4b02      	ldr	r3, [pc, #8]	@ (80098f4 <malloc+0xc>)
 80098ea:	4601      	mov	r1, r0
 80098ec:	6818      	ldr	r0, [r3, #0]
 80098ee:	f000 b82d 	b.w	800994c <_malloc_r>
 80098f2:	bf00      	nop
 80098f4:	2000002c 	.word	0x2000002c

080098f8 <free>:
 80098f8:	4b02      	ldr	r3, [pc, #8]	@ (8009904 <free+0xc>)
 80098fa:	4601      	mov	r1, r0
 80098fc:	6818      	ldr	r0, [r3, #0]
 80098fe:	f000 b8f5 	b.w	8009aec <_free_r>
 8009902:	bf00      	nop
 8009904:	2000002c 	.word	0x2000002c

08009908 <sbrk_aligned>:
 8009908:	b570      	push	{r4, r5, r6, lr}
 800990a:	4e0f      	ldr	r6, [pc, #60]	@ (8009948 <sbrk_aligned+0x40>)
 800990c:	460c      	mov	r4, r1
 800990e:	6831      	ldr	r1, [r6, #0]
 8009910:	4605      	mov	r5, r0
 8009912:	b911      	cbnz	r1, 800991a <sbrk_aligned+0x12>
 8009914:	f000 f8ae 	bl	8009a74 <_sbrk_r>
 8009918:	6030      	str	r0, [r6, #0]
 800991a:	4621      	mov	r1, r4
 800991c:	4628      	mov	r0, r5
 800991e:	f000 f8a9 	bl	8009a74 <_sbrk_r>
 8009922:	1c43      	adds	r3, r0, #1
 8009924:	d103      	bne.n	800992e <sbrk_aligned+0x26>
 8009926:	f04f 34ff 	mov.w	r4, #4294967295
 800992a:	4620      	mov	r0, r4
 800992c:	bd70      	pop	{r4, r5, r6, pc}
 800992e:	1cc4      	adds	r4, r0, #3
 8009930:	f024 0403 	bic.w	r4, r4, #3
 8009934:	42a0      	cmp	r0, r4
 8009936:	d0f8      	beq.n	800992a <sbrk_aligned+0x22>
 8009938:	1a21      	subs	r1, r4, r0
 800993a:	4628      	mov	r0, r5
 800993c:	f000 f89a 	bl	8009a74 <_sbrk_r>
 8009940:	3001      	adds	r0, #1
 8009942:	d1f2      	bne.n	800992a <sbrk_aligned+0x22>
 8009944:	e7ef      	b.n	8009926 <sbrk_aligned+0x1e>
 8009946:	bf00      	nop
 8009948:	20000964 	.word	0x20000964

0800994c <_malloc_r>:
 800994c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009950:	1ccd      	adds	r5, r1, #3
 8009952:	f025 0503 	bic.w	r5, r5, #3
 8009956:	3508      	adds	r5, #8
 8009958:	2d0c      	cmp	r5, #12
 800995a:	bf38      	it	cc
 800995c:	250c      	movcc	r5, #12
 800995e:	2d00      	cmp	r5, #0
 8009960:	4606      	mov	r6, r0
 8009962:	db01      	blt.n	8009968 <_malloc_r+0x1c>
 8009964:	42a9      	cmp	r1, r5
 8009966:	d904      	bls.n	8009972 <_malloc_r+0x26>
 8009968:	230c      	movs	r3, #12
 800996a:	6033      	str	r3, [r6, #0]
 800996c:	2000      	movs	r0, #0
 800996e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009972:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009a48 <_malloc_r+0xfc>
 8009976:	f000 f869 	bl	8009a4c <__malloc_lock>
 800997a:	f8d8 3000 	ldr.w	r3, [r8]
 800997e:	461c      	mov	r4, r3
 8009980:	bb44      	cbnz	r4, 80099d4 <_malloc_r+0x88>
 8009982:	4629      	mov	r1, r5
 8009984:	4630      	mov	r0, r6
 8009986:	f7ff ffbf 	bl	8009908 <sbrk_aligned>
 800998a:	1c43      	adds	r3, r0, #1
 800998c:	4604      	mov	r4, r0
 800998e:	d158      	bne.n	8009a42 <_malloc_r+0xf6>
 8009990:	f8d8 4000 	ldr.w	r4, [r8]
 8009994:	4627      	mov	r7, r4
 8009996:	2f00      	cmp	r7, #0
 8009998:	d143      	bne.n	8009a22 <_malloc_r+0xd6>
 800999a:	2c00      	cmp	r4, #0
 800999c:	d04b      	beq.n	8009a36 <_malloc_r+0xea>
 800999e:	6823      	ldr	r3, [r4, #0]
 80099a0:	4639      	mov	r1, r7
 80099a2:	4630      	mov	r0, r6
 80099a4:	eb04 0903 	add.w	r9, r4, r3
 80099a8:	f000 f864 	bl	8009a74 <_sbrk_r>
 80099ac:	4581      	cmp	r9, r0
 80099ae:	d142      	bne.n	8009a36 <_malloc_r+0xea>
 80099b0:	6821      	ldr	r1, [r4, #0]
 80099b2:	1a6d      	subs	r5, r5, r1
 80099b4:	4629      	mov	r1, r5
 80099b6:	4630      	mov	r0, r6
 80099b8:	f7ff ffa6 	bl	8009908 <sbrk_aligned>
 80099bc:	3001      	adds	r0, #1
 80099be:	d03a      	beq.n	8009a36 <_malloc_r+0xea>
 80099c0:	6823      	ldr	r3, [r4, #0]
 80099c2:	442b      	add	r3, r5
 80099c4:	6023      	str	r3, [r4, #0]
 80099c6:	f8d8 3000 	ldr.w	r3, [r8]
 80099ca:	685a      	ldr	r2, [r3, #4]
 80099cc:	bb62      	cbnz	r2, 8009a28 <_malloc_r+0xdc>
 80099ce:	f8c8 7000 	str.w	r7, [r8]
 80099d2:	e00f      	b.n	80099f4 <_malloc_r+0xa8>
 80099d4:	6822      	ldr	r2, [r4, #0]
 80099d6:	1b52      	subs	r2, r2, r5
 80099d8:	d420      	bmi.n	8009a1c <_malloc_r+0xd0>
 80099da:	2a0b      	cmp	r2, #11
 80099dc:	d917      	bls.n	8009a0e <_malloc_r+0xc2>
 80099de:	1961      	adds	r1, r4, r5
 80099e0:	42a3      	cmp	r3, r4
 80099e2:	6025      	str	r5, [r4, #0]
 80099e4:	bf18      	it	ne
 80099e6:	6059      	strne	r1, [r3, #4]
 80099e8:	6863      	ldr	r3, [r4, #4]
 80099ea:	bf08      	it	eq
 80099ec:	f8c8 1000 	streq.w	r1, [r8]
 80099f0:	5162      	str	r2, [r4, r5]
 80099f2:	604b      	str	r3, [r1, #4]
 80099f4:	4630      	mov	r0, r6
 80099f6:	f000 f82f 	bl	8009a58 <__malloc_unlock>
 80099fa:	f104 000b 	add.w	r0, r4, #11
 80099fe:	1d23      	adds	r3, r4, #4
 8009a00:	f020 0007 	bic.w	r0, r0, #7
 8009a04:	1ac2      	subs	r2, r0, r3
 8009a06:	bf1c      	itt	ne
 8009a08:	1a1b      	subne	r3, r3, r0
 8009a0a:	50a3      	strne	r3, [r4, r2]
 8009a0c:	e7af      	b.n	800996e <_malloc_r+0x22>
 8009a0e:	6862      	ldr	r2, [r4, #4]
 8009a10:	42a3      	cmp	r3, r4
 8009a12:	bf0c      	ite	eq
 8009a14:	f8c8 2000 	streq.w	r2, [r8]
 8009a18:	605a      	strne	r2, [r3, #4]
 8009a1a:	e7eb      	b.n	80099f4 <_malloc_r+0xa8>
 8009a1c:	4623      	mov	r3, r4
 8009a1e:	6864      	ldr	r4, [r4, #4]
 8009a20:	e7ae      	b.n	8009980 <_malloc_r+0x34>
 8009a22:	463c      	mov	r4, r7
 8009a24:	687f      	ldr	r7, [r7, #4]
 8009a26:	e7b6      	b.n	8009996 <_malloc_r+0x4a>
 8009a28:	461a      	mov	r2, r3
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	42a3      	cmp	r3, r4
 8009a2e:	d1fb      	bne.n	8009a28 <_malloc_r+0xdc>
 8009a30:	2300      	movs	r3, #0
 8009a32:	6053      	str	r3, [r2, #4]
 8009a34:	e7de      	b.n	80099f4 <_malloc_r+0xa8>
 8009a36:	230c      	movs	r3, #12
 8009a38:	6033      	str	r3, [r6, #0]
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	f000 f80c 	bl	8009a58 <__malloc_unlock>
 8009a40:	e794      	b.n	800996c <_malloc_r+0x20>
 8009a42:	6005      	str	r5, [r0, #0]
 8009a44:	e7d6      	b.n	80099f4 <_malloc_r+0xa8>
 8009a46:	bf00      	nop
 8009a48:	20000968 	.word	0x20000968

08009a4c <__malloc_lock>:
 8009a4c:	4801      	ldr	r0, [pc, #4]	@ (8009a54 <__malloc_lock+0x8>)
 8009a4e:	f000 b84b 	b.w	8009ae8 <__retarget_lock_acquire_recursive>
 8009a52:	bf00      	nop
 8009a54:	20000aa8 	.word	0x20000aa8

08009a58 <__malloc_unlock>:
 8009a58:	4801      	ldr	r0, [pc, #4]	@ (8009a60 <__malloc_unlock+0x8>)
 8009a5a:	f000 b846 	b.w	8009aea <__retarget_lock_release_recursive>
 8009a5e:	bf00      	nop
 8009a60:	20000aa8 	.word	0x20000aa8

08009a64 <memset>:
 8009a64:	4402      	add	r2, r0
 8009a66:	4603      	mov	r3, r0
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d100      	bne.n	8009a6e <memset+0xa>
 8009a6c:	4770      	bx	lr
 8009a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8009a72:	e7f9      	b.n	8009a68 <memset+0x4>

08009a74 <_sbrk_r>:
 8009a74:	b538      	push	{r3, r4, r5, lr}
 8009a76:	4d06      	ldr	r5, [pc, #24]	@ (8009a90 <_sbrk_r+0x1c>)
 8009a78:	2300      	movs	r3, #0
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	4608      	mov	r0, r1
 8009a7e:	602b      	str	r3, [r5, #0]
 8009a80:	f7f7 fa8a 	bl	8000f98 <_sbrk>
 8009a84:	1c43      	adds	r3, r0, #1
 8009a86:	d102      	bne.n	8009a8e <_sbrk_r+0x1a>
 8009a88:	682b      	ldr	r3, [r5, #0]
 8009a8a:	b103      	cbz	r3, 8009a8e <_sbrk_r+0x1a>
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	bd38      	pop	{r3, r4, r5, pc}
 8009a90:	20000aa4 	.word	0x20000aa4

08009a94 <__errno>:
 8009a94:	4b01      	ldr	r3, [pc, #4]	@ (8009a9c <__errno+0x8>)
 8009a96:	6818      	ldr	r0, [r3, #0]
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	2000002c 	.word	0x2000002c

08009aa0 <__libc_init_array>:
 8009aa0:	b570      	push	{r4, r5, r6, lr}
 8009aa2:	4d0d      	ldr	r5, [pc, #52]	@ (8009ad8 <__libc_init_array+0x38>)
 8009aa4:	4c0d      	ldr	r4, [pc, #52]	@ (8009adc <__libc_init_array+0x3c>)
 8009aa6:	1b64      	subs	r4, r4, r5
 8009aa8:	10a4      	asrs	r4, r4, #2
 8009aaa:	2600      	movs	r6, #0
 8009aac:	42a6      	cmp	r6, r4
 8009aae:	d109      	bne.n	8009ac4 <__libc_init_array+0x24>
 8009ab0:	4d0b      	ldr	r5, [pc, #44]	@ (8009ae0 <__libc_init_array+0x40>)
 8009ab2:	4c0c      	ldr	r4, [pc, #48]	@ (8009ae4 <__libc_init_array+0x44>)
 8009ab4:	f000 f864 	bl	8009b80 <_init>
 8009ab8:	1b64      	subs	r4, r4, r5
 8009aba:	10a4      	asrs	r4, r4, #2
 8009abc:	2600      	movs	r6, #0
 8009abe:	42a6      	cmp	r6, r4
 8009ac0:	d105      	bne.n	8009ace <__libc_init_array+0x2e>
 8009ac2:	bd70      	pop	{r4, r5, r6, pc}
 8009ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ac8:	4798      	blx	r3
 8009aca:	3601      	adds	r6, #1
 8009acc:	e7ee      	b.n	8009aac <__libc_init_array+0xc>
 8009ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ad2:	4798      	blx	r3
 8009ad4:	3601      	adds	r6, #1
 8009ad6:	e7f2      	b.n	8009abe <__libc_init_array+0x1e>
 8009ad8:	08009bbc 	.word	0x08009bbc
 8009adc:	08009bbc 	.word	0x08009bbc
 8009ae0:	08009bbc 	.word	0x08009bbc
 8009ae4:	08009bc0 	.word	0x08009bc0

08009ae8 <__retarget_lock_acquire_recursive>:
 8009ae8:	4770      	bx	lr

08009aea <__retarget_lock_release_recursive>:
 8009aea:	4770      	bx	lr

08009aec <_free_r>:
 8009aec:	b538      	push	{r3, r4, r5, lr}
 8009aee:	4605      	mov	r5, r0
 8009af0:	2900      	cmp	r1, #0
 8009af2:	d041      	beq.n	8009b78 <_free_r+0x8c>
 8009af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009af8:	1f0c      	subs	r4, r1, #4
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	bfb8      	it	lt
 8009afe:	18e4      	addlt	r4, r4, r3
 8009b00:	f7ff ffa4 	bl	8009a4c <__malloc_lock>
 8009b04:	4a1d      	ldr	r2, [pc, #116]	@ (8009b7c <_free_r+0x90>)
 8009b06:	6813      	ldr	r3, [r2, #0]
 8009b08:	b933      	cbnz	r3, 8009b18 <_free_r+0x2c>
 8009b0a:	6063      	str	r3, [r4, #4]
 8009b0c:	6014      	str	r4, [r2, #0]
 8009b0e:	4628      	mov	r0, r5
 8009b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b14:	f7ff bfa0 	b.w	8009a58 <__malloc_unlock>
 8009b18:	42a3      	cmp	r3, r4
 8009b1a:	d908      	bls.n	8009b2e <_free_r+0x42>
 8009b1c:	6820      	ldr	r0, [r4, #0]
 8009b1e:	1821      	adds	r1, r4, r0
 8009b20:	428b      	cmp	r3, r1
 8009b22:	bf01      	itttt	eq
 8009b24:	6819      	ldreq	r1, [r3, #0]
 8009b26:	685b      	ldreq	r3, [r3, #4]
 8009b28:	1809      	addeq	r1, r1, r0
 8009b2a:	6021      	streq	r1, [r4, #0]
 8009b2c:	e7ed      	b.n	8009b0a <_free_r+0x1e>
 8009b2e:	461a      	mov	r2, r3
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	b10b      	cbz	r3, 8009b38 <_free_r+0x4c>
 8009b34:	42a3      	cmp	r3, r4
 8009b36:	d9fa      	bls.n	8009b2e <_free_r+0x42>
 8009b38:	6811      	ldr	r1, [r2, #0]
 8009b3a:	1850      	adds	r0, r2, r1
 8009b3c:	42a0      	cmp	r0, r4
 8009b3e:	d10b      	bne.n	8009b58 <_free_r+0x6c>
 8009b40:	6820      	ldr	r0, [r4, #0]
 8009b42:	4401      	add	r1, r0
 8009b44:	1850      	adds	r0, r2, r1
 8009b46:	4283      	cmp	r3, r0
 8009b48:	6011      	str	r1, [r2, #0]
 8009b4a:	d1e0      	bne.n	8009b0e <_free_r+0x22>
 8009b4c:	6818      	ldr	r0, [r3, #0]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	6053      	str	r3, [r2, #4]
 8009b52:	4408      	add	r0, r1
 8009b54:	6010      	str	r0, [r2, #0]
 8009b56:	e7da      	b.n	8009b0e <_free_r+0x22>
 8009b58:	d902      	bls.n	8009b60 <_free_r+0x74>
 8009b5a:	230c      	movs	r3, #12
 8009b5c:	602b      	str	r3, [r5, #0]
 8009b5e:	e7d6      	b.n	8009b0e <_free_r+0x22>
 8009b60:	6820      	ldr	r0, [r4, #0]
 8009b62:	1821      	adds	r1, r4, r0
 8009b64:	428b      	cmp	r3, r1
 8009b66:	bf04      	itt	eq
 8009b68:	6819      	ldreq	r1, [r3, #0]
 8009b6a:	685b      	ldreq	r3, [r3, #4]
 8009b6c:	6063      	str	r3, [r4, #4]
 8009b6e:	bf04      	itt	eq
 8009b70:	1809      	addeq	r1, r1, r0
 8009b72:	6021      	streq	r1, [r4, #0]
 8009b74:	6054      	str	r4, [r2, #4]
 8009b76:	e7ca      	b.n	8009b0e <_free_r+0x22>
 8009b78:	bd38      	pop	{r3, r4, r5, pc}
 8009b7a:	bf00      	nop
 8009b7c:	20000968 	.word	0x20000968

08009b80 <_init>:
 8009b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b82:	bf00      	nop
 8009b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b86:	bc08      	pop	{r3}
 8009b88:	469e      	mov	lr, r3
 8009b8a:	4770      	bx	lr

08009b8c <_fini>:
 8009b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b8e:	bf00      	nop
 8009b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b92:	bc08      	pop	{r3}
 8009b94:	469e      	mov	lr, r3
 8009b96:	4770      	bx	lr
