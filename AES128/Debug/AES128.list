
AES128.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009590  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08009718  08009718  0000a718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009840  08009840  0000b0dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009840  08009840  0000a840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009848  08009848  0000b0dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009848  08009848  0000a848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800984c  0800984c  0000a84c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08009850  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b0dc  2**0
                  CONTENTS
 10 .bss          000009cc  200000dc  200000dc  0000b0dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000aa8  20000aa8  0000b0dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b0dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001988b  00000000  00000000  0000b10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004261  00000000  00000000  00024997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  00028bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff4  00000000  00000000  0002a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024826  00000000  00000000  0002b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ce4b  00000000  00000000  0004f8ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdd4a  00000000  00000000  0006c715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013a45f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059ec  00000000  00000000  0013a4a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0013fe90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000dc 	.word	0x200000dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009700 	.word	0x08009700

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000e0 	.word	0x200000e0
 80001c4:	08009700 	.word	0x08009700

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <SHA1_Init>:
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

int SHA1_Init(SHA_CTX *ctx)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	int ret = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
	if ( ctx )
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d016      	beq.n	8000534 <SHA1_Init+0x40>
	{
		ctx->h[0] = 0x67452301;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4a0e      	ldr	r2, [pc, #56]	@ (8000544 <SHA1_Init+0x50>)
 800050a:	601a      	str	r2, [r3, #0]
		ctx->h[1] = 0xEFCDAB89;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a0e      	ldr	r2, [pc, #56]	@ (8000548 <SHA1_Init+0x54>)
 8000510:	605a      	str	r2, [r3, #4]
		ctx->h[2] = 0x98BADCFE;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4a0d      	ldr	r2, [pc, #52]	@ (800054c <SHA1_Init+0x58>)
 8000516:	609a      	str	r2, [r3, #8]
		ctx->h[3] = 0x10325476;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4a0d      	ldr	r2, [pc, #52]	@ (8000550 <SHA1_Init+0x5c>)
 800051c:	60da      	str	r2, [r3, #12]
		ctx->h[4] = 0xC3D2E1F0;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a0c      	ldr	r2, [pc, #48]	@ (8000554 <SHA1_Init+0x60>)
 8000522:	611a      	str	r2, [r3, #16]
		ctx->size = 0u;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	655a      	str	r2, [r3, #84]	@ 0x54
		ctx->total = 0u;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2200      	movs	r2, #0
 800052e:	659a      	str	r2, [r3, #88]	@ 0x58
		ret = 1;
 8000530:	2301      	movs	r3, #1
 8000532:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 8000534:	68fb      	ldr	r3, [r7, #12]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	67452301 	.word	0x67452301
 8000548:	efcdab89 	.word	0xefcdab89
 800054c:	98badcfe 	.word	0x98badcfe
 8000550:	10325476 	.word	0x10325476
 8000554:	c3d2e1f0 	.word	0xc3d2e1f0

08000558 <SHA1_ProcessBlock>:

#define ROTATE_LEFT32(a, n)  (((a) << (n)) | ((a) >> (32 - (n))))
static void SHA1_ProcessBlock(SHA_CTX *ctx)
{
 8000558:	b480      	push	{r7}
 800055a:	b08b      	sub	sp, #44	@ 0x2c
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	uint32_t blks[5];
	uint32_t *w;
	int i;

	/* initialize */
	for ( i = 0; i < 5; ++i )
 8000560:	2300      	movs	r3, #0
 8000562:	627b      	str	r3, [r7, #36]	@ 0x24
 8000564:	e00c      	b.n	8000580 <SHA1_ProcessBlock+0x28>
		blks[i] = ctx->h[i];
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800056a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800056e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	3328      	adds	r3, #40	@ 0x28
 8000574:	443b      	add	r3, r7
 8000576:	f843 2c20 	str.w	r2, [r3, #-32]
	for ( i = 0; i < 5; ++i )
 800057a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800057c:	3301      	adds	r3, #1
 800057e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000582:	2b04      	cmp	r3, #4
 8000584:	ddef      	ble.n	8000566 <SHA1_ProcessBlock+0xe>

	w = ctx->w;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	3314      	adds	r3, #20
 800058a:	61fb      	str	r3, [r7, #28]

	/* perform SHA-1 hash */
	for ( i = 0; i < 16; ++i )
 800058c:	2300      	movs	r3, #0
 800058e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000590:	e00d      	b.n	80005ae <SHA1_ProcessBlock+0x56>
		w[i] = be32toh(w[i]);
 8000592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	69fa      	ldr	r2, [r7, #28]
 8000598:	4413      	add	r3, r2
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	69f9      	ldr	r1, [r7, #28]
 80005a2:	440b      	add	r3, r1
 80005a4:	ba12      	rev	r2, r2
 80005a6:	601a      	str	r2, [r3, #0]
	for ( i = 0; i < 16; ++i )
 80005a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005aa:	3301      	adds	r3, #1
 80005ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80005ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005b0:	2b0f      	cmp	r3, #15
 80005b2:	ddee      	ble.n	8000592 <SHA1_ProcessBlock+0x3a>

	for( i = 0; i < 80; ++i )
 80005b4:	2300      	movs	r3, #0
 80005b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80005b8:	e0a7      	b.n	800070a <SHA1_ProcessBlock+0x1b2>
	{
		int tmp;
		if ( i >= 16 )
 80005ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005bc:	2b0f      	cmp	r3, #15
 80005be:	dd2a      	ble.n	8000616 <SHA1_ProcessBlock+0xbe>
			w[i & 0x0F] = ROTATE_LEFT32( w[(i+13) & 0x0F] ^ w[(i+8) & 0x0F] ^ w[(i+2) & 0x0F] ^ w[i & 0x0F], 1 );
 80005c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005c2:	330d      	adds	r3, #13
 80005c4:	f003 030f 	and.w	r3, r3, #15
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	69fa      	ldr	r2, [r7, #28]
 80005cc:	4413      	add	r3, r2
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005d2:	3308      	adds	r3, #8
 80005d4:	f003 030f 	and.w	r3, r3, #15
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	69f9      	ldr	r1, [r7, #28]
 80005dc:	440b      	add	r3, r1
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	405a      	eors	r2, r3
 80005e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005e4:	3302      	adds	r3, #2
 80005e6:	f003 030f 	and.w	r3, r3, #15
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	69f9      	ldr	r1, [r7, #28]
 80005ee:	440b      	add	r3, r1
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	405a      	eors	r2, r3
 80005f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005f6:	f003 030f 	and.w	r3, r3, #15
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	69f9      	ldr	r1, [r7, #28]
 80005fe:	440b      	add	r3, r1
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	405a      	eors	r2, r3
 8000604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000606:	f003 030f 	and.w	r3, r3, #15
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	69f9      	ldr	r1, [r7, #28]
 800060e:	440b      	add	r3, r1
 8000610:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8000614:	601a      	str	r2, [r3, #0]

		if ( i < 20 )
 8000616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000618:	2b13      	cmp	r3, #19
 800061a:	dc19      	bgt.n	8000650 <SHA1_ProcessBlock+0xf8>
			tmp = ROTATE_LEFT32(blks[0], 5) + ((blks[1] & blks[2]) | (~(blks[1]) & blks[3])) + blks[4] + w[i & 0x0F] + 0x5A827999;
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8000622:	68f9      	ldr	r1, [r7, #12]
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	4019      	ands	r1, r3
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	43d8      	mvns	r0, r3
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	4003      	ands	r3, r0
 8000630:	430b      	orrs	r3, r1
 8000632:	441a      	add	r2, r3
 8000634:	69bb      	ldr	r3, [r7, #24]
 8000636:	441a      	add	r2, r3
 8000638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800063a:	f003 030f 	and.w	r3, r3, #15
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	69f9      	ldr	r1, [r7, #28]
 8000642:	440b      	add	r3, r1
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	441a      	add	r2, r3
 8000648:	4b41      	ldr	r3, [pc, #260]	@ (8000750 <SHA1_ProcessBlock+0x1f8>)
 800064a:	4413      	add	r3, r2
 800064c:	623b      	str	r3, [r7, #32]
 800064e:	e04d      	b.n	80006ec <SHA1_ProcessBlock+0x194>
		else if ( i < 40 )
 8000650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000652:	2b27      	cmp	r3, #39	@ 0x27
 8000654:	dc16      	bgt.n	8000684 <SHA1_ProcessBlock+0x12c>
			tmp = ROTATE_LEFT32(blks[0], 5) + (blks[1]^blks[2]^blks[3]) + blks[4] + w[i & 0x0F] + 0x6ED9EBA1;
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800065c:	68f9      	ldr	r1, [r7, #12]
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	4059      	eors	r1, r3
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	404b      	eors	r3, r1
 8000666:	441a      	add	r2, r3
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	441a      	add	r2, r3
 800066c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800066e:	f003 030f 	and.w	r3, r3, #15
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	69f9      	ldr	r1, [r7, #28]
 8000676:	440b      	add	r3, r1
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	441a      	add	r2, r3
 800067c:	4b35      	ldr	r3, [pc, #212]	@ (8000754 <SHA1_ProcessBlock+0x1fc>)
 800067e:	4413      	add	r3, r2
 8000680:	623b      	str	r3, [r7, #32]
 8000682:	e033      	b.n	80006ec <SHA1_ProcessBlock+0x194>
		else if ( i < 60 )
 8000684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000686:	2b3b      	cmp	r3, #59	@ 0x3b
 8000688:	dc1a      	bgt.n	80006c0 <SHA1_ProcessBlock+0x168>
			tmp = ROTATE_LEFT32(blks[0], 5) + ((blks[1] & blks[2]) | (blks[1] & blks[3]) | (blks[2] & blks[3])) + blks[4] + w[i & 0x0F] + 0x8F1BBCDC;
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8000690:	68f9      	ldr	r1, [r7, #12]
 8000692:	6938      	ldr	r0, [r7, #16]
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	4303      	orrs	r3, r0
 8000698:	4019      	ands	r1, r3
 800069a:	6938      	ldr	r0, [r7, #16]
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	4003      	ands	r3, r0
 80006a0:	430b      	orrs	r3, r1
 80006a2:	441a      	add	r2, r3
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	441a      	add	r2, r3
 80006a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	69f9      	ldr	r1, [r7, #28]
 80006b2:	440b      	add	r3, r1
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	441a      	add	r2, r3
 80006b8:	4b27      	ldr	r3, [pc, #156]	@ (8000758 <SHA1_ProcessBlock+0x200>)
 80006ba:	4413      	add	r3, r2
 80006bc:	623b      	str	r3, [r7, #32]
 80006be:	e015      	b.n	80006ec <SHA1_ProcessBlock+0x194>
		else
			tmp = ROTATE_LEFT32(blks[0], 5) + (blks[1]^blks[2]^blks[3]) + blks[4] + w[i & 0x0F] + 0xCA62C1D6;
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80006c6:	68f9      	ldr	r1, [r7, #12]
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	4059      	eors	r1, r3
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	404b      	eors	r3, r1
 80006d0:	441a      	add	r2, r3
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	441a      	add	r2, r3
 80006d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d8:	f003 030f 	and.w	r3, r3, #15
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	69f9      	ldr	r1, [r7, #28]
 80006e0:	440b      	add	r3, r1
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	441a      	add	r2, r3
 80006e6:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <SHA1_ProcessBlock+0x204>)
 80006e8:	4413      	add	r3, r2
 80006ea:	623b      	str	r3, [r7, #32]

		/* update registers */
		blks[4] = blks[3];
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	61bb      	str	r3, [r7, #24]
		blks[3] = blks[2];
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	617b      	str	r3, [r7, #20]
		blks[2] = ROTATE_LEFT32(blks[1], 30);
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80006fa:	613b      	str	r3, [r7, #16]
		blks[1] = blks[0];
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	60fb      	str	r3, [r7, #12]
		blks[0] = tmp;
 8000700:	6a3b      	ldr	r3, [r7, #32]
 8000702:	60bb      	str	r3, [r7, #8]
	for( i = 0; i < 80; ++i )
 8000704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000706:	3301      	adds	r3, #1
 8000708:	627b      	str	r3, [r7, #36]	@ 0x24
 800070a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800070c:	2b4f      	cmp	r3, #79	@ 0x4f
 800070e:	f77f af54 	ble.w	80005ba <SHA1_ProcessBlock+0x62>
	}

	/* update of hash */
	for ( i = 0; i < 5; ++i )
 8000712:	2300      	movs	r3, #0
 8000714:	627b      	str	r3, [r7, #36]	@ 0x24
 8000716:	e011      	b.n	800073c <SHA1_ProcessBlock+0x1e4>
		ctx->h[i] += blks[i];
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800071c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	3328      	adds	r3, #40	@ 0x28
 8000726:	443b      	add	r3, r7
 8000728:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800072c:	18d1      	adds	r1, r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for ( i = 0; i < 5; ++i )
 8000736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000738:	3301      	adds	r3, #1
 800073a:	627b      	str	r3, [r7, #36]	@ 0x24
 800073c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073e:	2b04      	cmp	r3, #4
 8000740:	ddea      	ble.n	8000718 <SHA1_ProcessBlock+0x1c0>
}
 8000742:	bf00      	nop
 8000744:	bf00      	nop
 8000746:	372c      	adds	r7, #44	@ 0x2c
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	5a827999 	.word	0x5a827999
 8000754:	6ed9eba1 	.word	0x6ed9eba1
 8000758:	8f1bbcdc 	.word	0x8f1bbcdc
 800075c:	ca62c1d6 	.word	0xca62c1d6

08000760 <SHA1_Final>:

int SHA1_Final(unsigned char *md, SHA_CTX *ctx)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
	int i;
	int ret = 0;
 800076a:	2100      	movs	r1, #0
 800076c:	61b9      	str	r1, [r7, #24]
	size_t pad_amount;
	uint64_t total;

	/* length before pad */
	total = ctx->total * 8;
 800076e:	6839      	ldr	r1, [r7, #0]
 8000770:	6d89      	ldr	r1, [r1, #88]	@ 0x58
 8000772:	00c9      	lsls	r1, r1, #3
 8000774:	2000      	movs	r0, #0
 8000776:	460a      	mov	r2, r1
 8000778:	4603      	mov	r3, r0
 800077a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if ( ctx->size < 56 )
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000782:	2b37      	cmp	r3, #55	@ 0x37
 8000784:	d805      	bhi.n	8000792 <SHA1_Final+0x32>
		pad_amount = 56 - ctx->size;
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800078a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	e004      	b.n	800079c <SHA1_Final+0x3c>
	else
		pad_amount = 64 + 56 - ctx->size;
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000796:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 800079a:	617b      	str	r3, [r7, #20]

	SHA1_Update(ctx, pad, pad_amount);
 800079c:	697a      	ldr	r2, [r7, #20]
 800079e:	491c      	ldr	r1, [pc, #112]	@ (8000810 <SHA1_Final+0xb0>)
 80007a0:	6838      	ldr	r0, [r7, #0]
 80007a2:	f000 f837 	bl	8000814 <SHA1_Update>

	ctx->w[14] = htobe32((uint32_t)(total >> 32));
 80007a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80007aa:	f04f 0200 	mov.w	r2, #0
 80007ae:	f04f 0300 	mov.w	r3, #0
 80007b2:	000a      	movs	r2, r1
 80007b4:	2300      	movs	r3, #0
 80007b6:	4613      	mov	r3, r2
 80007b8:	ba1a      	rev	r2, r3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	64da      	str	r2, [r3, #76]	@ 0x4c
	ctx->w[15] = htobe32((uint32_t)total);
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	ba1a      	rev	r2, r3
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	651a      	str	r2, [r3, #80]	@ 0x50

	SHA1_ProcessBlock(ctx);
 80007c6:	6838      	ldr	r0, [r7, #0]
 80007c8:	f7ff fec6 	bl	8000558 <SHA1_ProcessBlock>

	for ( i = 0; i < 5; ++i )
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
 80007d0:	e00b      	b.n	80007ea <SHA1_Final+0x8a>
		ctx->h[i] = htobe32(ctx->h[i]);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	69fa      	ldr	r2, [r7, #28]
 80007d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007da:	ba19      	rev	r1, r3
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	69fa      	ldr	r2, [r7, #28]
 80007e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for ( i = 0; i < 5; ++i )
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	3301      	adds	r3, #1
 80007e8:	61fb      	str	r3, [r7, #28]
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	2b04      	cmp	r3, #4
 80007ee:	ddf0      	ble.n	80007d2 <SHA1_Final+0x72>

	if ( md )
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d007      	beq.n	8000806 <SHA1_Final+0xa6>
	{
		memcpy( md, &ctx->h[0], SHA1_DIGEST_LENGTH );
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	2214      	movs	r2, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f008 ff27 	bl	8009650 <memcpy>
		ret = 1;
 8000802:	2301      	movs	r3, #1
 8000804:	61bb      	str	r3, [r7, #24]
	}

	return ret;
 8000806:	69bb      	ldr	r3, [r7, #24]
}
 8000808:	4618      	mov	r0, r3
 800080a:	3720      	adds	r7, #32
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000000 	.word	0x20000000

08000814 <SHA1_Update>:

int SHA1_Update(SHA_CTX *ctx, const void *data, size_t len)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
	while ( len > 0 )
 8000820:	e033      	b.n	800088a <SHA1_Update+0x76>
	{
		unsigned int n = 64 - ctx->size;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000826:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800082a:	617b      	str	r3, [r7, #20]
		if ( len < n )
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	429a      	cmp	r2, r3
 8000832:	d201      	bcs.n	8000838 <SHA1_Update+0x24>
			n = len;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	617b      	str	r3, [r7, #20]

		memcpy(ctx->buffer + ctx->size, data, n);
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f103 0214 	add.w	r2, r3, #20
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000842:	4413      	add	r3, r2
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	68b9      	ldr	r1, [r7, #8]
 8000848:	4618      	mov	r0, r3
 800084a:	f008 ff01 	bl	8009650 <memcpy>

		ctx->size += n;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	441a      	add	r2, r3
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	655a      	str	r2, [r3, #84]	@ 0x54
		ctx->total += n;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	441a      	add	r2, r3
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	659a      	str	r2, [r3, #88]	@ 0x58

		data = (uint8_t *)data + n;
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	4413      	add	r3, r2
 800086c:	60bb      	str	r3, [r7, #8]
		len -= n;
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	607b      	str	r3, [r7, #4]

		if ( ctx->size == 64 )
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800087a:	2b40      	cmp	r3, #64	@ 0x40
 800087c:	d105      	bne.n	800088a <SHA1_Update+0x76>
		{
			SHA1_ProcessBlock(ctx);
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f7ff fe6a 	bl	8000558 <SHA1_ProcessBlock>
			ctx->size = 0;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2200      	movs	r2, #0
 8000888:	655a      	str	r2, [r3, #84]	@ 0x54
	while ( len > 0 )
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1c8      	bne.n	8000822 <SHA1_Update+0xe>
		}
	}
	return 1;
 8000890:	2301      	movs	r3, #1
}
 8000892:	4618      	mov	r0, r3
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 800089c:	b480      	push	{r7}
 800089e:	b089      	sub	sp, #36	@ 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
 80008aa:	e030      	b.n	800090e <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	441a      	add	r2, r3
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	6879      	ldr	r1, [r7, #4]
 80008ba:	440b      	add	r3, r1
 80008bc:	7812      	ldrb	r2, [r2, #0]
 80008be:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	3301      	adds	r3, #1
 80008c6:	683a      	ldr	r2, [r7, #0]
 80008c8:	441a      	add	r2, r3
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	3301      	adds	r3, #1
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	440b      	add	r3, r1
 80008d4:	7812      	ldrb	r2, [r2, #0]
 80008d6:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	3302      	adds	r3, #2
 80008de:	683a      	ldr	r2, [r7, #0]
 80008e0:	441a      	add	r2, r3
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	3302      	adds	r3, #2
 80008e8:	6879      	ldr	r1, [r7, #4]
 80008ea:	440b      	add	r3, r1
 80008ec:	7812      	ldrb	r2, [r2, #0]
 80008ee:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	3303      	adds	r3, #3
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	441a      	add	r2, r3
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	3303      	adds	r3, #3
 8000900:	6879      	ldr	r1, [r7, #4]
 8000902:	440b      	add	r3, r1
 8000904:	7812      	ldrb	r2, [r2, #0]
 8000906:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	3301      	adds	r3, #1
 800090c:	61fb      	str	r3, [r7, #28]
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	2b03      	cmp	r3, #3
 8000912:	d9cb      	bls.n	80008ac <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8000914:	2304      	movs	r3, #4
 8000916:	61fb      	str	r3, [r7, #28]
 8000918:	e081      	b.n	8000a1e <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3b01      	subs	r3, #1
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	4413      	add	r3, r2
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	3301      	adds	r3, #1
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	4413      	add	r3, r2
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	3302      	adds	r3, #2
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	4413      	add	r3, r2
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	3303      	adds	r3, #3
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	4413      	add	r3, r2
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	f003 0303 	and.w	r3, r3, #3
 8000956:	2b00      	cmp	r3, #0
 8000958:	d125      	bne.n	80009a6 <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 800095a:	7b3b      	ldrb	r3, [r7, #12]
 800095c:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 800095e:	7b7b      	ldrb	r3, [r7, #13]
 8000960:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 8000962:	7bbb      	ldrb	r3, [r7, #14]
 8000964:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 800096a:	7dfb      	ldrb	r3, [r7, #23]
 800096c:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and 
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 800096e:	7b3b      	ldrb	r3, [r7, #12]
 8000970:	461a      	mov	r2, r3
 8000972:	4b30      	ldr	r3, [pc, #192]	@ (8000a34 <KeyExpansion+0x198>)
 8000974:	5c9b      	ldrb	r3, [r3, r2]
 8000976:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 8000978:	7b7b      	ldrb	r3, [r7, #13]
 800097a:	461a      	mov	r2, r3
 800097c:	4b2d      	ldr	r3, [pc, #180]	@ (8000a34 <KeyExpansion+0x198>)
 800097e:	5c9b      	ldrb	r3, [r3, r2]
 8000980:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 8000982:	7bbb      	ldrb	r3, [r7, #14]
 8000984:	461a      	mov	r2, r3
 8000986:	4b2b      	ldr	r3, [pc, #172]	@ (8000a34 <KeyExpansion+0x198>)
 8000988:	5c9b      	ldrb	r3, [r3, r2]
 800098a:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	461a      	mov	r2, r3
 8000990:	4b28      	ldr	r3, [pc, #160]	@ (8000a34 <KeyExpansion+0x198>)
 8000992:	5c9b      	ldrb	r3, [r3, r2]
 8000994:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8000996:	7b3a      	ldrb	r2, [r7, #12]
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	4926      	ldr	r1, [pc, #152]	@ (8000a38 <KeyExpansion+0x19c>)
 800099e:	5ccb      	ldrb	r3, [r1, r3]
 80009a0:	4053      	eors	r3, r2
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	3b04      	subs	r3, #4
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	4413      	add	r3, r2
 80009ba:	7819      	ldrb	r1, [r3, #0]
 80009bc:	7b3a      	ldrb	r2, [r7, #12]
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	4403      	add	r3, r0
 80009c4:	404a      	eors	r2, r1
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	3301      	adds	r3, #1
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	7819      	ldrb	r1, [r3, #0]
 80009d4:	7b7a      	ldrb	r2, [r7, #13]
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	3301      	adds	r3, #1
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	4403      	add	r3, r0
 80009de:	404a      	eors	r2, r1
 80009e0:	b2d2      	uxtb	r2, r2
 80009e2:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	3302      	adds	r3, #2
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	4413      	add	r3, r2
 80009ec:	7819      	ldrb	r1, [r3, #0]
 80009ee:	7bba      	ldrb	r2, [r7, #14]
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	3302      	adds	r3, #2
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	4403      	add	r3, r0
 80009f8:	404a      	eors	r2, r1
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	3303      	adds	r3, #3
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	7819      	ldrb	r1, [r3, #0]
 8000a08:	7bfa      	ldrb	r2, [r7, #15]
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	3303      	adds	r3, #3
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	4403      	add	r3, r0
 8000a12:	404a      	eors	r2, r1
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	61fb      	str	r3, [r7, #28]
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	2b2b      	cmp	r3, #43	@ 0x2b
 8000a22:	f67f af7a 	bls.w	800091a <KeyExpansion+0x7e>
  }
}
 8000a26:	bf00      	nop
 8000a28:	bf00      	nop
 8000a2a:	3724      	adds	r7, #36	@ 0x24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	0800971c 	.word	0x0800971c
 8000a38:	0800981c 	.word	0x0800981c

08000a3c <AES_init_ctx>:

void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6839      	ldr	r1, [r7, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff ff26 	bl	800089c <KeyExpansion>
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b087      	sub	sp, #28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
 8000a64:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8000a66:	2300      	movs	r3, #0
 8000a68:	75fb      	strb	r3, [r7, #23]
 8000a6a:	e027      	b.n	8000abc <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	75bb      	strb	r3, [r7, #22]
 8000a70:	e01e      	b.n	8000ab0 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8000a72:	7dfa      	ldrb	r2, [r7, #23]
 8000a74:	7dbb      	ldrb	r3, [r7, #22]
 8000a76:	68b9      	ldr	r1, [r7, #8]
 8000a78:	0092      	lsls	r2, r2, #2
 8000a7a:	440a      	add	r2, r1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	7818      	ldrb	r0, [r3, #0]
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
 8000a82:	009a      	lsls	r2, r3, #2
 8000a84:	7dfb      	ldrb	r3, [r7, #23]
 8000a86:	4413      	add	r3, r2
 8000a88:	009a      	lsls	r2, r3, #2
 8000a8a:	7dbb      	ldrb	r3, [r7, #22]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	461a      	mov	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4413      	add	r3, r2
 8000a94:	7819      	ldrb	r1, [r3, #0]
 8000a96:	7dfa      	ldrb	r2, [r7, #23]
 8000a98:	7dbb      	ldrb	r3, [r7, #22]
 8000a9a:	4041      	eors	r1, r0
 8000a9c:	b2c8      	uxtb	r0, r1
 8000a9e:	68b9      	ldr	r1, [r7, #8]
 8000aa0:	0092      	lsls	r2, r2, #2
 8000aa2:	440a      	add	r2, r1
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8000aaa:	7dbb      	ldrb	r3, [r7, #22]
 8000aac:	3301      	adds	r3, #1
 8000aae:	75bb      	strb	r3, [r7, #22]
 8000ab0:	7dbb      	ldrb	r3, [r7, #22]
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d9dd      	bls.n	8000a72 <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 8000ab6:	7dfb      	ldrb	r3, [r7, #23]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	75fb      	strb	r3, [r7, #23]
 8000abc:	7dfb      	ldrb	r3, [r7, #23]
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	d9d4      	bls.n	8000a6c <AddRoundKey+0x14>
    }
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	bf00      	nop
 8000ac6:	371c      	adds	r7, #28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	73fb      	strb	r3, [r7, #15]
 8000adc:	e01d      	b.n	8000b1a <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	73bb      	strb	r3, [r7, #14]
 8000ae2:	e014      	b.n	8000b0e <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8000ae4:	7bba      	ldrb	r2, [r7, #14]
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	6879      	ldr	r1, [r7, #4]
 8000aea:	0092      	lsls	r2, r2, #2
 8000aec:	440a      	add	r2, r1
 8000aee:	4413      	add	r3, r2
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	4618      	mov	r0, r3
 8000af4:	7bba      	ldrb	r2, [r7, #14]
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	490d      	ldr	r1, [pc, #52]	@ (8000b30 <SubBytes+0x60>)
 8000afa:	5c08      	ldrb	r0, [r1, r0]
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	0092      	lsls	r2, r2, #2
 8000b00:	440a      	add	r2, r1
 8000b02:	4413      	add	r3, r2
 8000b04:	4602      	mov	r2, r0
 8000b06:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8000b08:	7bbb      	ldrb	r3, [r7, #14]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	73bb      	strb	r3, [r7, #14]
 8000b0e:	7bbb      	ldrb	r3, [r7, #14]
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	d9e7      	bls.n	8000ae4 <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	3301      	adds	r3, #1
 8000b18:	73fb      	strb	r3, [r7, #15]
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	d9de      	bls.n	8000ade <SubBytes+0xe>
    }
  }
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	0800971c 	.word	0x0800971c

08000b34 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	785b      	ldrb	r3, [r3, #1]
 8000b40:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	795a      	ldrb	r2, [r3, #5]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	7a5a      	ldrb	r2, [r3, #9]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	7b5a      	ldrb	r2, [r3, #13]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7bfa      	ldrb	r2, [r7, #15]
 8000b5e:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left  
  temp           = (*state)[0][2];
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	789b      	ldrb	r3, [r3, #2]
 8000b64:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	7a9a      	ldrb	r2, [r3, #10]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	7bfa      	ldrb	r2, [r7, #15]
 8000b72:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	799b      	ldrb	r3, [r3, #6]
 8000b78:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	7b9a      	ldrb	r2, [r3, #14]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	7bfa      	ldrb	r2, [r7, #15]
 8000b86:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	78db      	ldrb	r3, [r3, #3]
 8000b8c:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	7bda      	ldrb	r2, [r3, #15]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	7ada      	ldrb	r2, [r3, #11]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	79da      	ldrb	r2, [r3, #7]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	7bfa      	ldrb	r2, [r7, #15]
 8000baa:	71da      	strb	r2, [r3, #7]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <xtime>:

static uint8_t xtime(uint8_t x)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	b25a      	sxtb	r2, r3
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	09db      	lsrs	r3, r3, #7
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	0049      	lsls	r1, r1, #1
 8000bd6:	440b      	add	r3, r1
 8000bd8:	4619      	mov	r1, r3
 8000bda:	00c8      	lsls	r0, r1, #3
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4603      	mov	r3, r0
 8000be0:	440b      	add	r3, r1
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	4053      	eors	r3, r2
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	b2db      	uxtb	r3, r3
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b084      	sub	sp, #16
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	73fb      	strb	r3, [r7, #15]
 8000c02:	e0a4      	b.n	8000d4e <MixColumns+0x158>
  {  
    t   = (*state)[i][0];
 8000c04:	7bfa      	ldrb	r2, [r7, #15]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8000c0c:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8000c0e:	7bfa      	ldrb	r2, [r7, #15]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	785b      	ldrb	r3, [r3, #1]
 8000c20:	4053      	eors	r3, r2
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	789b      	ldrb	r3, [r3, #2]
 8000c2e:	4053      	eors	r3, r2
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	440b      	add	r3, r1
 8000c3a:	78db      	ldrb	r3, [r3, #3]
 8000c3c:	4053      	eors	r3, r2
 8000c3e:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 8000c40:	7bfa      	ldrb	r2, [r7, #15]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	440b      	add	r3, r1
 8000c50:	785b      	ldrb	r3, [r3, #1]
 8000c52:	4053      	eors	r3, r2
 8000c54:	733b      	strb	r3, [r7, #12]
 8000c56:	7b3b      	ldrb	r3, [r7, #12]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ffad 	bl	8000bb8 <xtime>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	733b      	strb	r3, [r7, #12]
 8000c62:	7bfa      	ldrb	r2, [r7, #15]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 8000c6a:	7b3a      	ldrb	r2, [r7, #12]
 8000c6c:	7b7b      	ldrb	r3, [r7, #13]
 8000c6e:	4053      	eors	r3, r2
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	7bfa      	ldrb	r2, [r7, #15]
 8000c74:	404b      	eors	r3, r1
 8000c76:	b2d9      	uxtb	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	785a      	ldrb	r2, [r3, #1]
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	440b      	add	r3, r1
 8000c90:	789b      	ldrb	r3, [r3, #2]
 8000c92:	4053      	eors	r3, r2
 8000c94:	733b      	strb	r3, [r7, #12]
 8000c96:	7b3b      	ldrb	r3, [r7, #12]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff8d 	bl	8000bb8 <xtime>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	733b      	strb	r3, [r7, #12]
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	7859      	ldrb	r1, [r3, #1]
 8000cac:	7b3a      	ldrb	r2, [r7, #12]
 8000cae:	7b7b      	ldrb	r3, [r7, #13]
 8000cb0:	4053      	eors	r3, r2
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	404a      	eors	r2, r1
 8000cb8:	b2d1      	uxtb	r1, r2
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	460a      	mov	r2, r1
 8000cc2:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	789a      	ldrb	r2, [r3, #2]
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	6879      	ldr	r1, [r7, #4]
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	78db      	ldrb	r3, [r3, #3]
 8000cd8:	4053      	eors	r3, r2
 8000cda:	733b      	strb	r3, [r7, #12]
 8000cdc:	7b3b      	ldrb	r3, [r7, #12]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ff6a 	bl	8000bb8 <xtime>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	733b      	strb	r3, [r7, #12]
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	7899      	ldrb	r1, [r3, #2]
 8000cf2:	7b3a      	ldrb	r2, [r7, #12]
 8000cf4:	7b7b      	ldrb	r3, [r7, #13]
 8000cf6:	4053      	eors	r3, r2
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	404a      	eors	r2, r1
 8000cfe:	b2d1      	uxtb	r1, r2
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	460a      	mov	r2, r1
 8000d08:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	78da      	ldrb	r2, [r3, #3]
 8000d14:	7bbb      	ldrb	r3, [r7, #14]
 8000d16:	4053      	eors	r3, r2
 8000d18:	733b      	strb	r3, [r7, #12]
 8000d1a:	7b3b      	ldrb	r3, [r7, #12]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff4b 	bl	8000bb8 <xtime>
 8000d22:	4603      	mov	r3, r0
 8000d24:	733b      	strb	r3, [r7, #12]
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	78d9      	ldrb	r1, [r3, #3]
 8000d30:	7b3a      	ldrb	r2, [r7, #12]
 8000d32:	7b7b      	ldrb	r3, [r7, #13]
 8000d34:	4053      	eors	r3, r2
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	404a      	eors	r2, r1
 8000d3c:	b2d1      	uxtb	r1, r2
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	460a      	mov	r2, r1
 8000d46:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	73fb      	strb	r3, [r7, #15]
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	f67f af57 	bls.w	8000c04 <MixColumns+0xe>
  }
}
 8000d56:	bf00      	nop
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <Cipher>:
}
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	2000      	movs	r0, #0
 8000d74:	f7ff fe70 	bl	8000a58 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 8000d78:	2301      	movs	r3, #1
 8000d7a:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff fea7 	bl	8000ad0 <SubBytes>
    ShiftRows(state);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff fed6 	bl	8000b34 <ShiftRows>
    if (round == Nr) {
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	2b0a      	cmp	r3, #10
 8000d8c:	d00c      	beq.n	8000da8 <Cipher+0x48>
      break;
    }
    MixColumns(state);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ff31 	bl	8000bf6 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	683a      	ldr	r2, [r7, #0]
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fe5c 	bl	8000a58 <AddRoundKey>
  for (round = 1; ; ++round)
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	3301      	adds	r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
 8000da6:	e7e9      	b.n	8000d7c <Cipher+0x1c>
      break;
 8000da8:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	200a      	movs	r0, #10
 8000db0:	f7ff fe52 	bl	8000a58 <AddRoundKey>
}
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <AES_ECB_encrypt>:
/*****************************************************************************/
#if defined(ECB) && (ECB == 1)


void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher((state_t*)buf, ctx->RoundKey);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	6838      	ldr	r0, [r7, #0]
 8000dcc:	f7ff ffc8 	bl	8000d60 <Cipher>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd8:	b5b0      	push	{r4, r5, r7, lr}
 8000dda:	b0c8      	sub	sp, #288	@ 0x120
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dde:	f000 fcdb 	bl	8001798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de2:	f000 f855 	bl	8000e90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de6:	f000 f97b 	bl	80010e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dea:	f000 f8bb 	bl	8000f64 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000dee:	f000 f8e7 	bl	8000fc0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000df2:	f000 f915 	bl	8001020 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000df6:	f008 f821 	bl	8008e3c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000dfa:	f000 f947 	bl	800108c <MX_USART2_UART_Init>


  // AES128

  struct AES_ctx ctx;
  AES_init_ctx(&ctx, aes_key);  // Key oluşturmamız lazım.
 8000dfe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000e02:	491c      	ldr	r1, [pc, #112]	@ (8000e74 <main+0x9c>)
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fe19 	bl	8000a3c <AES_init_ctx>

  // Veriyi Şifreliyoruz.
  memcpy(encrypted, mesaj, 16);
 8000e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8000e78 <main+0xa0>)
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <main+0xa4>)
 8000e0e:	4614      	mov	r4, r2
 8000e10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AES_ECB_encrypt(&ctx, encrypted);
 8000e16:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000e1a:	4917      	ldr	r1, [pc, #92]	@ (8000e78 <main+0xa0>)
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ffcd 	bl	8000dbc <AES_ECB_encrypt>

  // SHA1

  SHA_CTX atx;

  SHA1_Init(&atx);
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fb65 	bl	80004f4 <SHA1_Init>

  SHA1_Update(&atx, encrypted, 16);
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2210      	movs	r2, #16
 8000e2e:	4912      	ldr	r1, [pc, #72]	@ (8000e78 <main+0xa0>)
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fcef 	bl	8000814 <SHA1_Update>

  SHA1_Final(output_hash, &atx);
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4811      	ldr	r0, [pc, #68]	@ (8000e80 <main+0xa8>)
 8000e3c:	f7ff fc90 	bl	8000760 <SHA1_Final>

  memcpy(Transmit_Data,encrypted,16);
 8000e40:	4a10      	ldr	r2, [pc, #64]	@ (8000e84 <main+0xac>)
 8000e42:	4b0d      	ldr	r3, [pc, #52]	@ (8000e78 <main+0xa0>)
 8000e44:	4614      	mov	r4, r2
 8000e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  memcpy(Transmit_Data +16,output_hash,20);
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	@ (8000e88 <main+0xb0>)
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <main+0xa8>)
 8000e50:	4615      	mov	r5, r2
 8000e52:	461c      	mov	r4, r3
 8000e54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e56:	6028      	str	r0, [r5, #0]
 8000e58:	6069      	str	r1, [r5, #4]
 8000e5a:	60aa      	str	r2, [r5, #8]
 8000e5c:	60eb      	str	r3, [r5, #12]
 8000e5e:	6820      	ldr	r0, [r4, #0]
 8000e60:	6128      	str	r0, [r5, #16]

  HAL_UART_Transmit_IT(&huart2, Transmit_Data, 36);
 8000e62:	2224      	movs	r2, #36	@ 0x24
 8000e64:	4907      	ldr	r1, [pc, #28]	@ (8000e84 <main+0xac>)
 8000e66:	4809      	ldr	r0, [pc, #36]	@ (8000e8c <main+0xb4>)
 8000e68:	f004 f922 	bl	80050b0 <HAL_UART_Transmit_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e6c:	f008 f80c 	bl	8008e88 <MX_USB_HOST_Process>
 8000e70:	e7fc      	b.n	8000e6c <main+0x94>
 8000e72:	bf00      	nop
 8000e74:	20000040 	.word	0x20000040
 8000e78:	200000f8 	.word	0x200000f8
 8000e7c:	20000050 	.word	0x20000050
 8000e80:	2000012c 	.word	0x2000012c
 8000e84:	20000108 	.word	0x20000108
 8000e88:	20000118 	.word	0x20000118
 8000e8c:	20000234 	.word	0x20000234

08000e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b094      	sub	sp, #80	@ 0x50
 8000e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e96:	f107 0320 	add.w	r3, r7, #32
 8000e9a:	2230      	movs	r2, #48	@ 0x30
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f008 fb92 	bl	80095c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	4b28      	ldr	r3, [pc, #160]	@ (8000f5c <SystemClock_Config+0xcc>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebc:	4a27      	ldr	r2, [pc, #156]	@ (8000f5c <SystemClock_Config+0xcc>)
 8000ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec4:	4b25      	ldr	r3, [pc, #148]	@ (8000f5c <SystemClock_Config+0xcc>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	4b22      	ldr	r3, [pc, #136]	@ (8000f60 <SystemClock_Config+0xd0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a21      	ldr	r2, [pc, #132]	@ (8000f60 <SystemClock_Config+0xd0>)
 8000eda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f60 <SystemClock_Config+0xd0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eec:	2301      	movs	r3, #1
 8000eee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000efa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f00:	2308      	movs	r3, #8
 8000f02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f04:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f0e:	2307      	movs	r3, #7
 8000f10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	4618      	mov	r0, r3
 8000f18:	f003 fa1c 	bl	8004354 <HAL_RCC_OscConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f22:	f000 f9f5 	bl	8001310 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f26:	230f      	movs	r3, #15
 8000f28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f32:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	2105      	movs	r1, #5
 8000f44:	4618      	mov	r0, r3
 8000f46:	f003 fc7d 	bl	8004844 <HAL_RCC_ClockConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f50:	f000 f9de 	bl	8001310 <Error_Handler>
  }
}
 8000f54:	bf00      	nop
 8000f56:	3750      	adds	r7, #80	@ 0x50
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40007000 	.word	0x40007000

08000f64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <MX_I2C1_Init+0x50>)
 8000f6a:	4a13      	ldr	r2, [pc, #76]	@ (8000fb8 <MX_I2C1_Init+0x54>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	@ (8000fb4 <MX_I2C1_Init+0x50>)
 8000f70:	4a12      	ldr	r2, [pc, #72]	@ (8000fbc <MX_I2C1_Init+0x58>)
 8000f72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <MX_I2C1_Init+0x50>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <MX_I2C1_Init+0x50>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <MX_I2C1_Init+0x50>)
 8000f82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <MX_I2C1_Init+0x50>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <MX_I2C1_Init+0x50>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f94:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <MX_I2C1_Init+0x50>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <MX_I2C1_Init+0x50>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fa0:	4804      	ldr	r0, [pc, #16]	@ (8000fb4 <MX_I2C1_Init+0x50>)
 8000fa2:	f002 fbf3 	bl	800378c <HAL_I2C_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fac:	f000 f9b0 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000140 	.word	0x20000140
 8000fb8:	40005400 	.word	0x40005400
 8000fbc:	000186a0 	.word	0x000186a0

08000fc0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000fc4:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <MX_I2S3_Init+0x54>)
 8000fc6:	4a14      	ldr	r2, [pc, #80]	@ (8001018 <MX_I2S3_Init+0x58>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000fca:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <MX_I2S3_Init+0x54>)
 8000fcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fd0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <MX_I2S3_Init+0x54>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <MX_I2S3_Init+0x54>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000fde:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <MX_I2S3_Init+0x54>)
 8000fe0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fe4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <MX_I2S3_Init+0x54>)
 8000fe8:	4a0c      	ldr	r2, [pc, #48]	@ (800101c <MX_I2S3_Init+0x5c>)
 8000fea:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000fec:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <MX_I2S3_Init+0x54>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <MX_I2S3_Init+0x54>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <MX_I2S3_Init+0x54>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000ffe:	4805      	ldr	r0, [pc, #20]	@ (8001014 <MX_I2S3_Init+0x54>)
 8001000:	f002 fd08 	bl	8003a14 <HAL_I2S_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800100a:	f000 f981 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000194 	.word	0x20000194
 8001018:	40003c00 	.word	0x40003c00
 800101c:	00017700 	.word	0x00017700

08001020 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001024:	4b17      	ldr	r3, [pc, #92]	@ (8001084 <MX_SPI1_Init+0x64>)
 8001026:	4a18      	ldr	r2, [pc, #96]	@ (8001088 <MX_SPI1_Init+0x68>)
 8001028:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800102a:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <MX_SPI1_Init+0x64>)
 800102c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001030:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001032:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <MX_SPI1_Init+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001038:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <MX_SPI1_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800103e:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <MX_SPI1_Init+0x64>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001044:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <MX_SPI1_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800104a:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <MX_SPI1_Init+0x64>)
 800104c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001050:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001052:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <MX_SPI1_Init+0x64>)
 8001054:	2200      	movs	r2, #0
 8001056:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001058:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <MX_SPI1_Init+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800105e:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <MX_SPI1_Init+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001064:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <MX_SPI1_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <MX_SPI1_Init+0x64>)
 800106c:	220a      	movs	r2, #10
 800106e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	@ (8001084 <MX_SPI1_Init+0x64>)
 8001072:	f003 ff47 	bl	8004f04 <HAL_SPI_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800107c:	f000 f948 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200001dc 	.word	0x200001dc
 8001088:	40013000 	.word	0x40013000

0800108c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001090:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <MX_USART2_UART_Init+0x4c>)
 8001092:	4a12      	ldr	r2, [pc, #72]	@ (80010dc <MX_USART2_UART_Init+0x50>)
 8001094:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001096:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <MX_USART2_UART_Init+0x4c>)
 8001098:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 800109c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b0:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010b2:	220c      	movs	r2, #12
 80010b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	@ (80010d8 <MX_USART2_UART_Init+0x4c>)
 80010c4:	f003 ffa7 	bl	8005016 <HAL_UART_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ce:	f000 f91f 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000234 	.word	0x20000234
 80010dc:	40004400 	.word	0x40004400

080010e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08c      	sub	sp, #48	@ 0x30
 80010e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
 80010fa:	4b72      	ldr	r3, [pc, #456]	@ (80012c4 <MX_GPIO_Init+0x1e4>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a71      	ldr	r2, [pc, #452]	@ (80012c4 <MX_GPIO_Init+0x1e4>)
 8001100:	f043 0310 	orr.w	r3, r3, #16
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b6f      	ldr	r3, [pc, #444]	@ (80012c4 <MX_GPIO_Init+0x1e4>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0310 	and.w	r3, r3, #16
 800110e:	61bb      	str	r3, [r7, #24]
 8001110:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	4b6b      	ldr	r3, [pc, #428]	@ (80012c4 <MX_GPIO_Init+0x1e4>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a6a      	ldr	r2, [pc, #424]	@ (80012c4 <MX_GPIO_Init+0x1e4>)
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b68      	ldr	r3, [pc, #416]	@ (80012c4 <MX_GPIO_Init+0x1e4>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	4b64      	ldr	r3, [pc, #400]	@ (80012c4 <MX_GPIO_Init+0x1e4>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a63      	ldr	r2, [pc, #396]	@ (80012c4 <MX_GPIO_Init+0x1e4>)
 8001138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b61      	ldr	r3, [pc, #388]	@ (80012c4 <MX_GPIO_Init+0x1e4>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b5d      	ldr	r3, [pc, #372]	@ (80012c4 <MX_GPIO_Init+0x1e4>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a5c      	ldr	r2, [pc, #368]	@ (80012c4 <MX_GPIO_Init+0x1e4>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b5a      	ldr	r3, [pc, #360]	@ (80012c4 <MX_GPIO_Init+0x1e4>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	4b56      	ldr	r3, [pc, #344]	@ (80012c4 <MX_GPIO_Init+0x1e4>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a55      	ldr	r2, [pc, #340]	@ (80012c4 <MX_GPIO_Init+0x1e4>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b53      	ldr	r3, [pc, #332]	@ (80012c4 <MX_GPIO_Init+0x1e4>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	4b4f      	ldr	r3, [pc, #316]	@ (80012c4 <MX_GPIO_Init+0x1e4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a4e      	ldr	r2, [pc, #312]	@ (80012c4 <MX_GPIO_Init+0x1e4>)
 800118c:	f043 0308 	orr.w	r3, r3, #8
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b4c      	ldr	r3, [pc, #304]	@ (80012c4 <MX_GPIO_Init+0x1e4>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	2108      	movs	r1, #8
 80011a2:	4849      	ldr	r0, [pc, #292]	@ (80012c8 <MX_GPIO_Init+0x1e8>)
 80011a4:	f000 fece 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2101      	movs	r1, #1
 80011ac:	4847      	ldr	r0, [pc, #284]	@ (80012cc <MX_GPIO_Init+0x1ec>)
 80011ae:	f000 fec9 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011b2:	2200      	movs	r2, #0
 80011b4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80011b8:	4845      	ldr	r0, [pc, #276]	@ (80012d0 <MX_GPIO_Init+0x1f0>)
 80011ba:	f000 fec3 	bl	8001f44 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80011be:	2308      	movs	r3, #8
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	483c      	ldr	r0, [pc, #240]	@ (80012c8 <MX_GPIO_Init+0x1e8>)
 80011d6:	f000 fd19 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80011da:	2301      	movs	r3, #1
 80011dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	4619      	mov	r1, r3
 80011f0:	4836      	ldr	r0, [pc, #216]	@ (80012cc <MX_GPIO_Init+0x1ec>)
 80011f2:	f000 fd0b 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80011f6:	2308      	movs	r3, #8
 80011f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001206:	2305      	movs	r3, #5
 8001208:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4619      	mov	r1, r3
 8001210:	482e      	ldr	r0, [pc, #184]	@ (80012cc <MX_GPIO_Init+0x1ec>)
 8001212:	f000 fcfb 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001216:	2301      	movs	r3, #1
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800121a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800121e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	4619      	mov	r1, r3
 800122a:	482a      	ldr	r0, [pc, #168]	@ (80012d4 <MX_GPIO_Init+0x1f4>)
 800122c:	f000 fcee 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001230:	2304      	movs	r3, #4
 8001232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	4825      	ldr	r0, [pc, #148]	@ (80012d8 <MX_GPIO_Init+0x1f8>)
 8001244:	f000 fce2 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001248:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800124c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800125a:	2305      	movs	r3, #5
 800125c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	4619      	mov	r1, r3
 8001264:	481c      	ldr	r0, [pc, #112]	@ (80012d8 <MX_GPIO_Init+0x1f8>)
 8001266:	f000 fcd1 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800126a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800126e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	4813      	ldr	r0, [pc, #76]	@ (80012d0 <MX_GPIO_Init+0x1f0>)
 8001284:	f000 fcc2 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001288:	2320      	movs	r3, #32
 800128a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	4619      	mov	r1, r3
 800129a:	480d      	ldr	r0, [pc, #52]	@ (80012d0 <MX_GPIO_Init+0x1f0>)
 800129c:	f000 fcb6 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80012a0:	2302      	movs	r3, #2
 80012a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012a4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80012a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	4619      	mov	r1, r3
 80012b4:	4804      	ldr	r0, [pc, #16]	@ (80012c8 <MX_GPIO_Init+0x1e8>)
 80012b6:	f000 fca9 	bl	8001c0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012ba:	bf00      	nop
 80012bc:	3730      	adds	r7, #48	@ 0x30
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020c00 	.word	0x40020c00
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40020400 	.word	0x40020400

080012dc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

	if(huart==&huart2){
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a08      	ldr	r2, [pc, #32]	@ (8001308 <HAL_UART_RxCpltCallback+0x2c>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d108      	bne.n	80012fe <HAL_UART_RxCpltCallback+0x22>


        HAL_Delay(500);
 80012ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012f0:	f000 fac4 	bl	800187c <HAL_Delay>
        HAL_UART_Transmit_IT(&huart2, Transmit_Data, 36);
 80012f4:	2224      	movs	r2, #36	@ 0x24
 80012f6:	4905      	ldr	r1, [pc, #20]	@ (800130c <HAL_UART_RxCpltCallback+0x30>)
 80012f8:	4803      	ldr	r0, [pc, #12]	@ (8001308 <HAL_UART_RxCpltCallback+0x2c>)
 80012fa:	f003 fed9 	bl	80050b0 <HAL_UART_Transmit_IT>

	}



}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000234 	.word	0x20000234
 800130c:	20000108 	.word	0x20000108

08001310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001314:	b672      	cpsid	i
}
 8001316:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <Error_Handler+0x8>

0800131c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4b10      	ldr	r3, [pc, #64]	@ (8001368 <HAL_MspInit+0x4c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	4a0f      	ldr	r2, [pc, #60]	@ (8001368 <HAL_MspInit+0x4c>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001330:	6453      	str	r3, [r2, #68]	@ 0x44
 8001332:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <HAL_MspInit+0x4c>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <HAL_MspInit+0x4c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	4a08      	ldr	r2, [pc, #32]	@ (8001368 <HAL_MspInit+0x4c>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134c:	6413      	str	r3, [r2, #64]	@ 0x40
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_MspInit+0x4c>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800135a:	2007      	movs	r0, #7
 800135c:	f000 fb82 	bl	8001a64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800

0800136c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	@ 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a19      	ldr	r2, [pc, #100]	@ (80013f0 <HAL_I2C_MspInit+0x84>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d12c      	bne.n	80013e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <HAL_I2C_MspInit+0x88>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a17      	ldr	r2, [pc, #92]	@ (80013f4 <HAL_I2C_MspInit+0x88>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <HAL_I2C_MspInit+0x88>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80013aa:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80013ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b0:	2312      	movs	r3, #18
 80013b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013bc:	2304      	movs	r3, #4
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	480c      	ldr	r0, [pc, #48]	@ (80013f8 <HAL_I2C_MspInit+0x8c>)
 80013c8:	f000 fc20 	bl	8001c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <HAL_I2C_MspInit+0x88>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d4:	4a07      	ldr	r2, [pc, #28]	@ (80013f4 <HAL_I2C_MspInit+0x88>)
 80013d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013da:	6413      	str	r3, [r2, #64]	@ 0x40
 80013dc:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <HAL_I2C_MspInit+0x88>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	@ 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40005400 	.word	0x40005400
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020400 	.word	0x40020400

080013fc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08e      	sub	sp, #56	@ 0x38
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a31      	ldr	r2, [pc, #196]	@ (80014ec <HAL_I2S_MspInit+0xf0>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d15a      	bne.n	80014e2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800142c:	2301      	movs	r3, #1
 800142e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001430:	23c0      	movs	r3, #192	@ 0xc0
 8001432:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001434:	2302      	movs	r3, #2
 8001436:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4618      	mov	r0, r3
 800143e:	f003 fc21 	bl	8004c84 <HAL_RCCEx_PeriphCLKConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001448:	f7ff ff62 	bl	8001310 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	4b27      	ldr	r3, [pc, #156]	@ (80014f0 <HAL_I2S_MspInit+0xf4>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	4a26      	ldr	r2, [pc, #152]	@ (80014f0 <HAL_I2S_MspInit+0xf4>)
 8001456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800145a:	6413      	str	r3, [r2, #64]	@ 0x40
 800145c:	4b24      	ldr	r3, [pc, #144]	@ (80014f0 <HAL_I2S_MspInit+0xf4>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001460:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <HAL_I2S_MspInit+0xf4>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001470:	4a1f      	ldr	r2, [pc, #124]	@ (80014f0 <HAL_I2S_MspInit+0xf4>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6313      	str	r3, [r2, #48]	@ 0x30
 8001478:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <HAL_I2S_MspInit+0xf4>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <HAL_I2S_MspInit+0xf4>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148c:	4a18      	ldr	r2, [pc, #96]	@ (80014f0 <HAL_I2S_MspInit+0xf4>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	6313      	str	r3, [r2, #48]	@ 0x30
 8001494:	4b16      	ldr	r3, [pc, #88]	@ (80014f0 <HAL_I2S_MspInit+0xf4>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80014a0:	2310      	movs	r3, #16
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014b0:	2306      	movs	r3, #6
 80014b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b8:	4619      	mov	r1, r3
 80014ba:	480e      	ldr	r0, [pc, #56]	@ (80014f4 <HAL_I2S_MspInit+0xf8>)
 80014bc:	f000 fba6 	bl	8001c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80014c0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80014c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014d2:	2306      	movs	r3, #6
 80014d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014da:	4619      	mov	r1, r3
 80014dc:	4806      	ldr	r0, [pc, #24]	@ (80014f8 <HAL_I2S_MspInit+0xfc>)
 80014de:	f000 fb95 	bl	8001c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014e2:	bf00      	nop
 80014e4:	3738      	adds	r7, #56	@ 0x38
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40003c00 	.word	0x40003c00
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40020800 	.word	0x40020800

080014fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	@ 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a19      	ldr	r2, [pc, #100]	@ (8001580 <HAL_SPI_MspInit+0x84>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d12b      	bne.n	8001576 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	4b18      	ldr	r3, [pc, #96]	@ (8001584 <HAL_SPI_MspInit+0x88>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001526:	4a17      	ldr	r2, [pc, #92]	@ (8001584 <HAL_SPI_MspInit+0x88>)
 8001528:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800152c:	6453      	str	r3, [r2, #68]	@ 0x44
 800152e:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <HAL_SPI_MspInit+0x88>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001532:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <HAL_SPI_MspInit+0x88>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	4a10      	ldr	r2, [pc, #64]	@ (8001584 <HAL_SPI_MspInit+0x88>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	@ 0x30
 800154a:	4b0e      	ldr	r3, [pc, #56]	@ (8001584 <HAL_SPI_MspInit+0x88>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001556:	23e0      	movs	r3, #224	@ 0xe0
 8001558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001566:	2305      	movs	r3, #5
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	4805      	ldr	r0, [pc, #20]	@ (8001588 <HAL_SPI_MspInit+0x8c>)
 8001572:	f000 fb4b 	bl	8001c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001576:	bf00      	nop
 8001578:	3728      	adds	r7, #40	@ 0x28
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40013000 	.word	0x40013000
 8001584:	40023800 	.word	0x40023800
 8001588:	40020000 	.word	0x40020000

0800158c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	@ 0x28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001620 <HAL_UART_MspInit+0x94>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d133      	bne.n	8001616 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001624 <HAL_UART_MspInit+0x98>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001624 <HAL_UART_MspInit+0x98>)
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015be:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <HAL_UART_MspInit+0x98>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <HAL_UART_MspInit+0x98>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a14      	ldr	r2, [pc, #80]	@ (8001624 <HAL_UART_MspInit+0x98>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <HAL_UART_MspInit+0x98>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015e6:	230c      	movs	r3, #12
 80015e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015f6:	2307      	movs	r3, #7
 80015f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	4809      	ldr	r0, [pc, #36]	@ (8001628 <HAL_UART_MspInit+0x9c>)
 8001602:	f000 fb03 	bl	8001c0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	2026      	movs	r0, #38	@ 0x26
 800160c:	f000 fa35 	bl	8001a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001610:	2026      	movs	r0, #38	@ 0x26
 8001612:	f000 fa4e 	bl	8001ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001616:	bf00      	nop
 8001618:	3728      	adds	r7, #40	@ 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40004400 	.word	0x40004400
 8001624:	40023800 	.word	0x40023800
 8001628:	40020000 	.word	0x40020000

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <NMI_Handler+0x4>

08001634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <MemManage_Handler+0x4>

08001644 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <UsageFault_Handler+0x4>

08001654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001682:	f000 f8db 	bl	800183c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <USART2_IRQHandler+0x10>)
 8001692:	f003 fd53 	bl	800513c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000234 	.word	0x20000234

080016a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80016a4:	4802      	ldr	r0, [pc, #8]	@ (80016b0 <OTG_FS_IRQHandler+0x10>)
 80016a6:	f000 fed1 	bl	800244c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	2000065c 	.word	0x2000065c

080016b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016bc:	4a14      	ldr	r2, [pc, #80]	@ (8001710 <_sbrk+0x5c>)
 80016be:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <_sbrk+0x60>)
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c8:	4b13      	ldr	r3, [pc, #76]	@ (8001718 <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d0:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <_sbrk+0x64>)
 80016d2:	4a12      	ldr	r2, [pc, #72]	@ (800171c <_sbrk+0x68>)
 80016d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016d6:	4b10      	ldr	r3, [pc, #64]	@ (8001718 <_sbrk+0x64>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d207      	bcs.n	80016f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e4:	f007 ff88 	bl	80095f8 <__errno>
 80016e8:	4603      	mov	r3, r0
 80016ea:	220c      	movs	r2, #12
 80016ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	e009      	b.n	8001708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f4:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fa:	4b07      	ldr	r3, [pc, #28]	@ (8001718 <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	4a05      	ldr	r2, [pc, #20]	@ (8001718 <_sbrk+0x64>)
 8001704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20020000 	.word	0x20020000
 8001714:	00000400 	.word	0x00000400
 8001718:	20000278 	.word	0x20000278
 800171c:	20000aa8 	.word	0x20000aa8

08001720 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <SystemInit+0x20>)
 8001726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800172a:	4a05      	ldr	r2, [pc, #20]	@ (8001740 <SystemInit+0x20>)
 800172c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001730:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001744:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800177c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001748:	480d      	ldr	r0, [pc, #52]	@ (8001780 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800174a:	490e      	ldr	r1, [pc, #56]	@ (8001784 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800174c:	4a0e      	ldr	r2, [pc, #56]	@ (8001788 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a0b      	ldr	r2, [pc, #44]	@ (800178c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001760:	4c0b      	ldr	r4, [pc, #44]	@ (8001790 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800176e:	f7ff ffd7 	bl	8001720 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001772:	f007 ff47 	bl	8009604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001776:	f7ff fb2f 	bl	8000dd8 <main>
  bx  lr    
 800177a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800177c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001784:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8001788:	08009850 	.word	0x08009850
  ldr r2, =_sbss
 800178c:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8001790:	20000aa8 	.word	0x20000aa8

08001794 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC_IRQHandler>
	...

08001798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800179c:	4b0e      	ldr	r3, [pc, #56]	@ (80017d8 <HAL_Init+0x40>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0d      	ldr	r2, [pc, #52]	@ (80017d8 <HAL_Init+0x40>)
 80017a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017a8:	4b0b      	ldr	r3, [pc, #44]	@ (80017d8 <HAL_Init+0x40>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0a      	ldr	r2, [pc, #40]	@ (80017d8 <HAL_Init+0x40>)
 80017ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b4:	4b08      	ldr	r3, [pc, #32]	@ (80017d8 <HAL_Init+0x40>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a07      	ldr	r2, [pc, #28]	@ (80017d8 <HAL_Init+0x40>)
 80017ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c0:	2003      	movs	r0, #3
 80017c2:	f000 f94f 	bl	8001a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c6:	2000      	movs	r0, #0
 80017c8:	f000 f808 	bl	80017dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017cc:	f7ff fda6 	bl	800131c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023c00 	.word	0x40023c00

080017dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e4:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <HAL_InitTick+0x54>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b12      	ldr	r3, [pc, #72]	@ (8001834 <HAL_InitTick+0x58>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4619      	mov	r1, r3
 80017ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f967 	bl	8001ace <HAL_SYSTICK_Config>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e00e      	b.n	8001828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b0f      	cmp	r3, #15
 800180e:	d80a      	bhi.n	8001826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001810:	2200      	movs	r2, #0
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f000 f92f 	bl	8001a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800181c:	4a06      	ldr	r2, [pc, #24]	@ (8001838 <HAL_InitTick+0x5c>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	e000      	b.n	8001828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000060 	.word	0x20000060
 8001834:	20000068 	.word	0x20000068
 8001838:	20000064 	.word	0x20000064

0800183c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001840:	4b06      	ldr	r3, [pc, #24]	@ (800185c <HAL_IncTick+0x20>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_IncTick+0x24>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4413      	add	r3, r2
 800184c:	4a04      	ldr	r2, [pc, #16]	@ (8001860 <HAL_IncTick+0x24>)
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000068 	.word	0x20000068
 8001860:	2000027c 	.word	0x2000027c

08001864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return uwTick;
 8001868:	4b03      	ldr	r3, [pc, #12]	@ (8001878 <HAL_GetTick+0x14>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	2000027c 	.word	0x2000027c

0800187c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff ffee 	bl	8001864 <HAL_GetTick>
 8001888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001894:	d005      	beq.n	80018a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001896:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <HAL_Delay+0x44>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018a2:	bf00      	nop
 80018a4:	f7ff ffde 	bl	8001864 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d8f7      	bhi.n	80018a4 <HAL_Delay+0x28>
  {
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000068 	.word	0x20000068

080018c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018e0:	4013      	ands	r3, r2
 80018e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f6:	4a04      	ldr	r2, [pc, #16]	@ (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	60d3      	str	r3, [r2, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001910:	4b04      	ldr	r3, [pc, #16]	@ (8001924 <__NVIC_GetPriorityGrouping+0x18>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	f003 0307 	and.w	r3, r3, #7
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db0b      	blt.n	8001952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	4907      	ldr	r1, [pc, #28]	@ (8001960 <__NVIC_EnableIRQ+0x38>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2001      	movs	r0, #1
 800194a:	fa00 f202 	lsl.w	r2, r0, r2
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100

08001964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	db0a      	blt.n	800198e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	490c      	ldr	r1, [pc, #48]	@ (80019b0 <__NVIC_SetPriority+0x4c>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	440b      	add	r3, r1
 8001988:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800198c:	e00a      	b.n	80019a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4908      	ldr	r1, [pc, #32]	@ (80019b4 <__NVIC_SetPriority+0x50>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3b04      	subs	r3, #4
 800199c:	0112      	lsls	r2, r2, #4
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	440b      	add	r3, r1
 80019a2:	761a      	strb	r2, [r3, #24]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	@ 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f1c3 0307 	rsb	r3, r3, #7
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	bf28      	it	cs
 80019d6:	2304      	movcs	r3, #4
 80019d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3304      	adds	r3, #4
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d902      	bls.n	80019e8 <NVIC_EncodePriority+0x30>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3b03      	subs	r3, #3
 80019e6:	e000      	b.n	80019ea <NVIC_EncodePriority+0x32>
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	401a      	ands	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43d9      	mvns	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	4313      	orrs	r3, r2
         );
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	@ 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a30:	d301      	bcc.n	8001a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00f      	b.n	8001a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a36:	4a0a      	ldr	r2, [pc, #40]	@ (8001a60 <SysTick_Config+0x40>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3e:	210f      	movs	r1, #15
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f7ff ff8e 	bl	8001964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a48:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <SysTick_Config+0x40>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4e:	4b04      	ldr	r3, [pc, #16]	@ (8001a60 <SysTick_Config+0x40>)
 8001a50:	2207      	movs	r2, #7
 8001a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010

08001a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff29 	bl	80018c4 <__NVIC_SetPriorityGrouping>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a8c:	f7ff ff3e 	bl	800190c <__NVIC_GetPriorityGrouping>
 8001a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f7ff ff8e 	bl	80019b8 <NVIC_EncodePriority>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff5d 	bl	8001964 <__NVIC_SetPriority>
}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff31 	bl	8001928 <__NVIC_EnableIRQ>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ffa2 	bl	8001a20 <SysTick_Config>
 8001adc:	4603      	mov	r3, r0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff feb6 	bl	8001864 <HAL_GetTick>
 8001af8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d008      	beq.n	8001b18 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2280      	movs	r2, #128	@ 0x80
 8001b0a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e052      	b.n	8001bbe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0216 	bic.w	r2, r2, #22
 8001b26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695a      	ldr	r2, [r3, #20]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b36:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d103      	bne.n	8001b48 <HAL_DMA_Abort+0x62>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d007      	beq.n	8001b58 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0208 	bic.w	r2, r2, #8
 8001b56:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0201 	bic.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b68:	e013      	b.n	8001b92 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b6a:	f7ff fe7b 	bl	8001864 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b05      	cmp	r3, #5
 8001b76:	d90c      	bls.n	8001b92 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2203      	movs	r2, #3
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e015      	b.n	8001bbe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1e4      	bne.n	8001b6a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba4:	223f      	movs	r2, #63	@ 0x3f
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d004      	beq.n	8001be4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2280      	movs	r2, #128	@ 0x80
 8001bde:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e00c      	b.n	8001bfe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2205      	movs	r2, #5
 8001be8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0201 	bic.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	@ 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	e16b      	b.n	8001f00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	f040 815a 	bne.w	8001efa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d005      	beq.n	8001c5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d130      	bne.n	8001cc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	2203      	movs	r2, #3
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c94:	2201      	movs	r2, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 0201 	and.w	r2, r3, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d017      	beq.n	8001cfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d123      	bne.n	8001d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	08da      	lsrs	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3208      	adds	r2, #8
 8001d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	08da      	lsrs	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3208      	adds	r2, #8
 8001d4a:	69b9      	ldr	r1, [r7, #24]
 8001d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0203 	and.w	r2, r3, #3
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80b4 	beq.w	8001efa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b60      	ldr	r3, [pc, #384]	@ (8001f18 <HAL_GPIO_Init+0x30c>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9a:	4a5f      	ldr	r2, [pc, #380]	@ (8001f18 <HAL_GPIO_Init+0x30c>)
 8001d9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001da2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f18 <HAL_GPIO_Init+0x30c>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dae:	4a5b      	ldr	r2, [pc, #364]	@ (8001f1c <HAL_GPIO_Init+0x310>)
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	089b      	lsrs	r3, r3, #2
 8001db4:	3302      	adds	r3, #2
 8001db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	220f      	movs	r2, #15
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a52      	ldr	r2, [pc, #328]	@ (8001f20 <HAL_GPIO_Init+0x314>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d02b      	beq.n	8001e32 <HAL_GPIO_Init+0x226>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a51      	ldr	r2, [pc, #324]	@ (8001f24 <HAL_GPIO_Init+0x318>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d025      	beq.n	8001e2e <HAL_GPIO_Init+0x222>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a50      	ldr	r2, [pc, #320]	@ (8001f28 <HAL_GPIO_Init+0x31c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d01f      	beq.n	8001e2a <HAL_GPIO_Init+0x21e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4f      	ldr	r2, [pc, #316]	@ (8001f2c <HAL_GPIO_Init+0x320>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d019      	beq.n	8001e26 <HAL_GPIO_Init+0x21a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4e      	ldr	r2, [pc, #312]	@ (8001f30 <HAL_GPIO_Init+0x324>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_GPIO_Init+0x216>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4d      	ldr	r2, [pc, #308]	@ (8001f34 <HAL_GPIO_Init+0x328>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00d      	beq.n	8001e1e <HAL_GPIO_Init+0x212>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4c      	ldr	r2, [pc, #304]	@ (8001f38 <HAL_GPIO_Init+0x32c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d007      	beq.n	8001e1a <HAL_GPIO_Init+0x20e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f3c <HAL_GPIO_Init+0x330>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_GPIO_Init+0x20a>
 8001e12:	2307      	movs	r3, #7
 8001e14:	e00e      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e16:	2308      	movs	r3, #8
 8001e18:	e00c      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e1a:	2306      	movs	r3, #6
 8001e1c:	e00a      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e1e:	2305      	movs	r3, #5
 8001e20:	e008      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e22:	2304      	movs	r3, #4
 8001e24:	e006      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e26:	2303      	movs	r3, #3
 8001e28:	e004      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e002      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e32:	2300      	movs	r3, #0
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	f002 0203 	and.w	r2, r2, #3
 8001e3a:	0092      	lsls	r2, r2, #2
 8001e3c:	4093      	lsls	r3, r2
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e44:	4935      	ldr	r1, [pc, #212]	@ (8001f1c <HAL_GPIO_Init+0x310>)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e52:	4b3b      	ldr	r3, [pc, #236]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e76:	4a32      	ldr	r2, [pc, #200]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e7c:	4b30      	ldr	r3, [pc, #192]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ea0:	4a27      	ldr	r2, [pc, #156]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ea6:	4b26      	ldr	r3, [pc, #152]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eca:	4a1d      	ldr	r2, [pc, #116]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef4:	4a12      	ldr	r2, [pc, #72]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3301      	adds	r3, #1
 8001efe:	61fb      	str	r3, [r7, #28]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	2b0f      	cmp	r3, #15
 8001f04:	f67f ae90 	bls.w	8001c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3724      	adds	r7, #36	@ 0x24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40013800 	.word	0x40013800
 8001f20:	40020000 	.word	0x40020000
 8001f24:	40020400 	.word	0x40020400
 8001f28:	40020800 	.word	0x40020800
 8001f2c:	40020c00 	.word	0x40020c00
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40021400 	.word	0x40021400
 8001f38:	40021800 	.word	0x40021800
 8001f3c:	40021c00 	.word	0x40021c00
 8001f40:	40013c00 	.word	0x40013c00

08001f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	807b      	strh	r3, [r7, #2]
 8001f50:	4613      	mov	r3, r2
 8001f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f54:	787b      	ldrb	r3, [r7, #1]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f60:	e003      	b.n	8001f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f62:	887b      	ldrh	r3, [r7, #2]
 8001f64:	041a      	lsls	r2, r3, #16
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	619a      	str	r2, [r3, #24]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001f76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f78:	b08f      	sub	sp, #60	@ 0x3c
 8001f7a:	af0a      	add	r7, sp, #40	@ 0x28
 8001f7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e054      	b.n	8002032 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 32f9 	ldrb.w	r3, [r3, #761]	@ 0x2f9
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d106      	bne.n	8001fa8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f006 ffa8 	bl	8008ef8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2203      	movs	r2, #3
 8001fac:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f003 ffe6 	bl	8005f98 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	603b      	str	r3, [r7, #0]
 8001fd2:	687e      	ldr	r6, [r7, #4]
 8001fd4:	466d      	mov	r5, sp
 8001fd6:	f106 0410 	add.w	r4, r6, #16
 8001fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fe6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fea:	1d33      	adds	r3, r6, #4
 8001fec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fee:	6838      	ldr	r0, [r7, #0]
 8001ff0:	f003 ff60 	bl	8005eb4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f003 ffdd 	bl	8005fba <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	687e      	ldr	r6, [r7, #4]
 8002008:	466d      	mov	r5, sp
 800200a:	f106 0410 	add.w	r4, r6, #16
 800200e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002010:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002016:	e894 0003 	ldmia.w	r4, {r0, r1}
 800201a:	e885 0003 	stmia.w	r5, {r0, r1}
 800201e:	1d33      	adds	r3, r6, #4
 8002020:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002022:	6838      	ldr	r0, [r7, #0]
 8002024:	f004 f966 	bl	80062f4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800203a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800203a:	b590      	push	{r4, r7, lr}
 800203c:	b089      	sub	sp, #36	@ 0x24
 800203e:	af04      	add	r7, sp, #16
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	4608      	mov	r0, r1
 8002044:	4611      	mov	r1, r2
 8002046:	461a      	mov	r2, r3
 8002048:	4603      	mov	r3, r0
 800204a:	70fb      	strb	r3, [r7, #3]
 800204c:	460b      	mov	r3, r1
 800204e:	70bb      	strb	r3, [r7, #2]
 8002050:	4613      	mov	r3, r2
 8002052:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_HCD_HC_Init+0x28>
 800205e:	2302      	movs	r3, #2
 8002060:	e076      	b.n	8002150 <HAL_HCD_HC_Init+0x116>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	212c      	movs	r1, #44	@ 0x2c
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	4413      	add	r3, r2
 8002076:	333d      	adds	r3, #61	@ 0x3d
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	212c      	movs	r1, #44	@ 0x2c
 8002082:	fb01 f303 	mul.w	r3, r1, r3
 8002086:	4413      	add	r3, r2
 8002088:	3338      	adds	r3, #56	@ 0x38
 800208a:	787a      	ldrb	r2, [r7, #1]
 800208c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	212c      	movs	r1, #44	@ 0x2c
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	4413      	add	r3, r2
 800209a:	3340      	adds	r3, #64	@ 0x40
 800209c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800209e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	212c      	movs	r1, #44	@ 0x2c
 80020a6:	fb01 f303 	mul.w	r3, r1, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	3339      	adds	r3, #57	@ 0x39
 80020ae:	78fa      	ldrb	r2, [r7, #3]
 80020b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	212c      	movs	r1, #44	@ 0x2c
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	4413      	add	r3, r2
 80020be:	333f      	adds	r3, #63	@ 0x3f
 80020c0:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80020c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	78ba      	ldrb	r2, [r7, #2]
 80020ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80020ce:	b2d0      	uxtb	r0, r2
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	212c      	movs	r1, #44	@ 0x2c
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	333a      	adds	r3, #58	@ 0x3a
 80020dc:	4602      	mov	r2, r0
 80020de:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80020e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	da09      	bge.n	80020fc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	212c      	movs	r1, #44	@ 0x2c
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	333b      	adds	r3, #59	@ 0x3b
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	e008      	b.n	800210e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	212c      	movs	r1, #44	@ 0x2c
 8002102:	fb01 f303 	mul.w	r3, r1, r3
 8002106:	4413      	add	r3, r2
 8002108:	333b      	adds	r3, #59	@ 0x3b
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	212c      	movs	r1, #44	@ 0x2c
 8002114:	fb01 f303 	mul.w	r3, r1, r3
 8002118:	4413      	add	r3, r2
 800211a:	333c      	adds	r3, #60	@ 0x3c
 800211c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002120:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	787c      	ldrb	r4, [r7, #1]
 8002128:	78ba      	ldrb	r2, [r7, #2]
 800212a:	78f9      	ldrb	r1, [r7, #3]
 800212c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800212e:	9302      	str	r3, [sp, #8]
 8002130:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	f897 3020 	ldrb.w	r3, [r7, #32]
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	4623      	mov	r3, r4
 800213e:	f004 fa5f 	bl	8006600 <USB_HC_Init>
 8002142:	4603      	mov	r3, r0
 8002144:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	bd90      	pop	{r4, r7, pc}

08002158 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_HCD_HC_Halt+0x1e>
 8002172:	2302      	movs	r3, #2
 8002174:	e00f      	b.n	8002196 <HAL_HCD_HC_Halt+0x3e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	4611      	mov	r1, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f004 fcaf 	bl	8006aea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return status;
 8002194:	7bfb      	ldrb	r3, [r7, #15]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	4608      	mov	r0, r1
 80021aa:	4611      	mov	r1, r2
 80021ac:	461a      	mov	r2, r3
 80021ae:	4603      	mov	r3, r0
 80021b0:	70fb      	strb	r3, [r7, #3]
 80021b2:	460b      	mov	r3, r1
 80021b4:	70bb      	strb	r3, [r7, #2]
 80021b6:	4613      	mov	r3, r2
 80021b8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	212c      	movs	r1, #44	@ 0x2c
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	333b      	adds	r3, #59	@ 0x3b
 80021c8:	78ba      	ldrb	r2, [r7, #2]
 80021ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	212c      	movs	r1, #44	@ 0x2c
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	333f      	adds	r3, #63	@ 0x3f
 80021da:	787a      	ldrb	r2, [r7, #1]
 80021dc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80021de:	7c3b      	ldrb	r3, [r7, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d112      	bne.n	800220a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	212c      	movs	r1, #44	@ 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	3342      	adds	r3, #66	@ 0x42
 80021f2:	2203      	movs	r2, #3
 80021f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	212c      	movs	r1, #44	@ 0x2c
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	4413      	add	r3, r2
 8002202:	333d      	adds	r3, #61	@ 0x3d
 8002204:	7f3a      	ldrb	r2, [r7, #28]
 8002206:	701a      	strb	r2, [r3, #0]
 8002208:	e008      	b.n	800221c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	212c      	movs	r1, #44	@ 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	3342      	adds	r3, #66	@ 0x42
 8002218:	2202      	movs	r2, #2
 800221a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800221c:	787b      	ldrb	r3, [r7, #1]
 800221e:	2b03      	cmp	r3, #3
 8002220:	f200 80c6 	bhi.w	80023b0 <HAL_HCD_HC_SubmitRequest+0x210>
 8002224:	a201      	add	r2, pc, #4	@ (adr r2, 800222c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222a:	bf00      	nop
 800222c:	0800223d 	.word	0x0800223d
 8002230:	0800239d 	.word	0x0800239d
 8002234:	080022a1 	.word	0x080022a1
 8002238:	0800231f 	.word	0x0800231f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800223c:	7c3b      	ldrb	r3, [r7, #16]
 800223e:	2b01      	cmp	r3, #1
 8002240:	f040 80b8 	bne.w	80023b4 <HAL_HCD_HC_SubmitRequest+0x214>
 8002244:	78bb      	ldrb	r3, [r7, #2]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f040 80b4 	bne.w	80023b4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800224c:	8b3b      	ldrh	r3, [r7, #24]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d108      	bne.n	8002264 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	212c      	movs	r1, #44	@ 0x2c
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	4413      	add	r3, r2
 800225e:	3355      	adds	r3, #85	@ 0x55
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	212c      	movs	r1, #44	@ 0x2c
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	3355      	adds	r3, #85	@ 0x55
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d109      	bne.n	800228c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	212c      	movs	r1, #44	@ 0x2c
 800227e:	fb01 f303 	mul.w	r3, r1, r3
 8002282:	4413      	add	r3, r2
 8002284:	3342      	adds	r3, #66	@ 0x42
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800228a:	e093      	b.n	80023b4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	212c      	movs	r1, #44	@ 0x2c
 8002292:	fb01 f303 	mul.w	r3, r1, r3
 8002296:	4413      	add	r3, r2
 8002298:	3342      	adds	r3, #66	@ 0x42
 800229a:	2202      	movs	r2, #2
 800229c:	701a      	strb	r2, [r3, #0]
      break;
 800229e:	e089      	b.n	80023b4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80022a0:	78bb      	ldrb	r3, [r7, #2]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d11d      	bne.n	80022e2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	212c      	movs	r1, #44	@ 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	3355      	adds	r3, #85	@ 0x55
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	212c      	movs	r1, #44	@ 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	3342      	adds	r3, #66	@ 0x42
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80022cc:	e073      	b.n	80023b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	212c      	movs	r1, #44	@ 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	3342      	adds	r3, #66	@ 0x42
 80022dc:	2202      	movs	r2, #2
 80022de:	701a      	strb	r2, [r3, #0]
      break;
 80022e0:	e069      	b.n	80023b6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	212c      	movs	r1, #44	@ 0x2c
 80022e8:	fb01 f303 	mul.w	r3, r1, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	3354      	adds	r3, #84	@ 0x54
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	212c      	movs	r1, #44	@ 0x2c
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	4413      	add	r3, r2
 8002302:	3342      	adds	r3, #66	@ 0x42
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
      break;
 8002308:	e055      	b.n	80023b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800230a:	78fb      	ldrb	r3, [r7, #3]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	212c      	movs	r1, #44	@ 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	3342      	adds	r3, #66	@ 0x42
 8002318:	2202      	movs	r2, #2
 800231a:	701a      	strb	r2, [r3, #0]
      break;
 800231c:	e04b      	b.n	80023b6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800231e:	78bb      	ldrb	r3, [r7, #2]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d11d      	bne.n	8002360 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	212c      	movs	r1, #44	@ 0x2c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	3355      	adds	r3, #85	@ 0x55
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d109      	bne.n	800234c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	212c      	movs	r1, #44	@ 0x2c
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	3342      	adds	r3, #66	@ 0x42
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800234a:	e034      	b.n	80023b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	212c      	movs	r1, #44	@ 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	3342      	adds	r3, #66	@ 0x42
 800235a:	2202      	movs	r2, #2
 800235c:	701a      	strb	r2, [r3, #0]
      break;
 800235e:	e02a      	b.n	80023b6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	212c      	movs	r1, #44	@ 0x2c
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	4413      	add	r3, r2
 800236c:	3354      	adds	r3, #84	@ 0x54
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d109      	bne.n	8002388 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	212c      	movs	r1, #44	@ 0x2c
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	4413      	add	r3, r2
 8002380:	3342      	adds	r3, #66	@ 0x42
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
      break;
 8002386:	e016      	b.n	80023b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	212c      	movs	r1, #44	@ 0x2c
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	4413      	add	r3, r2
 8002394:	3342      	adds	r3, #66	@ 0x42
 8002396:	2202      	movs	r2, #2
 8002398:	701a      	strb	r2, [r3, #0]
      break;
 800239a:	e00c      	b.n	80023b6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	212c      	movs	r1, #44	@ 0x2c
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	3342      	adds	r3, #66	@ 0x42
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
      break;
 80023ae:	e002      	b.n	80023b6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80023b0:	bf00      	nop
 80023b2:	e000      	b.n	80023b6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80023b4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80023b6:	78fb      	ldrb	r3, [r7, #3]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	212c      	movs	r1, #44	@ 0x2c
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	4413      	add	r3, r2
 80023c2:	3344      	adds	r3, #68	@ 0x44
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	8b3a      	ldrh	r2, [r7, #24]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	202c      	movs	r0, #44	@ 0x2c
 80023d0:	fb00 f303 	mul.w	r3, r0, r3
 80023d4:	440b      	add	r3, r1
 80023d6:	334c      	adds	r3, #76	@ 0x4c
 80023d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80023da:	78fb      	ldrb	r3, [r7, #3]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	212c      	movs	r1, #44	@ 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	3360      	adds	r3, #96	@ 0x60
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	212c      	movs	r1, #44	@ 0x2c
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	4413      	add	r3, r2
 80023f8:	3350      	adds	r3, #80	@ 0x50
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	212c      	movs	r1, #44	@ 0x2c
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	4413      	add	r3, r2
 800240a:	3339      	adds	r3, #57	@ 0x39
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	212c      	movs	r1, #44	@ 0x2c
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	3361      	adds	r3, #97	@ 0x61
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	222c      	movs	r2, #44	@ 0x2c
 800242a:	fb02 f303 	mul.w	r3, r2, r3
 800242e:	3338      	adds	r3, #56	@ 0x38
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	18d1      	adds	r1, r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	f004 fa02 	bl	8006844 <USB_HC_StartXfer>
 8002440:	4603      	mov	r3, r0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop

0800244c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f003 ff03 	bl	800626e <USB_GetMode>
 8002468:	4603      	mov	r3, r0
 800246a:	2b01      	cmp	r3, #1
 800246c:	f040 80f6 	bne.w	800265c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f003 fee7 	bl	8006248 <USB_ReadInterrupts>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80ec 	beq.w	800265a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f003 fede 	bl	8006248 <USB_ReadInterrupts>
 800248c:	4603      	mov	r3, r0
 800248e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002492:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002496:	d104      	bne.n	80024a2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80024a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f003 fece 	bl	8006248 <USB_ReadInterrupts>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024b6:	d104      	bne.n	80024c2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80024c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f003 febe 	bl	8006248 <USB_ReadInterrupts>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024d6:	d104      	bne.n	80024e2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80024e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f003 feae 	bl	8006248 <USB_ReadInterrupts>
 80024ec:	4603      	mov	r3, r0
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d103      	bne.n	80024fe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2202      	movs	r2, #2
 80024fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f003 fea0 	bl	8006248 <USB_ReadInterrupts>
 8002508:	4603      	mov	r3, r0
 800250a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800250e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002512:	d11c      	bne.n	800254e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800251c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10f      	bne.n	800254e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800252e:	2110      	movs	r1, #16
 8002530:	6938      	ldr	r0, [r7, #16]
 8002532:	f003 fd8f 	bl	8006054 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002536:	6938      	ldr	r0, [r7, #16]
 8002538:	f003 fdc0 	bl	80060bc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2101      	movs	r1, #1
 8002542:	4618      	mov	r0, r3
 8002544:	f003 ff96 	bl	8006474 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f006 fd53 	bl	8008ff4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f003 fe78 	bl	8006248 <USB_ReadInterrupts>
 8002558:	4603      	mov	r3, r0
 800255a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800255e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002562:	d102      	bne.n	800256a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f001 f89e 	bl	80036a6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f003 fe6a 	bl	8006248 <USB_ReadInterrupts>
 8002574:	4603      	mov	r3, r0
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b08      	cmp	r3, #8
 800257c:	d106      	bne.n	800258c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f006 fd1c 	bl	8008fbc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2208      	movs	r2, #8
 800258a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f003 fe59 	bl	8006248 <USB_ReadInterrupts>
 8002596:	4603      	mov	r3, r0
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	2b10      	cmp	r3, #16
 800259e:	d101      	bne.n	80025a4 <HAL_HCD_IRQHandler+0x158>
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <HAL_HCD_IRQHandler+0x15a>
 80025a4:	2300      	movs	r3, #0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d012      	beq.n	80025d0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699a      	ldr	r2, [r3, #24]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0210 	bic.w	r2, r2, #16
 80025b8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 ffa1 	bl	8003502 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699a      	ldr	r2, [r3, #24]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0210 	orr.w	r2, r2, #16
 80025ce:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f003 fe37 	bl	8006248 <USB_ReadInterrupts>
 80025da:	4603      	mov	r3, r0
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025e4:	d13a      	bne.n	800265c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f004 fa6c 	bl	8006ac8 <USB_HC_ReadInterrupt>
 80025f0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	e025      	b.n	8002644 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d018      	beq.n	800263e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4413      	add	r3, r2
 8002614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800261e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002622:	d106      	bne.n	8002632 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	4619      	mov	r1, r3
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f8ab 	bl	8002786 <HCD_HC_IN_IRQHandler>
 8002630:	e005      	b.n	800263e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	4619      	mov	r1, r3
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 fbf9 	bl	8002e30 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	3301      	adds	r3, #1
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	429a      	cmp	r2, r3
 800264c:	d3d4      	bcc.n	80025f8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002656:	615a      	str	r2, [r3, #20]
 8002658:	e000      	b.n	800265c <HAL_HCD_IRQHandler+0x210>
      return;
 800265a:	bf00      	nop
    }
  }
}
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_HCD_Start+0x16>
 8002674:	2302      	movs	r3, #2
 8002676:	e013      	b.n	80026a0 <HAL_HCD_Start+0x3e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2101      	movs	r1, #1
 8002686:	4618      	mov	r0, r3
 8002688:	f003 ff58 	bl	800653c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f003 fc70 	bl	8005f76 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 32f8 	ldrb.w	r3, [r3, #760]	@ 0x2f8
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_HCD_Stop+0x16>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e00d      	b.n	80026da <HAL_HCD_Stop+0x32>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f004 fb46 	bl	8006d5c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f003 fefa 	bl	80064e8 <USB_ResetPort>
 80026f4:	4603      	mov	r3, r0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	212c      	movs	r1, #44	@ 0x2c
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	4413      	add	r3, r2
 8002716:	3360      	adds	r3, #96	@ 0x60
 8002718:	781b      	ldrb	r3, [r3, #0]
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	460b      	mov	r3, r1
 8002730:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	212c      	movs	r1, #44	@ 0x2c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	3350      	adds	r3, #80	@ 0x50
 8002740:	681b      	ldr	r3, [r3, #0]
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f003 ff3e 	bl	80065dc <USB_GetCurrentFrame>
 8002760:	4603      	mov	r3, r0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f003 ff19 	bl	80065ae <USB_GetHostSpeed>
 800277c:	4603      	mov	r3, r0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b086      	sub	sp, #24
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	460b      	mov	r3, r1
 8002790:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d11a      	bne.n	80027ec <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027c2:	461a      	mov	r2, r3
 80027c4:	2304      	movs	r3, #4
 80027c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	212c      	movs	r1, #44	@ 0x2c
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	3361      	adds	r3, #97	@ 0x61
 80027d6:	2206      	movs	r2, #6
 80027d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f004 f980 	bl	8006aea <USB_HC_Halt>
 80027ea:	e0af      	b.n	800294c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002802:	d11b      	bne.n	800283c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002810:	461a      	mov	r2, r3
 8002812:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002816:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	212c      	movs	r1, #44	@ 0x2c
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	4413      	add	r3, r2
 8002824:	3361      	adds	r3, #97	@ 0x61
 8002826:	2207      	movs	r2, #7
 8002828:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f004 f958 	bl	8006aea <USB_HC_Halt>
 800283a:	e087      	b.n	800294c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4413      	add	r3, r2
 8002844:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b20      	cmp	r3, #32
 8002850:	d109      	bne.n	8002866 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4413      	add	r3, r2
 800285a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800285e:	461a      	mov	r2, r3
 8002860:	2320      	movs	r3, #32
 8002862:	6093      	str	r3, [r2, #8]
 8002864:	e072      	b.n	800294c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4413      	add	r3, r2
 800286e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b08      	cmp	r3, #8
 800287a:	d11a      	bne.n	80028b2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002888:	461a      	mov	r2, r3
 800288a:	2308      	movs	r3, #8
 800288c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	212c      	movs	r1, #44	@ 0x2c
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	4413      	add	r3, r2
 800289a:	3361      	adds	r3, #97	@ 0x61
 800289c:	2205      	movs	r2, #5
 800289e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f004 f91d 	bl	8006aea <USB_HC_Halt>
 80028b0:	e04c      	b.n	800294c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	015a      	lsls	r2, r3, #5
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028c8:	d11b      	bne.n	8002902 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028d6:	461a      	mov	r2, r3
 80028d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	212c      	movs	r1, #44	@ 0x2c
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	4413      	add	r3, r2
 80028ea:	3361      	adds	r3, #97	@ 0x61
 80028ec:	2208      	movs	r2, #8
 80028ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f004 f8f5 	bl	8006aea <USB_HC_Halt>
 8002900:	e024      	b.n	800294c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4413      	add	r3, r2
 800290a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002914:	2b80      	cmp	r3, #128	@ 0x80
 8002916:	d119      	bne.n	800294c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002924:	461a      	mov	r2, r3
 8002926:	2380      	movs	r3, #128	@ 0x80
 8002928:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	212c      	movs	r1, #44	@ 0x2c
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	3361      	adds	r3, #97	@ 0x61
 8002938:	2206      	movs	r2, #6
 800293a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f004 f8cf 	bl	8006aea <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800295e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002962:	d112      	bne.n	800298a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	4611      	mov	r1, r2
 800296e:	4618      	mov	r0, r3
 8002970:	f004 f8bb 	bl	8006aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4413      	add	r3, r2
 800297c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002980:	461a      	mov	r2, r3
 8002982:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002986:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002988:	e24e      	b.n	8002e28 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4413      	add	r3, r2
 8002992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b01      	cmp	r3, #1
 800299e:	f040 80df 	bne.w	8002b60 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d019      	beq.n	80029de <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	212c      	movs	r1, #44	@ 0x2c
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	3348      	adds	r3, #72	@ 0x48
 80029b8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	0159      	lsls	r1, r3, #5
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	440b      	add	r3, r1
 80029c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80029cc:	1ad2      	subs	r2, r2, r3
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	202c      	movs	r0, #44	@ 0x2c
 80029d4:	fb00 f303 	mul.w	r3, r0, r3
 80029d8:	440b      	add	r3, r1
 80029da:	3350      	adds	r3, #80	@ 0x50
 80029dc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	212c      	movs	r1, #44	@ 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	3361      	adds	r3, #97	@ 0x61
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	212c      	movs	r1, #44	@ 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	335c      	adds	r3, #92	@ 0x5c
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a0e:	461a      	mov	r2, r3
 8002a10:	2301      	movs	r3, #1
 8002a12:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	212c      	movs	r1, #44	@ 0x2c
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	333f      	adds	r3, #63	@ 0x3f
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d009      	beq.n	8002a3c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	212c      	movs	r1, #44	@ 0x2c
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	333f      	adds	r3, #63	@ 0x3f
 8002a36:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d111      	bne.n	8002a60 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	4611      	mov	r1, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f004 f84f 	bl	8006aea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2310      	movs	r3, #16
 8002a5c:	6093      	str	r3, [r2, #8]
 8002a5e:	e03a      	b.n	8002ad6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	212c      	movs	r1, #44	@ 0x2c
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	333f      	adds	r3, #63	@ 0x3f
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d009      	beq.n	8002a88 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	212c      	movs	r1, #44	@ 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	333f      	adds	r3, #63	@ 0x3f
 8002a82:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d126      	bne.n	8002ad6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	0151      	lsls	r1, r2, #5
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	440a      	add	r2, r1
 8002a9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002aa2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002aa6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	212c      	movs	r1, #44	@ 0x2c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3360      	adds	r3, #96	@ 0x60
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	b2d9      	uxtb	r1, r3
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	202c      	movs	r0, #44	@ 0x2c
 8002ac4:	fb00 f303 	mul.w	r3, r0, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	3360      	adds	r3, #96	@ 0x60
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f006 fa9d 	bl	8009010 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d12b      	bne.n	8002b36 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	212c      	movs	r1, #44	@ 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	3348      	adds	r3, #72	@ 0x48
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	202c      	movs	r0, #44	@ 0x2c
 8002af4:	fb00 f202 	mul.w	r2, r0, r2
 8002af8:	440a      	add	r2, r1
 8002afa:	3240      	adds	r2, #64	@ 0x40
 8002afc:	8812      	ldrh	r2, [r2, #0]
 8002afe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 818e 	beq.w	8002e28 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	212c      	movs	r1, #44	@ 0x2c
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	3354      	adds	r3, #84	@ 0x54
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	f083 0301 	eor.w	r3, r3, #1
 8002b20:	b2d8      	uxtb	r0, r3
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	212c      	movs	r1, #44	@ 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3354      	adds	r3, #84	@ 0x54
 8002b30:	4602      	mov	r2, r0
 8002b32:	701a      	strb	r2, [r3, #0]
}
 8002b34:	e178      	b.n	8002e28 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	212c      	movs	r1, #44	@ 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	3354      	adds	r3, #84	@ 0x54
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	f083 0301 	eor.w	r3, r3, #1
 8002b4a:	b2d8      	uxtb	r0, r3
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	212c      	movs	r1, #44	@ 0x2c
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	3354      	adds	r3, #84	@ 0x54
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	701a      	strb	r2, [r3, #0]
}
 8002b5e:	e163      	b.n	8002e28 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	f040 80f6 	bne.w	8002d64 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	212c      	movs	r1, #44	@ 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	3361      	adds	r3, #97	@ 0x61
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d109      	bne.n	8002ba0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	212c      	movs	r1, #44	@ 0x2c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	3360      	adds	r3, #96	@ 0x60
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	701a      	strb	r2, [r3, #0]
 8002b9e:	e0c9      	b.n	8002d34 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	212c      	movs	r1, #44	@ 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	3361      	adds	r3, #97	@ 0x61
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d109      	bne.n	8002bc8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	212c      	movs	r1, #44	@ 0x2c
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3360      	adds	r3, #96	@ 0x60
 8002bc2:	2205      	movs	r2, #5
 8002bc4:	701a      	strb	r2, [r3, #0]
 8002bc6:	e0b5      	b.n	8002d34 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	212c      	movs	r1, #44	@ 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3361      	adds	r3, #97	@ 0x61
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b06      	cmp	r3, #6
 8002bda:	d009      	beq.n	8002bf0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	212c      	movs	r1, #44	@ 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	3361      	adds	r3, #97	@ 0x61
 8002bea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d150      	bne.n	8002c92 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	212c      	movs	r1, #44	@ 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	335c      	adds	r3, #92	@ 0x5c
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	202c      	movs	r0, #44	@ 0x2c
 8002c08:	fb00 f303 	mul.w	r3, r0, r3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	335c      	adds	r3, #92	@ 0x5c
 8002c10:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	212c      	movs	r1, #44	@ 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	335c      	adds	r3, #92	@ 0x5c
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d912      	bls.n	8002c4c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	212c      	movs	r1, #44	@ 0x2c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	335c      	adds	r3, #92	@ 0x5c
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	212c      	movs	r1, #44	@ 0x2c
 8002c3e:	fb01 f303 	mul.w	r3, r1, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	3360      	adds	r3, #96	@ 0x60
 8002c46:	2204      	movs	r2, #4
 8002c48:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c4a:	e073      	b.n	8002d34 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	212c      	movs	r1, #44	@ 0x2c
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	3360      	adds	r3, #96	@ 0x60
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002c74:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c7c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	015a      	lsls	r2, r3, #5
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4413      	add	r3, r2
 8002c86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c90:	e050      	b.n	8002d34 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	212c      	movs	r1, #44	@ 0x2c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3361      	adds	r3, #97	@ 0x61
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d122      	bne.n	8002cec <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	212c      	movs	r1, #44	@ 0x2c
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3360      	adds	r3, #96	@ 0x60
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002cce:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002cd6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	e023      	b.n	8002d34 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	212c      	movs	r1, #44	@ 0x2c
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3361      	adds	r3, #97	@ 0x61
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b07      	cmp	r3, #7
 8002cfe:	d119      	bne.n	8002d34 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	212c      	movs	r1, #44	@ 0x2c
 8002d06:	fb01 f303 	mul.w	r3, r1, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	335c      	adds	r3, #92	@ 0x5c
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	202c      	movs	r0, #44	@ 0x2c
 8002d18:	fb00 f303 	mul.w	r3, r0, r3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	335c      	adds	r3, #92	@ 0x5c
 8002d20:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	212c      	movs	r1, #44	@ 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3360      	adds	r3, #96	@ 0x60
 8002d30:	2204      	movs	r2, #4
 8002d32:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d40:	461a      	mov	r2, r3
 8002d42:	2302      	movs	r3, #2
 8002d44:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	b2d9      	uxtb	r1, r3
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	202c      	movs	r0, #44	@ 0x2c
 8002d50:	fb00 f303 	mul.w	r3, r0, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	3360      	adds	r3, #96	@ 0x60
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f006 f957 	bl	8009010 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d62:	e061      	b.n	8002e28 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d156      	bne.n	8002e28 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	212c      	movs	r1, #44	@ 0x2c
 8002d80:	fb01 f303 	mul.w	r3, r1, r3
 8002d84:	4413      	add	r3, r2
 8002d86:	333f      	adds	r3, #63	@ 0x3f
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b03      	cmp	r3, #3
 8002d8c:	d111      	bne.n	8002db2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	212c      	movs	r1, #44	@ 0x2c
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	335c      	adds	r3, #92	@ 0x5c
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	4611      	mov	r1, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f003 fe9d 	bl	8006aea <USB_HC_Halt>
 8002db0:	e031      	b.n	8002e16 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	212c      	movs	r1, #44	@ 0x2c
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	333f      	adds	r3, #63	@ 0x3f
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	212c      	movs	r1, #44	@ 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	333f      	adds	r3, #63	@ 0x3f
 8002dd4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d11d      	bne.n	8002e16 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	212c      	movs	r1, #44	@ 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	335c      	adds	r3, #92	@ 0x5c
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d110      	bne.n	8002e16 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	212c      	movs	r1, #44	@ 0x2c
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	3361      	adds	r3, #97	@ 0x61
 8002e02:	2203      	movs	r2, #3
 8002e04:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	4611      	mov	r1, r2
 8002e10:	4618      	mov	r0, r3
 8002e12:	f003 fe6a 	bl	8006aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e22:	461a      	mov	r2, r3
 8002e24:	2310      	movs	r3, #16
 8002e26:	6093      	str	r3, [r2, #8]
}
 8002e28:	bf00      	nop
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002e46:	78fb      	ldrb	r3, [r7, #3]
 8002e48:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d11a      	bne.n	8002e96 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2304      	movs	r3, #4
 8002e70:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	212c      	movs	r1, #44	@ 0x2c
 8002e78:	fb01 f303 	mul.w	r3, r1, r3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3361      	adds	r3, #97	@ 0x61
 8002e80:	2206      	movs	r2, #6
 8002e82:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f003 fe2b 	bl	8006aea <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002e94:	e331      	b.n	80034fa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d12e      	bne.n	8002f0a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2320      	movs	r3, #32
 8002ebc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	212c      	movs	r1, #44	@ 0x2c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	333d      	adds	r3, #61	@ 0x3d
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	f040 8313 	bne.w	80034fa <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	212c      	movs	r1, #44	@ 0x2c
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	333d      	adds	r3, #61	@ 0x3d
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	212c      	movs	r1, #44	@ 0x2c
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3360      	adds	r3, #96	@ 0x60
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 fdf1 	bl	8006aea <USB_HC_Halt>
}
 8002f08:	e2f7      	b.n	80034fa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f20:	d112      	bne.n	8002f48 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f34:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f003 fdd2 	bl	8006aea <USB_HC_Halt>
}
 8002f46:	e2d8      	b.n	80034fa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d140      	bne.n	8002fe0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	212c      	movs	r1, #44	@ 0x2c
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	4413      	add	r3, r2
 8002f6a:	335c      	adds	r3, #92	@ 0x5c
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f82:	2b40      	cmp	r3, #64	@ 0x40
 8002f84:	d111      	bne.n	8002faa <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	212c      	movs	r1, #44	@ 0x2c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	333d      	adds	r3, #61	@ 0x3d
 8002f94:	2201      	movs	r2, #1
 8002f96:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	2340      	movs	r3, #64	@ 0x40
 8002fa8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	2301      	movs	r3, #1
 8002fba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	212c      	movs	r1, #44	@ 0x2c
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3361      	adds	r3, #97	@ 0x61
 8002fca:	2201      	movs	r2, #1
 8002fcc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f003 fd86 	bl	8006aea <USB_HC_Halt>
}
 8002fde:	e28c      	b.n	80034fa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff2:	2b40      	cmp	r3, #64	@ 0x40
 8002ff4:	d12c      	bne.n	8003050 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	212c      	movs	r1, #44	@ 0x2c
 8002ffc:	fb01 f303 	mul.w	r3, r1, r3
 8003000:	4413      	add	r3, r2
 8003002:	3361      	adds	r3, #97	@ 0x61
 8003004:	2204      	movs	r2, #4
 8003006:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	212c      	movs	r1, #44	@ 0x2c
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	4413      	add	r3, r2
 8003014:	333d      	adds	r3, #61	@ 0x3d
 8003016:	2201      	movs	r2, #1
 8003018:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	212c      	movs	r1, #44	@ 0x2c
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	4413      	add	r3, r2
 8003026:	335c      	adds	r3, #92	@ 0x5c
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f003 fd57 	bl	8006aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	4413      	add	r3, r2
 8003044:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003048:	461a      	mov	r2, r3
 800304a:	2340      	movs	r3, #64	@ 0x40
 800304c:	6093      	str	r3, [r2, #8]
}
 800304e:	e254      	b.n	80034fa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b08      	cmp	r3, #8
 8003064:	d11a      	bne.n	800309c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	4413      	add	r3, r2
 800306e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003072:	461a      	mov	r2, r3
 8003074:	2308      	movs	r3, #8
 8003076:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	212c      	movs	r1, #44	@ 0x2c
 800307e:	fb01 f303 	mul.w	r3, r1, r3
 8003082:	4413      	add	r3, r2
 8003084:	3361      	adds	r3, #97	@ 0x61
 8003086:	2205      	movs	r2, #5
 8003088:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	4611      	mov	r1, r2
 8003094:	4618      	mov	r0, r3
 8003096:	f003 fd28 	bl	8006aea <USB_HC_Halt>
}
 800309a:	e22e      	b.n	80034fa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 0310 	and.w	r3, r3, #16
 80030ae:	2b10      	cmp	r3, #16
 80030b0:	d140      	bne.n	8003134 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	212c      	movs	r1, #44	@ 0x2c
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	4413      	add	r3, r2
 80030be:	335c      	adds	r3, #92	@ 0x5c
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	212c      	movs	r1, #44	@ 0x2c
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	3361      	adds	r3, #97	@ 0x61
 80030d2:	2203      	movs	r2, #3
 80030d4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	212c      	movs	r1, #44	@ 0x2c
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	4413      	add	r3, r2
 80030e2:	333d      	adds	r3, #61	@ 0x3d
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d112      	bne.n	8003110 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	212c      	movs	r1, #44	@ 0x2c
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	333c      	adds	r3, #60	@ 0x3c
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d108      	bne.n	8003110 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	212c      	movs	r1, #44	@ 0x2c
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	4413      	add	r3, r2
 800310a:	333d      	adds	r3, #61	@ 0x3d
 800310c:	2201      	movs	r2, #1
 800310e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	4611      	mov	r1, r2
 800311a:	4618      	mov	r0, r3
 800311c:	f003 fce5 	bl	8006aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800312c:	461a      	mov	r2, r3
 800312e:	2310      	movs	r3, #16
 8003130:	6093      	str	r3, [r2, #8]
}
 8003132:	e1e2      	b.n	80034fa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	4413      	add	r3, r2
 800313c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003146:	2b80      	cmp	r3, #128	@ 0x80
 8003148:	d164      	bne.n	8003214 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d111      	bne.n	8003176 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	212c      	movs	r1, #44	@ 0x2c
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	4413      	add	r3, r2
 800315e:	3361      	adds	r3, #97	@ 0x61
 8003160:	2206      	movs	r2, #6
 8003162:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f003 fcbb 	bl	8006aea <USB_HC_Halt>
 8003174:	e044      	b.n	8003200 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	212c      	movs	r1, #44	@ 0x2c
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	4413      	add	r3, r2
 8003182:	335c      	adds	r3, #92	@ 0x5c
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	202c      	movs	r0, #44	@ 0x2c
 800318e:	fb00 f303 	mul.w	r3, r0, r3
 8003192:	440b      	add	r3, r1
 8003194:	335c      	adds	r3, #92	@ 0x5c
 8003196:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	212c      	movs	r1, #44	@ 0x2c
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	335c      	adds	r3, #92	@ 0x5c
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d920      	bls.n	80031ee <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	212c      	movs	r1, #44	@ 0x2c
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	335c      	adds	r3, #92	@ 0x5c
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	212c      	movs	r1, #44	@ 0x2c
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	3360      	adds	r3, #96	@ 0x60
 80031cc:	2204      	movs	r2, #4
 80031ce:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	b2d9      	uxtb	r1, r3
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	202c      	movs	r0, #44	@ 0x2c
 80031da:	fb00 f303 	mul.w	r3, r0, r3
 80031de:	4413      	add	r3, r2
 80031e0:	3360      	adds	r3, #96	@ 0x60
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	461a      	mov	r2, r3
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f005 ff12 	bl	8009010 <HAL_HCD_HC_NotifyURBChange_Callback>
 80031ec:	e008      	b.n	8003200 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	212c      	movs	r1, #44	@ 0x2c
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	4413      	add	r3, r2
 80031fa:	3360      	adds	r3, #96	@ 0x60
 80031fc:	2202      	movs	r2, #2
 80031fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	4413      	add	r3, r2
 8003208:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800320c:	461a      	mov	r2, r3
 800320e:	2380      	movs	r3, #128	@ 0x80
 8003210:	6093      	str	r3, [r2, #8]
}
 8003212:	e172      	b.n	80034fa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	4413      	add	r3, r2
 800321c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800322a:	d11b      	bne.n	8003264 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	212c      	movs	r1, #44	@ 0x2c
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	3361      	adds	r3, #97	@ 0x61
 800323a:	2208      	movs	r2, #8
 800323c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f003 fc4e 	bl	8006aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	4413      	add	r3, r2
 8003256:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800325a:	461a      	mov	r2, r3
 800325c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003260:	6093      	str	r3, [r2, #8]
}
 8003262:	e14a      	b.n	80034fa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	4413      	add	r3, r2
 800326c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b02      	cmp	r3, #2
 8003278:	f040 813f 	bne.w	80034fa <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	212c      	movs	r1, #44	@ 0x2c
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	4413      	add	r3, r2
 8003288:	3361      	adds	r3, #97	@ 0x61
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d17d      	bne.n	800338c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	212c      	movs	r1, #44	@ 0x2c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	3360      	adds	r3, #96	@ 0x60
 800329e:	2201      	movs	r2, #1
 80032a0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	212c      	movs	r1, #44	@ 0x2c
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	4413      	add	r3, r2
 80032ae:	333f      	adds	r3, #63	@ 0x3f
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d00a      	beq.n	80032cc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	212c      	movs	r1, #44	@ 0x2c
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	333f      	adds	r3, #63	@ 0x3f
 80032c4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	f040 8100 	bne.w	80034cc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d113      	bne.n	80032fc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	212c      	movs	r1, #44	@ 0x2c
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	4413      	add	r3, r2
 80032e0:	3355      	adds	r3, #85	@ 0x55
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	f083 0301 	eor.w	r3, r3, #1
 80032e8:	b2d8      	uxtb	r0, r3
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	212c      	movs	r1, #44	@ 0x2c
 80032f0:	fb01 f303 	mul.w	r3, r1, r3
 80032f4:	4413      	add	r3, r2
 80032f6:	3355      	adds	r3, #85	@ 0x55
 80032f8:	4602      	mov	r2, r0
 80032fa:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	2b01      	cmp	r3, #1
 8003302:	f040 80e3 	bne.w	80034cc <HCD_HC_OUT_IRQHandler+0x69c>
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	212c      	movs	r1, #44	@ 0x2c
 800330c:	fb01 f303 	mul.w	r3, r1, r3
 8003310:	4413      	add	r3, r2
 8003312:	334c      	adds	r3, #76	@ 0x4c
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 80d8 	beq.w	80034cc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	212c      	movs	r1, #44	@ 0x2c
 8003322:	fb01 f303 	mul.w	r3, r1, r3
 8003326:	4413      	add	r3, r2
 8003328:	334c      	adds	r3, #76	@ 0x4c
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	202c      	movs	r0, #44	@ 0x2c
 8003332:	fb00 f202 	mul.w	r2, r0, r2
 8003336:	440a      	add	r2, r1
 8003338:	3240      	adds	r2, #64	@ 0x40
 800333a:	8812      	ldrh	r2, [r2, #0]
 800333c:	4413      	add	r3, r2
 800333e:	3b01      	subs	r3, #1
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	202c      	movs	r0, #44	@ 0x2c
 8003346:	fb00 f202 	mul.w	r2, r0, r2
 800334a:	440a      	add	r2, r1
 800334c:	3240      	adds	r2, #64	@ 0x40
 800334e:	8812      	ldrh	r2, [r2, #0]
 8003350:	fbb3 f3f2 	udiv	r3, r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80b5 	beq.w	80034cc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	212c      	movs	r1, #44	@ 0x2c
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	4413      	add	r3, r2
 800336e:	3355      	adds	r3, #85	@ 0x55
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	f083 0301 	eor.w	r3, r3, #1
 8003376:	b2d8      	uxtb	r0, r3
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	212c      	movs	r1, #44	@ 0x2c
 800337e:	fb01 f303 	mul.w	r3, r1, r3
 8003382:	4413      	add	r3, r2
 8003384:	3355      	adds	r3, #85	@ 0x55
 8003386:	4602      	mov	r2, r0
 8003388:	701a      	strb	r2, [r3, #0]
 800338a:	e09f      	b.n	80034cc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	212c      	movs	r1, #44	@ 0x2c
 8003392:	fb01 f303 	mul.w	r3, r1, r3
 8003396:	4413      	add	r3, r2
 8003398:	3361      	adds	r3, #97	@ 0x61
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b03      	cmp	r3, #3
 800339e:	d109      	bne.n	80033b4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	212c      	movs	r1, #44	@ 0x2c
 80033a6:	fb01 f303 	mul.w	r3, r1, r3
 80033aa:	4413      	add	r3, r2
 80033ac:	3360      	adds	r3, #96	@ 0x60
 80033ae:	2202      	movs	r2, #2
 80033b0:	701a      	strb	r2, [r3, #0]
 80033b2:	e08b      	b.n	80034cc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	212c      	movs	r1, #44	@ 0x2c
 80033ba:	fb01 f303 	mul.w	r3, r1, r3
 80033be:	4413      	add	r3, r2
 80033c0:	3361      	adds	r3, #97	@ 0x61
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d109      	bne.n	80033dc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	212c      	movs	r1, #44	@ 0x2c
 80033ce:	fb01 f303 	mul.w	r3, r1, r3
 80033d2:	4413      	add	r3, r2
 80033d4:	3360      	adds	r3, #96	@ 0x60
 80033d6:	2202      	movs	r2, #2
 80033d8:	701a      	strb	r2, [r3, #0]
 80033da:	e077      	b.n	80034cc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	212c      	movs	r1, #44	@ 0x2c
 80033e2:	fb01 f303 	mul.w	r3, r1, r3
 80033e6:	4413      	add	r3, r2
 80033e8:	3361      	adds	r3, #97	@ 0x61
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b05      	cmp	r3, #5
 80033ee:	d109      	bne.n	8003404 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	212c      	movs	r1, #44	@ 0x2c
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	4413      	add	r3, r2
 80033fc:	3360      	adds	r3, #96	@ 0x60
 80033fe:	2205      	movs	r2, #5
 8003400:	701a      	strb	r2, [r3, #0]
 8003402:	e063      	b.n	80034cc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	212c      	movs	r1, #44	@ 0x2c
 800340a:	fb01 f303 	mul.w	r3, r1, r3
 800340e:	4413      	add	r3, r2
 8003410:	3361      	adds	r3, #97	@ 0x61
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b06      	cmp	r3, #6
 8003416:	d009      	beq.n	800342c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	212c      	movs	r1, #44	@ 0x2c
 800341e:	fb01 f303 	mul.w	r3, r1, r3
 8003422:	4413      	add	r3, r2
 8003424:	3361      	adds	r3, #97	@ 0x61
 8003426:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003428:	2b08      	cmp	r3, #8
 800342a:	d14f      	bne.n	80034cc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	212c      	movs	r1, #44	@ 0x2c
 8003432:	fb01 f303 	mul.w	r3, r1, r3
 8003436:	4413      	add	r3, r2
 8003438:	335c      	adds	r3, #92	@ 0x5c
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	202c      	movs	r0, #44	@ 0x2c
 8003444:	fb00 f303 	mul.w	r3, r0, r3
 8003448:	440b      	add	r3, r1
 800344a:	335c      	adds	r3, #92	@ 0x5c
 800344c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	212c      	movs	r1, #44	@ 0x2c
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	4413      	add	r3, r2
 800345a:	335c      	adds	r3, #92	@ 0x5c
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d912      	bls.n	8003488 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	212c      	movs	r1, #44	@ 0x2c
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	4413      	add	r3, r2
 800346e:	335c      	adds	r3, #92	@ 0x5c
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	212c      	movs	r1, #44	@ 0x2c
 800347a:	fb01 f303 	mul.w	r3, r1, r3
 800347e:	4413      	add	r3, r2
 8003480:	3360      	adds	r3, #96	@ 0x60
 8003482:	2204      	movs	r2, #4
 8003484:	701a      	strb	r2, [r3, #0]
 8003486:	e021      	b.n	80034cc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	212c      	movs	r1, #44	@ 0x2c
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	4413      	add	r3, r2
 8003494:	3360      	adds	r3, #96	@ 0x60
 8003496:	2202      	movs	r2, #2
 8003498:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034b0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034b8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034c6:	461a      	mov	r2, r3
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034d8:	461a      	mov	r2, r3
 80034da:	2302      	movs	r3, #2
 80034dc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	b2d9      	uxtb	r1, r3
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	202c      	movs	r0, #44	@ 0x2c
 80034e8:	fb00 f303 	mul.w	r3, r0, r3
 80034ec:	4413      	add	r3, r2
 80034ee:	3360      	adds	r3, #96	@ 0x60
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f005 fd8b 	bl	8009010 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80034fa:	bf00      	nop
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b08a      	sub	sp, #40	@ 0x28
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	0c5b      	lsrs	r3, r3, #17
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003536:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d004      	beq.n	8003548 <HCD_RXQLVL_IRQHandler+0x46>
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b05      	cmp	r3, #5
 8003542:	f000 80a9 	beq.w	8003698 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003546:	e0aa      	b.n	800369e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 80a6 	beq.w	800369c <HCD_RXQLVL_IRQHandler+0x19a>
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	212c      	movs	r1, #44	@ 0x2c
 8003556:	fb01 f303 	mul.w	r3, r1, r3
 800355a:	4413      	add	r3, r2
 800355c:	3344      	adds	r3, #68	@ 0x44
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 809b 	beq.w	800369c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	212c      	movs	r1, #44	@ 0x2c
 800356c:	fb01 f303 	mul.w	r3, r1, r3
 8003570:	4413      	add	r3, r2
 8003572:	3350      	adds	r3, #80	@ 0x50
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	441a      	add	r2, r3
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	202c      	movs	r0, #44	@ 0x2c
 8003580:	fb00 f303 	mul.w	r3, r0, r3
 8003584:	440b      	add	r3, r1
 8003586:	334c      	adds	r3, #76	@ 0x4c
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d87a      	bhi.n	8003684 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	212c      	movs	r1, #44	@ 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	3344      	adds	r3, #68	@ 0x44
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	b292      	uxth	r2, r2
 80035a6:	4619      	mov	r1, r3
 80035a8:	f002 fdf6 	bl	8006198 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	212c      	movs	r1, #44	@ 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	3344      	adds	r3, #68	@ 0x44
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	441a      	add	r2, r3
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	202c      	movs	r0, #44	@ 0x2c
 80035c6:	fb00 f303 	mul.w	r3, r0, r3
 80035ca:	440b      	add	r3, r1
 80035cc:	3344      	adds	r3, #68	@ 0x44
 80035ce:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	212c      	movs	r1, #44	@ 0x2c
 80035d6:	fb01 f303 	mul.w	r3, r1, r3
 80035da:	4413      	add	r3, r2
 80035dc:	3350      	adds	r3, #80	@ 0x50
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	441a      	add	r2, r3
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	202c      	movs	r0, #44	@ 0x2c
 80035ea:	fb00 f303 	mul.w	r3, r0, r3
 80035ee:	440b      	add	r3, r1
 80035f0:	3350      	adds	r3, #80	@ 0x50
 80035f2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	0cdb      	lsrs	r3, r3, #19
 8003604:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003608:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	212c      	movs	r1, #44	@ 0x2c
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	3340      	adds	r3, #64	@ 0x40
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4293      	cmp	r3, r2
 8003620:	d13c      	bne.n	800369c <HCD_RXQLVL_IRQHandler+0x19a>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d039      	beq.n	800369c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	4413      	add	r3, r2
 8003630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800363e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003646:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	4413      	add	r3, r2
 8003650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003654:	461a      	mov	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	212c      	movs	r1, #44	@ 0x2c
 8003660:	fb01 f303 	mul.w	r3, r1, r3
 8003664:	4413      	add	r3, r2
 8003666:	3354      	adds	r3, #84	@ 0x54
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	f083 0301 	eor.w	r3, r3, #1
 800366e:	b2d8      	uxtb	r0, r3
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	212c      	movs	r1, #44	@ 0x2c
 8003676:	fb01 f303 	mul.w	r3, r1, r3
 800367a:	4413      	add	r3, r2
 800367c:	3354      	adds	r3, #84	@ 0x54
 800367e:	4602      	mov	r2, r0
 8003680:	701a      	strb	r2, [r3, #0]
      break;
 8003682:	e00b      	b.n	800369c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	212c      	movs	r1, #44	@ 0x2c
 800368a:	fb01 f303 	mul.w	r3, r1, r3
 800368e:	4413      	add	r3, r2
 8003690:	3360      	adds	r3, #96	@ 0x60
 8003692:	2204      	movs	r2, #4
 8003694:	701a      	strb	r2, [r3, #0]
      break;
 8003696:	e001      	b.n	800369c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003698:	bf00      	nop
 800369a:	e000      	b.n	800369e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800369c:	bf00      	nop
  }
}
 800369e:	bf00      	nop
 80036a0:	3728      	adds	r7, #40	@ 0x28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b086      	sub	sp, #24
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80036d2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d10b      	bne.n	80036f6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d102      	bne.n	80036ee <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f005 fc75 	bl	8008fd8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f043 0302 	orr.w	r3, r3, #2
 80036f4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d132      	bne.n	8003766 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f043 0308 	orr.w	r3, r3, #8
 8003706:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b04      	cmp	r3, #4
 8003710:	d126      	bne.n	8003760 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d113      	bne.n	8003742 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003720:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003724:	d106      	bne.n	8003734 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2102      	movs	r1, #2
 800372c:	4618      	mov	r0, r3
 800372e:	f002 fea1 	bl	8006474 <USB_InitFSLSPClkSel>
 8003732:	e011      	b.n	8003758 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2101      	movs	r1, #1
 800373a:	4618      	mov	r0, r3
 800373c:	f002 fe9a 	bl	8006474 <USB_InitFSLSPClkSel>
 8003740:	e00a      	b.n	8003758 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d106      	bne.n	8003758 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003750:	461a      	mov	r2, r3
 8003752:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003756:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f005 fc67 	bl	800902c <HAL_HCD_PortEnabled_Callback>
 800375e:	e002      	b.n	8003766 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f005 fc71 	bl	8009048 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b20      	cmp	r3, #32
 800376e:	d103      	bne.n	8003778 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f043 0320 	orr.w	r3, r3, #32
 8003776:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800377e:	461a      	mov	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	6013      	str	r3, [r2, #0]
}
 8003784:	bf00      	nop
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e12b      	b.n	80039f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fd fdda 	bl	800136c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2224      	movs	r2, #36	@ 0x24
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037f0:	f001 fa20 	bl	8004c34 <HAL_RCC_GetPCLK1Freq>
 80037f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4a81      	ldr	r2, [pc, #516]	@ (8003a00 <HAL_I2C_Init+0x274>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d807      	bhi.n	8003810 <HAL_I2C_Init+0x84>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4a80      	ldr	r2, [pc, #512]	@ (8003a04 <HAL_I2C_Init+0x278>)
 8003804:	4293      	cmp	r3, r2
 8003806:	bf94      	ite	ls
 8003808:	2301      	movls	r3, #1
 800380a:	2300      	movhi	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	e006      	b.n	800381e <HAL_I2C_Init+0x92>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4a7d      	ldr	r2, [pc, #500]	@ (8003a08 <HAL_I2C_Init+0x27c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	bf94      	ite	ls
 8003818:	2301      	movls	r3, #1
 800381a:	2300      	movhi	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e0e7      	b.n	80039f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a78      	ldr	r2, [pc, #480]	@ (8003a0c <HAL_I2C_Init+0x280>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	0c9b      	lsrs	r3, r3, #18
 8003830:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4a6a      	ldr	r2, [pc, #424]	@ (8003a00 <HAL_I2C_Init+0x274>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d802      	bhi.n	8003860 <HAL_I2C_Init+0xd4>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	3301      	adds	r3, #1
 800385e:	e009      	b.n	8003874 <HAL_I2C_Init+0xe8>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003866:	fb02 f303 	mul.w	r3, r2, r3
 800386a:	4a69      	ldr	r2, [pc, #420]	@ (8003a10 <HAL_I2C_Init+0x284>)
 800386c:	fba2 2303 	umull	r2, r3, r2, r3
 8003870:	099b      	lsrs	r3, r3, #6
 8003872:	3301      	adds	r3, #1
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	430b      	orrs	r3, r1
 800387a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003886:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	495c      	ldr	r1, [pc, #368]	@ (8003a00 <HAL_I2C_Init+0x274>)
 8003890:	428b      	cmp	r3, r1
 8003892:	d819      	bhi.n	80038c8 <HAL_I2C_Init+0x13c>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1e59      	subs	r1, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a2:	1c59      	adds	r1, r3, #1
 80038a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038a8:	400b      	ands	r3, r1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_I2C_Init+0x138>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1e59      	subs	r1, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038bc:	3301      	adds	r3, #1
 80038be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c2:	e051      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 80038c4:	2304      	movs	r3, #4
 80038c6:	e04f      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d111      	bne.n	80038f4 <HAL_I2C_Init+0x168>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	1e58      	subs	r0, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	440b      	add	r3, r1
 80038de:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bf0c      	ite	eq
 80038ec:	2301      	moveq	r3, #1
 80038ee:	2300      	movne	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	e012      	b.n	800391a <HAL_I2C_Init+0x18e>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1e58      	subs	r0, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	0099      	lsls	r1, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	fbb0 f3f3 	udiv	r3, r0, r3
 800390a:	3301      	adds	r3, #1
 800390c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf0c      	ite	eq
 8003914:	2301      	moveq	r3, #1
 8003916:	2300      	movne	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_I2C_Init+0x196>
 800391e:	2301      	movs	r3, #1
 8003920:	e022      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10e      	bne.n	8003948 <HAL_I2C_Init+0x1bc>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1e58      	subs	r0, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6859      	ldr	r1, [r3, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	440b      	add	r3, r1
 8003938:	fbb0 f3f3 	udiv	r3, r0, r3
 800393c:	3301      	adds	r3, #1
 800393e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003946:	e00f      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	1e58      	subs	r0, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	0099      	lsls	r1, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	fbb0 f3f3 	udiv	r3, r0, r3
 800395e:	3301      	adds	r3, #1
 8003960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003964:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	6809      	ldr	r1, [r1, #0]
 800396c:	4313      	orrs	r3, r2
 800396e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69da      	ldr	r2, [r3, #28]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003996:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6911      	ldr	r1, [r2, #16]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68d2      	ldr	r2, [r2, #12]
 80039a2:	4311      	orrs	r1, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	000186a0 	.word	0x000186a0
 8003a04:	001e847f 	.word	0x001e847f
 8003a08:	003d08ff 	.word	0x003d08ff
 8003a0c:	431bde83 	.word	0x431bde83
 8003a10:	10624dd3 	.word	0x10624dd3

08003a14 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e128      	b.n	8003c78 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a90      	ldr	r2, [pc, #576]	@ (8003c80 <HAL_I2S_Init+0x26c>)
 8003a3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7fd fcdb 	bl	80013fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a5c:	f023 030f 	bic.w	r3, r3, #15
 8003a60:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2202      	movs	r2, #2
 8003a68:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d060      	beq.n	8003b34 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d102      	bne.n	8003a80 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a7a:	2310      	movs	r3, #16
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	e001      	b.n	8003a84 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a80:	2320      	movs	r3, #32
 8003a82:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b20      	cmp	r3, #32
 8003a8a:	d802      	bhi.n	8003a92 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a92:	2001      	movs	r0, #1
 8003a94:	f001 f9d8 	bl	8004e48 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a98:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aa2:	d125      	bne.n	8003af0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d010      	beq.n	8003ace <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	461a      	mov	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac8:	3305      	adds	r3, #5
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	e01f      	b.n	8003b0e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aea:	3305      	adds	r3, #5
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	e00e      	b.n	8003b0e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	461a      	mov	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0a:	3305      	adds	r3, #5
 8003b0c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4a5c      	ldr	r2, [pc, #368]	@ (8003c84 <HAL_I2S_Init+0x270>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	08db      	lsrs	r3, r3, #3
 8003b18:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	085b      	lsrs	r3, r3, #1
 8003b2a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	021b      	lsls	r3, r3, #8
 8003b30:	61bb      	str	r3, [r7, #24]
 8003b32:	e003      	b.n	8003b3c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b34:	2302      	movs	r3, #2
 8003b36:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d902      	bls.n	8003b48 <HAL_I2S_Init+0x134>
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	2bff      	cmp	r3, #255	@ 0xff
 8003b46:	d907      	bls.n	8003b58 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4c:	f043 0210 	orr.w	r2, r3, #16
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e08f      	b.n	8003c78 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	ea42 0103 	orr.w	r1, r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b76:	f023 030f 	bic.w	r3, r3, #15
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6851      	ldr	r1, [r2, #4]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6892      	ldr	r2, [r2, #8]
 8003b82:	4311      	orrs	r1, r2
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	68d2      	ldr	r2, [r2, #12]
 8003b88:	4311      	orrs	r1, r2
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6992      	ldr	r2, [r2, #24]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b9a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d161      	bne.n	8003c68 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a38      	ldr	r2, [pc, #224]	@ (8003c88 <HAL_I2S_Init+0x274>)
 8003ba8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a37      	ldr	r2, [pc, #220]	@ (8003c8c <HAL_I2S_Init+0x278>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d101      	bne.n	8003bb8 <HAL_I2S_Init+0x1a4>
 8003bb4:	4b36      	ldr	r3, [pc, #216]	@ (8003c90 <HAL_I2S_Init+0x27c>)
 8003bb6:	e001      	b.n	8003bbc <HAL_I2S_Init+0x1a8>
 8003bb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6812      	ldr	r2, [r2, #0]
 8003bc2:	4932      	ldr	r1, [pc, #200]	@ (8003c8c <HAL_I2S_Init+0x278>)
 8003bc4:	428a      	cmp	r2, r1
 8003bc6:	d101      	bne.n	8003bcc <HAL_I2S_Init+0x1b8>
 8003bc8:	4a31      	ldr	r2, [pc, #196]	@ (8003c90 <HAL_I2S_Init+0x27c>)
 8003bca:	e001      	b.n	8003bd0 <HAL_I2S_Init+0x1bc>
 8003bcc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003bd0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003bd4:	f023 030f 	bic.w	r3, r3, #15
 8003bd8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a2b      	ldr	r2, [pc, #172]	@ (8003c8c <HAL_I2S_Init+0x278>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d101      	bne.n	8003be8 <HAL_I2S_Init+0x1d4>
 8003be4:	4b2a      	ldr	r3, [pc, #168]	@ (8003c90 <HAL_I2S_Init+0x27c>)
 8003be6:	e001      	b.n	8003bec <HAL_I2S_Init+0x1d8>
 8003be8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bec:	2202      	movs	r2, #2
 8003bee:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a25      	ldr	r2, [pc, #148]	@ (8003c8c <HAL_I2S_Init+0x278>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d101      	bne.n	8003bfe <HAL_I2S_Init+0x1ea>
 8003bfa:	4b25      	ldr	r3, [pc, #148]	@ (8003c90 <HAL_I2S_Init+0x27c>)
 8003bfc:	e001      	b.n	8003c02 <HAL_I2S_Init+0x1ee>
 8003bfe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c0e:	d003      	beq.n	8003c18 <HAL_I2S_Init+0x204>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d103      	bne.n	8003c20 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	e001      	b.n	8003c24 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c42:	4313      	orrs	r3, r2
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	897b      	ldrh	r3, [r7, #10]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c50:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a0d      	ldr	r2, [pc, #52]	@ (8003c8c <HAL_I2S_Init+0x278>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <HAL_I2S_Init+0x24c>
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c90 <HAL_I2S_Init+0x27c>)
 8003c5e:	e001      	b.n	8003c64 <HAL_I2S_Init+0x250>
 8003c60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c64:	897a      	ldrh	r2, [r7, #10]
 8003c66:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3720      	adds	r7, #32
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	08003d8b 	.word	0x08003d8b
 8003c84:	cccccccd 	.word	0xcccccccd
 8003c88:	08003ea1 	.word	0x08003ea1
 8003c8c:	40003800 	.word	0x40003800
 8003c90:	40003400 	.word	0x40003400

08003c94 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	881a      	ldrh	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce8:	1c9a      	adds	r2, r3, #2
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10e      	bne.n	8003d24 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d14:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff ffb8 	bl	8003c94 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3e:	b292      	uxth	r2, r2
 8003d40:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d46:	1c9a      	adds	r2, r3, #2
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10e      	bne.n	8003d82 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d72:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7ff ff93 	bl	8003ca8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b086      	sub	sp, #24
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d13a      	bne.n	8003e1c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d109      	bne.n	8003dc4 <I2S_IRQHandler+0x3a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dba:	2b40      	cmp	r3, #64	@ 0x40
 8003dbc:	d102      	bne.n	8003dc4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff ffb4 	bl	8003d2c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dca:	2b40      	cmp	r3, #64	@ 0x40
 8003dcc:	d126      	bne.n	8003e1c <I2S_IRQHandler+0x92>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 0320 	and.w	r3, r3, #32
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d11f      	bne.n	8003e1c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003dea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003dec:	2300      	movs	r3, #0
 8003dee:	613b      	str	r3, [r7, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0e:	f043 0202 	orr.w	r2, r3, #2
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff ff50 	bl	8003cbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b03      	cmp	r3, #3
 8003e26:	d136      	bne.n	8003e96 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d109      	bne.n	8003e46 <I2S_IRQHandler+0xbc>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3c:	2b80      	cmp	r3, #128	@ 0x80
 8003e3e:	d102      	bne.n	8003e46 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff ff45 	bl	8003cd0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d122      	bne.n	8003e96 <I2S_IRQHandler+0x10c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d11b      	bne.n	8003e96 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e6c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e88:	f043 0204 	orr.w	r2, r3, #4
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff ff13 	bl	8003cbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e96:	bf00      	nop
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a92      	ldr	r2, [pc, #584]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d101      	bne.n	8003ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003eba:	4b92      	ldr	r3, [pc, #584]	@ (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ebc:	e001      	b.n	8003ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003ebe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a8b      	ldr	r2, [pc, #556]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d101      	bne.n	8003edc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ed8:	4b8a      	ldr	r3, [pc, #552]	@ (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eda:	e001      	b.n	8003ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003edc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eec:	d004      	beq.n	8003ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f040 8099 	bne.w	800402a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d107      	bne.n	8003f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f925 	bl	800415c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d107      	bne.n	8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f9c8 	bl	80042bc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f32:	2b40      	cmp	r3, #64	@ 0x40
 8003f34:	d13a      	bne.n	8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d035      	beq.n	8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a6e      	ldr	r2, [pc, #440]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d101      	bne.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f4a:	4b6e      	ldr	r3, [pc, #440]	@ (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f4c:	e001      	b.n	8003f52 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4969      	ldr	r1, [pc, #420]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f5a:	428b      	cmp	r3, r1
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f5e:	4b69      	ldr	r3, [pc, #420]	@ (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f60:	e001      	b.n	8003f66 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f66:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f6a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f7a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	f043 0202 	orr.w	r2, r3, #2
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff fe88 	bl	8003cbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	f040 80c3 	bne.w	800413e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 80bd 	beq.w	800413e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fd2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a49      	ldr	r2, [pc, #292]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d101      	bne.n	8003fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003fde:	4b49      	ldr	r3, [pc, #292]	@ (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fe0:	e001      	b.n	8003fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003fe2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4944      	ldr	r1, [pc, #272]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fee:	428b      	cmp	r3, r1
 8003ff0:	d101      	bne.n	8003ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003ff2:	4b44      	ldr	r3, [pc, #272]	@ (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ff4:	e001      	b.n	8003ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003ff6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ffa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ffe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004000:	2300      	movs	r3, #0
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401a:	f043 0204 	orr.w	r2, r3, #4
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff fe4a 	bl	8003cbc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004028:	e089      	b.n	800413e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b02      	cmp	r3, #2
 8004032:	d107      	bne.n	8004044 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f8be 	bl	80041c0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b01      	cmp	r3, #1
 800404c:	d107      	bne.n	800405e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f8fd 	bl	8004258 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004064:	2b40      	cmp	r3, #64	@ 0x40
 8004066:	d12f      	bne.n	80040c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b00      	cmp	r3, #0
 8004070:	d02a      	beq.n	80040c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004080:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a1e      	ldr	r2, [pc, #120]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d101      	bne.n	8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800408c:	4b1d      	ldr	r3, [pc, #116]	@ (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800408e:	e001      	b.n	8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004090:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4919      	ldr	r1, [pc, #100]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800409c:	428b      	cmp	r3, r1
 800409e:	d101      	bne.n	80040a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80040a0:	4b18      	ldr	r3, [pc, #96]	@ (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040a2:	e001      	b.n	80040a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80040a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ba:	f043 0202 	orr.w	r2, r3, #2
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7ff fdfa 	bl	8003cbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d136      	bne.n	8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d031      	beq.n	8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a07      	ldr	r2, [pc, #28]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d101      	bne.n	80040ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80040e6:	4b07      	ldr	r3, [pc, #28]	@ (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040e8:	e001      	b.n	80040ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80040ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4902      	ldr	r1, [pc, #8]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040f6:	428b      	cmp	r3, r1
 80040f8:	d106      	bne.n	8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80040fa:	4b02      	ldr	r3, [pc, #8]	@ (8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040fc:	e006      	b.n	800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80040fe:	bf00      	nop
 8004100:	40003800 	.word	0x40003800
 8004104:	40003400 	.word	0x40003400
 8004108:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800410c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004110:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004120:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412e:	f043 0204 	orr.w	r2, r3, #4
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff fdc0 	bl	8003cbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800413c:	e000      	b.n	8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800413e:	bf00      	nop
}
 8004140:	bf00      	nop
 8004142:	3720      	adds	r7, #32
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	1c99      	adds	r1, r3, #2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6251      	str	r1, [r2, #36]	@ 0x24
 800416e:	881a      	ldrh	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d113      	bne.n	80041b6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800419c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d106      	bne.n	80041b6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff ffc9 	bl	8004148 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041b6:	bf00      	nop
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041cc:	1c99      	adds	r1, r3, #2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6251      	str	r1, [r2, #36]	@ 0x24
 80041d2:	8819      	ldrh	r1, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004250 <I2SEx_TxISR_I2SExt+0x90>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d101      	bne.n	80041e2 <I2SEx_TxISR_I2SExt+0x22>
 80041de:	4b1d      	ldr	r3, [pc, #116]	@ (8004254 <I2SEx_TxISR_I2SExt+0x94>)
 80041e0:	e001      	b.n	80041e6 <I2SEx_TxISR_I2SExt+0x26>
 80041e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041e6:	460a      	mov	r2, r1
 80041e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d121      	bne.n	8004246 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a12      	ldr	r2, [pc, #72]	@ (8004250 <I2SEx_TxISR_I2SExt+0x90>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d101      	bne.n	8004210 <I2SEx_TxISR_I2SExt+0x50>
 800420c:	4b11      	ldr	r3, [pc, #68]	@ (8004254 <I2SEx_TxISR_I2SExt+0x94>)
 800420e:	e001      	b.n	8004214 <I2SEx_TxISR_I2SExt+0x54>
 8004210:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	490d      	ldr	r1, [pc, #52]	@ (8004250 <I2SEx_TxISR_I2SExt+0x90>)
 800421c:	428b      	cmp	r3, r1
 800421e:	d101      	bne.n	8004224 <I2SEx_TxISR_I2SExt+0x64>
 8004220:	4b0c      	ldr	r3, [pc, #48]	@ (8004254 <I2SEx_TxISR_I2SExt+0x94>)
 8004222:	e001      	b.n	8004228 <I2SEx_TxISR_I2SExt+0x68>
 8004224:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004228:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800422c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d106      	bne.n	8004246 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff ff81 	bl	8004148 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004246:	bf00      	nop
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40003800 	.word	0x40003800
 8004254:	40003400 	.word	0x40003400

08004258 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68d8      	ldr	r0, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426a:	1c99      	adds	r1, r3, #2
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004270:	b282      	uxth	r2, r0
 8004272:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004286:	b29b      	uxth	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d113      	bne.n	80042b4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800429a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff ff4a 	bl	8004148 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042b4:	bf00      	nop
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a20      	ldr	r2, [pc, #128]	@ (800434c <I2SEx_RxISR_I2SExt+0x90>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d101      	bne.n	80042d2 <I2SEx_RxISR_I2SExt+0x16>
 80042ce:	4b20      	ldr	r3, [pc, #128]	@ (8004350 <I2SEx_RxISR_I2SExt+0x94>)
 80042d0:	e001      	b.n	80042d6 <I2SEx_RxISR_I2SExt+0x1a>
 80042d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042d6:	68d8      	ldr	r0, [r3, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042dc:	1c99      	adds	r1, r3, #2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80042e2:	b282      	uxth	r2, r0
 80042e4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d121      	bne.n	8004342 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a12      	ldr	r2, [pc, #72]	@ (800434c <I2SEx_RxISR_I2SExt+0x90>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d101      	bne.n	800430c <I2SEx_RxISR_I2SExt+0x50>
 8004308:	4b11      	ldr	r3, [pc, #68]	@ (8004350 <I2SEx_RxISR_I2SExt+0x94>)
 800430a:	e001      	b.n	8004310 <I2SEx_RxISR_I2SExt+0x54>
 800430c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	490d      	ldr	r1, [pc, #52]	@ (800434c <I2SEx_RxISR_I2SExt+0x90>)
 8004318:	428b      	cmp	r3, r1
 800431a:	d101      	bne.n	8004320 <I2SEx_RxISR_I2SExt+0x64>
 800431c:	4b0c      	ldr	r3, [pc, #48]	@ (8004350 <I2SEx_RxISR_I2SExt+0x94>)
 800431e:	e001      	b.n	8004324 <I2SEx_RxISR_I2SExt+0x68>
 8004320:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004324:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004328:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d106      	bne.n	8004342 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7ff ff03 	bl	8004148 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004342:	bf00      	nop
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40003800 	.word	0x40003800
 8004350:	40003400 	.word	0x40003400

08004354 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e267      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d075      	beq.n	800445e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004372:	4b88      	ldr	r3, [pc, #544]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b04      	cmp	r3, #4
 800437c:	d00c      	beq.n	8004398 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800437e:	4b85      	ldr	r3, [pc, #532]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004386:	2b08      	cmp	r3, #8
 8004388:	d112      	bne.n	80043b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800438a:	4b82      	ldr	r3, [pc, #520]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004392:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004396:	d10b      	bne.n	80043b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004398:	4b7e      	ldr	r3, [pc, #504]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d05b      	beq.n	800445c <HAL_RCC_OscConfig+0x108>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d157      	bne.n	800445c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e242      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b8:	d106      	bne.n	80043c8 <HAL_RCC_OscConfig+0x74>
 80043ba:	4b76      	ldr	r3, [pc, #472]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a75      	ldr	r2, [pc, #468]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80043c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	e01d      	b.n	8004404 <HAL_RCC_OscConfig+0xb0>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043d0:	d10c      	bne.n	80043ec <HAL_RCC_OscConfig+0x98>
 80043d2:	4b70      	ldr	r3, [pc, #448]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a6f      	ldr	r2, [pc, #444]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80043d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	4b6d      	ldr	r3, [pc, #436]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a6c      	ldr	r2, [pc, #432]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80043e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	e00b      	b.n	8004404 <HAL_RCC_OscConfig+0xb0>
 80043ec:	4b69      	ldr	r3, [pc, #420]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a68      	ldr	r2, [pc, #416]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80043f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	4b66      	ldr	r3, [pc, #408]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a65      	ldr	r2, [pc, #404]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80043fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d013      	beq.n	8004434 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fd fa2a 	bl	8001864 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004414:	f7fd fa26 	bl	8001864 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b64      	cmp	r3, #100	@ 0x64
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e207      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004426:	4b5b      	ldr	r3, [pc, #364]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0f0      	beq.n	8004414 <HAL_RCC_OscConfig+0xc0>
 8004432:	e014      	b.n	800445e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004434:	f7fd fa16 	bl	8001864 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800443c:	f7fd fa12 	bl	8001864 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b64      	cmp	r3, #100	@ 0x64
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e1f3      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800444e:	4b51      	ldr	r3, [pc, #324]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0xe8>
 800445a:	e000      	b.n	800445e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800445c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d063      	beq.n	8004532 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800446a:	4b4a      	ldr	r3, [pc, #296]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 030c 	and.w	r3, r3, #12
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00b      	beq.n	800448e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004476:	4b47      	ldr	r3, [pc, #284]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800447e:	2b08      	cmp	r3, #8
 8004480:	d11c      	bne.n	80044bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004482:	4b44      	ldr	r3, [pc, #272]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d116      	bne.n	80044bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800448e:	4b41      	ldr	r3, [pc, #260]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d005      	beq.n	80044a6 <HAL_RCC_OscConfig+0x152>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d001      	beq.n	80044a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e1c7      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4937      	ldr	r1, [pc, #220]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ba:	e03a      	b.n	8004532 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d020      	beq.n	8004506 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044c4:	4b34      	ldr	r3, [pc, #208]	@ (8004598 <HAL_RCC_OscConfig+0x244>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ca:	f7fd f9cb 	bl	8001864 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044d2:	f7fd f9c7 	bl	8001864 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e1a8      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0f0      	beq.n	80044d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f0:	4b28      	ldr	r3, [pc, #160]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	4925      	ldr	r1, [pc, #148]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 8004500:	4313      	orrs	r3, r2
 8004502:	600b      	str	r3, [r1, #0]
 8004504:	e015      	b.n	8004532 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004506:	4b24      	ldr	r3, [pc, #144]	@ (8004598 <HAL_RCC_OscConfig+0x244>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450c:	f7fd f9aa 	bl	8001864 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004514:	f7fd f9a6 	bl	8001864 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e187      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004526:	4b1b      	ldr	r3, [pc, #108]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d036      	beq.n	80045ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d016      	beq.n	8004574 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004546:	4b15      	ldr	r3, [pc, #84]	@ (800459c <HAL_RCC_OscConfig+0x248>)
 8004548:	2201      	movs	r2, #1
 800454a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454c:	f7fd f98a 	bl	8001864 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004554:	f7fd f986 	bl	8001864 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e167      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004566:	4b0b      	ldr	r3, [pc, #44]	@ (8004594 <HAL_RCC_OscConfig+0x240>)
 8004568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f0      	beq.n	8004554 <HAL_RCC_OscConfig+0x200>
 8004572:	e01b      	b.n	80045ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004574:	4b09      	ldr	r3, [pc, #36]	@ (800459c <HAL_RCC_OscConfig+0x248>)
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800457a:	f7fd f973 	bl	8001864 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004580:	e00e      	b.n	80045a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004582:	f7fd f96f 	bl	8001864 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d907      	bls.n	80045a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e150      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
 8004594:	40023800 	.word	0x40023800
 8004598:	42470000 	.word	0x42470000
 800459c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a0:	4b88      	ldr	r3, [pc, #544]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80045a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1ea      	bne.n	8004582 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 8097 	beq.w	80046e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ba:	2300      	movs	r3, #0
 80045bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045be:	4b81      	ldr	r3, [pc, #516]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10f      	bne.n	80045ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ca:	2300      	movs	r3, #0
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	4b7d      	ldr	r3, [pc, #500]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80045d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d2:	4a7c      	ldr	r2, [pc, #496]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80045d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80045da:	4b7a      	ldr	r3, [pc, #488]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045e2:	60bb      	str	r3, [r7, #8]
 80045e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045e6:	2301      	movs	r3, #1
 80045e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ea:	4b77      	ldr	r3, [pc, #476]	@ (80047c8 <HAL_RCC_OscConfig+0x474>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d118      	bne.n	8004628 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045f6:	4b74      	ldr	r3, [pc, #464]	@ (80047c8 <HAL_RCC_OscConfig+0x474>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a73      	ldr	r2, [pc, #460]	@ (80047c8 <HAL_RCC_OscConfig+0x474>)
 80045fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004602:	f7fd f92f 	bl	8001864 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800460a:	f7fd f92b 	bl	8001864 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e10c      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800461c:	4b6a      	ldr	r3, [pc, #424]	@ (80047c8 <HAL_RCC_OscConfig+0x474>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f0      	beq.n	800460a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d106      	bne.n	800463e <HAL_RCC_OscConfig+0x2ea>
 8004630:	4b64      	ldr	r3, [pc, #400]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004634:	4a63      	ldr	r2, [pc, #396]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	6713      	str	r3, [r2, #112]	@ 0x70
 800463c:	e01c      	b.n	8004678 <HAL_RCC_OscConfig+0x324>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2b05      	cmp	r3, #5
 8004644:	d10c      	bne.n	8004660 <HAL_RCC_OscConfig+0x30c>
 8004646:	4b5f      	ldr	r3, [pc, #380]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800464a:	4a5e      	ldr	r2, [pc, #376]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 800464c:	f043 0304 	orr.w	r3, r3, #4
 8004650:	6713      	str	r3, [r2, #112]	@ 0x70
 8004652:	4b5c      	ldr	r3, [pc, #368]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004656:	4a5b      	ldr	r2, [pc, #364]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004658:	f043 0301 	orr.w	r3, r3, #1
 800465c:	6713      	str	r3, [r2, #112]	@ 0x70
 800465e:	e00b      	b.n	8004678 <HAL_RCC_OscConfig+0x324>
 8004660:	4b58      	ldr	r3, [pc, #352]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004664:	4a57      	ldr	r2, [pc, #348]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	6713      	str	r3, [r2, #112]	@ 0x70
 800466c:	4b55      	ldr	r3, [pc, #340]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 800466e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004670:	4a54      	ldr	r2, [pc, #336]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004672:	f023 0304 	bic.w	r3, r3, #4
 8004676:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d015      	beq.n	80046ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004680:	f7fd f8f0 	bl	8001864 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004686:	e00a      	b.n	800469e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004688:	f7fd f8ec 	bl	8001864 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004696:	4293      	cmp	r3, r2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e0cb      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469e:	4b49      	ldr	r3, [pc, #292]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0ee      	beq.n	8004688 <HAL_RCC_OscConfig+0x334>
 80046aa:	e014      	b.n	80046d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ac:	f7fd f8da 	bl	8001864 <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b2:	e00a      	b.n	80046ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b4:	f7fd f8d6 	bl	8001864 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e0b5      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ca:	4b3e      	ldr	r3, [pc, #248]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80046cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1ee      	bne.n	80046b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046d6:	7dfb      	ldrb	r3, [r7, #23]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d105      	bne.n	80046e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046dc:	4b39      	ldr	r3, [pc, #228]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80046de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e0:	4a38      	ldr	r2, [pc, #224]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80046e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80a1 	beq.w	8004834 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046f2:	4b34      	ldr	r3, [pc, #208]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 030c 	and.w	r3, r3, #12
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d05c      	beq.n	80047b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	2b02      	cmp	r3, #2
 8004704:	d141      	bne.n	800478a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004706:	4b31      	ldr	r3, [pc, #196]	@ (80047cc <HAL_RCC_OscConfig+0x478>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470c:	f7fd f8aa 	bl	8001864 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004714:	f7fd f8a6 	bl	8001864 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e087      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004726:	4b27      	ldr	r3, [pc, #156]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69da      	ldr	r2, [r3, #28]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004740:	019b      	lsls	r3, r3, #6
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004748:	085b      	lsrs	r3, r3, #1
 800474a:	3b01      	subs	r3, #1
 800474c:	041b      	lsls	r3, r3, #16
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004754:	061b      	lsls	r3, r3, #24
 8004756:	491b      	ldr	r1, [pc, #108]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 8004758:	4313      	orrs	r3, r2
 800475a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800475c:	4b1b      	ldr	r3, [pc, #108]	@ (80047cc <HAL_RCC_OscConfig+0x478>)
 800475e:	2201      	movs	r2, #1
 8004760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004762:	f7fd f87f 	bl	8001864 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800476a:	f7fd f87b 	bl	8001864 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e05c      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477c:	4b11      	ldr	r3, [pc, #68]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x416>
 8004788:	e054      	b.n	8004834 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478a:	4b10      	ldr	r3, [pc, #64]	@ (80047cc <HAL_RCC_OscConfig+0x478>)
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004790:	f7fd f868 	bl	8001864 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004798:	f7fd f864 	bl	8001864 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e045      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047aa:	4b06      	ldr	r3, [pc, #24]	@ (80047c4 <HAL_RCC_OscConfig+0x470>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1f0      	bne.n	8004798 <HAL_RCC_OscConfig+0x444>
 80047b6:	e03d      	b.n	8004834 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d107      	bne.n	80047d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e038      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
 80047c4:	40023800 	.word	0x40023800
 80047c8:	40007000 	.word	0x40007000
 80047cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004840 <HAL_RCC_OscConfig+0x4ec>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d028      	beq.n	8004830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d121      	bne.n	8004830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d11a      	bne.n	8004830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004800:	4013      	ands	r3, r2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004806:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004808:	4293      	cmp	r3, r2
 800480a:	d111      	bne.n	8004830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004816:	085b      	lsrs	r3, r3, #1
 8004818:	3b01      	subs	r3, #1
 800481a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800481c:	429a      	cmp	r2, r3
 800481e:	d107      	bne.n	8004830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e000      	b.n	8004836 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40023800 	.word	0x40023800

08004844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e0cc      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004858:	4b68      	ldr	r3, [pc, #416]	@ (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d90c      	bls.n	8004880 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004866:	4b65      	ldr	r3, [pc, #404]	@ (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800486e:	4b63      	ldr	r3, [pc, #396]	@ (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d001      	beq.n	8004880 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0b8      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d020      	beq.n	80048ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004898:	4b59      	ldr	r3, [pc, #356]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4a58      	ldr	r2, [pc, #352]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048b0:	4b53      	ldr	r3, [pc, #332]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	4a52      	ldr	r2, [pc, #328]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048bc:	4b50      	ldr	r3, [pc, #320]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	494d      	ldr	r1, [pc, #308]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d044      	beq.n	8004964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d107      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e2:	4b47      	ldr	r3, [pc, #284]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d119      	bne.n	8004922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e07f      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d003      	beq.n	8004902 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d107      	bne.n	8004912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004902:	4b3f      	ldr	r3, [pc, #252]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e06f      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004912:	4b3b      	ldr	r3, [pc, #236]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e067      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004922:	4b37      	ldr	r3, [pc, #220]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f023 0203 	bic.w	r2, r3, #3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	4934      	ldr	r1, [pc, #208]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	4313      	orrs	r3, r2
 8004932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004934:	f7fc ff96 	bl	8001864 <HAL_GetTick>
 8004938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493a:	e00a      	b.n	8004952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800493c:	f7fc ff92 	bl	8001864 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800494a:	4293      	cmp	r3, r2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e04f      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004952:	4b2b      	ldr	r3, [pc, #172]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 020c 	and.w	r2, r3, #12
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	429a      	cmp	r2, r3
 8004962:	d1eb      	bne.n	800493c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004964:	4b25      	ldr	r3, [pc, #148]	@ (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d20c      	bcs.n	800498c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004972:	4b22      	ldr	r3, [pc, #136]	@ (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800497a:	4b20      	ldr	r3, [pc, #128]	@ (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d001      	beq.n	800498c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e032      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d008      	beq.n	80049aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004998:	4b19      	ldr	r3, [pc, #100]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	4916      	ldr	r1, [pc, #88]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d009      	beq.n	80049ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049b6:	4b12      	ldr	r3, [pc, #72]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	490e      	ldr	r1, [pc, #56]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ca:	f000 f821 	bl	8004a10 <HAL_RCC_GetSysClockFreq>
 80049ce:	4602      	mov	r2, r0
 80049d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	091b      	lsrs	r3, r3, #4
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	490a      	ldr	r1, [pc, #40]	@ (8004a04 <HAL_RCC_ClockConfig+0x1c0>)
 80049dc:	5ccb      	ldrb	r3, [r1, r3]
 80049de:	fa22 f303 	lsr.w	r3, r2, r3
 80049e2:	4a09      	ldr	r2, [pc, #36]	@ (8004a08 <HAL_RCC_ClockConfig+0x1c4>)
 80049e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049e6:	4b09      	ldr	r3, [pc, #36]	@ (8004a0c <HAL_RCC_ClockConfig+0x1c8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fc fef6 	bl	80017dc <HAL_InitTick>

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40023c00 	.word	0x40023c00
 8004a00:	40023800 	.word	0x40023800
 8004a04:	08009828 	.word	0x08009828
 8004a08:	20000060 	.word	0x20000060
 8004a0c:	20000064 	.word	0x20000064

08004a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a14:	b094      	sub	sp, #80	@ 0x50
 8004a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a20:	2300      	movs	r3, #0
 8004a22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a28:	4b79      	ldr	r3, [pc, #484]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 030c 	and.w	r3, r3, #12
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d00d      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0x40>
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	f200 80e1 	bhi.w	8004bfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <HAL_RCC_GetSysClockFreq+0x34>
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d003      	beq.n	8004a4a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a42:	e0db      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a44:	4b73      	ldr	r3, [pc, #460]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a46:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004a48:	e0db      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a4a:	4b73      	ldr	r3, [pc, #460]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a4e:	e0d8      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a50:	4b6f      	ldr	r3, [pc, #444]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a58:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a5a:	4b6d      	ldr	r3, [pc, #436]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d063      	beq.n	8004b2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a66:	4b6a      	ldr	r3, [pc, #424]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	099b      	lsrs	r3, r3, #6
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a78:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a82:	4622      	mov	r2, r4
 8004a84:	462b      	mov	r3, r5
 8004a86:	f04f 0000 	mov.w	r0, #0
 8004a8a:	f04f 0100 	mov.w	r1, #0
 8004a8e:	0159      	lsls	r1, r3, #5
 8004a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a94:	0150      	lsls	r0, r2, #5
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	1a51      	subs	r1, r2, r1
 8004a9e:	6139      	str	r1, [r7, #16]
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ab4:	4659      	mov	r1, fp
 8004ab6:	018b      	lsls	r3, r1, #6
 8004ab8:	4651      	mov	r1, sl
 8004aba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004abe:	4651      	mov	r1, sl
 8004ac0:	018a      	lsls	r2, r1, #6
 8004ac2:	4651      	mov	r1, sl
 8004ac4:	ebb2 0801 	subs.w	r8, r2, r1
 8004ac8:	4659      	mov	r1, fp
 8004aca:	eb63 0901 	sbc.w	r9, r3, r1
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ae2:	4690      	mov	r8, r2
 8004ae4:	4699      	mov	r9, r3
 8004ae6:	4623      	mov	r3, r4
 8004ae8:	eb18 0303 	adds.w	r3, r8, r3
 8004aec:	60bb      	str	r3, [r7, #8]
 8004aee:	462b      	mov	r3, r5
 8004af0:	eb49 0303 	adc.w	r3, r9, r3
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b02:	4629      	mov	r1, r5
 8004b04:	024b      	lsls	r3, r1, #9
 8004b06:	4621      	mov	r1, r4
 8004b08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	024a      	lsls	r2, r1, #9
 8004b10:	4610      	mov	r0, r2
 8004b12:	4619      	mov	r1, r3
 8004b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b16:	2200      	movs	r2, #0
 8004b18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b20:	f7fb fb52 	bl	80001c8 <__aeabi_uldivmod>
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	4613      	mov	r3, r2
 8004b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b2c:	e058      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2e:	4b38      	ldr	r3, [pc, #224]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	099b      	lsrs	r3, r3, #6
 8004b34:	2200      	movs	r2, #0
 8004b36:	4618      	mov	r0, r3
 8004b38:	4611      	mov	r1, r2
 8004b3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b3e:	623b      	str	r3, [r7, #32]
 8004b40:	2300      	movs	r3, #0
 8004b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b48:	4642      	mov	r2, r8
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	f04f 0000 	mov.w	r0, #0
 8004b50:	f04f 0100 	mov.w	r1, #0
 8004b54:	0159      	lsls	r1, r3, #5
 8004b56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b5a:	0150      	lsls	r0, r2, #5
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4641      	mov	r1, r8
 8004b62:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b66:	4649      	mov	r1, r9
 8004b68:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b80:	ebb2 040a 	subs.w	r4, r2, sl
 8004b84:	eb63 050b 	sbc.w	r5, r3, fp
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	00eb      	lsls	r3, r5, #3
 8004b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b96:	00e2      	lsls	r2, r4, #3
 8004b98:	4614      	mov	r4, r2
 8004b9a:	461d      	mov	r5, r3
 8004b9c:	4643      	mov	r3, r8
 8004b9e:	18e3      	adds	r3, r4, r3
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	464b      	mov	r3, r9
 8004ba4:	eb45 0303 	adc.w	r3, r5, r3
 8004ba8:	607b      	str	r3, [r7, #4]
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	028b      	lsls	r3, r1, #10
 8004bba:	4621      	mov	r1, r4
 8004bbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	028a      	lsls	r2, r1, #10
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bca:	2200      	movs	r2, #0
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	61fa      	str	r2, [r7, #28]
 8004bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bd4:	f7fb faf8 	bl	80001c8 <__aeabi_uldivmod>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4613      	mov	r3, r2
 8004bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004be0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	0c1b      	lsrs	r3, r3, #16
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	3301      	adds	r3, #1
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004bf0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bfa:	e002      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bfc:	4b05      	ldr	r3, [pc, #20]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3750      	adds	r7, #80	@ 0x50
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c0e:	bf00      	nop
 8004c10:	40023800 	.word	0x40023800
 8004c14:	00f42400 	.word	0x00f42400
 8004c18:	007a1200 	.word	0x007a1200

08004c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c20:	4b03      	ldr	r3, [pc, #12]	@ (8004c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c22:	681b      	ldr	r3, [r3, #0]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	20000060 	.word	0x20000060

08004c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c38:	f7ff fff0 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	4b05      	ldr	r3, [pc, #20]	@ (8004c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	0a9b      	lsrs	r3, r3, #10
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	4903      	ldr	r1, [pc, #12]	@ (8004c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c4a:	5ccb      	ldrb	r3, [r1, r3]
 8004c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40023800 	.word	0x40023800
 8004c58:	08009838 	.word	0x08009838

08004c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c60:	f7ff ffdc 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 8004c64:	4602      	mov	r2, r0
 8004c66:	4b05      	ldr	r3, [pc, #20]	@ (8004c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	0b5b      	lsrs	r3, r3, #13
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	4903      	ldr	r1, [pc, #12]	@ (8004c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c72:	5ccb      	ldrb	r3, [r1, r3]
 8004c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	08009838 	.word	0x08009838

08004c84 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d105      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d035      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cac:	4b62      	ldr	r3, [pc, #392]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cb2:	f7fc fdd7 	bl	8001864 <HAL_GetTick>
 8004cb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cb8:	e008      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cba:	f7fc fdd3 	bl	8001864 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e0b0      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ccc:	4b5b      	ldr	r3, [pc, #364]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1f0      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	019a      	lsls	r2, r3, #6
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	071b      	lsls	r3, r3, #28
 8004ce4:	4955      	ldr	r1, [pc, #340]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cec:	4b52      	ldr	r3, [pc, #328]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cf2:	f7fc fdb7 	bl	8001864 <HAL_GetTick>
 8004cf6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cfa:	f7fc fdb3 	bl	8001864 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e090      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d0c:	4b4b      	ldr	r3, [pc, #300]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0f0      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8083 	beq.w	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	4b44      	ldr	r3, [pc, #272]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2e:	4a43      	ldr	r2, [pc, #268]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d36:	4b41      	ldr	r3, [pc, #260]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d42:	4b3f      	ldr	r3, [pc, #252]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a3e      	ldr	r2, [pc, #248]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d4c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d4e:	f7fc fd89 	bl	8001864 <HAL_GetTick>
 8004d52:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d54:	e008      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d56:	f7fc fd85 	bl	8001864 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e062      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d68:	4b35      	ldr	r3, [pc, #212]	@ (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0f0      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d74:	4b31      	ldr	r3, [pc, #196]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d7c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d02f      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d028      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d92:	4b2a      	ldr	r3, [pc, #168]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d9a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d9c:	4b29      	ldr	r3, [pc, #164]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004da2:	4b28      	ldr	r3, [pc, #160]	@ (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004da8:	4a24      	ldr	r2, [pc, #144]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004dae:	4b23      	ldr	r3, [pc, #140]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d114      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004dba:	f7fc fd53 	bl	8001864 <HAL_GetTick>
 8004dbe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc0:	e00a      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dc2:	f7fc fd4f 	bl	8001864 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e02a      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd8:	4b18      	ldr	r3, [pc, #96]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0ee      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004df0:	d10d      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004df2:	4b12      	ldr	r3, [pc, #72]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004e02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e06:	490d      	ldr	r1, [pc, #52]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	608b      	str	r3, [r1, #8]
 8004e0c:	e005      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	4a0a      	ldr	r2, [pc, #40]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e14:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004e18:	6093      	str	r3, [r2, #8]
 8004e1a:	4b08      	ldr	r3, [pc, #32]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e1c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e26:	4905      	ldr	r1, [pc, #20]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	42470068 	.word	0x42470068
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	40007000 	.word	0x40007000
 8004e44:	42470e40 	.word	0x42470e40

08004e48 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d13e      	bne.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e66:	4b23      	ldr	r3, [pc, #140]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e6e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d005      	beq.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d12f      	bne.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e7e:	617b      	str	r3, [r7, #20]
          break;
 8004e80:	e02f      	b.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e82:	4b1c      	ldr	r3, [pc, #112]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e8e:	d108      	bne.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e90:	4b18      	ldr	r3, [pc, #96]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e98:	4a18      	ldr	r2, [pc, #96]	@ (8004efc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	e007      	b.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ea2:	4b14      	ldr	r3, [pc, #80]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004eaa:	4a15      	ldr	r2, [pc, #84]	@ (8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004eb2:	4b10      	ldr	r3, [pc, #64]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eb8:	099b      	lsrs	r3, r3, #6
 8004eba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	fb02 f303 	mul.w	r3, r2, r3
 8004ec4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ecc:	0f1b      	lsrs	r3, r3, #28
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed8:	617b      	str	r3, [r7, #20]
          break;
 8004eda:	e002      	b.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	617b      	str	r3, [r7, #20]
          break;
 8004ee0:	bf00      	nop
        }
      }
      break;
 8004ee2:	bf00      	nop
    }
  }
  return frequency;
 8004ee4:	697b      	ldr	r3, [r7, #20]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	00bb8000 	.word	0x00bb8000
 8004efc:	007a1200 	.word	0x007a1200
 8004f00:	00f42400 	.word	0x00f42400

08004f04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e07b      	b.n	800500e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d108      	bne.n	8004f30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f26:	d009      	beq.n	8004f3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	61da      	str	r2, [r3, #28]
 8004f2e:	e005      	b.n	8004f3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7fc fad0 	bl	80014fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f84:	431a      	orrs	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fac:	431a      	orrs	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc0:	ea42 0103 	orr.w	r1, r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	0c1b      	lsrs	r3, r3, #16
 8004fda:	f003 0104 	and.w	r1, r3, #4
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	f003 0210 	and.w	r2, r3, #16
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69da      	ldr	r2, [r3, #28]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ffc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e03f      	b.n	80050a8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d106      	bne.n	8005042 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7fc faa5 	bl	800158c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2224      	movs	r2, #36	@ 0x24
 8005046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005058:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fcb6 	bl	80059cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800506e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695a      	ldr	r2, [r3, #20]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800507e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800508e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	4613      	mov	r3, r2
 80050bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	d130      	bne.n	800512c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <HAL_UART_Transmit_IT+0x26>
 80050d0:	88fb      	ldrh	r3, [r7, #6]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e029      	b.n	800512e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_UART_Transmit_IT+0x38>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e022      	b.n	800512e <HAL_UART_Transmit_IT+0x7e>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	88fa      	ldrh	r2, [r7, #6]
 80050fa:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	88fa      	ldrh	r2, [r7, #6]
 8005100:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2221      	movs	r2, #33	@ 0x21
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005126:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	e000      	b.n	800512e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800512c:	2302      	movs	r3, #2
  }
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
	...

0800513c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b0ba      	sub	sp, #232	@ 0xe8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005162:	2300      	movs	r3, #0
 8005164:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005168:	2300      	movs	r3, #0
 800516a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800516e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800517a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10f      	bne.n	80051a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	d009      	beq.n	80051a2 <HAL_UART_IRQHandler+0x66>
 800518e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fb5b 	bl	8005856 <UART_Receive_IT>
      return;
 80051a0:	e256      	b.n	8005650 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 80de 	beq.w	8005368 <HAL_UART_IRQHandler+0x22c>
 80051ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d106      	bne.n	80051c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051bc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 80d1 	beq.w	8005368 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00b      	beq.n	80051ea <HAL_UART_IRQHandler+0xae>
 80051d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d005      	beq.n	80051ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	f043 0201 	orr.w	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00b      	beq.n	800520e <HAL_UART_IRQHandler+0xd2>
 80051f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005206:	f043 0202 	orr.w	r2, r3, #2
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800520e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00b      	beq.n	8005232 <HAL_UART_IRQHandler+0xf6>
 800521a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d005      	beq.n	8005232 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522a:	f043 0204 	orr.w	r2, r3, #4
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d011      	beq.n	8005262 <HAL_UART_IRQHandler+0x126>
 800523e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b00      	cmp	r3, #0
 8005248:	d105      	bne.n	8005256 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800524a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d005      	beq.n	8005262 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525a:	f043 0208 	orr.w	r2, r3, #8
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 81ed 	beq.w	8005646 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800526c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d008      	beq.n	800528a <HAL_UART_IRQHandler+0x14e>
 8005278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800527c:	f003 0320 	and.w	r3, r3, #32
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fae6 	bl	8005856 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005294:	2b40      	cmp	r3, #64	@ 0x40
 8005296:	bf0c      	ite	eq
 8005298:	2301      	moveq	r3, #1
 800529a:	2300      	movne	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d103      	bne.n	80052b6 <HAL_UART_IRQHandler+0x17a>
 80052ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d04f      	beq.n	8005356 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f9ee 	bl	8005698 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c6:	2b40      	cmp	r3, #64	@ 0x40
 80052c8:	d141      	bne.n	800534e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3314      	adds	r3, #20
 80052d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80052e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3314      	adds	r3, #20
 80052f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80052f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80052fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005302:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005306:	e841 2300 	strex	r3, r2, [r1]
 800530a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800530e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1d9      	bne.n	80052ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531a:	2b00      	cmp	r3, #0
 800531c:	d013      	beq.n	8005346 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005322:	4a7d      	ldr	r2, [pc, #500]	@ (8005518 <HAL_UART_IRQHandler+0x3dc>)
 8005324:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532a:	4618      	mov	r0, r3
 800532c:	f7fc fc4b 	bl	8001bc6 <HAL_DMA_Abort_IT>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d016      	beq.n	8005364 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005340:	4610      	mov	r0, r2
 8005342:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005344:	e00e      	b.n	8005364 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f990 	bl	800566c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800534c:	e00a      	b.n	8005364 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f98c 	bl	800566c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005354:	e006      	b.n	8005364 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f988 	bl	800566c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8005362:	e170      	b.n	8005646 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005364:	bf00      	nop
    return;
 8005366:	e16e      	b.n	8005646 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536c:	2b01      	cmp	r3, #1
 800536e:	f040 814a 	bne.w	8005606 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 8143 	beq.w	8005606 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005384:	f003 0310 	and.w	r3, r3, #16
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 813c 	beq.w	8005606 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800538e:	2300      	movs	r3, #0
 8005390:	60bb      	str	r3, [r7, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	60bb      	str	r3, [r7, #8]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ae:	2b40      	cmp	r3, #64	@ 0x40
 80053b0:	f040 80b4 	bne.w	800551c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 8140 	beq.w	800564a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053d2:	429a      	cmp	r2, r3
 80053d4:	f080 8139 	bcs.w	800564a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053de:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053ea:	f000 8088 	beq.w	80054fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	330c      	adds	r3, #12
 80053f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053fc:	e853 3f00 	ldrex	r3, [r3]
 8005400:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005404:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005408:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800540c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	330c      	adds	r3, #12
 8005416:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800541a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800541e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005422:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005426:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005432:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1d9      	bne.n	80053ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3314      	adds	r3, #20
 8005440:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800544a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800544c:	f023 0301 	bic.w	r3, r3, #1
 8005450:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3314      	adds	r3, #20
 800545a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800545e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005462:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005464:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005466:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005470:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e1      	bne.n	800543a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3314      	adds	r3, #20
 800547c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005486:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005488:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800548c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3314      	adds	r3, #20
 8005496:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800549a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800549c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80054a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054a2:	e841 2300 	strex	r3, r2, [r1]
 80054a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80054a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1e3      	bne.n	8005476 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2220      	movs	r2, #32
 80054b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	330c      	adds	r3, #12
 80054c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054ce:	f023 0310 	bic.w	r3, r3, #16
 80054d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	330c      	adds	r3, #12
 80054dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80054e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80054e2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054e8:	e841 2300 	strex	r3, r2, [r1]
 80054ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e3      	bne.n	80054bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fc faf4 	bl	8001ae6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005506:	b29b      	uxth	r3, r3
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	b29b      	uxth	r3, r3
 800550c:	4619      	mov	r1, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f8b6 	bl	8005680 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005514:	e099      	b.n	800564a <HAL_UART_IRQHandler+0x50e>
 8005516:	bf00      	nop
 8005518:	0800575f 	.word	0x0800575f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005524:	b29b      	uxth	r3, r3
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 808b 	beq.w	800564e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005538:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 8086 	beq.w	800564e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	330c      	adds	r3, #12
 8005548:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005554:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005558:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	330c      	adds	r3, #12
 8005562:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005566:	647a      	str	r2, [r7, #68]	@ 0x44
 8005568:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800556c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e3      	bne.n	8005542 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3314      	adds	r3, #20
 8005580:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	623b      	str	r3, [r7, #32]
   return(result);
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	f023 0301 	bic.w	r3, r3, #1
 8005590:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3314      	adds	r3, #20
 800559a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800559e:	633a      	str	r2, [r7, #48]	@ 0x30
 80055a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e3      	bne.n	800557a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	330c      	adds	r3, #12
 80055c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	e853 3f00 	ldrex	r3, [r3]
 80055ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0310 	bic.w	r3, r3, #16
 80055d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	330c      	adds	r3, #12
 80055e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80055e4:	61fa      	str	r2, [r7, #28]
 80055e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	69b9      	ldr	r1, [r7, #24]
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	617b      	str	r3, [r7, #20]
   return(result);
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e3      	bne.n	80055c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80055fc:	4619      	mov	r1, r3
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f83e 	bl	8005680 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005604:	e023      	b.n	800564e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800560a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800560e:	2b00      	cmp	r3, #0
 8005610:	d009      	beq.n	8005626 <HAL_UART_IRQHandler+0x4ea>
 8005612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f8b1 	bl	8005786 <UART_Transmit_IT>
    return;
 8005624:	e014      	b.n	8005650 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800562a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00e      	beq.n	8005650 <HAL_UART_IRQHandler+0x514>
 8005632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d008      	beq.n	8005650 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f8f1 	bl	8005826 <UART_EndTransmit_IT>
    return;
 8005644:	e004      	b.n	8005650 <HAL_UART_IRQHandler+0x514>
    return;
 8005646:	bf00      	nop
 8005648:	e002      	b.n	8005650 <HAL_UART_IRQHandler+0x514>
      return;
 800564a:	bf00      	nop
 800564c:	e000      	b.n	8005650 <HAL_UART_IRQHandler+0x514>
      return;
 800564e:	bf00      	nop
  }
}
 8005650:	37e8      	adds	r7, #232	@ 0xe8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop

08005658 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	460b      	mov	r3, r1
 800568a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005698:	b480      	push	{r7}
 800569a:	b095      	sub	sp, #84	@ 0x54
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	330c      	adds	r3, #12
 80056a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056aa:	e853 3f00 	ldrex	r3, [r3]
 80056ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	330c      	adds	r3, #12
 80056be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80056c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056c8:	e841 2300 	strex	r3, r2, [r1]
 80056cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1e5      	bne.n	80056a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3314      	adds	r3, #20
 80056da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	e853 3f00 	ldrex	r3, [r3]
 80056e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	f023 0301 	bic.w	r3, r3, #1
 80056ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3314      	adds	r3, #20
 80056f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e5      	bne.n	80056d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570c:	2b01      	cmp	r3, #1
 800570e:	d119      	bne.n	8005744 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	330c      	adds	r3, #12
 8005716:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	e853 3f00 	ldrex	r3, [r3]
 800571e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f023 0310 	bic.w	r3, r3, #16
 8005726:	647b      	str	r3, [r7, #68]	@ 0x44
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	330c      	adds	r3, #12
 800572e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005730:	61ba      	str	r2, [r7, #24]
 8005732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005734:	6979      	ldr	r1, [r7, #20]
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	e841 2300 	strex	r3, r2, [r1]
 800573c:	613b      	str	r3, [r7, #16]
   return(result);
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1e5      	bne.n	8005710 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005752:	bf00      	nop
 8005754:	3754      	adds	r7, #84	@ 0x54
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b084      	sub	sp, #16
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f7ff ff77 	bl	800566c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800577e:	bf00      	nop
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005786:	b480      	push	{r7}
 8005788:	b085      	sub	sp, #20
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b21      	cmp	r3, #33	@ 0x21
 8005798:	d13e      	bne.n	8005818 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057a2:	d114      	bne.n	80057ce <UART_Transmit_IT+0x48>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d110      	bne.n	80057ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	1c9a      	adds	r2, r3, #2
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	621a      	str	r2, [r3, #32]
 80057cc:	e008      	b.n	80057e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	1c59      	adds	r1, r3, #1
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6211      	str	r1, [r2, #32]
 80057d8:	781a      	ldrb	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	4619      	mov	r1, r3
 80057ee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10f      	bne.n	8005814 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005802:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005812:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005814:	2300      	movs	r3, #0
 8005816:	e000      	b.n	800581a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005818:	2302      	movs	r3, #2
  }
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800583c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2220      	movs	r2, #32
 8005842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7ff ff06 	bl	8005658 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b08c      	sub	sp, #48	@ 0x30
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b22      	cmp	r3, #34	@ 0x22
 8005868:	f040 80ab 	bne.w	80059c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005874:	d117      	bne.n	80058a6 <UART_Receive_IT+0x50>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d113      	bne.n	80058a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800587e:	2300      	movs	r3, #0
 8005880:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005886:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	b29b      	uxth	r3, r3
 8005890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005894:	b29a      	uxth	r2, r3
 8005896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005898:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589e:	1c9a      	adds	r2, r3, #2
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80058a4:	e026      	b.n	80058f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80058ac:	2300      	movs	r3, #0
 80058ae:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058b8:	d007      	beq.n	80058ca <UART_Receive_IT+0x74>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10a      	bne.n	80058d8 <UART_Receive_IT+0x82>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	e008      	b.n	80058ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	3b01      	subs	r3, #1
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	4619      	mov	r1, r3
 8005902:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005904:	2b00      	cmp	r3, #0
 8005906:	d15a      	bne.n	80059be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68da      	ldr	r2, [r3, #12]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0220 	bic.w	r2, r2, #32
 8005916:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005926:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695a      	ldr	r2, [r3, #20]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0201 	bic.w	r2, r2, #1
 8005936:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2220      	movs	r2, #32
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005944:	2b01      	cmp	r3, #1
 8005946:	d135      	bne.n	80059b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	330c      	adds	r3, #12
 8005954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	613b      	str	r3, [r7, #16]
   return(result);
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f023 0310 	bic.w	r3, r3, #16
 8005964:	627b      	str	r3, [r7, #36]	@ 0x24
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	330c      	adds	r3, #12
 800596c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800596e:	623a      	str	r2, [r7, #32]
 8005970:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	69f9      	ldr	r1, [r7, #28]
 8005974:	6a3a      	ldr	r2, [r7, #32]
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	61bb      	str	r3, [r7, #24]
   return(result);
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e5      	bne.n	800594e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0310 	and.w	r3, r3, #16
 800598c:	2b10      	cmp	r3, #16
 800598e:	d10a      	bne.n	80059a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005990:	2300      	movs	r3, #0
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059aa:	4619      	mov	r1, r3
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7ff fe67 	bl	8005680 <HAL_UARTEx_RxEventCallback>
 80059b2:	e002      	b.n	80059ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7fb fc91 	bl	80012dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	e002      	b.n	80059c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	e000      	b.n	80059c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80059c2:	2302      	movs	r3, #2
  }
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3730      	adds	r7, #48	@ 0x30
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059d0:	b0c0      	sub	sp, #256	@ 0x100
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80059e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e8:	68d9      	ldr	r1, [r3, #12]
 80059ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	ea40 0301 	orr.w	r3, r0, r1
 80059f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	431a      	orrs	r2, r3
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a24:	f021 010c 	bic.w	r1, r1, #12
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a32:	430b      	orrs	r3, r1
 8005a34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a46:	6999      	ldr	r1, [r3, #24]
 8005a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	ea40 0301 	orr.w	r3, r0, r1
 8005a52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	4b8f      	ldr	r3, [pc, #572]	@ (8005c98 <UART_SetConfig+0x2cc>)
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d005      	beq.n	8005a6c <UART_SetConfig+0xa0>
 8005a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	4b8d      	ldr	r3, [pc, #564]	@ (8005c9c <UART_SetConfig+0x2d0>)
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d104      	bne.n	8005a76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a6c:	f7ff f8f6 	bl	8004c5c <HAL_RCC_GetPCLK2Freq>
 8005a70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a74:	e003      	b.n	8005a7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a76:	f7ff f8dd 	bl	8004c34 <HAL_RCC_GetPCLK1Freq>
 8005a7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a88:	f040 810c 	bne.w	8005ca4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a90:	2200      	movs	r2, #0
 8005a92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a9e:	4622      	mov	r2, r4
 8005aa0:	462b      	mov	r3, r5
 8005aa2:	1891      	adds	r1, r2, r2
 8005aa4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005aa6:	415b      	adcs	r3, r3
 8005aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005aaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005aae:	4621      	mov	r1, r4
 8005ab0:	eb12 0801 	adds.w	r8, r2, r1
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	eb43 0901 	adc.w	r9, r3, r1
 8005aba:	f04f 0200 	mov.w	r2, #0
 8005abe:	f04f 0300 	mov.w	r3, #0
 8005ac2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ac6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005aca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ace:	4690      	mov	r8, r2
 8005ad0:	4699      	mov	r9, r3
 8005ad2:	4623      	mov	r3, r4
 8005ad4:	eb18 0303 	adds.w	r3, r8, r3
 8005ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005adc:	462b      	mov	r3, r5
 8005ade:	eb49 0303 	adc.w	r3, r9, r3
 8005ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005af2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005af6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005afa:	460b      	mov	r3, r1
 8005afc:	18db      	adds	r3, r3, r3
 8005afe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b00:	4613      	mov	r3, r2
 8005b02:	eb42 0303 	adc.w	r3, r2, r3
 8005b06:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b10:	f7fa fb5a 	bl	80001c8 <__aeabi_uldivmod>
 8005b14:	4602      	mov	r2, r0
 8005b16:	460b      	mov	r3, r1
 8005b18:	4b61      	ldr	r3, [pc, #388]	@ (8005ca0 <UART_SetConfig+0x2d4>)
 8005b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b1e:	095b      	lsrs	r3, r3, #5
 8005b20:	011c      	lsls	r4, r3, #4
 8005b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b34:	4642      	mov	r2, r8
 8005b36:	464b      	mov	r3, r9
 8005b38:	1891      	adds	r1, r2, r2
 8005b3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b3c:	415b      	adcs	r3, r3
 8005b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b44:	4641      	mov	r1, r8
 8005b46:	eb12 0a01 	adds.w	sl, r2, r1
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	eb43 0b01 	adc.w	fp, r3, r1
 8005b50:	f04f 0200 	mov.w	r2, #0
 8005b54:	f04f 0300 	mov.w	r3, #0
 8005b58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b64:	4692      	mov	sl, r2
 8005b66:	469b      	mov	fp, r3
 8005b68:	4643      	mov	r3, r8
 8005b6a:	eb1a 0303 	adds.w	r3, sl, r3
 8005b6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b72:	464b      	mov	r3, r9
 8005b74:	eb4b 0303 	adc.w	r3, fp, r3
 8005b78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b90:	460b      	mov	r3, r1
 8005b92:	18db      	adds	r3, r3, r3
 8005b94:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b96:	4613      	mov	r3, r2
 8005b98:	eb42 0303 	adc.w	r3, r2, r3
 8005b9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005ba2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005ba6:	f7fa fb0f 	bl	80001c8 <__aeabi_uldivmod>
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	4611      	mov	r1, r2
 8005bb0:	4b3b      	ldr	r3, [pc, #236]	@ (8005ca0 <UART_SetConfig+0x2d4>)
 8005bb2:	fba3 2301 	umull	r2, r3, r3, r1
 8005bb6:	095b      	lsrs	r3, r3, #5
 8005bb8:	2264      	movs	r2, #100	@ 0x64
 8005bba:	fb02 f303 	mul.w	r3, r2, r3
 8005bbe:	1acb      	subs	r3, r1, r3
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005bc6:	4b36      	ldr	r3, [pc, #216]	@ (8005ca0 <UART_SetConfig+0x2d4>)
 8005bc8:	fba3 2302 	umull	r2, r3, r3, r2
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005bd4:	441c      	add	r4, r3
 8005bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005be0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005be4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005be8:	4642      	mov	r2, r8
 8005bea:	464b      	mov	r3, r9
 8005bec:	1891      	adds	r1, r2, r2
 8005bee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005bf0:	415b      	adcs	r3, r3
 8005bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005bf8:	4641      	mov	r1, r8
 8005bfa:	1851      	adds	r1, r2, r1
 8005bfc:	6339      	str	r1, [r7, #48]	@ 0x30
 8005bfe:	4649      	mov	r1, r9
 8005c00:	414b      	adcs	r3, r1
 8005c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c10:	4659      	mov	r1, fp
 8005c12:	00cb      	lsls	r3, r1, #3
 8005c14:	4651      	mov	r1, sl
 8005c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c1a:	4651      	mov	r1, sl
 8005c1c:	00ca      	lsls	r2, r1, #3
 8005c1e:	4610      	mov	r0, r2
 8005c20:	4619      	mov	r1, r3
 8005c22:	4603      	mov	r3, r0
 8005c24:	4642      	mov	r2, r8
 8005c26:	189b      	adds	r3, r3, r2
 8005c28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c2c:	464b      	mov	r3, r9
 8005c2e:	460a      	mov	r2, r1
 8005c30:	eb42 0303 	adc.w	r3, r2, r3
 8005c34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	18db      	adds	r3, r3, r3
 8005c50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c52:	4613      	mov	r3, r2
 8005c54:	eb42 0303 	adc.w	r3, r2, r3
 8005c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c62:	f7fa fab1 	bl	80001c8 <__aeabi_uldivmod>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca0 <UART_SetConfig+0x2d4>)
 8005c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	2164      	movs	r1, #100	@ 0x64
 8005c74:	fb01 f303 	mul.w	r3, r1, r3
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	3332      	adds	r3, #50	@ 0x32
 8005c7e:	4a08      	ldr	r2, [pc, #32]	@ (8005ca0 <UART_SetConfig+0x2d4>)
 8005c80:	fba2 2303 	umull	r2, r3, r2, r3
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	f003 0207 	and.w	r2, r3, #7
 8005c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4422      	add	r2, r4
 8005c92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c94:	e106      	b.n	8005ea4 <UART_SetConfig+0x4d8>
 8005c96:	bf00      	nop
 8005c98:	40011000 	.word	0x40011000
 8005c9c:	40011400 	.word	0x40011400
 8005ca0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005cae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005cb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005cb6:	4642      	mov	r2, r8
 8005cb8:	464b      	mov	r3, r9
 8005cba:	1891      	adds	r1, r2, r2
 8005cbc:	6239      	str	r1, [r7, #32]
 8005cbe:	415b      	adcs	r3, r3
 8005cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cc6:	4641      	mov	r1, r8
 8005cc8:	1854      	adds	r4, r2, r1
 8005cca:	4649      	mov	r1, r9
 8005ccc:	eb43 0501 	adc.w	r5, r3, r1
 8005cd0:	f04f 0200 	mov.w	r2, #0
 8005cd4:	f04f 0300 	mov.w	r3, #0
 8005cd8:	00eb      	lsls	r3, r5, #3
 8005cda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cde:	00e2      	lsls	r2, r4, #3
 8005ce0:	4614      	mov	r4, r2
 8005ce2:	461d      	mov	r5, r3
 8005ce4:	4643      	mov	r3, r8
 8005ce6:	18e3      	adds	r3, r4, r3
 8005ce8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005cec:	464b      	mov	r3, r9
 8005cee:	eb45 0303 	adc.w	r3, r5, r3
 8005cf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d06:	f04f 0200 	mov.w	r2, #0
 8005d0a:	f04f 0300 	mov.w	r3, #0
 8005d0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d12:	4629      	mov	r1, r5
 8005d14:	008b      	lsls	r3, r1, #2
 8005d16:	4621      	mov	r1, r4
 8005d18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d1c:	4621      	mov	r1, r4
 8005d1e:	008a      	lsls	r2, r1, #2
 8005d20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d24:	f7fa fa50 	bl	80001c8 <__aeabi_uldivmod>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4b60      	ldr	r3, [pc, #384]	@ (8005eb0 <UART_SetConfig+0x4e4>)
 8005d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d32:	095b      	lsrs	r3, r3, #5
 8005d34:	011c      	lsls	r4, r3, #4
 8005d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d48:	4642      	mov	r2, r8
 8005d4a:	464b      	mov	r3, r9
 8005d4c:	1891      	adds	r1, r2, r2
 8005d4e:	61b9      	str	r1, [r7, #24]
 8005d50:	415b      	adcs	r3, r3
 8005d52:	61fb      	str	r3, [r7, #28]
 8005d54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d58:	4641      	mov	r1, r8
 8005d5a:	1851      	adds	r1, r2, r1
 8005d5c:	6139      	str	r1, [r7, #16]
 8005d5e:	4649      	mov	r1, r9
 8005d60:	414b      	adcs	r3, r1
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	f04f 0300 	mov.w	r3, #0
 8005d6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d70:	4659      	mov	r1, fp
 8005d72:	00cb      	lsls	r3, r1, #3
 8005d74:	4651      	mov	r1, sl
 8005d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d7a:	4651      	mov	r1, sl
 8005d7c:	00ca      	lsls	r2, r1, #3
 8005d7e:	4610      	mov	r0, r2
 8005d80:	4619      	mov	r1, r3
 8005d82:	4603      	mov	r3, r0
 8005d84:	4642      	mov	r2, r8
 8005d86:	189b      	adds	r3, r3, r2
 8005d88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d8c:	464b      	mov	r3, r9
 8005d8e:	460a      	mov	r2, r1
 8005d90:	eb42 0303 	adc.w	r3, r2, r3
 8005d94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005da2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	f04f 0300 	mov.w	r3, #0
 8005dac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005db0:	4649      	mov	r1, r9
 8005db2:	008b      	lsls	r3, r1, #2
 8005db4:	4641      	mov	r1, r8
 8005db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dba:	4641      	mov	r1, r8
 8005dbc:	008a      	lsls	r2, r1, #2
 8005dbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005dc2:	f7fa fa01 	bl	80001c8 <__aeabi_uldivmod>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	4611      	mov	r1, r2
 8005dcc:	4b38      	ldr	r3, [pc, #224]	@ (8005eb0 <UART_SetConfig+0x4e4>)
 8005dce:	fba3 2301 	umull	r2, r3, r3, r1
 8005dd2:	095b      	lsrs	r3, r3, #5
 8005dd4:	2264      	movs	r2, #100	@ 0x64
 8005dd6:	fb02 f303 	mul.w	r3, r2, r3
 8005dda:	1acb      	subs	r3, r1, r3
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	3332      	adds	r3, #50	@ 0x32
 8005de0:	4a33      	ldr	r2, [pc, #204]	@ (8005eb0 <UART_SetConfig+0x4e4>)
 8005de2:	fba2 2303 	umull	r2, r3, r2, r3
 8005de6:	095b      	lsrs	r3, r3, #5
 8005de8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dec:	441c      	add	r4, r3
 8005dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005df2:	2200      	movs	r2, #0
 8005df4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005df6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005df8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005dfc:	4642      	mov	r2, r8
 8005dfe:	464b      	mov	r3, r9
 8005e00:	1891      	adds	r1, r2, r2
 8005e02:	60b9      	str	r1, [r7, #8]
 8005e04:	415b      	adcs	r3, r3
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e0c:	4641      	mov	r1, r8
 8005e0e:	1851      	adds	r1, r2, r1
 8005e10:	6039      	str	r1, [r7, #0]
 8005e12:	4649      	mov	r1, r9
 8005e14:	414b      	adcs	r3, r1
 8005e16:	607b      	str	r3, [r7, #4]
 8005e18:	f04f 0200 	mov.w	r2, #0
 8005e1c:	f04f 0300 	mov.w	r3, #0
 8005e20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e24:	4659      	mov	r1, fp
 8005e26:	00cb      	lsls	r3, r1, #3
 8005e28:	4651      	mov	r1, sl
 8005e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e2e:	4651      	mov	r1, sl
 8005e30:	00ca      	lsls	r2, r1, #3
 8005e32:	4610      	mov	r0, r2
 8005e34:	4619      	mov	r1, r3
 8005e36:	4603      	mov	r3, r0
 8005e38:	4642      	mov	r2, r8
 8005e3a:	189b      	adds	r3, r3, r2
 8005e3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e3e:	464b      	mov	r3, r9
 8005e40:	460a      	mov	r2, r1
 8005e42:	eb42 0303 	adc.w	r3, r2, r3
 8005e46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e52:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e60:	4649      	mov	r1, r9
 8005e62:	008b      	lsls	r3, r1, #2
 8005e64:	4641      	mov	r1, r8
 8005e66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e6a:	4641      	mov	r1, r8
 8005e6c:	008a      	lsls	r2, r1, #2
 8005e6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e72:	f7fa f9a9 	bl	80001c8 <__aeabi_uldivmod>
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005eb0 <UART_SetConfig+0x4e4>)
 8005e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e80:	095b      	lsrs	r3, r3, #5
 8005e82:	2164      	movs	r1, #100	@ 0x64
 8005e84:	fb01 f303 	mul.w	r3, r1, r3
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	3332      	adds	r3, #50	@ 0x32
 8005e8e:	4a08      	ldr	r2, [pc, #32]	@ (8005eb0 <UART_SetConfig+0x4e4>)
 8005e90:	fba2 2303 	umull	r2, r3, r2, r3
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	f003 020f 	and.w	r2, r3, #15
 8005e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4422      	add	r2, r4
 8005ea2:	609a      	str	r2, [r3, #8]
}
 8005ea4:	bf00      	nop
 8005ea6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eb0:	51eb851f 	.word	0x51eb851f

08005eb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005eb4:	b084      	sub	sp, #16
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b084      	sub	sp, #16
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	f107 001c 	add.w	r0, r7, #28
 8005ec2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d122      	bne.n	8005f12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005ee0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d105      	bne.n	8005f06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f9c0 	bl	800628c <USB_CoreReset>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	73fb      	strb	r3, [r7, #15]
 8005f10:	e01a      	b.n	8005f48 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f9b4 	bl	800628c <USB_CoreReset>
 8005f24:	4603      	mov	r3, r0
 8005f26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f32:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f3a:	e005      	b.n	8005f48 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f40:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d10b      	bne.n	8005f66 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f043 0206 	orr.w	r2, r3, #6
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f043 0220 	orr.w	r2, r3, #32
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f72:	b004      	add	sp, #16
 8005f74:	4770      	bx	lr

08005f76 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f043 0201 	orr.w	r2, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f023 0201 	bic.w	r2, r3, #1
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b084      	sub	sp, #16
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fd6:	78fb      	ldrb	r3, [r7, #3]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d115      	bne.n	8006008 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005fe8:	2001      	movs	r0, #1
 8005fea:	f7fb fc47 	bl	800187c <HAL_Delay>
      ms++;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f93a 	bl	800626e <USB_GetMode>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d01e      	beq.n	800603e <USB_SetCurrentMode+0x84>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2b31      	cmp	r3, #49	@ 0x31
 8006004:	d9f0      	bls.n	8005fe8 <USB_SetCurrentMode+0x2e>
 8006006:	e01a      	b.n	800603e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006008:	78fb      	ldrb	r3, [r7, #3]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d115      	bne.n	800603a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800601a:	2001      	movs	r0, #1
 800601c:	f7fb fc2e 	bl	800187c <HAL_Delay>
      ms++;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	3301      	adds	r3, #1
 8006024:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f921 	bl	800626e <USB_GetMode>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d005      	beq.n	800603e <USB_SetCurrentMode+0x84>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2b31      	cmp	r3, #49	@ 0x31
 8006036:	d9f0      	bls.n	800601a <USB_SetCurrentMode+0x60>
 8006038:	e001      	b.n	800603e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e005      	b.n	800604a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b32      	cmp	r3, #50	@ 0x32
 8006042:	d101      	bne.n	8006048 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e000      	b.n	800604a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
	...

08006054 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	3301      	adds	r3, #1
 8006066:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4a13      	ldr	r2, [pc, #76]	@ (80060b8 <USB_FlushTxFifo+0x64>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d901      	bls.n	8006074 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e01b      	b.n	80060ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	2b00      	cmp	r3, #0
 800607a:	daf2      	bge.n	8006062 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800607c:	2300      	movs	r3, #0
 800607e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	019b      	lsls	r3, r3, #6
 8006084:	f043 0220 	orr.w	r2, r3, #32
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	3301      	adds	r3, #1
 8006090:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	4a08      	ldr	r2, [pc, #32]	@ (80060b8 <USB_FlushTxFifo+0x64>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d901      	bls.n	800609e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e006      	b.n	80060ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f003 0320 	and.w	r3, r3, #32
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	d0f0      	beq.n	800608c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	00030d40 	.word	0x00030d40

080060bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3301      	adds	r3, #1
 80060cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4a11      	ldr	r2, [pc, #68]	@ (8006118 <USB_FlushRxFifo+0x5c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d901      	bls.n	80060da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e018      	b.n	800610c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	daf2      	bge.n	80060c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2210      	movs	r2, #16
 80060ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	3301      	adds	r3, #1
 80060f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4a08      	ldr	r2, [pc, #32]	@ (8006118 <USB_FlushRxFifo+0x5c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d901      	bls.n	80060fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e006      	b.n	800610c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f003 0310 	and.w	r3, r3, #16
 8006106:	2b10      	cmp	r3, #16
 8006108:	d0f0      	beq.n	80060ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	00030d40 	.word	0x00030d40

0800611c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800611c:	b480      	push	{r7}
 800611e:	b089      	sub	sp, #36	@ 0x24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	4611      	mov	r1, r2
 8006128:	461a      	mov	r2, r3
 800612a:	460b      	mov	r3, r1
 800612c:	71fb      	strb	r3, [r7, #7]
 800612e:	4613      	mov	r3, r2
 8006130:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800613a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800613e:	2b00      	cmp	r3, #0
 8006140:	d123      	bne.n	800618a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006142:	88bb      	ldrh	r3, [r7, #4]
 8006144:	3303      	adds	r3, #3
 8006146:	089b      	lsrs	r3, r3, #2
 8006148:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800614a:	2300      	movs	r3, #0
 800614c:	61bb      	str	r3, [r7, #24]
 800614e:	e018      	b.n	8006182 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006150:	79fb      	ldrb	r3, [r7, #7]
 8006152:	031a      	lsls	r2, r3, #12
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	4413      	add	r3, r2
 8006158:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800615c:	461a      	mov	r2, r3
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	3301      	adds	r3, #1
 8006168:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	3301      	adds	r3, #1
 800616e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	3301      	adds	r3, #1
 8006174:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	3301      	adds	r3, #1
 800617a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	3301      	adds	r3, #1
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	429a      	cmp	r2, r3
 8006188:	d3e2      	bcc.n	8006150 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3724      	adds	r7, #36	@ 0x24
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006198:	b480      	push	{r7}
 800619a:	b08b      	sub	sp, #44	@ 0x2c
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	4613      	mov	r3, r2
 80061a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80061ae:	88fb      	ldrh	r3, [r7, #6]
 80061b0:	089b      	lsrs	r3, r3, #2
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80061b6:	88fb      	ldrh	r3, [r7, #6]
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80061be:	2300      	movs	r3, #0
 80061c0:	623b      	str	r3, [r7, #32]
 80061c2:	e014      	b.n	80061ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80061d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d2:	3301      	adds	r3, #1
 80061d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d8:	3301      	adds	r3, #1
 80061da:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061de:	3301      	adds	r3, #1
 80061e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e4:	3301      	adds	r3, #1
 80061e6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	3301      	adds	r3, #1
 80061ec:	623b      	str	r3, [r7, #32]
 80061ee:	6a3a      	ldr	r2, [r7, #32]
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d3e6      	bcc.n	80061c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80061f6:	8bfb      	ldrh	r3, [r7, #30]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01e      	beq.n	800623a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006206:	461a      	mov	r2, r3
 8006208:	f107 0310 	add.w	r3, r7, #16
 800620c:	6812      	ldr	r2, [r2, #0]
 800620e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	b2db      	uxtb	r3, r3
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	fa22 f303 	lsr.w	r3, r2, r3
 800621c:	b2da      	uxtb	r2, r3
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	701a      	strb	r2, [r3, #0]
      i++;
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	3301      	adds	r3, #1
 8006226:	623b      	str	r3, [r7, #32]
      pDest++;
 8006228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622a:	3301      	adds	r3, #1
 800622c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800622e:	8bfb      	ldrh	r3, [r7, #30]
 8006230:	3b01      	subs	r3, #1
 8006232:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006234:	8bfb      	ldrh	r3, [r7, #30]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1ea      	bne.n	8006210 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800623a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800623c:	4618      	mov	r0, r3
 800623e:	372c      	adds	r7, #44	@ 0x2c
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4013      	ands	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006260:	68fb      	ldr	r3, [r7, #12]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	f003 0301 	and.w	r3, r3, #1
}
 800627e:	4618      	mov	r0, r3
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
	...

0800628c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3301      	adds	r3, #1
 800629c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4a13      	ldr	r2, [pc, #76]	@ (80062f0 <USB_CoreReset+0x64>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d901      	bls.n	80062aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e01b      	b.n	80062e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	daf2      	bge.n	8006298 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f043 0201 	orr.w	r2, r3, #1
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3301      	adds	r3, #1
 80062c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4a09      	ldr	r2, [pc, #36]	@ (80062f0 <USB_CoreReset+0x64>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d901      	bls.n	80062d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e006      	b.n	80062e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d0f0      	beq.n	80062c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	00030d40 	.word	0x00030d40

080062f4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062f4:	b084      	sub	sp, #16
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b086      	sub	sp, #24
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006302:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006314:	461a      	mov	r2, r3
 8006316:	2300      	movs	r3, #0
 8006318:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006336:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006346:	2b00      	cmp	r3, #0
 8006348:	d018      	beq.n	800637c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800634a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800634c:	2b01      	cmp	r3, #1
 800634e:	d10a      	bne.n	8006366 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800635e:	f043 0304 	orr.w	r3, r3, #4
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	e014      	b.n	8006390 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006374:	f023 0304 	bic.w	r3, r3, #4
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	e009      	b.n	8006390 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800638a:	f023 0304 	bic.w	r3, r3, #4
 800638e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006390:	2110      	movs	r1, #16
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff fe5e 	bl	8006054 <USB_FlushTxFifo>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7ff fe8a 	bl	80060bc <USB_FlushRxFifo>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80063b2:	2300      	movs	r3, #0
 80063b4:	613b      	str	r3, [r7, #16]
 80063b6:	e015      	b.n	80063e4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063c4:	461a      	mov	r2, r3
 80063c6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ca:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063d8:	461a      	mov	r2, r3
 80063da:	2300      	movs	r3, #0
 80063dc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	3301      	adds	r3, #1
 80063e2:	613b      	str	r3, [r7, #16]
 80063e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d3e5      	bcc.n	80063b8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f04f 32ff 	mov.w	r2, #4294967295
 80063f8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00b      	beq.n	800641e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800640c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a13      	ldr	r2, [pc, #76]	@ (8006460 <USB_HostInit+0x16c>)
 8006412:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a13      	ldr	r2, [pc, #76]	@ (8006464 <USB_HostInit+0x170>)
 8006418:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800641c:	e009      	b.n	8006432 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2280      	movs	r2, #128	@ 0x80
 8006422:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a10      	ldr	r2, [pc, #64]	@ (8006468 <USB_HostInit+0x174>)
 8006428:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a0f      	ldr	r2, [pc, #60]	@ (800646c <USB_HostInit+0x178>)
 800642e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006434:	2b00      	cmp	r3, #0
 8006436:	d105      	bne.n	8006444 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	f043 0210 	orr.w	r2, r3, #16
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	699a      	ldr	r2, [r3, #24]
 8006448:	4b09      	ldr	r3, [pc, #36]	@ (8006470 <USB_HostInit+0x17c>)
 800644a:	4313      	orrs	r3, r2
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006450:	7dfb      	ldrb	r3, [r7, #23]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800645c:	b004      	add	sp, #16
 800645e:	4770      	bx	lr
 8006460:	01000200 	.word	0x01000200
 8006464:	00e00300 	.word	0x00e00300
 8006468:	00600080 	.word	0x00600080
 800646c:	004000e0 	.word	0x004000e0
 8006470:	a3200008 	.word	0xa3200008

08006474 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	460b      	mov	r3, r1
 800647e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006492:	f023 0303 	bic.w	r3, r3, #3
 8006496:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	68f9      	ldr	r1, [r7, #12]
 80064a8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80064ac:	4313      	orrs	r3, r2
 80064ae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d107      	bne.n	80064c6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064bc:	461a      	mov	r2, r3
 80064be:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80064c2:	6053      	str	r3, [r2, #4]
 80064c4:	e009      	b.n	80064da <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80064c6:	78fb      	ldrb	r3, [r7, #3]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d106      	bne.n	80064da <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064d2:	461a      	mov	r2, r3
 80064d4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80064d8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006508:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006516:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006518:	2064      	movs	r0, #100	@ 0x64
 800651a:	f7fb f9af 	bl	800187c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006526:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800652a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800652c:	200a      	movs	r0, #10
 800652e:	f7fb f9a5 	bl	800187c <HAL_Delay>

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006560:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d109      	bne.n	8006580 <USB_DriveVbus+0x44>
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d106      	bne.n	8006580 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800657a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800657e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800658a:	d109      	bne.n	80065a0 <USB_DriveVbus+0x64>
 800658c:	78fb      	ldrb	r3, [r7, #3]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d106      	bne.n	80065a0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800659a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800659e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b085      	sub	sp, #20
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	0c5b      	lsrs	r3, r3, #17
 80065cc:	f003 0303 	and.w	r3, r3, #3
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	b29b      	uxth	r3, r3
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
	...

08006600 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	4608      	mov	r0, r1
 800660a:	4611      	mov	r1, r2
 800660c:	461a      	mov	r2, r3
 800660e:	4603      	mov	r3, r0
 8006610:	70fb      	strb	r3, [r7, #3]
 8006612:	460b      	mov	r3, r1
 8006614:	70bb      	strb	r3, [r7, #2]
 8006616:	4613      	mov	r3, r2
 8006618:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006622:	78fb      	ldrb	r3, [r7, #3]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	4413      	add	r3, r2
 800662a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800662e:	461a      	mov	r2, r3
 8006630:	f04f 33ff 	mov.w	r3, #4294967295
 8006634:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006636:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800663a:	2b03      	cmp	r3, #3
 800663c:	d87e      	bhi.n	800673c <USB_HC_Init+0x13c>
 800663e:	a201      	add	r2, pc, #4	@ (adr r2, 8006644 <USB_HC_Init+0x44>)
 8006640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006644:	08006655 	.word	0x08006655
 8006648:	080066ff 	.word	0x080066ff
 800664c:	08006655 	.word	0x08006655
 8006650:	080066c1 	.word	0x080066c1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	4413      	add	r3, r2
 800665c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006660:	461a      	mov	r2, r3
 8006662:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006666:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006668:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800666c:	2b00      	cmp	r3, #0
 800666e:	da10      	bge.n	8006692 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	4413      	add	r3, r2
 8006678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	78fa      	ldrb	r2, [r7, #3]
 8006680:	0151      	lsls	r1, r2, #5
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	440a      	add	r2, r1
 8006686:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800668a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800668e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006690:	e057      	b.n	8006742 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800669a:	2b00      	cmp	r3, #0
 800669c:	d051      	beq.n	8006742 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800669e:	78fb      	ldrb	r3, [r7, #3]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	78fa      	ldrb	r2, [r7, #3]
 80066ae:	0151      	lsls	r1, r2, #5
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	440a      	add	r2, r1
 80066b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066b8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80066bc:	60d3      	str	r3, [r2, #12]
      break;
 80066be:	e040      	b.n	8006742 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80066c0:	78fb      	ldrb	r3, [r7, #3]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066cc:	461a      	mov	r2, r3
 80066ce:	f240 639d 	movw	r3, #1693	@ 0x69d
 80066d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80066d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	da34      	bge.n	8006746 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	78fa      	ldrb	r2, [r7, #3]
 80066ec:	0151      	lsls	r1, r2, #5
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	440a      	add	r2, r1
 80066f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066fa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80066fc:	e023      	b.n	8006746 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80066fe:	78fb      	ldrb	r3, [r7, #3]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	4413      	add	r3, r2
 8006706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800670a:	461a      	mov	r2, r3
 800670c:	f240 2325 	movw	r3, #549	@ 0x225
 8006710:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006712:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006716:	2b00      	cmp	r3, #0
 8006718:	da17      	bge.n	800674a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800671a:	78fb      	ldrb	r3, [r7, #3]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	4413      	add	r3, r2
 8006722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	78fa      	ldrb	r2, [r7, #3]
 800672a:	0151      	lsls	r1, r2, #5
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	440a      	add	r2, r1
 8006730:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006734:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006738:	60d3      	str	r3, [r2, #12]
      }
      break;
 800673a:	e006      	b.n	800674a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	77fb      	strb	r3, [r7, #31]
      break;
 8006740:	e004      	b.n	800674c <USB_HC_Init+0x14c>
      break;
 8006742:	bf00      	nop
 8006744:	e002      	b.n	800674c <USB_HC_Init+0x14c>
      break;
 8006746:	bf00      	nop
 8006748:	e000      	b.n	800674c <USB_HC_Init+0x14c>
      break;
 800674a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800674c:	78fb      	ldrb	r3, [r7, #3]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	4413      	add	r3, r2
 8006754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	78fa      	ldrb	r2, [r7, #3]
 800675c:	0151      	lsls	r1, r2, #5
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	440a      	add	r2, r1
 8006762:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006766:	f043 0302 	orr.w	r3, r3, #2
 800676a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006772:	699a      	ldr	r2, [r3, #24]
 8006774:	78fb      	ldrb	r3, [r7, #3]
 8006776:	f003 030f 	and.w	r3, r3, #15
 800677a:	2101      	movs	r1, #1
 800677c:	fa01 f303 	lsl.w	r3, r1, r3
 8006780:	6939      	ldr	r1, [r7, #16]
 8006782:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006786:	4313      	orrs	r3, r2
 8006788:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006796:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800679a:	2b00      	cmp	r3, #0
 800679c:	da03      	bge.n	80067a6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800679e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067a2:	61bb      	str	r3, [r7, #24]
 80067a4:	e001      	b.n	80067aa <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7ff feff 	bl	80065ae <USB_GetHostSpeed>
 80067b0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80067b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d106      	bne.n	80067c8 <USB_HC_Init+0x1c8>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d003      	beq.n	80067c8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80067c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80067c4:	617b      	str	r3, [r7, #20]
 80067c6:	e001      	b.n	80067cc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067cc:	787b      	ldrb	r3, [r7, #1]
 80067ce:	059b      	lsls	r3, r3, #22
 80067d0:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80067d4:	78bb      	ldrb	r3, [r7, #2]
 80067d6:	02db      	lsls	r3, r3, #11
 80067d8:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067dc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80067de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80067e2:	049b      	lsls	r3, r3, #18
 80067e4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80067e8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80067ea:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80067ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80067f0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067f6:	78fb      	ldrb	r3, [r7, #3]
 80067f8:	0159      	lsls	r1, r3, #5
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	440b      	add	r3, r1
 80067fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006802:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006808:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800680a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800680e:	2b03      	cmp	r3, #3
 8006810:	d003      	beq.n	800681a <USB_HC_Init+0x21a>
 8006812:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006816:	2b01      	cmp	r3, #1
 8006818:	d10f      	bne.n	800683a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	4413      	add	r3, r2
 8006822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	78fa      	ldrb	r2, [r7, #3]
 800682a:	0151      	lsls	r1, r2, #5
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	440a      	add	r2, r1
 8006830:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006834:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006838:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800683a:	7ffb      	ldrb	r3, [r7, #31]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3720      	adds	r7, #32
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b08c      	sub	sp, #48	@ 0x30
 8006848:	af02      	add	r7, sp, #8
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	4613      	mov	r3, r2
 8006850:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	785b      	ldrb	r3, [r3, #1]
 800685a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800685c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006860:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800686a:	2b00      	cmp	r3, #0
 800686c:	d02d      	beq.n	80068ca <USB_HC_StartXfer+0x86>
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	791b      	ldrb	r3, [r3, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d129      	bne.n	80068ca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006876:	79fb      	ldrb	r3, [r7, #7]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d117      	bne.n	80068ac <USB_HC_StartXfer+0x68>
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	79db      	ldrb	r3, [r3, #7]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <USB_HC_StartXfer+0x48>
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	79db      	ldrb	r3, [r3, #7]
 8006888:	2b02      	cmp	r3, #2
 800688a:	d10f      	bne.n	80068ac <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	4413      	add	r3, r2
 8006894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	69fa      	ldr	r2, [r7, #28]
 800689c:	0151      	lsls	r1, r2, #5
 800689e:	6a3a      	ldr	r2, [r7, #32]
 80068a0:	440a      	add	r2, r1
 80068a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068aa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10b      	bne.n	80068ca <USB_HC_StartXfer+0x86>
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	795b      	ldrb	r3, [r3, #5]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d107      	bne.n	80068ca <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	785b      	ldrb	r3, [r3, #1]
 80068be:	4619      	mov	r1, r3
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 fa0f 	bl	8006ce4 <USB_DoPing>
      return HAL_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	e0f8      	b.n	8006abc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d018      	beq.n	8006904 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	8912      	ldrh	r2, [r2, #8]
 80068da:	4413      	add	r3, r2
 80068dc:	3b01      	subs	r3, #1
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	8912      	ldrh	r2, [r2, #8]
 80068e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80068e6:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (num_packets > max_hc_pkt_count)
 80068e8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80068ea:	8b7b      	ldrh	r3, [r7, #26]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d90b      	bls.n	8006908 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80068f0:	8b7b      	ldrh	r3, [r7, #26]
 80068f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80068f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	8912      	ldrh	r2, [r2, #8]
 80068fa:	fb03 f202 	mul.w	r2, r3, r2
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	611a      	str	r2, [r3, #16]
 8006902:	e001      	b.n	8006908 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006904:	2301      	movs	r3, #1
 8006906:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	78db      	ldrb	r3, [r3, #3]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d007      	beq.n	8006920 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006910:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	8912      	ldrh	r2, [r2, #8]
 8006916:	fb03 f202 	mul.w	r2, r3, r2
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	611a      	str	r2, [r3, #16]
 800691e:	e003      	b.n	8006928 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	695a      	ldr	r2, [r3, #20]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006930:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006932:	04d9      	lsls	r1, r3, #19
 8006934:	4b63      	ldr	r3, [pc, #396]	@ (8006ac4 <USB_HC_StartXfer+0x280>)
 8006936:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006938:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	7a9b      	ldrb	r3, [r3, #10]
 800693e:	075b      	lsls	r3, r3, #29
 8006940:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006944:	69f9      	ldr	r1, [r7, #28]
 8006946:	0148      	lsls	r0, r1, #5
 8006948:	6a39      	ldr	r1, [r7, #32]
 800694a:	4401      	add	r1, r0
 800694c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006950:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006952:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006954:	79fb      	ldrb	r3, [r7, #7]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d009      	beq.n	800696e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	68d9      	ldr	r1, [r3, #12]
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	4413      	add	r3, r2
 8006966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800696a:	460a      	mov	r2, r1
 800696c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	bf0c      	ite	eq
 800697e:	2301      	moveq	r3, #1
 8006980:	2300      	movne	r3, #0
 8006982:	b2db      	uxtb	r3, r3
 8006984:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	4413      	add	r3, r2
 800698e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	69fa      	ldr	r2, [r7, #28]
 8006996:	0151      	lsls	r1, r2, #5
 8006998:	6a3a      	ldr	r2, [r7, #32]
 800699a:	440a      	add	r2, r1
 800699c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069a0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80069a4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	6a3b      	ldr	r3, [r7, #32]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	7e7b      	ldrb	r3, [r7, #25]
 80069b6:	075b      	lsls	r3, r3, #29
 80069b8:	69f9      	ldr	r1, [r7, #28]
 80069ba:	0148      	lsls	r0, r1, #5
 80069bc:	6a39      	ldr	r1, [r7, #32]
 80069be:	4401      	add	r1, r0
 80069c0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80069c4:	4313      	orrs	r3, r2
 80069c6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80069de:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	78db      	ldrb	r3, [r3, #3]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d004      	beq.n	80069f2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ee:	613b      	str	r3, [r7, #16]
 80069f0:	e003      	b.n	80069fa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80069f8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a00:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a0e:	461a      	mov	r2, r3
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006a14:	79fb      	ldrb	r3, [r7, #7]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e04e      	b.n	8006abc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	78db      	ldrb	r3, [r3, #3]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d149      	bne.n	8006aba <USB_HC_StartXfer+0x276>
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d045      	beq.n	8006aba <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	79db      	ldrb	r3, [r3, #7]
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d830      	bhi.n	8006a98 <USB_HC_StartXfer+0x254>
 8006a36:	a201      	add	r2, pc, #4	@ (adr r2, 8006a3c <USB_HC_StartXfer+0x1f8>)
 8006a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3c:	08006a4d 	.word	0x08006a4d
 8006a40:	08006a71 	.word	0x08006a71
 8006a44:	08006a4d 	.word	0x08006a4d
 8006a48:	08006a71 	.word	0x08006a71
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	3303      	adds	r3, #3
 8006a52:	089b      	lsrs	r3, r3, #2
 8006a54:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006a56:	8afa      	ldrh	r2, [r7, #22]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d91c      	bls.n	8006a9c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	f043 0220 	orr.w	r2, r3, #32
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006a6e:	e015      	b.n	8006a9c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	3303      	adds	r3, #3
 8006a76:	089b      	lsrs	r3, r3, #2
 8006a78:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006a7a:	8afa      	ldrh	r2, [r7, #22]
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d90a      	bls.n	8006aa0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	619a      	str	r2, [r3, #24]
        }
        break;
 8006a96:	e003      	b.n	8006aa0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006a98:	bf00      	nop
 8006a9a:	e002      	b.n	8006aa2 <USB_HC_StartXfer+0x25e>
        break;
 8006a9c:	bf00      	nop
 8006a9e:	e000      	b.n	8006aa2 <USB_HC_StartXfer+0x25e>
        break;
 8006aa0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	68d9      	ldr	r1, [r3, #12]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	785a      	ldrb	r2, [r3, #1]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	9000      	str	r0, [sp, #0]
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f7ff fb31 	bl	800611c <USB_WritePacket>
  }

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3728      	adds	r7, #40	@ 0x28
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	1ff80000 	.word	0x1ff80000

08006ac8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	b29b      	uxth	r3, r3
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b089      	sub	sp, #36	@ 0x24
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	460b      	mov	r3, r1
 8006af4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006afa:	78fb      	ldrb	r3, [r7, #3]
 8006afc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	0c9b      	lsrs	r3, r3, #18
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	0fdb      	lsrs	r3, r3, #31
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f003 0320 	and.w	r3, r3, #32
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	d104      	bne.n	8006b44 <USB_HC_Halt+0x5a>
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006b40:	2300      	movs	r3, #0
 8006b42:	e0c8      	b.n	8006cd6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <USB_HC_Halt+0x66>
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d163      	bne.n	8006c18 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	015a      	lsls	r2, r3, #5
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	0151      	lsls	r1, r2, #5
 8006b62:	69fa      	ldr	r2, [r7, #28]
 8006b64:	440a      	add	r2, r1
 8006b66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b6e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f003 0320 	and.w	r3, r3, #32
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f040 80ab 	bne.w	8006cd4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b82:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d133      	bne.n	8006bf2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	015a      	lsls	r2, r3, #5
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	0151      	lsls	r1, r2, #5
 8006b9c:	69fa      	ldr	r2, [r7, #28]
 8006b9e:	440a      	add	r2, r1
 8006ba0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ba4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006ba8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	0151      	lsls	r1, r2, #5
 8006bbc:	69fa      	ldr	r2, [r7, #28]
 8006bbe:	440a      	add	r2, r1
 8006bc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bc4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006bc8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006bd6:	d81d      	bhi.n	8006c14 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bee:	d0ec      	beq.n	8006bca <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006bf0:	e070      	b.n	8006cd4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	0151      	lsls	r1, r2, #5
 8006c04:	69fa      	ldr	r2, [r7, #28]
 8006c06:	440a      	add	r2, r1
 8006c08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c10:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c12:	e05f      	b.n	8006cd4 <USB_HC_Halt+0x1ea>
            break;
 8006c14:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c16:	e05d      	b.n	8006cd4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	0151      	lsls	r1, r2, #5
 8006c2a:	69fa      	ldr	r2, [r7, #28]
 8006c2c:	440a      	add	r2, r1
 8006c2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c36:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d133      	bne.n	8006cb0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	0151      	lsls	r1, r2, #5
 8006c5a:	69fa      	ldr	r2, [r7, #28]
 8006c5c:	440a      	add	r2, r1
 8006c5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c66:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	0151      	lsls	r1, r2, #5
 8006c7a:	69fa      	ldr	r2, [r7, #28]
 8006c7c:	440a      	add	r2, r1
 8006c7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c86:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c94:	d81d      	bhi.n	8006cd2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	015a      	lsls	r2, r3, #5
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cac:	d0ec      	beq.n	8006c88 <USB_HC_Halt+0x19e>
 8006cae:	e011      	b.n	8006cd4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	0151      	lsls	r1, r2, #5
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	440a      	add	r2, r1
 8006cc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006cce:	6013      	str	r3, [r2, #0]
 8006cd0:	e000      	b.n	8006cd4 <USB_HC_Halt+0x1ea>
          break;
 8006cd2:	bf00      	nop
    }
  }

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3724      	adds	r7, #36	@ 0x24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
	...

08006ce4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	460b      	mov	r3, r1
 8006cee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006cf4:	78fb      	ldrb	r3, [r7, #3]
 8006cf6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	04da      	lsls	r2, r3, #19
 8006d00:	4b15      	ldr	r3, [pc, #84]	@ (8006d58 <USB_DoPing+0x74>)
 8006d02:	4013      	ands	r3, r2
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	0151      	lsls	r1, r2, #5
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	440a      	add	r2, r1
 8006d0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d14:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	015a      	lsls	r2, r3, #5
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d2c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d34:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d42:	461a      	mov	r2, r3
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	371c      	adds	r7, #28
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	1ff80000 	.word	0x1ff80000

08006d5c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b088      	sub	sp, #32
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7ff f911 	bl	8005f98 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d76:	2110      	movs	r1, #16
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff f96b 	bl	8006054 <USB_FlushTxFifo>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff f997 	bl	80060bc <USB_FlushRxFifo>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006d98:	2300      	movs	r3, #0
 8006d9a:	61bb      	str	r3, [r7, #24]
 8006d9c:	e01f      	b.n	8006dde <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006db4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006dbc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006dc4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	61bb      	str	r3, [r7, #24]
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	2b0f      	cmp	r3, #15
 8006de2:	d9dc      	bls.n	8006d9e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006de4:	2300      	movs	r3, #0
 8006de6:	61bb      	str	r3, [r7, #24]
 8006de8:	e034      	b.n	8006e54 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e00:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e10:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e1e:	461a      	mov	r2, r3
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3301      	adds	r3, #1
 8006e28:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e30:	d80c      	bhi.n	8006e4c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e48:	d0ec      	beq.n	8006e24 <USB_StopHost+0xc8>
 8006e4a:	e000      	b.n	8006e4e <USB_StopHost+0xf2>
        break;
 8006e4c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	3301      	adds	r3, #1
 8006e52:	61bb      	str	r3, [r7, #24]
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	2b0f      	cmp	r3, #15
 8006e58:	d9c7      	bls.n	8006dea <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e60:	461a      	mov	r2, r3
 8006e62:	f04f 33ff 	mov.w	r3, #4294967295
 8006e66:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e6e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7ff f880 	bl	8005f76 <USB_EnableGlobalInt>

  return ret;
 8006e76:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3720      	adds	r7, #32
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006e80:	b590      	push	{r4, r7, lr}
 8006e82:	b089      	sub	sp, #36	@ 0x24
 8006e84:	af04      	add	r7, sp, #16
 8006e86:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006e88:	2301      	movs	r3, #1
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	2102      	movs	r1, #2
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fc66 	bl	8007760 <USBH_FindInterface>
 8006e94:	4603      	mov	r3, r0
 8006e96:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	2bff      	cmp	r3, #255	@ 0xff
 8006e9c:	d002      	beq.n	8006ea4 <USBH_CDC_InterfaceInit+0x24>
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d901      	bls.n	8006ea8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e13d      	b.n	8007124 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fc3b 	bl	8007728 <USBH_SelectInterface>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006eb6:	7bbb      	ldrb	r3, [r7, #14]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	e131      	b.n	8007124 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006ec6:	2050      	movs	r0, #80	@ 0x50
 8006ec8:	f002 fac0 	bl	800944c <malloc>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	e11f      	b.n	8007124 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006ee4:	2250      	movs	r2, #80	@ 0x50
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	68b8      	ldr	r0, [r7, #8]
 8006eea:	f002 fb6d 	bl	80095c8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	211a      	movs	r1, #26
 8006ef4:	fb01 f303 	mul.w	r3, r1, r3
 8006ef8:	4413      	add	r3, r2
 8006efa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	b25b      	sxtb	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	da15      	bge.n	8006f32 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	211a      	movs	r1, #26
 8006f0c:	fb01 f303 	mul.w	r3, r1, r3
 8006f10:	4413      	add	r3, r2
 8006f12:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006f16:	781a      	ldrb	r2, [r3, #0]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	211a      	movs	r1, #26
 8006f22:	fb01 f303 	mul.w	r3, r1, r3
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006f2c:	881a      	ldrh	r2, [r3, #0]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	785b      	ldrb	r3, [r3, #1]
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 ff1c 	bl	8008d76 <USBH_AllocPipe>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	461a      	mov	r2, r3
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	7819      	ldrb	r1, [r3, #0]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	7858      	ldrb	r0, [r3, #1]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	8952      	ldrh	r2, [r2, #10]
 8006f5e:	9202      	str	r2, [sp, #8]
 8006f60:	2203      	movs	r2, #3
 8006f62:	9201      	str	r2, [sp, #4]
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	4623      	mov	r3, r4
 8006f68:	4602      	mov	r2, r0
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 fed4 	bl	8008d18 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2200      	movs	r2, #0
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f002 f9e3 	bl	8009344 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006f7e:	2300      	movs	r3, #0
 8006f80:	2200      	movs	r2, #0
 8006f82:	210a      	movs	r1, #10
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fbeb 	bl	8007760 <USBH_FindInterface>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	2bff      	cmp	r3, #255	@ 0xff
 8006f92:	d002      	beq.n	8006f9a <USBH_CDC_InterfaceInit+0x11a>
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d901      	bls.n	8006f9e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e0c2      	b.n	8007124 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	211a      	movs	r1, #26
 8006fa4:	fb01 f303 	mul.w	r3, r1, r3
 8006fa8:	4413      	add	r3, r2
 8006faa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	b25b      	sxtb	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	da16      	bge.n	8006fe4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	211a      	movs	r1, #26
 8006fbc:	fb01 f303 	mul.w	r3, r1, r3
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006fc6:	781a      	ldrb	r2, [r3, #0]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	211a      	movs	r1, #26
 8006fd2:	fb01 f303 	mul.w	r3, r1, r3
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006fdc:	881a      	ldrh	r2, [r3, #0]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	835a      	strh	r2, [r3, #26]
 8006fe2:	e015      	b.n	8007010 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	211a      	movs	r1, #26
 8006fea:	fb01 f303 	mul.w	r3, r1, r3
 8006fee:	4413      	add	r3, r2
 8006ff0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ff4:	781a      	ldrb	r2, [r3, #0]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	211a      	movs	r1, #26
 8007000:	fb01 f303 	mul.w	r3, r1, r3
 8007004:	4413      	add	r3, r2
 8007006:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800700a:	881a      	ldrh	r2, [r3, #0]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007010:	7bfb      	ldrb	r3, [r7, #15]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	211a      	movs	r1, #26
 8007016:	fb01 f303 	mul.w	r3, r1, r3
 800701a:	4413      	add	r3, r2
 800701c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	b25b      	sxtb	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	da16      	bge.n	8007056 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007028:	7bfb      	ldrb	r3, [r7, #15]
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	211a      	movs	r1, #26
 800702e:	fb01 f303 	mul.w	r3, r1, r3
 8007032:	4413      	add	r3, r2
 8007034:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007038:	781a      	ldrb	r2, [r3, #0]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800703e:	7bfb      	ldrb	r3, [r7, #15]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	211a      	movs	r1, #26
 8007044:	fb01 f303 	mul.w	r3, r1, r3
 8007048:	4413      	add	r3, r2
 800704a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800704e:	881a      	ldrh	r2, [r3, #0]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	835a      	strh	r2, [r3, #26]
 8007054:	e015      	b.n	8007082 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007056:	7bfb      	ldrb	r3, [r7, #15]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	211a      	movs	r1, #26
 800705c:	fb01 f303 	mul.w	r3, r1, r3
 8007060:	4413      	add	r3, r2
 8007062:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007066:	781a      	ldrb	r2, [r3, #0]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	211a      	movs	r1, #26
 8007072:	fb01 f303 	mul.w	r3, r1, r3
 8007076:	4413      	add	r3, r2
 8007078:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800707c:	881a      	ldrh	r2, [r3, #0]
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	7b9b      	ldrb	r3, [r3, #14]
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 fe74 	bl	8008d76 <USBH_AllocPipe>
 800708e:	4603      	mov	r3, r0
 8007090:	461a      	mov	r2, r3
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	7bdb      	ldrb	r3, [r3, #15]
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 fe6a 	bl	8008d76 <USBH_AllocPipe>
 80070a2:	4603      	mov	r3, r0
 80070a4:	461a      	mov	r2, r3
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	7b59      	ldrb	r1, [r3, #13]
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	7b98      	ldrb	r0, [r3, #14]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	8b12      	ldrh	r2, [r2, #24]
 80070c2:	9202      	str	r2, [sp, #8]
 80070c4:	2202      	movs	r2, #2
 80070c6:	9201      	str	r2, [sp, #4]
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	4623      	mov	r3, r4
 80070cc:	4602      	mov	r2, r0
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 fe22 	bl	8008d18 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	7b19      	ldrb	r1, [r3, #12]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	7bd8      	ldrb	r0, [r3, #15]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	8b52      	ldrh	r2, [r2, #26]
 80070ec:	9202      	str	r2, [sp, #8]
 80070ee:	2202      	movs	r2, #2
 80070f0:	9201      	str	r2, [sp, #4]
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	4623      	mov	r3, r4
 80070f6:	4602      	mov	r2, r0
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 fe0d 	bl	8008d18 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	7b5b      	ldrb	r3, [r3, #13]
 800710a:	2200      	movs	r2, #0
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f002 f918 	bl	8009344 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	7b1b      	ldrb	r3, [r3, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f002 f911 	bl	8009344 <USBH_LL_SetToggle>

  return USBH_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	bd90      	pop	{r4, r7, pc}

0800712c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00e      	beq.n	8007164 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f001 fe02 	bl	8008d56 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f001 fe2d 	bl	8008db8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	7b1b      	ldrb	r3, [r3, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00e      	beq.n	800718a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	7b1b      	ldrb	r3, [r3, #12]
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f001 fdef 	bl	8008d56 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	7b1b      	ldrb	r3, [r3, #12]
 800717c:	4619      	mov	r1, r3
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f001 fe1a 	bl	8008db8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	7b5b      	ldrb	r3, [r3, #13]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00e      	beq.n	80071b0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	7b5b      	ldrb	r3, [r3, #13]
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 fddc 	bl	8008d56 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	7b5b      	ldrb	r3, [r3, #13]
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 fe07 	bl	8008db8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00b      	beq.n	80071d4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f002 f949 	bl	800945c <free>
    phost->pActiveClass->pData = 0U;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071d0:	2200      	movs	r2, #0
 80071d2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3340      	adds	r3, #64	@ 0x40
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f8b1 	bl	800735e <GetLineCoding>
 80071fc:	4603      	mov	r3, r0
 80071fe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007200:	7afb      	ldrb	r3, [r7, #11]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d105      	bne.n	8007212 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800720c:	2102      	movs	r1, #2
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007212:	7afb      	ldrb	r3, [r7, #11]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007224:	2301      	movs	r3, #1
 8007226:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800723c:	2b04      	cmp	r3, #4
 800723e:	d877      	bhi.n	8007330 <USBH_CDC_Process+0x114>
 8007240:	a201      	add	r2, pc, #4	@ (adr r2, 8007248 <USBH_CDC_Process+0x2c>)
 8007242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007246:	bf00      	nop
 8007248:	0800725d 	.word	0x0800725d
 800724c:	08007263 	.word	0x08007263
 8007250:	08007293 	.word	0x08007293
 8007254:	08007307 	.word	0x08007307
 8007258:	08007315 	.word	0x08007315
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	73fb      	strb	r3, [r7, #15]
      break;
 8007260:	e06d      	b.n	800733e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f897 	bl	800739c <SetLineCoding>
 800726e:	4603      	mov	r3, r0
 8007270:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007272:	7bbb      	ldrb	r3, [r7, #14]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d104      	bne.n	8007282 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007280:	e058      	b.n	8007334 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007282:	7bbb      	ldrb	r3, [r7, #14]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d055      	beq.n	8007334 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2204      	movs	r2, #4
 800728c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007290:	e050      	b.n	8007334 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	3340      	adds	r3, #64	@ 0x40
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f860 	bl	800735e <GetLineCoding>
 800729e:	4603      	mov	r3, r0
 80072a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d126      	bne.n	80072f6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072ba:	791b      	ldrb	r3, [r3, #4]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d13b      	bne.n	8007338 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072ca:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d133      	bne.n	8007338 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072da:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80072dc:	429a      	cmp	r2, r3
 80072de:	d12b      	bne.n	8007338 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072e8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d124      	bne.n	8007338 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f958 	bl	80075a4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80072f4:	e020      	b.n	8007338 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d01d      	beq.n	8007338 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2204      	movs	r2, #4
 8007300:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007304:	e018      	b.n	8007338 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f867 	bl	80073da <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f8da 	bl	80074c6 <CDC_ProcessReception>
      break;
 8007312:	e014      	b.n	800733e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007314:	2100      	movs	r1, #0
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 ffe7 	bl	80082ea <USBH_ClrFeature>
 800731c:	4603      	mov	r3, r0
 800731e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007320:	7bbb      	ldrb	r3, [r7, #14]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800732e:	e005      	b.n	800733c <USBH_CDC_Process+0x120>

    default:
      break;
 8007330:	bf00      	nop
 8007332:	e004      	b.n	800733e <USBH_CDC_Process+0x122>
      break;
 8007334:	bf00      	nop
 8007336:	e002      	b.n	800733e <USBH_CDC_Process+0x122>
      break;
 8007338:	bf00      	nop
 800733a:	e000      	b.n	800733e <USBH_CDC_Process+0x122>
      break;
 800733c:	bf00      	nop

  }

  return status;
 800733e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	22a1      	movs	r2, #161	@ 0xa1
 800736c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2221      	movs	r2, #33	@ 0x21
 8007372:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2207      	movs	r2, #7
 8007384:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2207      	movs	r2, #7
 800738a:	4619      	mov	r1, r3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f001 fa72 	bl	8008876 <USBH_CtlReq>
 8007392:	4603      	mov	r3, r0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2221      	movs	r2, #33	@ 0x21
 80073aa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2220      	movs	r2, #32
 80073b0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2207      	movs	r2, #7
 80073c2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2207      	movs	r2, #7
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f001 fa53 	bl	8008876 <USBH_CtlReq>
 80073d0:	4603      	mov	r3, r0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b086      	sub	sp, #24
 80073de:	af02      	add	r7, sp, #8
 80073e0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80073ec:	2300      	movs	r3, #0
 80073ee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d002      	beq.n	8007400 <CDC_ProcessTransmission+0x26>
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d023      	beq.n	8007446 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80073fe:	e05e      	b.n	80074be <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	8b12      	ldrh	r2, [r2, #24]
 8007408:	4293      	cmp	r3, r2
 800740a:	d90b      	bls.n	8007424 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	69d9      	ldr	r1, [r3, #28]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8b1a      	ldrh	r2, [r3, #24]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	7b5b      	ldrb	r3, [r3, #13]
 8007418:	2001      	movs	r0, #1
 800741a:	9000      	str	r0, [sp, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f001 fc38 	bl	8008c92 <USBH_BulkSendData>
 8007422:	e00b      	b.n	800743c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800742c:	b29a      	uxth	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	7b5b      	ldrb	r3, [r3, #13]
 8007432:	2001      	movs	r0, #1
 8007434:	9000      	str	r0, [sp, #0]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f001 fc2b 	bl	8008c92 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007444:	e03b      	b.n	80074be <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	7b5b      	ldrb	r3, [r3, #13]
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f001 ff4f 	bl	80092f0 <USBH_LL_GetURBState>
 8007452:	4603      	mov	r3, r0
 8007454:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007456:	7afb      	ldrb	r3, [r7, #11]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d128      	bne.n	80074ae <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	8b12      	ldrh	r2, [r2, #24]
 8007464:	4293      	cmp	r3, r2
 8007466:	d90e      	bls.n	8007486 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	8b12      	ldrh	r2, [r2, #24]
 8007470:	1a9a      	subs	r2, r3, r2
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	8b12      	ldrh	r2, [r2, #24]
 800747e:	441a      	add	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	61da      	str	r2, [r3, #28]
 8007484:	e002      	b.n	800748c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007490:	2b00      	cmp	r3, #0
 8007492:	d004      	beq.n	800749e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800749c:	e00e      	b.n	80074bc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f868 	bl	800757c <USBH_CDC_TransmitCallback>
      break;
 80074ac:	e006      	b.n	80074bc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80074ae:	7afb      	ldrb	r3, [r7, #11]
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d103      	bne.n	80074bc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80074bc:	bf00      	nop
  }
}
 80074be:	bf00      	nop
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b086      	sub	sp, #24
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80074d8:	2300      	movs	r3, #0
 80074da:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d002      	beq.n	80074ec <CDC_ProcessReception+0x26>
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	d00e      	beq.n	8007508 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80074ea:	e043      	b.n	8007574 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	6a19      	ldr	r1, [r3, #32]
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	8b5a      	ldrh	r2, [r3, #26]
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	7b1b      	ldrb	r3, [r3, #12]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f001 fbef 	bl	8008cdc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	2204      	movs	r2, #4
 8007502:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007506:	e035      	b.n	8007574 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	7b1b      	ldrb	r3, [r3, #12]
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 feee 	bl	80092f0 <USBH_LL_GetURBState>
 8007514:	4603      	mov	r3, r0
 8007516:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007518:	7cfb      	ldrb	r3, [r7, #19]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d129      	bne.n	8007572 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	7b1b      	ldrb	r3, [r3, #12]
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f001 fe51 	bl	80091cc <USBH_LL_GetLastXferSize>
 800752a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	429a      	cmp	r2, r3
 8007534:	d016      	beq.n	8007564 <CDC_ProcessReception+0x9e>
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	8b5b      	ldrh	r3, [r3, #26]
 800753a:	461a      	mov	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4293      	cmp	r3, r2
 8007540:	d910      	bls.n	8007564 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	1ad2      	subs	r2, r2, r3
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	6a1a      	ldr	r2, [r3, #32]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	441a      	add	r2, r3
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2203      	movs	r2, #3
 800755e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007562:	e006      	b.n	8007572 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f80f 	bl	8007590 <USBH_CDC_ReceiveCallback>
      break;
 8007572:	bf00      	nop
  }
}
 8007574:	bf00      	nop
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	4613      	mov	r3, r2
 80075c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80075cc:	2302      	movs	r3, #2
 80075ce:	e029      	b.n	8007624 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	79fa      	ldrb	r2, [r7, #7]
 80075d4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 f81f 	bl	800762c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d003      	beq.n	800761c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f001 fd21 	bl	8009064 <USBH_LL_Init>

  return USBH_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	e009      	b.n	8007652 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	33e0      	adds	r3, #224	@ 0xe0
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	2200      	movs	r2, #0
 800764a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	3301      	adds	r3, #1
 8007650:	60fb      	str	r3, [r7, #12]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2b0f      	cmp	r3, #15
 8007656:	d9f2      	bls.n	800763e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007658:	2300      	movs	r3, #0
 800765a:	60fb      	str	r3, [r7, #12]
 800765c:	e009      	b.n	8007672 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4413      	add	r3, r2
 8007664:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007668:	2200      	movs	r2, #0
 800766a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	3301      	adds	r3, #1
 8007670:	60fb      	str	r3, [r7, #12]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007678:	d3f1      	bcc.n	800765e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2240      	movs	r2, #64	@ 0x40
 800769e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  return USBH_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d016      	beq.n	8007716 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10e      	bne.n	8007710 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80076f8:	1c59      	adds	r1, r3, #1
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	33de      	adds	r3, #222	@ 0xde
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	73fb      	strb	r3, [r7, #15]
 800770e:	e004      	b.n	800771a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007710:	2302      	movs	r3, #2
 8007712:	73fb      	strb	r3, [r7, #15]
 8007714:	e001      	b.n	800771a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007716:	2302      	movs	r3, #2
 8007718:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800771a:	7bfb      	ldrb	r3, [r7, #15]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	460b      	mov	r3, r1
 8007732:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007734:	2300      	movs	r3, #0
 8007736:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800773e:	78fa      	ldrb	r2, [r7, #3]
 8007740:	429a      	cmp	r2, r3
 8007742:	d204      	bcs.n	800774e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	78fa      	ldrb	r2, [r7, #3]
 8007748:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800774c:	e001      	b.n	8007752 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800774e:	2302      	movs	r3, #2
 8007750:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007752:	7bfb      	ldrb	r3, [r7, #15]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007760:	b480      	push	{r7}
 8007762:	b087      	sub	sp, #28
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	4608      	mov	r0, r1
 800776a:	4611      	mov	r1, r2
 800776c:	461a      	mov	r2, r3
 800776e:	4603      	mov	r3, r0
 8007770:	70fb      	strb	r3, [r7, #3]
 8007772:	460b      	mov	r3, r1
 8007774:	70bb      	strb	r3, [r7, #2]
 8007776:	4613      	mov	r3, r2
 8007778:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800777e:	2300      	movs	r3, #0
 8007780:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007788:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800778a:	e025      	b.n	80077d8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800778c:	7dfb      	ldrb	r3, [r7, #23]
 800778e:	221a      	movs	r2, #26
 8007790:	fb02 f303 	mul.w	r3, r2, r3
 8007794:	3308      	adds	r3, #8
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	4413      	add	r3, r2
 800779a:	3302      	adds	r3, #2
 800779c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	795b      	ldrb	r3, [r3, #5]
 80077a2:	78fa      	ldrb	r2, [r7, #3]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d002      	beq.n	80077ae <USBH_FindInterface+0x4e>
 80077a8:	78fb      	ldrb	r3, [r7, #3]
 80077aa:	2bff      	cmp	r3, #255	@ 0xff
 80077ac:	d111      	bne.n	80077d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80077b2:	78ba      	ldrb	r2, [r7, #2]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d002      	beq.n	80077be <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077b8:	78bb      	ldrb	r3, [r7, #2]
 80077ba:	2bff      	cmp	r3, #255	@ 0xff
 80077bc:	d109      	bne.n	80077d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077c2:	787a      	ldrb	r2, [r7, #1]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d002      	beq.n	80077ce <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80077c8:	787b      	ldrb	r3, [r7, #1]
 80077ca:	2bff      	cmp	r3, #255	@ 0xff
 80077cc:	d101      	bne.n	80077d2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
 80077d0:	e006      	b.n	80077e0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80077d2:	7dfb      	ldrb	r3, [r7, #23]
 80077d4:	3301      	adds	r3, #1
 80077d6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d9d6      	bls.n	800778c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80077de:	23ff      	movs	r3, #255	@ 0xff
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	371c      	adds	r7, #28
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 fc71 	bl	80090dc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80077fa:	2101      	movs	r1, #1
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 fd8a 	bl	8009316 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b088      	sub	sp, #32
 8007810:	af04      	add	r7, sp, #16
 8007812:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007814:	2302      	movs	r3, #2
 8007816:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007818:	2300      	movs	r3, #0
 800781a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b01      	cmp	r3, #1
 8007826:	d102      	bne.n	800782e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2203      	movs	r2, #3
 800782c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b0b      	cmp	r3, #11
 8007836:	f200 81bb 	bhi.w	8007bb0 <USBH_Process+0x3a4>
 800783a:	a201      	add	r2, pc, #4	@ (adr r2, 8007840 <USBH_Process+0x34>)
 800783c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007840:	08007871 	.word	0x08007871
 8007844:	080078a3 	.word	0x080078a3
 8007848:	0800790b 	.word	0x0800790b
 800784c:	08007b4b 	.word	0x08007b4b
 8007850:	08007bb1 	.word	0x08007bb1
 8007854:	080079ab 	.word	0x080079ab
 8007858:	08007af1 	.word	0x08007af1
 800785c:	080079e1 	.word	0x080079e1
 8007860:	08007a01 	.word	0x08007a01
 8007864:	08007a1f 	.word	0x08007a1f
 8007868:	08007a63 	.word	0x08007a63
 800786c:	08007b33 	.word	0x08007b33
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 819b 	beq.w	8007bb4 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007884:	20c8      	movs	r0, #200	@ 0xc8
 8007886:	f001 fd8d 	bl	80093a4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f001 fc83 	bl	8009196 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078a0:	e188      	b.n	8007bb4 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d107      	bne.n	80078bc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078ba:	e18a      	b.n	8007bd2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80078c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078c6:	d914      	bls.n	80078f2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80078ce:	3301      	adds	r3, #1
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d903      	bls.n	80078ea <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	220d      	movs	r2, #13
 80078e6:	701a      	strb	r2, [r3, #0]
      break;
 80078e8:	e173      	b.n	8007bd2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	701a      	strb	r2, [r3, #0]
      break;
 80078f0:	e16f      	b.n	8007bd2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80078f8:	f103 020a 	add.w	r2, r3, #10
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007902:	200a      	movs	r0, #10
 8007904:	f001 fd4e 	bl	80093a4 <USBH_Delay>
      break;
 8007908:	e163      	b.n	8007bd2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007910:	2b00      	cmp	r3, #0
 8007912:	d005      	beq.n	8007920 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800791a:	2104      	movs	r1, #4
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007920:	2064      	movs	r0, #100	@ 0x64
 8007922:	f001 fd3f 	bl	80093a4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f001 fc0e 	bl	8009148 <USBH_LL_GetSpeed>
 800792c:	4603      	mov	r3, r0
 800792e:	461a      	mov	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2205      	movs	r2, #5
 800793a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800793c:	2100      	movs	r1, #0
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f001 fa19 	bl	8008d76 <USBH_AllocPipe>
 8007944:	4603      	mov	r3, r0
 8007946:	461a      	mov	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800794c:	2180      	movs	r1, #128	@ 0x80
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f001 fa11 	bl	8008d76 <USBH_AllocPipe>
 8007954:	4603      	mov	r3, r0
 8007956:	461a      	mov	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	7919      	ldrb	r1, [r3, #4]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007970:	9202      	str	r2, [sp, #8]
 8007972:	2200      	movs	r2, #0
 8007974:	9201      	str	r2, [sp, #4]
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	4603      	mov	r3, r0
 800797a:	2280      	movs	r2, #128	@ 0x80
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f001 f9cb 	bl	8008d18 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	7959      	ldrb	r1, [r3, #5]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007996:	9202      	str	r2, [sp, #8]
 8007998:	2200      	movs	r2, #0
 800799a:	9201      	str	r2, [sp, #4]
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	4603      	mov	r3, r0
 80079a0:	2200      	movs	r2, #0
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f001 f9b8 	bl	8008d18 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80079a8:	e113      	b.n	8007bd2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f916 	bl	8007bdc <USBH_HandleEnum>
 80079b0:	4603      	mov	r3, r0
 80079b2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80079b4:	7bbb      	ldrb	r3, [r7, #14]
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f040 80fd 	bne.w	8007bb8 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d103      	bne.n	80079d8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2208      	movs	r2, #8
 80079d4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80079d6:	e0ef      	b.n	8007bb8 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2207      	movs	r2, #7
 80079dc:	701a      	strb	r2, [r3, #0]
      break;
 80079de:	e0eb      	b.n	8007bb8 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 80e8 	beq.w	8007bbc <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80079f2:	2101      	movs	r1, #1
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2208      	movs	r2, #8
 80079fc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80079fe:	e0dd      	b.n	8007bbc <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fc27 	bl	800825c <USBH_SetCfg>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f040 80d5 	bne.w	8007bc0 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2209      	movs	r2, #9
 8007a1a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a1c:	e0d0      	b.n	8007bc0 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007a24:	f003 0320 	and.w	r3, r3, #32
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d016      	beq.n	8007a5a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fc37 	bl	80082a2 <USBH_SetFeature>
 8007a34:	4603      	mov	r3, r0
 8007a36:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d103      	bne.n	8007a48 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	220a      	movs	r2, #10
 8007a44:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a46:	e0bd      	b.n	8007bc4 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	f040 80b9 	bne.w	8007bc4 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	220a      	movs	r2, #10
 8007a56:	701a      	strb	r2, [r3, #0]
      break;
 8007a58:	e0b4      	b.n	8007bc4 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	220a      	movs	r2, #10
 8007a5e:	701a      	strb	r2, [r3, #0]
      break;
 8007a60:	e0b0      	b.n	8007bc4 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 80ad 	beq.w	8007bc8 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007a76:	2300      	movs	r3, #0
 8007a78:	73fb      	strb	r3, [r7, #15]
 8007a7a:	e016      	b.n	8007aaa <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007a7c:	7bfa      	ldrb	r2, [r7, #15]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	32de      	adds	r2, #222	@ 0xde
 8007a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a86:	791a      	ldrb	r2, [r3, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d108      	bne.n	8007aa4 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007a92:	7bfa      	ldrb	r2, [r7, #15]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	32de      	adds	r2, #222	@ 0xde
 8007a98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007aa2:	e005      	b.n	8007ab0 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	73fb      	strb	r3, [r7, #15]
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d0e5      	beq.n	8007a7c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d016      	beq.n	8007ae8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	4798      	blx	r3
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d109      	bne.n	8007ae0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2206      	movs	r2, #6
 8007ad0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ad8:	2103      	movs	r1, #3
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ade:	e073      	b.n	8007bc8 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	220d      	movs	r2, #13
 8007ae4:	701a      	strb	r2, [r3, #0]
      break;
 8007ae6:	e06f      	b.n	8007bc8 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	220d      	movs	r2, #13
 8007aec:	701a      	strb	r2, [r3, #0]
      break;
 8007aee:	e06b      	b.n	8007bc8 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d017      	beq.n	8007b2a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	4798      	blx	r3
 8007b06:	4603      	mov	r3, r0
 8007b08:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007b0a:	7bbb      	ldrb	r3, [r7, #14]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d103      	bne.n	8007b1a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	220b      	movs	r2, #11
 8007b16:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007b18:	e058      	b.n	8007bcc <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d154      	bne.n	8007bcc <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	220d      	movs	r2, #13
 8007b26:	701a      	strb	r2, [r3, #0]
      break;
 8007b28:	e050      	b.n	8007bcc <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	220d      	movs	r2, #13
 8007b2e:	701a      	strb	r2, [r3, #0]
      break;
 8007b30:	e04c      	b.n	8007bcc <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d049      	beq.n	8007bd0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b42:	695b      	ldr	r3, [r3, #20]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	4798      	blx	r3
      }
      break;
 8007b48:	e042      	b.n	8007bd0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff fd6a 	bl	800762c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d009      	beq.n	8007b76 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d005      	beq.n	8007b8c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007b86:	2105      	movs	r1, #5
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d107      	bne.n	8007ba8 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7ff fe23 	bl	80077ec <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ba6:	e014      	b.n	8007bd2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f001 fa97 	bl	80090dc <USBH_LL_Start>
      break;
 8007bae:	e010      	b.n	8007bd2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007bb0:	bf00      	nop
 8007bb2:	e00e      	b.n	8007bd2 <USBH_Process+0x3c6>
      break;
 8007bb4:	bf00      	nop
 8007bb6:	e00c      	b.n	8007bd2 <USBH_Process+0x3c6>
      break;
 8007bb8:	bf00      	nop
 8007bba:	e00a      	b.n	8007bd2 <USBH_Process+0x3c6>
    break;
 8007bbc:	bf00      	nop
 8007bbe:	e008      	b.n	8007bd2 <USBH_Process+0x3c6>
      break;
 8007bc0:	bf00      	nop
 8007bc2:	e006      	b.n	8007bd2 <USBH_Process+0x3c6>
      break;
 8007bc4:	bf00      	nop
 8007bc6:	e004      	b.n	8007bd2 <USBH_Process+0x3c6>
      break;
 8007bc8:	bf00      	nop
 8007bca:	e002      	b.n	8007bd2 <USBH_Process+0x3c6>
      break;
 8007bcc:	bf00      	nop
 8007bce:	e000      	b.n	8007bd2 <USBH_Process+0x3c6>
      break;
 8007bd0:	bf00      	nop
  }
  return USBH_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b088      	sub	sp, #32
 8007be0:	af04      	add	r7, sp, #16
 8007be2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007be4:	2301      	movs	r3, #1
 8007be6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007be8:	2301      	movs	r3, #1
 8007bea:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	785b      	ldrb	r3, [r3, #1]
 8007bf0:	2b07      	cmp	r3, #7
 8007bf2:	f200 81bd 	bhi.w	8007f70 <USBH_HandleEnum+0x394>
 8007bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bfc <USBH_HandleEnum+0x20>)
 8007bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfc:	08007c1d 	.word	0x08007c1d
 8007c00:	08007cd7 	.word	0x08007cd7
 8007c04:	08007d41 	.word	0x08007d41
 8007c08:	08007dcb 	.word	0x08007dcb
 8007c0c:	08007e35 	.word	0x08007e35
 8007c10:	08007ea5 	.word	0x08007ea5
 8007c14:	08007eeb 	.word	0x08007eeb
 8007c18:	08007f31 	.word	0x08007f31
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007c1c:	2108      	movs	r1, #8
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fa4c 	bl	80080bc <USBH_Get_DevDesc>
 8007c24:	4603      	mov	r3, r0
 8007c26:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c28:	7bbb      	ldrb	r3, [r7, #14]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d12e      	bne.n	8007c8c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	7919      	ldrb	r1, [r3, #4]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007c52:	9202      	str	r2, [sp, #8]
 8007c54:	2200      	movs	r2, #0
 8007c56:	9201      	str	r2, [sp, #4]
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2280      	movs	r2, #128	@ 0x80
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f001 f85a 	bl	8008d18 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	7959      	ldrb	r1, [r3, #5]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c78:	9202      	str	r2, [sp, #8]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	9201      	str	r2, [sp, #4]
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	4603      	mov	r3, r0
 8007c82:	2200      	movs	r2, #0
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f001 f847 	bl	8008d18 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007c8a:	e173      	b.n	8007f74 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c8c:	7bbb      	ldrb	r3, [r7, #14]
 8007c8e:	2b03      	cmp	r3, #3
 8007c90:	f040 8170 	bne.w	8007f74 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	d903      	bls.n	8007cb6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	220d      	movs	r2, #13
 8007cb2:	701a      	strb	r2, [r3, #0]
      break;
 8007cb4:	e15e      	b.n	8007f74 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	795b      	ldrb	r3, [r3, #5]
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f001 f87b 	bl	8008db8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	791b      	ldrb	r3, [r3, #4]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f001 f875 	bl	8008db8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	701a      	strb	r2, [r3, #0]
      break;
 8007cd4:	e14e      	b.n	8007f74 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007cd6:	2112      	movs	r1, #18
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f9ef 	bl	80080bc <USBH_Get_DevDesc>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ce2:	7bbb      	ldrb	r3, [r7, #14]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d103      	bne.n	8007cf0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2202      	movs	r2, #2
 8007cec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007cee:	e143      	b.n	8007f78 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	f040 8140 	bne.w	8007f78 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007cfe:	3301      	adds	r3, #1
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d903      	bls.n	8007d1a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	220d      	movs	r2, #13
 8007d16:	701a      	strb	r2, [r3, #0]
      break;
 8007d18:	e12e      	b.n	8007f78 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	795b      	ldrb	r3, [r3, #5]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f001 f849 	bl	8008db8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	791b      	ldrb	r3, [r3, #4]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 f843 	bl	8008db8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	701a      	strb	r2, [r3, #0]
      break;
 8007d3e:	e11b      	b.n	8007f78 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007d40:	2101      	movs	r1, #1
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa66 	bl	8008214 <USBH_SetAddress>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d130      	bne.n	8007db4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007d52:	2002      	movs	r0, #2
 8007d54:	f001 fb26 	bl	80093a4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2203      	movs	r2, #3
 8007d64:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	7919      	ldrb	r1, [r3, #4]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007d7a:	9202      	str	r2, [sp, #8]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	9201      	str	r2, [sp, #4]
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	4603      	mov	r3, r0
 8007d84:	2280      	movs	r2, #128	@ 0x80
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 ffc6 	bl	8008d18 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	7959      	ldrb	r1, [r3, #5]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007da0:	9202      	str	r2, [sp, #8]
 8007da2:	2200      	movs	r2, #0
 8007da4:	9201      	str	r2, [sp, #4]
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	4603      	mov	r3, r0
 8007daa:	2200      	movs	r2, #0
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 ffb3 	bl	8008d18 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007db2:	e0e3      	b.n	8007f7c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
 8007db6:	2b03      	cmp	r3, #3
 8007db8:	f040 80e0 	bne.w	8007f7c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	220d      	movs	r2, #13
 8007dc0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	705a      	strb	r2, [r3, #1]
      break;
 8007dc8:	e0d8      	b.n	8007f7c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007dca:	2109      	movs	r1, #9
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f99d 	bl	800810c <USBH_Get_CfgDesc>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007dd6:	7bbb      	ldrb	r3, [r7, #14]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d103      	bne.n	8007de4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2204      	movs	r2, #4
 8007de0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007de2:	e0cd      	b.n	8007f80 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007de4:	7bbb      	ldrb	r3, [r7, #14]
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	f040 80ca 	bne.w	8007f80 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007df2:	3301      	adds	r3, #1
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d903      	bls.n	8007e0e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	220d      	movs	r2, #13
 8007e0a:	701a      	strb	r2, [r3, #0]
      break;
 8007e0c:	e0b8      	b.n	8007f80 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	795b      	ldrb	r3, [r3, #5]
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 ffcf 	bl	8008db8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	791b      	ldrb	r3, [r3, #4]
 8007e1e:	4619      	mov	r1, r3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 ffc9 	bl	8008db8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	701a      	strb	r2, [r3, #0]
      break;
 8007e32:	e0a5      	b.n	8007f80 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f965 	bl	800810c <USBH_Get_CfgDesc>
 8007e42:	4603      	mov	r3, r0
 8007e44:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e46:	7bbb      	ldrb	r3, [r7, #14]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d103      	bne.n	8007e54 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2205      	movs	r2, #5
 8007e50:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e52:	e097      	b.n	8007f84 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e54:	7bbb      	ldrb	r3, [r7, #14]
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	f040 8094 	bne.w	8007f84 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007e62:	3301      	adds	r3, #1
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	d903      	bls.n	8007e7e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	220d      	movs	r2, #13
 8007e7a:	701a      	strb	r2, [r3, #0]
      break;
 8007e7c:	e082      	b.n	8007f84 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	795b      	ldrb	r3, [r3, #5]
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 ff97 	bl	8008db8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	791b      	ldrb	r3, [r3, #4]
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 ff91 	bl	8008db8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	701a      	strb	r2, [r3, #0]
      break;
 8007ea2:	e06f      	b.n	8007f84 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d019      	beq.n	8007ee2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007eba:	23ff      	movs	r3, #255	@ 0xff
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f949 	bl	8008154 <USBH_Get_StringDesc>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ec6:	7bbb      	ldrb	r3, [r7, #14]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d103      	bne.n	8007ed4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2206      	movs	r2, #6
 8007ed0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ed2:	e059      	b.n	8007f88 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ed4:	7bbb      	ldrb	r3, [r7, #14]
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d156      	bne.n	8007f88 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2206      	movs	r2, #6
 8007ede:	705a      	strb	r2, [r3, #1]
      break;
 8007ee0:	e052      	b.n	8007f88 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2206      	movs	r2, #6
 8007ee6:	705a      	strb	r2, [r3, #1]
      break;
 8007ee8:	e04e      	b.n	8007f88 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d019      	beq.n	8007f28 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007f00:	23ff      	movs	r3, #255	@ 0xff
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f926 	bl	8008154 <USBH_Get_StringDesc>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d103      	bne.n	8007f1a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2207      	movs	r2, #7
 8007f16:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007f18:	e038      	b.n	8007f8c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f1a:	7bbb      	ldrb	r3, [r7, #14]
 8007f1c:	2b03      	cmp	r3, #3
 8007f1e:	d135      	bne.n	8007f8c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2207      	movs	r2, #7
 8007f24:	705a      	strb	r2, [r3, #1]
      break;
 8007f26:	e031      	b.n	8007f8c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2207      	movs	r2, #7
 8007f2c:	705a      	strb	r2, [r3, #1]
      break;
 8007f2e:	e02d      	b.n	8007f8c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d017      	beq.n	8007f6a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007f46:	23ff      	movs	r3, #255	@ 0xff
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f903 	bl	8008154 <USBH_Get_StringDesc>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f52:	7bbb      	ldrb	r3, [r7, #14]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007f5c:	e018      	b.n	8007f90 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f5e:	7bbb      	ldrb	r3, [r7, #14]
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	d115      	bne.n	8007f90 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	73fb      	strb	r3, [r7, #15]
      break;
 8007f68:	e012      	b.n	8007f90 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f6e:	e00f      	b.n	8007f90 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007f70:	bf00      	nop
 8007f72:	e00e      	b.n	8007f92 <USBH_HandleEnum+0x3b6>
      break;
 8007f74:	bf00      	nop
 8007f76:	e00c      	b.n	8007f92 <USBH_HandleEnum+0x3b6>
      break;
 8007f78:	bf00      	nop
 8007f7a:	e00a      	b.n	8007f92 <USBH_HandleEnum+0x3b6>
      break;
 8007f7c:	bf00      	nop
 8007f7e:	e008      	b.n	8007f92 <USBH_HandleEnum+0x3b6>
      break;
 8007f80:	bf00      	nop
 8007f82:	e006      	b.n	8007f92 <USBH_HandleEnum+0x3b6>
      break;
 8007f84:	bf00      	nop
 8007f86:	e004      	b.n	8007f92 <USBH_HandleEnum+0x3b6>
      break;
 8007f88:	bf00      	nop
 8007f8a:	e002      	b.n	8007f92 <USBH_HandleEnum+0x3b6>
      break;
 8007f8c:	bf00      	nop
 8007f8e:	e000      	b.n	8007f92 <USBH_HandleEnum+0x3b6>
      break;
 8007f90:	bf00      	nop
  }
  return Status;
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b082      	sub	sp, #8
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007fc8:	1c5a      	adds	r2, r3, #1
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f804 	bl	8007fde <USBH_HandleSof>
}
 8007fd6:	bf00      	nop
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b0b      	cmp	r3, #11
 8007fee:	d10a      	bne.n	8008006 <USBH_HandleSof+0x28>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d005      	beq.n	8008006 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	4798      	blx	r3
  }
}
 8008006:	bf00      	nop
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800801e:	bf00      	nop
}
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800803a:	bf00      	nop
}
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008046:	b480      	push	{r7}
 8008048:	b083      	sub	sp, #12
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f001 f83c 	bl	8009112 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	791b      	ldrb	r3, [r3, #4]
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fe89 	bl	8008db8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	795b      	ldrb	r3, [r3, #5]
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fe83 	bl	8008db8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af02      	add	r7, sp, #8
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	460b      	mov	r3, r1
 80080c6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80080ce:	78fb      	ldrb	r3, [r7, #3]
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	4613      	mov	r3, r2
 80080d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80080da:	2100      	movs	r1, #0
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f864 	bl	80081aa <USBH_GetDescriptor>
 80080e2:	4603      	mov	r3, r0
 80080e4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10a      	bne.n	8008102 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f203 3026 	addw	r0, r3, #806	@ 0x326
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80080f8:	78fa      	ldrb	r2, [r7, #3]
 80080fa:	b292      	uxth	r2, r2
 80080fc:	4619      	mov	r1, r3
 80080fe:	f000 f919 	bl	8008334 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008102:	7bfb      	ldrb	r3, [r7, #15]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af02      	add	r7, sp, #8
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	331c      	adds	r3, #28
 800811c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800811e:	887b      	ldrh	r3, [r7, #2]
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008128:	2100      	movs	r1, #0
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f83d 	bl	80081aa <USBH_GetDescriptor>
 8008130:	4603      	mov	r3, r0
 8008132:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008134:	7bfb      	ldrb	r3, [r7, #15]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d107      	bne.n	800814a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800813a:	887b      	ldrh	r3, [r7, #2]
 800813c:	461a      	mov	r2, r3
 800813e:	68b9      	ldr	r1, [r7, #8]
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f985 	bl	8008450 <USBH_ParseCfgDesc>
 8008146:	4603      	mov	r3, r0
 8008148:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800814a:	7bfb      	ldrb	r3, [r7, #15]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b088      	sub	sp, #32
 8008158:	af02      	add	r7, sp, #8
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	607a      	str	r2, [r7, #4]
 800815e:	461a      	mov	r2, r3
 8008160:	460b      	mov	r3, r1
 8008162:	72fb      	strb	r3, [r7, #11]
 8008164:	4613      	mov	r3, r2
 8008166:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008168:	7afb      	ldrb	r3, [r7, #11]
 800816a:	b29b      	uxth	r3, r3
 800816c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008170:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008178:	893b      	ldrh	r3, [r7, #8]
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	460b      	mov	r3, r1
 800817e:	2100      	movs	r1, #0
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f000 f812 	bl	80081aa <USBH_GetDescriptor>
 8008186:	4603      	mov	r3, r0
 8008188:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800818a:	7dfb      	ldrb	r3, [r7, #23]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d107      	bne.n	80081a0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008196:	893a      	ldrh	r2, [r7, #8]
 8008198:	6879      	ldr	r1, [r7, #4]
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fb1e 	bl	80087dc <USBH_ParseStringDesc>
  }

  return status;
 80081a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3718      	adds	r7, #24
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b084      	sub	sp, #16
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	60f8      	str	r0, [r7, #12]
 80081b2:	607b      	str	r3, [r7, #4]
 80081b4:	460b      	mov	r3, r1
 80081b6:	72fb      	strb	r3, [r7, #11]
 80081b8:	4613      	mov	r3, r2
 80081ba:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	789b      	ldrb	r3, [r3, #2]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d11c      	bne.n	80081fe <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80081c4:	7afb      	ldrb	r3, [r7, #11]
 80081c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2206      	movs	r2, #6
 80081d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	893a      	ldrh	r2, [r7, #8]
 80081da:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80081dc:	893b      	ldrh	r3, [r7, #8]
 80081de:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80081e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081e6:	d104      	bne.n	80081f2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f240 4209 	movw	r2, #1033	@ 0x409
 80081ee:	829a      	strh	r2, [r3, #20]
 80081f0:	e002      	b.n	80081f8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	8b3a      	ldrh	r2, [r7, #24]
 80081fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80081fe:	8b3b      	ldrh	r3, [r7, #24]
 8008200:	461a      	mov	r2, r3
 8008202:	6879      	ldr	r1, [r7, #4]
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 fb36 	bl	8008876 <USBH_CtlReq>
 800820a:	4603      	mov	r3, r0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	789b      	ldrb	r3, [r3, #2]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d10f      	bne.n	8008248 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2205      	movs	r2, #5
 8008232:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008234:	78fb      	ldrb	r3, [r7, #3]
 8008236:	b29a      	uxth	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008248:	2200      	movs	r2, #0
 800824a:	2100      	movs	r1, #0
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fb12 	bl	8008876 <USBH_CtlReq>
 8008252:	4603      	mov	r3, r0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	460b      	mov	r3, r1
 8008266:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	789b      	ldrb	r3, [r3, #2]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d10e      	bne.n	800828e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2209      	movs	r2, #9
 800827a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	887a      	ldrh	r2, [r7, #2]
 8008280:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800828e:	2200      	movs	r2, #0
 8008290:	2100      	movs	r1, #0
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 faef 	bl	8008876 <USBH_CtlReq>
 8008298:	4603      	mov	r3, r0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b082      	sub	sp, #8
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	460b      	mov	r3, r1
 80082ac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	789b      	ldrb	r3, [r3, #2]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d10f      	bne.n	80082d6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2203      	movs	r2, #3
 80082c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80082c2:	78fb      	ldrb	r3, [r7, #3]
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80082d6:	2200      	movs	r2, #0
 80082d8:	2100      	movs	r1, #0
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 facb 	bl	8008876 <USBH_CtlReq>
 80082e0:	4603      	mov	r3, r0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b082      	sub	sp, #8
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	460b      	mov	r3, r1
 80082f4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	789b      	ldrb	r3, [r3, #2]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d10f      	bne.n	800831e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2202      	movs	r2, #2
 8008302:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	b29a      	uxth	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800831e:	2200      	movs	r2, #0
 8008320:	2100      	movs	r1, #0
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 faa7 	bl	8008876 <USBH_CtlReq>
 8008328:	4603      	mov	r3, r0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
	...

08008334 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	4613      	mov	r3, r2
 8008340:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	781a      	ldrb	r2, [r3, #0]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	785a      	ldrb	r2, [r3, #1]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	3302      	adds	r3, #2
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	461a      	mov	r2, r3
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	3303      	adds	r3, #3
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	021b      	lsls	r3, r3, #8
 8008362:	b29b      	uxth	r3, r3
 8008364:	4313      	orrs	r3, r2
 8008366:	b29a      	uxth	r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	791a      	ldrb	r2, [r3, #4]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	795a      	ldrb	r2, [r3, #5]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	799a      	ldrb	r2, [r3, #6]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	79da      	ldrb	r2, [r3, #7]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	79db      	ldrb	r3, [r3, #7]
 8008390:	2b20      	cmp	r3, #32
 8008392:	dc0f      	bgt.n	80083b4 <USBH_ParseDevDesc+0x80>
 8008394:	2b08      	cmp	r3, #8
 8008396:	db14      	blt.n	80083c2 <USBH_ParseDevDesc+0x8e>
 8008398:	3b08      	subs	r3, #8
 800839a:	4a2c      	ldr	r2, [pc, #176]	@ (800844c <USBH_ParseDevDesc+0x118>)
 800839c:	fa22 f303 	lsr.w	r3, r2, r3
 80083a0:	f003 0301 	and.w	r3, r3, #1
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	bf14      	ite	ne
 80083a8:	2301      	movne	r3, #1
 80083aa:	2300      	moveq	r3, #0
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d102      	bne.n	80083b8 <USBH_ParseDevDesc+0x84>
 80083b2:	e006      	b.n	80083c2 <USBH_ParseDevDesc+0x8e>
 80083b4:	2b40      	cmp	r3, #64	@ 0x40
 80083b6:	d104      	bne.n	80083c2 <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	79da      	ldrb	r2, [r3, #7]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	71da      	strb	r2, [r3, #7]
      break;
 80083c0:	e003      	b.n	80083ca <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2240      	movs	r2, #64	@ 0x40
 80083c6:	71da      	strb	r2, [r3, #7]
      break;
 80083c8:	bf00      	nop
  }

  if (length > 8U)
 80083ca:	88fb      	ldrh	r3, [r7, #6]
 80083cc:	2b08      	cmp	r3, #8
 80083ce:	d936      	bls.n	800843e <USBH_ParseDevDesc+0x10a>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	3308      	adds	r3, #8
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	3309      	adds	r3, #9
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	021b      	lsls	r3, r3, #8
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	4313      	orrs	r3, r2
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	330a      	adds	r3, #10
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	461a      	mov	r2, r3
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	330b      	adds	r3, #11
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	021b      	lsls	r3, r3, #8
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	4313      	orrs	r3, r2
 80083fe:	b29a      	uxth	r2, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	330c      	adds	r3, #12
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	330d      	adds	r3, #13
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	021b      	lsls	r3, r3, #8
 8008414:	b29b      	uxth	r3, r3
 8008416:	4313      	orrs	r3, r2
 8008418:	b29a      	uxth	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	7b9a      	ldrb	r2, [r3, #14]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	7bda      	ldrb	r2, [r3, #15]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	7c1a      	ldrb	r2, [r3, #16]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	7c5a      	ldrb	r2, [r3, #17]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	745a      	strb	r2, [r3, #17]
  }
}
 800843e:	bf00      	nop
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	01000101 	.word	0x01000101

08008450 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b08c      	sub	sp, #48	@ 0x30
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	4613      	mov	r3, r2
 800845c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008464:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008470:	2300      	movs	r3, #0
 8008472:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008476:	2300      	movs	r3, #0
 8008478:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	781a      	ldrb	r2, [r3, #0]
 8008484:	6a3b      	ldr	r3, [r7, #32]
 8008486:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	785a      	ldrb	r2, [r3, #1]
 800848c:	6a3b      	ldr	r3, [r7, #32]
 800848e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	3302      	adds	r3, #2
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	3303      	adds	r3, #3
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	021b      	lsls	r3, r3, #8
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	4313      	orrs	r3, r2
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084aa:	bf28      	it	cs
 80084ac:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	6a3b      	ldr	r3, [r7, #32]
 80084b4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	791a      	ldrb	r2, [r3, #4]
 80084ba:	6a3b      	ldr	r3, [r7, #32]
 80084bc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	795a      	ldrb	r2, [r3, #5]
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	799a      	ldrb	r2, [r3, #6]
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	79da      	ldrb	r2, [r3, #7]
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	7a1a      	ldrb	r2, [r3, #8]
 80084da:	6a3b      	ldr	r3, [r7, #32]
 80084dc:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80084de:	6a3b      	ldr	r3, [r7, #32]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	2b09      	cmp	r3, #9
 80084e4:	d002      	beq.n	80084ec <USBH_ParseCfgDesc+0x9c>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	2209      	movs	r2, #9
 80084ea:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80084ec:	88fb      	ldrh	r3, [r7, #6]
 80084ee:	2b09      	cmp	r3, #9
 80084f0:	f240 809d 	bls.w	800862e <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 80084f4:	2309      	movs	r3, #9
 80084f6:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80084f8:	2300      	movs	r3, #0
 80084fa:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80084fc:	e081      	b.n	8008602 <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80084fe:	f107 0316 	add.w	r3, r7, #22
 8008502:	4619      	mov	r1, r3
 8008504:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008506:	f000 f99c 	bl	8008842 <USBH_GetNextDesc>
 800850a:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800850c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800850e:	785b      	ldrb	r3, [r3, #1]
 8008510:	2b04      	cmp	r3, #4
 8008512:	d176      	bne.n	8008602 <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	2b09      	cmp	r3, #9
 800851a:	d002      	beq.n	8008522 <USBH_ParseCfgDesc+0xd2>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800851c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800851e:	2209      	movs	r2, #9
 8008520:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008522:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008526:	221a      	movs	r2, #26
 8008528:	fb02 f303 	mul.w	r3, r2, r3
 800852c:	3308      	adds	r3, #8
 800852e:	6a3a      	ldr	r2, [r7, #32]
 8008530:	4413      	add	r3, r2
 8008532:	3302      	adds	r3, #2
 8008534:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008536:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008538:	69f8      	ldr	r0, [r7, #28]
 800853a:	f000 f87e 	bl	800863a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800853e:	2300      	movs	r3, #0
 8008540:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008544:	2300      	movs	r3, #0
 8008546:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008548:	e043      	b.n	80085d2 <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800854a:	f107 0316 	add.w	r3, r7, #22
 800854e:	4619      	mov	r1, r3
 8008550:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008552:	f000 f976 	bl	8008842 <USBH_GetNextDesc>
 8008556:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855a:	785b      	ldrb	r3, [r3, #1]
 800855c:	2b05      	cmp	r3, #5
 800855e:	d138      	bne.n	80085d2 <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	795b      	ldrb	r3, [r3, #5]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d10f      	bne.n	8008588 <USBH_ParseCfgDesc+0x138>
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	799b      	ldrb	r3, [r3, #6]
 800856c:	2b02      	cmp	r3, #2
 800856e:	d10b      	bne.n	8008588 <USBH_ParseCfgDesc+0x138>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	79db      	ldrb	r3, [r3, #7]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10f      	bne.n	8008598 <USBH_ParseCfgDesc+0x148>
 8008578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	2b09      	cmp	r3, #9
 800857e:	d00b      	beq.n	8008598 <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 8008580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008582:	2209      	movs	r2, #9
 8008584:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008586:	e007      	b.n	8008598 <USBH_ParseCfgDesc+0x148>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	2b07      	cmp	r3, #7
 800858e:	d004      	beq.n	800859a <USBH_ParseCfgDesc+0x14a>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008592:	2207      	movs	r2, #7
 8008594:	701a      	strb	r2, [r3, #0]
 8008596:	e000      	b.n	800859a <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008598:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800859a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800859e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80085a2:	3201      	adds	r2, #1
 80085a4:	00d2      	lsls	r2, r2, #3
 80085a6:	211a      	movs	r1, #26
 80085a8:	fb01 f303 	mul.w	r3, r1, r3
 80085ac:	4413      	add	r3, r2
 80085ae:	3308      	adds	r3, #8
 80085b0:	6a3a      	ldr	r2, [r7, #32]
 80085b2:	4413      	add	r3, r2
 80085b4:	3304      	adds	r3, #4
 80085b6:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80085b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085ba:	69b9      	ldr	r1, [r7, #24]
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f000 f86b 	bl	8008698 <USBH_ParseEPDesc>
 80085c2:	4603      	mov	r3, r0
 80085c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80085c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80085cc:	3301      	adds	r3, #1
 80085ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	791b      	ldrb	r3, [r3, #4]
 80085d6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80085da:	429a      	cmp	r2, r3
 80085dc:	d204      	bcs.n	80085e8 <USBH_ParseCfgDesc+0x198>
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	885a      	ldrh	r2, [r3, #2]
 80085e2:	8afb      	ldrh	r3, [r7, #22]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d8b0      	bhi.n	800854a <USBH_ParseCfgDesc+0xfa>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	791b      	ldrb	r3, [r3, #4]
 80085ec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d201      	bcs.n	80085f8 <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 80085f4:	2303      	movs	r3, #3
 80085f6:	e01c      	b.n	8008632 <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 80085f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085fc:	3301      	adds	r3, #1
 80085fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008602:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008606:	2b01      	cmp	r3, #1
 8008608:	d805      	bhi.n	8008616 <USBH_ParseCfgDesc+0x1c6>
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	885a      	ldrh	r2, [r3, #2]
 800860e:	8afb      	ldrh	r3, [r7, #22]
 8008610:	429a      	cmp	r2, r3
 8008612:	f63f af74 	bhi.w	80084fe <USBH_ParseCfgDesc+0xae>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	791b      	ldrb	r3, [r3, #4]
 800861a:	2b02      	cmp	r3, #2
 800861c:	bf28      	it	cs
 800861e:	2302      	movcs	r3, #2
 8008620:	b2db      	uxtb	r3, r3
 8008622:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008626:	429a      	cmp	r2, r3
 8008628:	d201      	bcs.n	800862e <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 800862a:	2303      	movs	r3, #3
 800862c:	e001      	b.n	8008632 <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 800862e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008632:	4618      	mov	r0, r3
 8008634:	3730      	adds	r7, #48	@ 0x30
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800863a:	b480      	push	{r7}
 800863c:	b083      	sub	sp, #12
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	781a      	ldrb	r2, [r3, #0]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	785a      	ldrb	r2, [r3, #1]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	789a      	ldrb	r2, [r3, #2]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	78da      	ldrb	r2, [r3, #3]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	791a      	ldrb	r2, [r3, #4]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	795a      	ldrb	r2, [r3, #5]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	799a      	ldrb	r2, [r3, #6]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	79da      	ldrb	r2, [r3, #7]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	7a1a      	ldrb	r2, [r3, #8]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	721a      	strb	r2, [r3, #8]
}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008698:	b480      	push	{r7}
 800869a:	b087      	sub	sp, #28
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80086a4:	2300      	movs	r3, #0
 80086a6:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	781a      	ldrb	r2, [r3, #0]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	785a      	ldrb	r2, [r3, #1]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	789a      	ldrb	r2, [r3, #2]
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	78da      	ldrb	r2, [r3, #3]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	3304      	adds	r3, #4
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	461a      	mov	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3305      	adds	r3, #5
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	021b      	lsls	r3, r3, #8
 80086d8:	b29b      	uxth	r3, r3
 80086da:	4313      	orrs	r3, r2
 80086dc:	b29a      	uxth	r2, r3
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	799a      	ldrb	r2, [r3, #6]
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	889b      	ldrh	r3, [r3, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d102      	bne.n	80086f8 <USBH_ParseEPDesc+0x60>
  {
    status = USBH_NOT_SUPPORTED;
 80086f2:	2303      	movs	r3, #3
 80086f4:	75fb      	strb	r3, [r7, #23]
 80086f6:	e031      	b.n	800875c <USBH_ParseEPDesc+0xc4>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	889b      	ldrh	r3, [r3, #4]
 80086fc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008700:	f023 0307 	bic.w	r3, r3, #7
 8008704:	b29a      	uxth	r2, r3
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	889b      	ldrh	r3, [r3, #4]
 800870e:	b21a      	sxth	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3304      	adds	r3, #4
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	4619      	mov	r1, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3305      	adds	r3, #5
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	021b      	lsls	r3, r3, #8
 8008720:	b29b      	uxth	r3, r3
 8008722:	430b      	orrs	r3, r1
 8008724:	b29b      	uxth	r3, r3
 8008726:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10f      	bne.n	800874e <USBH_ParseEPDesc+0xb6>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	3304      	adds	r3, #4
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	4619      	mov	r1, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	3305      	adds	r3, #5
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	021b      	lsls	r3, r3, #8
 800873e:	b29b      	uxth	r3, r3
 8008740:	430b      	orrs	r3, r1
 8008742:	b29b      	uxth	r3, r3
 8008744:	b21b      	sxth	r3, r3
 8008746:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800874a:	b21b      	sxth	r3, r3
 800874c:	e001      	b.n	8008752 <USBH_ParseEPDesc+0xba>
 800874e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008752:	4313      	orrs	r3, r2
 8008754:	b21b      	sxth	r3, r3
 8008756:	b29a      	uxth	r2, r3
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008762:	2b00      	cmp	r3, #0
 8008764:	d116      	bne.n	8008794 <USBH_ParseEPDesc+0xfc>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	78db      	ldrb	r3, [r3, #3]
 800876a:	f003 0303 	and.w	r3, r3, #3
 800876e:	2b01      	cmp	r3, #1
 8008770:	d005      	beq.n	800877e <USBH_ParseEPDesc+0xe6>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	78db      	ldrb	r3, [r3, #3]
 8008776:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800877a:	2b03      	cmp	r3, #3
 800877c:	d127      	bne.n	80087ce <USBH_ParseEPDesc+0x136>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	799b      	ldrb	r3, [r3, #6]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <USBH_ParseEPDesc+0xf6>
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	799b      	ldrb	r3, [r3, #6]
 800878a:	2b10      	cmp	r3, #16
 800878c:	d91f      	bls.n	80087ce <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 800878e:	2303      	movs	r3, #3
 8008790:	75fb      	strb	r3, [r7, #23]
 8008792:	e01c      	b.n	80087ce <USBH_ParseEPDesc+0x136>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	78db      	ldrb	r3, [r3, #3]
 8008798:	f003 0303 	and.w	r3, r3, #3
 800879c:	2b01      	cmp	r3, #1
 800879e:	d10a      	bne.n	80087b6 <USBH_ParseEPDesc+0x11e>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	799b      	ldrb	r3, [r3, #6]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d003      	beq.n	80087b0 <USBH_ParseEPDesc+0x118>
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	799b      	ldrb	r3, [r3, #6]
 80087ac:	2b10      	cmp	r3, #16
 80087ae:	d90e      	bls.n	80087ce <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 80087b0:	2303      	movs	r3, #3
 80087b2:	75fb      	strb	r3, [r7, #23]
 80087b4:	e00b      	b.n	80087ce <USBH_ParseEPDesc+0x136>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	78db      	ldrb	r3, [r3, #3]
 80087ba:	f003 0303 	and.w	r3, r3, #3
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d105      	bne.n	80087ce <USBH_ParseEPDesc+0x136>
    {
      if (ep_descriptor->bInterval == 0U)
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	799b      	ldrb	r3, [r3, #6]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d101      	bne.n	80087ce <USBH_ParseEPDesc+0x136>
      {
        status = USBH_NOT_SUPPORTED;
 80087ca:	2303      	movs	r3, #3
 80087cc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80087ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	371c      	adds	r7, #28
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	4613      	mov	r3, r2
 80087e8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3301      	adds	r3, #1
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	2b03      	cmp	r3, #3
 80087f2:	d120      	bne.n	8008836 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	1e9a      	subs	r2, r3, #2
 80087fa:	88fb      	ldrh	r3, [r7, #6]
 80087fc:	4293      	cmp	r3, r2
 80087fe:	bf28      	it	cs
 8008800:	4613      	movcs	r3, r2
 8008802:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	3302      	adds	r3, #2
 8008808:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800880a:	2300      	movs	r3, #0
 800880c:	82fb      	strh	r3, [r7, #22]
 800880e:	e00b      	b.n	8008828 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008810:	8afb      	ldrh	r3, [r7, #22]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	4413      	add	r3, r2
 8008816:	781a      	ldrb	r2, [r3, #0]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	3301      	adds	r3, #1
 8008820:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008822:	8afb      	ldrh	r3, [r7, #22]
 8008824:	3302      	adds	r3, #2
 8008826:	82fb      	strh	r3, [r7, #22]
 8008828:	8afa      	ldrh	r2, [r7, #22]
 800882a:	8abb      	ldrh	r3, [r7, #20]
 800882c:	429a      	cmp	r2, r3
 800882e:	d3ef      	bcc.n	8008810 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2200      	movs	r2, #0
 8008834:	701a      	strb	r2, [r3, #0]
  }
}
 8008836:	bf00      	nop
 8008838:	371c      	adds	r7, #28
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008842:	b480      	push	{r7}
 8008844:	b085      	sub	sp, #20
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	7812      	ldrb	r2, [r2, #0]
 8008854:	4413      	add	r3, r2
 8008856:	b29a      	uxth	r2, r3
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4413      	add	r3, r2
 8008866:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008868:	68fb      	ldr	r3, [r7, #12]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3714      	adds	r7, #20
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b086      	sub	sp, #24
 800887a:	af00      	add	r7, sp, #0
 800887c:	60f8      	str	r0, [r7, #12]
 800887e:	60b9      	str	r1, [r7, #8]
 8008880:	4613      	mov	r3, r2
 8008882:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008884:	2301      	movs	r3, #1
 8008886:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	789b      	ldrb	r3, [r3, #2]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d002      	beq.n	8008896 <USBH_CtlReq+0x20>
 8008890:	2b02      	cmp	r3, #2
 8008892:	d00f      	beq.n	80088b4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008894:	e027      	b.n	80088e6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	88fa      	ldrh	r2, [r7, #6]
 80088a0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2201      	movs	r2, #1
 80088a6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2202      	movs	r2, #2
 80088ac:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80088ae:	2301      	movs	r3, #1
 80088b0:	75fb      	strb	r3, [r7, #23]
      break;
 80088b2:	e018      	b.n	80088e6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 f81b 	bl	80088f0 <USBH_HandleControl>
 80088ba:	4603      	mov	r3, r0
 80088bc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d002      	beq.n	80088ca <USBH_CtlReq+0x54>
 80088c4:	7dfb      	ldrb	r3, [r7, #23]
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d106      	bne.n	80088d8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2201      	movs	r2, #1
 80088ce:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	761a      	strb	r2, [r3, #24]
      break;
 80088d6:	e005      	b.n	80088e4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80088d8:	7dfb      	ldrb	r3, [r7, #23]
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d102      	bne.n	80088e4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2201      	movs	r2, #1
 80088e2:	709a      	strb	r2, [r3, #2]
      break;
 80088e4:	bf00      	nop
  }
  return status;
 80088e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3718      	adds	r7, #24
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af02      	add	r7, sp, #8
 80088f6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80088f8:	2301      	movs	r3, #1
 80088fa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80088fc:	2300      	movs	r3, #0
 80088fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	7e1b      	ldrb	r3, [r3, #24]
 8008904:	3b01      	subs	r3, #1
 8008906:	2b0a      	cmp	r3, #10
 8008908:	f200 8156 	bhi.w	8008bb8 <USBH_HandleControl+0x2c8>
 800890c:	a201      	add	r2, pc, #4	@ (adr r2, 8008914 <USBH_HandleControl+0x24>)
 800890e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008912:	bf00      	nop
 8008914:	08008941 	.word	0x08008941
 8008918:	0800895b 	.word	0x0800895b
 800891c:	080089c5 	.word	0x080089c5
 8008920:	080089eb 	.word	0x080089eb
 8008924:	08008a23 	.word	0x08008a23
 8008928:	08008a4d 	.word	0x08008a4d
 800892c:	08008a9f 	.word	0x08008a9f
 8008930:	08008ac1 	.word	0x08008ac1
 8008934:	08008afd 	.word	0x08008afd
 8008938:	08008b23 	.word	0x08008b23
 800893c:	08008b61 	.word	0x08008b61
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f103 0110 	add.w	r1, r3, #16
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	795b      	ldrb	r3, [r3, #5]
 800894a:	461a      	mov	r2, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f943 	bl	8008bd8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2202      	movs	r2, #2
 8008956:	761a      	strb	r2, [r3, #24]
      break;
 8008958:	e139      	b.n	8008bce <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	795b      	ldrb	r3, [r3, #5]
 800895e:	4619      	mov	r1, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fcc5 	bl	80092f0 <USBH_LL_GetURBState>
 8008966:	4603      	mov	r3, r0
 8008968:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800896a:	7bbb      	ldrb	r3, [r7, #14]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d11e      	bne.n	80089ae <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	7c1b      	ldrb	r3, [r3, #16]
 8008974:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008978:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	8adb      	ldrh	r3, [r3, #22]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00a      	beq.n	8008998 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008982:	7b7b      	ldrb	r3, [r7, #13]
 8008984:	2b80      	cmp	r3, #128	@ 0x80
 8008986:	d103      	bne.n	8008990 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2203      	movs	r2, #3
 800898c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800898e:	e115      	b.n	8008bbc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2205      	movs	r2, #5
 8008994:	761a      	strb	r2, [r3, #24]
      break;
 8008996:	e111      	b.n	8008bbc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008998:	7b7b      	ldrb	r3, [r7, #13]
 800899a:	2b80      	cmp	r3, #128	@ 0x80
 800899c:	d103      	bne.n	80089a6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2209      	movs	r2, #9
 80089a2:	761a      	strb	r2, [r3, #24]
      break;
 80089a4:	e10a      	b.n	8008bbc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2207      	movs	r2, #7
 80089aa:	761a      	strb	r2, [r3, #24]
      break;
 80089ac:	e106      	b.n	8008bbc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	2b04      	cmp	r3, #4
 80089b2:	d003      	beq.n	80089bc <USBH_HandleControl+0xcc>
 80089b4:	7bbb      	ldrb	r3, [r7, #14]
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	f040 8100 	bne.w	8008bbc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	220b      	movs	r2, #11
 80089c0:	761a      	strb	r2, [r3, #24]
      break;
 80089c2:	e0fb      	b.n	8008bbc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6899      	ldr	r1, [r3, #8]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	899a      	ldrh	r2, [r3, #12]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	791b      	ldrb	r3, [r3, #4]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f93a 	bl	8008c56 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2204      	movs	r2, #4
 80089e6:	761a      	strb	r2, [r3, #24]
      break;
 80089e8:	e0f1      	b.n	8008bce <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	791b      	ldrb	r3, [r3, #4]
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fc7d 	bl	80092f0 <USBH_LL_GetURBState>
 80089f6:	4603      	mov	r3, r0
 80089f8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80089fa:	7bbb      	ldrb	r3, [r7, #14]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d102      	bne.n	8008a06 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2209      	movs	r2, #9
 8008a04:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	2b05      	cmp	r3, #5
 8008a0a:	d102      	bne.n	8008a12 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a10:	e0d6      	b.n	8008bc0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008a12:	7bbb      	ldrb	r3, [r7, #14]
 8008a14:	2b04      	cmp	r3, #4
 8008a16:	f040 80d3 	bne.w	8008bc0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	220b      	movs	r2, #11
 8008a1e:	761a      	strb	r2, [r3, #24]
      break;
 8008a20:	e0ce      	b.n	8008bc0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6899      	ldr	r1, [r3, #8]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	899a      	ldrh	r2, [r3, #12]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	795b      	ldrb	r3, [r3, #5]
 8008a2e:	2001      	movs	r0, #1
 8008a30:	9000      	str	r0, [sp, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f8ea 	bl	8008c0c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2206      	movs	r2, #6
 8008a48:	761a      	strb	r2, [r3, #24]
      break;
 8008a4a:	e0c0      	b.n	8008bce <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	795b      	ldrb	r3, [r3, #5]
 8008a50:	4619      	mov	r1, r3
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fc4c 	bl	80092f0 <USBH_LL_GetURBState>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d103      	bne.n	8008a6a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2207      	movs	r2, #7
 8008a66:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a68:	e0ac      	b.n	8008bc4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008a6a:	7bbb      	ldrb	r3, [r7, #14]
 8008a6c:	2b05      	cmp	r3, #5
 8008a6e:	d105      	bne.n	8008a7c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	220c      	movs	r2, #12
 8008a74:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008a76:	2303      	movs	r3, #3
 8008a78:	73fb      	strb	r3, [r7, #15]
      break;
 8008a7a:	e0a3      	b.n	8008bc4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008a7c:	7bbb      	ldrb	r3, [r7, #14]
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d103      	bne.n	8008a8a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2205      	movs	r2, #5
 8008a86:	761a      	strb	r2, [r3, #24]
      break;
 8008a88:	e09c      	b.n	8008bc4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008a8a:	7bbb      	ldrb	r3, [r7, #14]
 8008a8c:	2b04      	cmp	r3, #4
 8008a8e:	f040 8099 	bne.w	8008bc4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	220b      	movs	r2, #11
 8008a96:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008a98:	2302      	movs	r3, #2
 8008a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a9c:	e092      	b.n	8008bc4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	791b      	ldrb	r3, [r3, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f8d5 	bl	8008c56 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2208      	movs	r2, #8
 8008abc:	761a      	strb	r2, [r3, #24]

      break;
 8008abe:	e086      	b.n	8008bce <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	791b      	ldrb	r3, [r3, #4]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fc12 	bl	80092f0 <USBH_LL_GetURBState>
 8008acc:	4603      	mov	r3, r0
 8008ace:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d105      	bne.n	8008ae2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	220d      	movs	r2, #13
 8008ada:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ae0:	e072      	b.n	8008bc8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008ae2:	7bbb      	ldrb	r3, [r7, #14]
 8008ae4:	2b04      	cmp	r3, #4
 8008ae6:	d103      	bne.n	8008af0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	220b      	movs	r2, #11
 8008aec:	761a      	strb	r2, [r3, #24]
      break;
 8008aee:	e06b      	b.n	8008bc8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008af0:	7bbb      	ldrb	r3, [r7, #14]
 8008af2:	2b05      	cmp	r3, #5
 8008af4:	d168      	bne.n	8008bc8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008af6:	2303      	movs	r3, #3
 8008af8:	73fb      	strb	r3, [r7, #15]
      break;
 8008afa:	e065      	b.n	8008bc8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	795b      	ldrb	r3, [r3, #5]
 8008b00:	2201      	movs	r2, #1
 8008b02:	9200      	str	r2, [sp, #0]
 8008b04:	2200      	movs	r2, #0
 8008b06:	2100      	movs	r1, #0
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f87f 	bl	8008c0c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	220a      	movs	r2, #10
 8008b1e:	761a      	strb	r2, [r3, #24]
      break;
 8008b20:	e055      	b.n	8008bce <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	795b      	ldrb	r3, [r3, #5]
 8008b26:	4619      	mov	r1, r3
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fbe1 	bl	80092f0 <USBH_LL_GetURBState>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008b32:	7bbb      	ldrb	r3, [r7, #14]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d105      	bne.n	8008b44 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	220d      	movs	r2, #13
 8008b40:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b42:	e043      	b.n	8008bcc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d103      	bne.n	8008b52 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2209      	movs	r2, #9
 8008b4e:	761a      	strb	r2, [r3, #24]
      break;
 8008b50:	e03c      	b.n	8008bcc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
 8008b54:	2b04      	cmp	r3, #4
 8008b56:	d139      	bne.n	8008bcc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	220b      	movs	r2, #11
 8008b5c:	761a      	strb	r2, [r3, #24]
      break;
 8008b5e:	e035      	b.n	8008bcc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	7e5b      	ldrb	r3, [r3, #25]
 8008b64:	3301      	adds	r3, #1
 8008b66:	b2da      	uxtb	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	765a      	strb	r2, [r3, #25]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	7e5b      	ldrb	r3, [r3, #25]
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d806      	bhi.n	8008b82 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008b80:	e025      	b.n	8008bce <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b88:	2106      	movs	r1, #6
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	795b      	ldrb	r3, [r3, #5]
 8008b98:	4619      	mov	r1, r3
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f90c 	bl	8008db8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	791b      	ldrb	r3, [r3, #4]
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f906 	bl	8008db8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008bb2:	2302      	movs	r3, #2
 8008bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8008bb6:	e00a      	b.n	8008bce <USBH_HandleControl+0x2de>

    default:
      break;
 8008bb8:	bf00      	nop
 8008bba:	e008      	b.n	8008bce <USBH_HandleControl+0x2de>
      break;
 8008bbc:	bf00      	nop
 8008bbe:	e006      	b.n	8008bce <USBH_HandleControl+0x2de>
      break;
 8008bc0:	bf00      	nop
 8008bc2:	e004      	b.n	8008bce <USBH_HandleControl+0x2de>
      break;
 8008bc4:	bf00      	nop
 8008bc6:	e002      	b.n	8008bce <USBH_HandleControl+0x2de>
      break;
 8008bc8:	bf00      	nop
 8008bca:	e000      	b.n	8008bce <USBH_HandleControl+0x2de>
      break;
 8008bcc:	bf00      	nop
  }

  return status;
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b088      	sub	sp, #32
 8008bdc:	af04      	add	r7, sp, #16
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	4613      	mov	r3, r2
 8008be4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008be6:	79f9      	ldrb	r1, [r7, #7]
 8008be8:	2300      	movs	r3, #0
 8008bea:	9303      	str	r3, [sp, #12]
 8008bec:	2308      	movs	r3, #8
 8008bee:	9302      	str	r3, [sp, #8]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	9301      	str	r3, [sp, #4]
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 fb46 	bl	800928e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b088      	sub	sp, #32
 8008c10:	af04      	add	r7, sp, #16
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	4611      	mov	r1, r2
 8008c18:	461a      	mov	r2, r3
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	80fb      	strh	r3, [r7, #6]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d001      	beq.n	8008c30 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c30:	7979      	ldrb	r1, [r7, #5]
 8008c32:	7e3b      	ldrb	r3, [r7, #24]
 8008c34:	9303      	str	r3, [sp, #12]
 8008c36:	88fb      	ldrh	r3, [r7, #6]
 8008c38:	9302      	str	r3, [sp, #8]
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	9301      	str	r3, [sp, #4]
 8008c3e:	2301      	movs	r3, #1
 8008c40:	9300      	str	r3, [sp, #0]
 8008c42:	2300      	movs	r3, #0
 8008c44:	2200      	movs	r2, #0
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f000 fb21 	bl	800928e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b088      	sub	sp, #32
 8008c5a:	af04      	add	r7, sp, #16
 8008c5c:	60f8      	str	r0, [r7, #12]
 8008c5e:	60b9      	str	r1, [r7, #8]
 8008c60:	4611      	mov	r1, r2
 8008c62:	461a      	mov	r2, r3
 8008c64:	460b      	mov	r3, r1
 8008c66:	80fb      	strh	r3, [r7, #6]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c6c:	7979      	ldrb	r1, [r7, #5]
 8008c6e:	2300      	movs	r3, #0
 8008c70:	9303      	str	r3, [sp, #12]
 8008c72:	88fb      	ldrh	r3, [r7, #6]
 8008c74:	9302      	str	r3, [sp, #8]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	9301      	str	r3, [sp, #4]
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	2201      	movs	r2, #1
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f000 fb03 	bl	800928e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008c88:	2300      	movs	r3, #0

}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b088      	sub	sp, #32
 8008c96:	af04      	add	r7, sp, #16
 8008c98:	60f8      	str	r0, [r7, #12]
 8008c9a:	60b9      	str	r1, [r7, #8]
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	80fb      	strh	r3, [r7, #6]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008cb6:	7979      	ldrb	r1, [r7, #5]
 8008cb8:	7e3b      	ldrb	r3, [r7, #24]
 8008cba:	9303      	str	r3, [sp, #12]
 8008cbc:	88fb      	ldrh	r3, [r7, #6]
 8008cbe:	9302      	str	r3, [sp, #8]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	9301      	str	r3, [sp, #4]
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	2302      	movs	r3, #2
 8008cca:	2200      	movs	r2, #0
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 fade 	bl	800928e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b088      	sub	sp, #32
 8008ce0:	af04      	add	r7, sp, #16
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	461a      	mov	r2, r3
 8008cea:	460b      	mov	r3, r1
 8008cec:	80fb      	strh	r3, [r7, #6]
 8008cee:	4613      	mov	r3, r2
 8008cf0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008cf2:	7979      	ldrb	r1, [r7, #5]
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	9303      	str	r3, [sp, #12]
 8008cf8:	88fb      	ldrh	r3, [r7, #6]
 8008cfa:	9302      	str	r3, [sp, #8]
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	9301      	str	r3, [sp, #4]
 8008d00:	2301      	movs	r3, #1
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	2302      	movs	r3, #2
 8008d06:	2201      	movs	r2, #1
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 fac0 	bl	800928e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b086      	sub	sp, #24
 8008d1c:	af04      	add	r7, sp, #16
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	4608      	mov	r0, r1
 8008d22:	4611      	mov	r1, r2
 8008d24:	461a      	mov	r2, r3
 8008d26:	4603      	mov	r3, r0
 8008d28:	70fb      	strb	r3, [r7, #3]
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	70bb      	strb	r3, [r7, #2]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008d32:	7878      	ldrb	r0, [r7, #1]
 8008d34:	78ba      	ldrb	r2, [r7, #2]
 8008d36:	78f9      	ldrb	r1, [r7, #3]
 8008d38:	8b3b      	ldrh	r3, [r7, #24]
 8008d3a:	9302      	str	r3, [sp, #8]
 8008d3c:	7d3b      	ldrb	r3, [r7, #20]
 8008d3e:	9301      	str	r3, [sp, #4]
 8008d40:	7c3b      	ldrb	r3, [r7, #16]
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	4603      	mov	r3, r0
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fa53 	bl	80091f2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b082      	sub	sp, #8
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	460b      	mov	r3, r1
 8008d60:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008d62:	78fb      	ldrb	r3, [r7, #3]
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fa72 	bl	8009250 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b084      	sub	sp, #16
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
 8008d7e:	460b      	mov	r3, r1
 8008d80:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f836 	bl	8008df4 <USBH_GetFreePipe>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008d8c:	89fb      	ldrh	r3, [r7, #14]
 8008d8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d00a      	beq.n	8008dac <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008d96:	78fa      	ldrb	r2, [r7, #3]
 8008d98:	89fb      	ldrh	r3, [r7, #14]
 8008d9a:	f003 030f 	and.w	r3, r3, #15
 8008d9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008da2:	6879      	ldr	r1, [r7, #4]
 8008da4:	33e0      	adds	r3, #224	@ 0xe0
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	440b      	add	r3, r1
 8008daa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008dac:	89fb      	ldrh	r3, [r7, #14]
 8008dae:	b2db      	uxtb	r3, r3
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008dc4:	78fb      	ldrb	r3, [r7, #3]
 8008dc6:	2b0f      	cmp	r3, #15
 8008dc8:	d80d      	bhi.n	8008de6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008dca:	78fb      	ldrb	r3, [r7, #3]
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	33e0      	adds	r3, #224	@ 0xe0
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	685a      	ldr	r2, [r3, #4]
 8008dd6:	78fb      	ldrb	r3, [r7, #3]
 8008dd8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008ddc:	6879      	ldr	r1, [r7, #4]
 8008dde:	33e0      	adds	r3, #224	@ 0xe0
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	440b      	add	r3, r1
 8008de4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008e00:	2300      	movs	r3, #0
 8008e02:	73fb      	strb	r3, [r7, #15]
 8008e04:	e00f      	b.n	8008e26 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008e06:	7bfb      	ldrb	r3, [r7, #15]
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	33e0      	adds	r3, #224	@ 0xe0
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d102      	bne.n	8008e20 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	e007      	b.n	8008e30 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
 8008e22:	3301      	adds	r3, #1
 8008e24:	73fb      	strb	r3, [r7, #15]
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
 8008e28:	2b0f      	cmp	r3, #15
 8008e2a:	d9ec      	bls.n	8008e06 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008e2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008e40:	2201      	movs	r2, #1
 8008e42:	490e      	ldr	r1, [pc, #56]	@ (8008e7c <MX_USB_HOST_Init+0x40>)
 8008e44:	480e      	ldr	r0, [pc, #56]	@ (8008e80 <MX_USB_HOST_Init+0x44>)
 8008e46:	f7fe fbb7 	bl	80075b8 <USBH_Init>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008e50:	f7f8 fa5e 	bl	8001310 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008e54:	490b      	ldr	r1, [pc, #44]	@ (8008e84 <MX_USB_HOST_Init+0x48>)
 8008e56:	480a      	ldr	r0, [pc, #40]	@ (8008e80 <MX_USB_HOST_Init+0x44>)
 8008e58:	f7fe fc3c 	bl	80076d4 <USBH_RegisterClass>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d001      	beq.n	8008e66 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008e62:	f7f8 fa55 	bl	8001310 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008e66:	4806      	ldr	r0, [pc, #24]	@ (8008e80 <MX_USB_HOST_Init+0x44>)
 8008e68:	f7fe fcc0 	bl	80077ec <USBH_Start>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008e72:	f7f8 fa4d 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008e76:	bf00      	nop
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	08008e9d 	.word	0x08008e9d
 8008e80:	20000280 	.word	0x20000280
 8008e84:	2000006c 	.word	0x2000006c

08008e88 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008e8c:	4802      	ldr	r0, [pc, #8]	@ (8008e98 <MX_USB_HOST_Process+0x10>)
 8008e8e:	f7fe fcbd 	bl	800780c <USBH_Process>
}
 8008e92:	bf00      	nop
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	20000280 	.word	0x20000280

08008e9c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008ea8:	78fb      	ldrb	r3, [r7, #3]
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	2b04      	cmp	r3, #4
 8008eae:	d819      	bhi.n	8008ee4 <USBH_UserProcess+0x48>
 8008eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8008eb8 <USBH_UserProcess+0x1c>)
 8008eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb6:	bf00      	nop
 8008eb8:	08008ee5 	.word	0x08008ee5
 8008ebc:	08008ed5 	.word	0x08008ed5
 8008ec0:	08008ee5 	.word	0x08008ee5
 8008ec4:	08008edd 	.word	0x08008edd
 8008ec8:	08008ecd 	.word	0x08008ecd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008ecc:	4b09      	ldr	r3, [pc, #36]	@ (8008ef4 <USBH_UserProcess+0x58>)
 8008ece:	2203      	movs	r2, #3
 8008ed0:	701a      	strb	r2, [r3, #0]
  break;
 8008ed2:	e008      	b.n	8008ee6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008ed4:	4b07      	ldr	r3, [pc, #28]	@ (8008ef4 <USBH_UserProcess+0x58>)
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	701a      	strb	r2, [r3, #0]
  break;
 8008eda:	e004      	b.n	8008ee6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008edc:	4b05      	ldr	r3, [pc, #20]	@ (8008ef4 <USBH_UserProcess+0x58>)
 8008ede:	2201      	movs	r2, #1
 8008ee0:	701a      	strb	r2, [r3, #0]
  break;
 8008ee2:	e000      	b.n	8008ee6 <USBH_UserProcess+0x4a>

  default:
  break;
 8008ee4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008ee6:	bf00      	nop
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	20000658 	.word	0x20000658

08008ef8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b08a      	sub	sp, #40	@ 0x28
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f00:	f107 0314 	add.w	r3, r7, #20
 8008f04:	2200      	movs	r2, #0
 8008f06:	601a      	str	r2, [r3, #0]
 8008f08:	605a      	str	r2, [r3, #4]
 8008f0a:	609a      	str	r2, [r3, #8]
 8008f0c:	60da      	str	r2, [r3, #12]
 8008f0e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f18:	d147      	bne.n	8008faa <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	613b      	str	r3, [r7, #16]
 8008f1e:	4b25      	ldr	r3, [pc, #148]	@ (8008fb4 <HAL_HCD_MspInit+0xbc>)
 8008f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f22:	4a24      	ldr	r2, [pc, #144]	@ (8008fb4 <HAL_HCD_MspInit+0xbc>)
 8008f24:	f043 0301 	orr.w	r3, r3, #1
 8008f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8008f2a:	4b22      	ldr	r3, [pc, #136]	@ (8008fb4 <HAL_HCD_MspInit+0xbc>)
 8008f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	613b      	str	r3, [r7, #16]
 8008f34:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008f36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f40:	2300      	movs	r3, #0
 8008f42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008f44:	f107 0314 	add.w	r3, r7, #20
 8008f48:	4619      	mov	r1, r3
 8008f4a:	481b      	ldr	r0, [pc, #108]	@ (8008fb8 <HAL_HCD_MspInit+0xc0>)
 8008f4c:	f7f8 fe5e 	bl	8001c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008f50:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f56:	2302      	movs	r3, #2
 8008f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f62:	230a      	movs	r3, #10
 8008f64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f66:	f107 0314 	add.w	r3, r7, #20
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	4812      	ldr	r0, [pc, #72]	@ (8008fb8 <HAL_HCD_MspInit+0xc0>)
 8008f6e:	f7f8 fe4d 	bl	8001c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f72:	4b10      	ldr	r3, [pc, #64]	@ (8008fb4 <HAL_HCD_MspInit+0xbc>)
 8008f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f76:	4a0f      	ldr	r2, [pc, #60]	@ (8008fb4 <HAL_HCD_MspInit+0xbc>)
 8008f78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f7c:	6353      	str	r3, [r2, #52]	@ 0x34
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60fb      	str	r3, [r7, #12]
 8008f82:	4b0c      	ldr	r3, [pc, #48]	@ (8008fb4 <HAL_HCD_MspInit+0xbc>)
 8008f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f86:	4a0b      	ldr	r2, [pc, #44]	@ (8008fb4 <HAL_HCD_MspInit+0xbc>)
 8008f88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008f8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8008f8e:	4b09      	ldr	r3, [pc, #36]	@ (8008fb4 <HAL_HCD_MspInit+0xbc>)
 8008f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f96:	60fb      	str	r3, [r7, #12]
 8008f98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	2043      	movs	r0, #67	@ 0x43
 8008fa0:	f7f8 fd6b 	bl	8001a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008fa4:	2043      	movs	r0, #67	@ 0x43
 8008fa6:	f7f8 fd84 	bl	8001ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008faa:	bf00      	nop
 8008fac:	3728      	adds	r7, #40	@ 0x28
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	40023800 	.word	0x40023800
 8008fb8:	40020000 	.word	0x40020000

08008fbc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fe fff5 	bl	8007fba <USBH_LL_IncTimer>
}
 8008fd0:	bf00      	nop
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7ff f82d 	bl	8008046 <USBH_LL_Connect>
}
 8008fec:	bf00      	nop
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8009002:	4618      	mov	r0, r3
 8009004:	f7ff f836 	bl	8008074 <USBH_LL_Disconnect>
}
 8009008:	bf00      	nop
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	460b      	mov	r3, r1
 800901a:	70fb      	strb	r3, [r7, #3]
 800901c:	4613      	mov	r3, r2
 800901e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 800903a:	4618      	mov	r0, r3
 800903c:	f7fe ffe7 	bl	800800e <USBH_LL_PortEnabled>
}
 8009040:	bf00      	nop
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 3300 	ldr.w	r3, [r3, #768]	@ 0x300
 8009056:	4618      	mov	r0, r3
 8009058:	f7fe ffe7 	bl	800802a <USBH_LL_PortDisabled>
}
 800905c:	bf00      	nop
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009072:	2b01      	cmp	r3, #1
 8009074:	d12a      	bne.n	80090cc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009076:	4a18      	ldr	r2, [pc, #96]	@ (80090d8 <USBH_LL_Init+0x74>)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a15      	ldr	r2, [pc, #84]	@ (80090d8 <USBH_LL_Init+0x74>)
 8009082:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009086:	4b14      	ldr	r3, [pc, #80]	@ (80090d8 <USBH_LL_Init+0x74>)
 8009088:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800908c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800908e:	4b12      	ldr	r3, [pc, #72]	@ (80090d8 <USBH_LL_Init+0x74>)
 8009090:	2208      	movs	r2, #8
 8009092:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009094:	4b10      	ldr	r3, [pc, #64]	@ (80090d8 <USBH_LL_Init+0x74>)
 8009096:	2201      	movs	r2, #1
 8009098:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800909a:	4b0f      	ldr	r3, [pc, #60]	@ (80090d8 <USBH_LL_Init+0x74>)
 800909c:	2200      	movs	r2, #0
 800909e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80090a0:	4b0d      	ldr	r3, [pc, #52]	@ (80090d8 <USBH_LL_Init+0x74>)
 80090a2:	2202      	movs	r2, #2
 80090a4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80090a6:	4b0c      	ldr	r3, [pc, #48]	@ (80090d8 <USBH_LL_Init+0x74>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80090ac:	480a      	ldr	r0, [pc, #40]	@ (80090d8 <USBH_LL_Init+0x74>)
 80090ae:	f7f8 ff62 	bl	8001f76 <HAL_HCD_Init>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80090b8:	f7f8 f92a 	bl	8001310 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80090bc:	4806      	ldr	r0, [pc, #24]	@ (80090d8 <USBH_LL_Init+0x74>)
 80090be:	f7f9 fb46 	bl	800274e <HAL_HCD_GetCurrentFrame>
 80090c2:	4603      	mov	r3, r0
 80090c4:	4619      	mov	r1, r3
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7fe ff68 	bl	8007f9c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	2000065c 	.word	0x2000065c

080090dc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7f9 fab5 	bl	8002662 <HAL_HCD_Start>
 80090f8:	4603      	mov	r3, r0
 80090fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090fc:	7bfb      	ldrb	r3, [r7, #15]
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 f95c 	bl	80093bc <USBH_Get_USB_Status>
 8009104:	4603      	mov	r3, r0
 8009106:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009108:	7bbb      	ldrb	r3, [r7, #14]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800911e:	2300      	movs	r3, #0
 8009120:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009128:	4618      	mov	r0, r3
 800912a:	f7f9 fabd 	bl	80026a8 <HAL_HCD_Stop>
 800912e:	4603      	mov	r3, r0
 8009130:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009132:	7bfb      	ldrb	r3, [r7, #15]
 8009134:	4618      	mov	r0, r3
 8009136:	f000 f941 	bl	80093bc <USBH_Get_USB_Status>
 800913a:	4603      	mov	r3, r0
 800913c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800913e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009150:	2301      	movs	r3, #1
 8009152:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800915a:	4618      	mov	r0, r3
 800915c:	f7f9 fb05 	bl	800276a <HAL_HCD_GetCurrentSpeed>
 8009160:	4603      	mov	r3, r0
 8009162:	2b02      	cmp	r3, #2
 8009164:	d00c      	beq.n	8009180 <USBH_LL_GetSpeed+0x38>
 8009166:	2b02      	cmp	r3, #2
 8009168:	d80d      	bhi.n	8009186 <USBH_LL_GetSpeed+0x3e>
 800916a:	2b00      	cmp	r3, #0
 800916c:	d002      	beq.n	8009174 <USBH_LL_GetSpeed+0x2c>
 800916e:	2b01      	cmp	r3, #1
 8009170:	d003      	beq.n	800917a <USBH_LL_GetSpeed+0x32>
 8009172:	e008      	b.n	8009186 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009174:	2300      	movs	r3, #0
 8009176:	73fb      	strb	r3, [r7, #15]
    break;
 8009178:	e008      	b.n	800918c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800917a:	2301      	movs	r3, #1
 800917c:	73fb      	strb	r3, [r7, #15]
    break;
 800917e:	e005      	b.n	800918c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009180:	2302      	movs	r3, #2
 8009182:	73fb      	strb	r3, [r7, #15]
    break;
 8009184:	e002      	b.n	800918c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009186:	2301      	movs	r3, #1
 8009188:	73fb      	strb	r3, [r7, #15]
    break;
 800918a:	bf00      	nop
  }
  return  speed;
 800918c:	7bfb      	ldrb	r3, [r7, #15]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b084      	sub	sp, #16
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7f9 fa98 	bl	80026e2 <HAL_HCD_ResetPort>
 80091b2:	4603      	mov	r3, r0
 80091b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 f8ff 	bl	80093bc <USBH_Get_USB_Status>
 80091be:	4603      	mov	r3, r0
 80091c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3710      	adds	r7, #16
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	460b      	mov	r3, r1
 80091d6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80091de:	78fa      	ldrb	r2, [r7, #3]
 80091e0:	4611      	mov	r1, r2
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7f9 fa9f 	bl	8002726 <HAL_HCD_HC_GetXferCount>
 80091e8:	4603      	mov	r3, r0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3708      	adds	r7, #8
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80091f2:	b590      	push	{r4, r7, lr}
 80091f4:	b089      	sub	sp, #36	@ 0x24
 80091f6:	af04      	add	r7, sp, #16
 80091f8:	6078      	str	r0, [r7, #4]
 80091fa:	4608      	mov	r0, r1
 80091fc:	4611      	mov	r1, r2
 80091fe:	461a      	mov	r2, r3
 8009200:	4603      	mov	r3, r0
 8009202:	70fb      	strb	r3, [r7, #3]
 8009204:	460b      	mov	r3, r1
 8009206:	70bb      	strb	r3, [r7, #2]
 8009208:	4613      	mov	r3, r2
 800920a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800921a:	787c      	ldrb	r4, [r7, #1]
 800921c:	78ba      	ldrb	r2, [r7, #2]
 800921e:	78f9      	ldrb	r1, [r7, #3]
 8009220:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009222:	9302      	str	r3, [sp, #8]
 8009224:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009228:	9301      	str	r3, [sp, #4]
 800922a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	4623      	mov	r3, r4
 8009232:	f7f8 ff02 	bl	800203a <HAL_HCD_HC_Init>
 8009236:	4603      	mov	r3, r0
 8009238:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800923a:	7bfb      	ldrb	r3, [r7, #15]
 800923c:	4618      	mov	r0, r3
 800923e:	f000 f8bd 	bl	80093bc <USBH_Get_USB_Status>
 8009242:	4603      	mov	r3, r0
 8009244:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009246:	7bbb      	ldrb	r3, [r7, #14]
}
 8009248:	4618      	mov	r0, r3
 800924a:	3714      	adds	r7, #20
 800924c:	46bd      	mov	sp, r7
 800924e:	bd90      	pop	{r4, r7, pc}

08009250 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	460b      	mov	r3, r1
 800925a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800925c:	2300      	movs	r3, #0
 800925e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009260:	2300      	movs	r3, #0
 8009262:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800926a:	78fa      	ldrb	r2, [r7, #3]
 800926c:	4611      	mov	r1, r2
 800926e:	4618      	mov	r0, r3
 8009270:	f7f8 ff72 	bl	8002158 <HAL_HCD_HC_Halt>
 8009274:	4603      	mov	r3, r0
 8009276:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009278:	7bfb      	ldrb	r3, [r7, #15]
 800927a:	4618      	mov	r0, r3
 800927c:	f000 f89e 	bl	80093bc <USBH_Get_USB_Status>
 8009280:	4603      	mov	r3, r0
 8009282:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009284:	7bbb      	ldrb	r3, [r7, #14]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800928e:	b590      	push	{r4, r7, lr}
 8009290:	b089      	sub	sp, #36	@ 0x24
 8009292:	af04      	add	r7, sp, #16
 8009294:	6078      	str	r0, [r7, #4]
 8009296:	4608      	mov	r0, r1
 8009298:	4611      	mov	r1, r2
 800929a:	461a      	mov	r2, r3
 800929c:	4603      	mov	r3, r0
 800929e:	70fb      	strb	r3, [r7, #3]
 80092a0:	460b      	mov	r3, r1
 80092a2:	70bb      	strb	r3, [r7, #2]
 80092a4:	4613      	mov	r3, r2
 80092a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092a8:	2300      	movs	r3, #0
 80092aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80092b6:	787c      	ldrb	r4, [r7, #1]
 80092b8:	78ba      	ldrb	r2, [r7, #2]
 80092ba:	78f9      	ldrb	r1, [r7, #3]
 80092bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80092c0:	9303      	str	r3, [sp, #12]
 80092c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80092c4:	9302      	str	r3, [sp, #8]
 80092c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c8:	9301      	str	r3, [sp, #4]
 80092ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	4623      	mov	r3, r4
 80092d2:	f7f8 ff65 	bl	80021a0 <HAL_HCD_HC_SubmitRequest>
 80092d6:	4603      	mov	r3, r0
 80092d8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80092da:	7bfb      	ldrb	r3, [r7, #15]
 80092dc:	4618      	mov	r0, r3
 80092de:	f000 f86d 	bl	80093bc <USBH_Get_USB_Status>
 80092e2:	4603      	mov	r3, r0
 80092e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3714      	adds	r7, #20
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd90      	pop	{r4, r7, pc}

080092f0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	460b      	mov	r3, r1
 80092fa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009302:	78fa      	ldrb	r2, [r7, #3]
 8009304:	4611      	mov	r1, r2
 8009306:	4618      	mov	r0, r3
 8009308:	f7f9 f9f9 	bl	80026fe <HAL_HCD_HC_GetURBState>
 800930c:	4603      	mov	r3, r0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b082      	sub	sp, #8
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	460b      	mov	r3, r1
 8009320:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009328:	2b01      	cmp	r3, #1
 800932a:	d103      	bne.n	8009334 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800932c:	78fb      	ldrb	r3, [r7, #3]
 800932e:	4618      	mov	r0, r3
 8009330:	f000 f870 	bl	8009414 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009334:	20c8      	movs	r0, #200	@ 0xc8
 8009336:	f7f8 faa1 	bl	800187c <HAL_Delay>
  return USBH_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	460b      	mov	r3, r1
 800934e:	70fb      	strb	r3, [r7, #3]
 8009350:	4613      	mov	r3, r2
 8009352:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800935a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800935c:	78fb      	ldrb	r3, [r7, #3]
 800935e:	68fa      	ldr	r2, [r7, #12]
 8009360:	212c      	movs	r1, #44	@ 0x2c
 8009362:	fb01 f303 	mul.w	r3, r1, r3
 8009366:	4413      	add	r3, r2
 8009368:	333b      	adds	r3, #59	@ 0x3b
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d009      	beq.n	8009384 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009370:	78fb      	ldrb	r3, [r7, #3]
 8009372:	68fa      	ldr	r2, [r7, #12]
 8009374:	212c      	movs	r1, #44	@ 0x2c
 8009376:	fb01 f303 	mul.w	r3, r1, r3
 800937a:	4413      	add	r3, r2
 800937c:	3354      	adds	r3, #84	@ 0x54
 800937e:	78ba      	ldrb	r2, [r7, #2]
 8009380:	701a      	strb	r2, [r3, #0]
 8009382:	e008      	b.n	8009396 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009384:	78fb      	ldrb	r3, [r7, #3]
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	212c      	movs	r1, #44	@ 0x2c
 800938a:	fb01 f303 	mul.w	r3, r1, r3
 800938e:	4413      	add	r3, r2
 8009390:	3355      	adds	r3, #85	@ 0x55
 8009392:	78ba      	ldrb	r2, [r7, #2]
 8009394:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3714      	adds	r7, #20
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7f8 fa65 	bl	800187c <HAL_Delay>
}
 80093b2:	bf00      	nop
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
	...

080093bc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	4603      	mov	r3, r0
 80093c4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093ca:	79fb      	ldrb	r3, [r7, #7]
 80093cc:	2b03      	cmp	r3, #3
 80093ce:	d817      	bhi.n	8009400 <USBH_Get_USB_Status+0x44>
 80093d0:	a201      	add	r2, pc, #4	@ (adr r2, 80093d8 <USBH_Get_USB_Status+0x1c>)
 80093d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d6:	bf00      	nop
 80093d8:	080093e9 	.word	0x080093e9
 80093dc:	080093ef 	.word	0x080093ef
 80093e0:	080093f5 	.word	0x080093f5
 80093e4:	080093fb 	.word	0x080093fb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80093e8:	2300      	movs	r3, #0
 80093ea:	73fb      	strb	r3, [r7, #15]
    break;
 80093ec:	e00b      	b.n	8009406 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80093ee:	2302      	movs	r3, #2
 80093f0:	73fb      	strb	r3, [r7, #15]
    break;
 80093f2:	e008      	b.n	8009406 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80093f4:	2301      	movs	r3, #1
 80093f6:	73fb      	strb	r3, [r7, #15]
    break;
 80093f8:	e005      	b.n	8009406 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80093fa:	2302      	movs	r3, #2
 80093fc:	73fb      	strb	r3, [r7, #15]
    break;
 80093fe:	e002      	b.n	8009406 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009400:	2302      	movs	r3, #2
 8009402:	73fb      	strb	r3, [r7, #15]
    break;
 8009404:	bf00      	nop
  }
  return usb_status;
 8009406:	7bfb      	ldrb	r3, [r7, #15]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	4603      	mov	r3, r0
 800941c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800941e:	79fb      	ldrb	r3, [r7, #7]
 8009420:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009422:	79fb      	ldrb	r3, [r7, #7]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d102      	bne.n	800942e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009428:	2300      	movs	r3, #0
 800942a:	73fb      	strb	r3, [r7, #15]
 800942c:	e001      	b.n	8009432 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800942e:	2301      	movs	r3, #1
 8009430:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009432:	7bfb      	ldrb	r3, [r7, #15]
 8009434:	461a      	mov	r2, r3
 8009436:	2101      	movs	r1, #1
 8009438:	4803      	ldr	r0, [pc, #12]	@ (8009448 <MX_DriverVbusFS+0x34>)
 800943a:	f7f8 fd83 	bl	8001f44 <HAL_GPIO_WritePin>
}
 800943e:	bf00      	nop
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	40020800 	.word	0x40020800

0800944c <malloc>:
 800944c:	4b02      	ldr	r3, [pc, #8]	@ (8009458 <malloc+0xc>)
 800944e:	4601      	mov	r1, r0
 8009450:	6818      	ldr	r0, [r3, #0]
 8009452:	f000 b82d 	b.w	80094b0 <_malloc_r>
 8009456:	bf00      	nop
 8009458:	2000008c 	.word	0x2000008c

0800945c <free>:
 800945c:	4b02      	ldr	r3, [pc, #8]	@ (8009468 <free+0xc>)
 800945e:	4601      	mov	r1, r0
 8009460:	6818      	ldr	r0, [r3, #0]
 8009462:	f000 b903 	b.w	800966c <_free_r>
 8009466:	bf00      	nop
 8009468:	2000008c 	.word	0x2000008c

0800946c <sbrk_aligned>:
 800946c:	b570      	push	{r4, r5, r6, lr}
 800946e:	4e0f      	ldr	r6, [pc, #60]	@ (80094ac <sbrk_aligned+0x40>)
 8009470:	460c      	mov	r4, r1
 8009472:	6831      	ldr	r1, [r6, #0]
 8009474:	4605      	mov	r5, r0
 8009476:	b911      	cbnz	r1, 800947e <sbrk_aligned+0x12>
 8009478:	f000 f8ae 	bl	80095d8 <_sbrk_r>
 800947c:	6030      	str	r0, [r6, #0]
 800947e:	4621      	mov	r1, r4
 8009480:	4628      	mov	r0, r5
 8009482:	f000 f8a9 	bl	80095d8 <_sbrk_r>
 8009486:	1c43      	adds	r3, r0, #1
 8009488:	d103      	bne.n	8009492 <sbrk_aligned+0x26>
 800948a:	f04f 34ff 	mov.w	r4, #4294967295
 800948e:	4620      	mov	r0, r4
 8009490:	bd70      	pop	{r4, r5, r6, pc}
 8009492:	1cc4      	adds	r4, r0, #3
 8009494:	f024 0403 	bic.w	r4, r4, #3
 8009498:	42a0      	cmp	r0, r4
 800949a:	d0f8      	beq.n	800948e <sbrk_aligned+0x22>
 800949c:	1a21      	subs	r1, r4, r0
 800949e:	4628      	mov	r0, r5
 80094a0:	f000 f89a 	bl	80095d8 <_sbrk_r>
 80094a4:	3001      	adds	r0, #1
 80094a6:	d1f2      	bne.n	800948e <sbrk_aligned+0x22>
 80094a8:	e7ef      	b.n	800948a <sbrk_aligned+0x1e>
 80094aa:	bf00      	nop
 80094ac:	20000960 	.word	0x20000960

080094b0 <_malloc_r>:
 80094b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094b4:	1ccd      	adds	r5, r1, #3
 80094b6:	f025 0503 	bic.w	r5, r5, #3
 80094ba:	3508      	adds	r5, #8
 80094bc:	2d0c      	cmp	r5, #12
 80094be:	bf38      	it	cc
 80094c0:	250c      	movcc	r5, #12
 80094c2:	2d00      	cmp	r5, #0
 80094c4:	4606      	mov	r6, r0
 80094c6:	db01      	blt.n	80094cc <_malloc_r+0x1c>
 80094c8:	42a9      	cmp	r1, r5
 80094ca:	d904      	bls.n	80094d6 <_malloc_r+0x26>
 80094cc:	230c      	movs	r3, #12
 80094ce:	6033      	str	r3, [r6, #0]
 80094d0:	2000      	movs	r0, #0
 80094d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095ac <_malloc_r+0xfc>
 80094da:	f000 f869 	bl	80095b0 <__malloc_lock>
 80094de:	f8d8 3000 	ldr.w	r3, [r8]
 80094e2:	461c      	mov	r4, r3
 80094e4:	bb44      	cbnz	r4, 8009538 <_malloc_r+0x88>
 80094e6:	4629      	mov	r1, r5
 80094e8:	4630      	mov	r0, r6
 80094ea:	f7ff ffbf 	bl	800946c <sbrk_aligned>
 80094ee:	1c43      	adds	r3, r0, #1
 80094f0:	4604      	mov	r4, r0
 80094f2:	d158      	bne.n	80095a6 <_malloc_r+0xf6>
 80094f4:	f8d8 4000 	ldr.w	r4, [r8]
 80094f8:	4627      	mov	r7, r4
 80094fa:	2f00      	cmp	r7, #0
 80094fc:	d143      	bne.n	8009586 <_malloc_r+0xd6>
 80094fe:	2c00      	cmp	r4, #0
 8009500:	d04b      	beq.n	800959a <_malloc_r+0xea>
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	4639      	mov	r1, r7
 8009506:	4630      	mov	r0, r6
 8009508:	eb04 0903 	add.w	r9, r4, r3
 800950c:	f000 f864 	bl	80095d8 <_sbrk_r>
 8009510:	4581      	cmp	r9, r0
 8009512:	d142      	bne.n	800959a <_malloc_r+0xea>
 8009514:	6821      	ldr	r1, [r4, #0]
 8009516:	1a6d      	subs	r5, r5, r1
 8009518:	4629      	mov	r1, r5
 800951a:	4630      	mov	r0, r6
 800951c:	f7ff ffa6 	bl	800946c <sbrk_aligned>
 8009520:	3001      	adds	r0, #1
 8009522:	d03a      	beq.n	800959a <_malloc_r+0xea>
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	442b      	add	r3, r5
 8009528:	6023      	str	r3, [r4, #0]
 800952a:	f8d8 3000 	ldr.w	r3, [r8]
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	bb62      	cbnz	r2, 800958c <_malloc_r+0xdc>
 8009532:	f8c8 7000 	str.w	r7, [r8]
 8009536:	e00f      	b.n	8009558 <_malloc_r+0xa8>
 8009538:	6822      	ldr	r2, [r4, #0]
 800953a:	1b52      	subs	r2, r2, r5
 800953c:	d420      	bmi.n	8009580 <_malloc_r+0xd0>
 800953e:	2a0b      	cmp	r2, #11
 8009540:	d917      	bls.n	8009572 <_malloc_r+0xc2>
 8009542:	1961      	adds	r1, r4, r5
 8009544:	42a3      	cmp	r3, r4
 8009546:	6025      	str	r5, [r4, #0]
 8009548:	bf18      	it	ne
 800954a:	6059      	strne	r1, [r3, #4]
 800954c:	6863      	ldr	r3, [r4, #4]
 800954e:	bf08      	it	eq
 8009550:	f8c8 1000 	streq.w	r1, [r8]
 8009554:	5162      	str	r2, [r4, r5]
 8009556:	604b      	str	r3, [r1, #4]
 8009558:	4630      	mov	r0, r6
 800955a:	f000 f82f 	bl	80095bc <__malloc_unlock>
 800955e:	f104 000b 	add.w	r0, r4, #11
 8009562:	1d23      	adds	r3, r4, #4
 8009564:	f020 0007 	bic.w	r0, r0, #7
 8009568:	1ac2      	subs	r2, r0, r3
 800956a:	bf1c      	itt	ne
 800956c:	1a1b      	subne	r3, r3, r0
 800956e:	50a3      	strne	r3, [r4, r2]
 8009570:	e7af      	b.n	80094d2 <_malloc_r+0x22>
 8009572:	6862      	ldr	r2, [r4, #4]
 8009574:	42a3      	cmp	r3, r4
 8009576:	bf0c      	ite	eq
 8009578:	f8c8 2000 	streq.w	r2, [r8]
 800957c:	605a      	strne	r2, [r3, #4]
 800957e:	e7eb      	b.n	8009558 <_malloc_r+0xa8>
 8009580:	4623      	mov	r3, r4
 8009582:	6864      	ldr	r4, [r4, #4]
 8009584:	e7ae      	b.n	80094e4 <_malloc_r+0x34>
 8009586:	463c      	mov	r4, r7
 8009588:	687f      	ldr	r7, [r7, #4]
 800958a:	e7b6      	b.n	80094fa <_malloc_r+0x4a>
 800958c:	461a      	mov	r2, r3
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	42a3      	cmp	r3, r4
 8009592:	d1fb      	bne.n	800958c <_malloc_r+0xdc>
 8009594:	2300      	movs	r3, #0
 8009596:	6053      	str	r3, [r2, #4]
 8009598:	e7de      	b.n	8009558 <_malloc_r+0xa8>
 800959a:	230c      	movs	r3, #12
 800959c:	6033      	str	r3, [r6, #0]
 800959e:	4630      	mov	r0, r6
 80095a0:	f000 f80c 	bl	80095bc <__malloc_unlock>
 80095a4:	e794      	b.n	80094d0 <_malloc_r+0x20>
 80095a6:	6005      	str	r5, [r0, #0]
 80095a8:	e7d6      	b.n	8009558 <_malloc_r+0xa8>
 80095aa:	bf00      	nop
 80095ac:	20000964 	.word	0x20000964

080095b0 <__malloc_lock>:
 80095b0:	4801      	ldr	r0, [pc, #4]	@ (80095b8 <__malloc_lock+0x8>)
 80095b2:	f000 b84b 	b.w	800964c <__retarget_lock_acquire_recursive>
 80095b6:	bf00      	nop
 80095b8:	20000aa4 	.word	0x20000aa4

080095bc <__malloc_unlock>:
 80095bc:	4801      	ldr	r0, [pc, #4]	@ (80095c4 <__malloc_unlock+0x8>)
 80095be:	f000 b846 	b.w	800964e <__retarget_lock_release_recursive>
 80095c2:	bf00      	nop
 80095c4:	20000aa4 	.word	0x20000aa4

080095c8 <memset>:
 80095c8:	4402      	add	r2, r0
 80095ca:	4603      	mov	r3, r0
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d100      	bne.n	80095d2 <memset+0xa>
 80095d0:	4770      	bx	lr
 80095d2:	f803 1b01 	strb.w	r1, [r3], #1
 80095d6:	e7f9      	b.n	80095cc <memset+0x4>

080095d8 <_sbrk_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	4d06      	ldr	r5, [pc, #24]	@ (80095f4 <_sbrk_r+0x1c>)
 80095dc:	2300      	movs	r3, #0
 80095de:	4604      	mov	r4, r0
 80095e0:	4608      	mov	r0, r1
 80095e2:	602b      	str	r3, [r5, #0]
 80095e4:	f7f8 f866 	bl	80016b4 <_sbrk>
 80095e8:	1c43      	adds	r3, r0, #1
 80095ea:	d102      	bne.n	80095f2 <_sbrk_r+0x1a>
 80095ec:	682b      	ldr	r3, [r5, #0]
 80095ee:	b103      	cbz	r3, 80095f2 <_sbrk_r+0x1a>
 80095f0:	6023      	str	r3, [r4, #0]
 80095f2:	bd38      	pop	{r3, r4, r5, pc}
 80095f4:	20000aa0 	.word	0x20000aa0

080095f8 <__errno>:
 80095f8:	4b01      	ldr	r3, [pc, #4]	@ (8009600 <__errno+0x8>)
 80095fa:	6818      	ldr	r0, [r3, #0]
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	2000008c 	.word	0x2000008c

08009604 <__libc_init_array>:
 8009604:	b570      	push	{r4, r5, r6, lr}
 8009606:	4d0d      	ldr	r5, [pc, #52]	@ (800963c <__libc_init_array+0x38>)
 8009608:	4c0d      	ldr	r4, [pc, #52]	@ (8009640 <__libc_init_array+0x3c>)
 800960a:	1b64      	subs	r4, r4, r5
 800960c:	10a4      	asrs	r4, r4, #2
 800960e:	2600      	movs	r6, #0
 8009610:	42a6      	cmp	r6, r4
 8009612:	d109      	bne.n	8009628 <__libc_init_array+0x24>
 8009614:	4d0b      	ldr	r5, [pc, #44]	@ (8009644 <__libc_init_array+0x40>)
 8009616:	4c0c      	ldr	r4, [pc, #48]	@ (8009648 <__libc_init_array+0x44>)
 8009618:	f000 f872 	bl	8009700 <_init>
 800961c:	1b64      	subs	r4, r4, r5
 800961e:	10a4      	asrs	r4, r4, #2
 8009620:	2600      	movs	r6, #0
 8009622:	42a6      	cmp	r6, r4
 8009624:	d105      	bne.n	8009632 <__libc_init_array+0x2e>
 8009626:	bd70      	pop	{r4, r5, r6, pc}
 8009628:	f855 3b04 	ldr.w	r3, [r5], #4
 800962c:	4798      	blx	r3
 800962e:	3601      	adds	r6, #1
 8009630:	e7ee      	b.n	8009610 <__libc_init_array+0xc>
 8009632:	f855 3b04 	ldr.w	r3, [r5], #4
 8009636:	4798      	blx	r3
 8009638:	3601      	adds	r6, #1
 800963a:	e7f2      	b.n	8009622 <__libc_init_array+0x1e>
 800963c:	08009848 	.word	0x08009848
 8009640:	08009848 	.word	0x08009848
 8009644:	08009848 	.word	0x08009848
 8009648:	0800984c 	.word	0x0800984c

0800964c <__retarget_lock_acquire_recursive>:
 800964c:	4770      	bx	lr

0800964e <__retarget_lock_release_recursive>:
 800964e:	4770      	bx	lr

08009650 <memcpy>:
 8009650:	440a      	add	r2, r1
 8009652:	4291      	cmp	r1, r2
 8009654:	f100 33ff 	add.w	r3, r0, #4294967295
 8009658:	d100      	bne.n	800965c <memcpy+0xc>
 800965a:	4770      	bx	lr
 800965c:	b510      	push	{r4, lr}
 800965e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009662:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009666:	4291      	cmp	r1, r2
 8009668:	d1f9      	bne.n	800965e <memcpy+0xe>
 800966a:	bd10      	pop	{r4, pc}

0800966c <_free_r>:
 800966c:	b538      	push	{r3, r4, r5, lr}
 800966e:	4605      	mov	r5, r0
 8009670:	2900      	cmp	r1, #0
 8009672:	d041      	beq.n	80096f8 <_free_r+0x8c>
 8009674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009678:	1f0c      	subs	r4, r1, #4
 800967a:	2b00      	cmp	r3, #0
 800967c:	bfb8      	it	lt
 800967e:	18e4      	addlt	r4, r4, r3
 8009680:	f7ff ff96 	bl	80095b0 <__malloc_lock>
 8009684:	4a1d      	ldr	r2, [pc, #116]	@ (80096fc <_free_r+0x90>)
 8009686:	6813      	ldr	r3, [r2, #0]
 8009688:	b933      	cbnz	r3, 8009698 <_free_r+0x2c>
 800968a:	6063      	str	r3, [r4, #4]
 800968c:	6014      	str	r4, [r2, #0]
 800968e:	4628      	mov	r0, r5
 8009690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009694:	f7ff bf92 	b.w	80095bc <__malloc_unlock>
 8009698:	42a3      	cmp	r3, r4
 800969a:	d908      	bls.n	80096ae <_free_r+0x42>
 800969c:	6820      	ldr	r0, [r4, #0]
 800969e:	1821      	adds	r1, r4, r0
 80096a0:	428b      	cmp	r3, r1
 80096a2:	bf01      	itttt	eq
 80096a4:	6819      	ldreq	r1, [r3, #0]
 80096a6:	685b      	ldreq	r3, [r3, #4]
 80096a8:	1809      	addeq	r1, r1, r0
 80096aa:	6021      	streq	r1, [r4, #0]
 80096ac:	e7ed      	b.n	800968a <_free_r+0x1e>
 80096ae:	461a      	mov	r2, r3
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	b10b      	cbz	r3, 80096b8 <_free_r+0x4c>
 80096b4:	42a3      	cmp	r3, r4
 80096b6:	d9fa      	bls.n	80096ae <_free_r+0x42>
 80096b8:	6811      	ldr	r1, [r2, #0]
 80096ba:	1850      	adds	r0, r2, r1
 80096bc:	42a0      	cmp	r0, r4
 80096be:	d10b      	bne.n	80096d8 <_free_r+0x6c>
 80096c0:	6820      	ldr	r0, [r4, #0]
 80096c2:	4401      	add	r1, r0
 80096c4:	1850      	adds	r0, r2, r1
 80096c6:	4283      	cmp	r3, r0
 80096c8:	6011      	str	r1, [r2, #0]
 80096ca:	d1e0      	bne.n	800968e <_free_r+0x22>
 80096cc:	6818      	ldr	r0, [r3, #0]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	6053      	str	r3, [r2, #4]
 80096d2:	4408      	add	r0, r1
 80096d4:	6010      	str	r0, [r2, #0]
 80096d6:	e7da      	b.n	800968e <_free_r+0x22>
 80096d8:	d902      	bls.n	80096e0 <_free_r+0x74>
 80096da:	230c      	movs	r3, #12
 80096dc:	602b      	str	r3, [r5, #0]
 80096de:	e7d6      	b.n	800968e <_free_r+0x22>
 80096e0:	6820      	ldr	r0, [r4, #0]
 80096e2:	1821      	adds	r1, r4, r0
 80096e4:	428b      	cmp	r3, r1
 80096e6:	bf04      	itt	eq
 80096e8:	6819      	ldreq	r1, [r3, #0]
 80096ea:	685b      	ldreq	r3, [r3, #4]
 80096ec:	6063      	str	r3, [r4, #4]
 80096ee:	bf04      	itt	eq
 80096f0:	1809      	addeq	r1, r1, r0
 80096f2:	6021      	streq	r1, [r4, #0]
 80096f4:	6054      	str	r4, [r2, #4]
 80096f6:	e7ca      	b.n	800968e <_free_r+0x22>
 80096f8:	bd38      	pop	{r3, r4, r5, pc}
 80096fa:	bf00      	nop
 80096fc:	20000964 	.word	0x20000964

08009700 <_init>:
 8009700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009702:	bf00      	nop
 8009704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009706:	bc08      	pop	{r3}
 8009708:	469e      	mov	lr, r3
 800970a:	4770      	bx	lr

0800970c <_fini>:
 800970c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970e:	bf00      	nop
 8009710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009712:	bc08      	pop	{r3}
 8009714:	469e      	mov	lr, r3
 8009716:	4770      	bx	lr
