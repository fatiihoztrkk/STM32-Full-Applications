
Get_TEMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f0c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08009094  08009094  00019094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090b8  080090b8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080090b8  080090b8  000190b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090c0  080090c0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090c0  080090c0  000190c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090c4  080090c4  000190c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080090c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008b8  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000948  20000948  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018c3c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e92  00000000  00000000  00038cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  0003cb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011b0  00000000  00000000  0003dee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025238  00000000  00000000  0003f090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ab48  00000000  00000000  000642c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8488  00000000  00000000  0007ee10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00157298  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000524c  00000000  00000000  001572e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800907c 	.word	0x0800907c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800907c 	.word	0x0800907c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_ADC_ConvCpltCallback>:
static void MX_SPI1_Init(void);
static void MX_ADC1_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

	if(hadc-> Instance == ADC1) // Instance -> Eğer ADC1 den veri gelirse
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <HAL_ADC_ConvCpltCallback+0x24>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d102      	bne.n	80004e4 <HAL_ADC_ConvCpltCallback+0x18>
	{
		flag = 1;
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <HAL_ADC_ConvCpltCallback+0x28>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	701a      	strb	r2, [r3, #0]
	}

}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	40012000 	.word	0x40012000
 80004f4:	200000b0 	.word	0x200000b0

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fd0e 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f81a 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f9b8 	bl	8000878 <MX_GPIO_Init>
  MX_DMA_Init();
 8000508:	f000 f996 	bl	8000838 <MX_DMA_Init>
  MX_I2C1_Init();
 800050c:	f000 f900 	bl	8000710 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000510:	f000 f92c 	bl	800076c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000514:	f000 f95a 	bl	80007cc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000518:	f008 f968 	bl	80087ec <MX_USB_HOST_Init>
  MX_ADC1_Init();
 800051c:	f000 f876 	bl	800060c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, AdcRaw, 2);
 8000520:	2202      	movs	r2, #2
 8000522:	4903      	ldr	r1, [pc, #12]	; (8000530 <main+0x38>)
 8000524:	4803      	ldr	r0, [pc, #12]	; (8000534 <main+0x3c>)
 8000526:	f000 fee3 	bl	80012f0 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800052a:	f008 f985 	bl	8008838 <MX_USB_HOST_Process>
 800052e:	e7fc      	b.n	800052a <main+0x32>
 8000530:	200000ac 	.word	0x200000ac
 8000534:	200000b4 	.word	0x200000b4

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f008 fc92 	bl	8008e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	4b28      	ldr	r3, [pc, #160]	; (8000604 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a27      	ldr	r2, [pc, #156]	; (8000604 <SystemClock_Config+0xcc>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b25      	ldr	r3, [pc, #148]	; (8000604 <SystemClock_Config+0xcc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b22      	ldr	r3, [pc, #136]	; (8000608 <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a21      	ldr	r2, [pc, #132]	; (8000608 <SystemClock_Config+0xd0>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <SystemClock_Config+0xd0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000594:	2301      	movs	r3, #1
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000598:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a8:	2308      	movs	r3, #8
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b6:	2307      	movs	r3, #7
 80005b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 faf4 	bl	8004bac <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ca:	f000 fa53 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2302      	movs	r3, #2
 80005d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2105      	movs	r1, #5
 80005ec:	4618      	mov	r0, r3
 80005ee:	f004 fd55 	bl	800509c <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f8:	f000 fa3c 	bl	8000a74 <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3750      	adds	r7, #80	; 0x50
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	; 0x28
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]
 8000622:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000624:	463b      	mov	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000630:	4b33      	ldr	r3, [pc, #204]	; (8000700 <MX_ADC1_Init+0xf4>)
 8000632:	4a34      	ldr	r2, [pc, #208]	; (8000704 <MX_ADC1_Init+0xf8>)
 8000634:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000636:	4b32      	ldr	r3, [pc, #200]	; (8000700 <MX_ADC1_Init+0xf4>)
 8000638:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800063c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063e:	4b30      	ldr	r3, [pc, #192]	; (8000700 <MX_ADC1_Init+0xf4>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000644:	4b2e      	ldr	r3, [pc, #184]	; (8000700 <MX_ADC1_Init+0xf4>)
 8000646:	2201      	movs	r2, #1
 8000648:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800064a:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <MX_ADC1_Init+0xf4>)
 800064c:	2201      	movs	r2, #1
 800064e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000650:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <MX_ADC1_Init+0xf4>)
 8000652:	2200      	movs	r2, #0
 8000654:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000658:	4b29      	ldr	r3, [pc, #164]	; (8000700 <MX_ADC1_Init+0xf4>)
 800065a:	2200      	movs	r2, #0
 800065c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800065e:	4b28      	ldr	r3, [pc, #160]	; (8000700 <MX_ADC1_Init+0xf4>)
 8000660:	4a29      	ldr	r2, [pc, #164]	; (8000708 <MX_ADC1_Init+0xfc>)
 8000662:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000664:	4b26      	ldr	r3, [pc, #152]	; (8000700 <MX_ADC1_Init+0xf4>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800066a:	4b25      	ldr	r3, [pc, #148]	; (8000700 <MX_ADC1_Init+0xf4>)
 800066c:	2202      	movs	r2, #2
 800066e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000670:	4b23      	ldr	r3, [pc, #140]	; (8000700 <MX_ADC1_Init+0xf4>)
 8000672:	2201      	movs	r2, #1
 8000674:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000678:	4b21      	ldr	r3, [pc, #132]	; (8000700 <MX_ADC1_Init+0xf4>)
 800067a:	2201      	movs	r2, #1
 800067c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800067e:	4820      	ldr	r0, [pc, #128]	; (8000700 <MX_ADC1_Init+0xf4>)
 8000680:	f000 fce2 	bl	8001048 <HAL_ADC_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 800068a:	f000 f9f3 	bl	8000a74 <Error_Handler>
  }

  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800068e:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MX_ADC1_Init+0x100>)
 8000690:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.LowThreshold = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800069a:	2310      	movs	r3, #16
 800069c:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.ITMode = ENABLE;
 800069e:	2301      	movs	r3, #1
 80006a0:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	4619      	mov	r1, r3
 80006aa:	4815      	ldr	r0, [pc, #84]	; (8000700 <MX_ADC1_Init+0xf4>)
 80006ac:	f001 f870 	bl	8001790 <HAL_ADC_AnalogWDGConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80006b6:	f000 f9dd 	bl	8000a74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80006ba:	2311      	movs	r3, #17
 80006bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006c2:	2307      	movs	r3, #7
 80006c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c6:	463b      	mov	r3, r7
 80006c8:	4619      	mov	r1, r3
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <MX_ADC1_Init+0xf4>)
 80006cc:	f000 ff3e 	bl	800154c <HAL_ADC_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80006d6:	f000 f9cd 	bl	8000a74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006da:	2310      	movs	r3, #16
 80006dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e2:	463b      	mov	r3, r7
 80006e4:	4619      	mov	r1, r3
 80006e6:	4806      	ldr	r0, [pc, #24]	; (8000700 <MX_ADC1_Init+0xf4>)
 80006e8:	f000 ff30 	bl	800154c <HAL_ADC_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80006f2:	f000 f9bf 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	3728      	adds	r7, #40	; 0x28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200000b4 	.word	0x200000b4
 8000704:	40012000 	.word	0x40012000
 8000708:	0f000001 	.word	0x0f000001
 800070c:	00800200 	.word	0x00800200

08000710 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_I2C1_Init+0x50>)
 8000716:	4a13      	ldr	r2, [pc, #76]	; (8000764 <MX_I2C1_Init+0x54>)
 8000718:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_I2C1_Init+0x50>)
 800071c:	4a12      	ldr	r2, [pc, #72]	; (8000768 <MX_I2C1_Init+0x58>)
 800071e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_I2C1_Init+0x50>)
 800072e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000732:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_I2C1_Init+0x50>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_I2C1_Init+0x50>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_I2C1_Init+0x50>)
 800074e:	f003 fc49 	bl	8003fe4 <HAL_I2C_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000758:	f000 f98c 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000015c 	.word	0x2000015c
 8000764:	40005400 	.word	0x40005400
 8000768:	000186a0 	.word	0x000186a0

0800076c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_I2S3_Init+0x54>)
 8000772:	4a14      	ldr	r2, [pc, #80]	; (80007c4 <MX_I2S3_Init+0x58>)
 8000774:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_I2S3_Init+0x54>)
 8000778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800077c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_I2S3_Init+0x54>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_I2S3_Init+0x54>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <MX_I2S3_Init+0x54>)
 800078c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000790:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_I2S3_Init+0x54>)
 8000794:	4a0c      	ldr	r2, [pc, #48]	; (80007c8 <MX_I2S3_Init+0x5c>)
 8000796:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_I2S3_Init+0x54>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_I2S3_Init+0x54>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_I2S3_Init+0x54>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_I2S3_Init+0x54>)
 80007ac:	f003 fd5e 	bl	800426c <HAL_I2S_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007b6:	f000 f95d 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200001b0 	.word	0x200001b0
 80007c4:	40003c00 	.word	0x40003c00
 80007c8:	00017700 	.word	0x00017700

080007cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_SPI1_Init+0x64>)
 80007d2:	4a18      	ldr	r2, [pc, #96]	; (8000834 <MX_SPI1_Init+0x68>)
 80007d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_SPI1_Init+0x64>)
 80007d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_SPI1_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_SPI1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_SPI1_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_SPI1_Init+0x64>)
 80007f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_SPI1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_SPI1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_SPI1_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_SPI1_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_SPI1_Init+0x64>)
 8000818:	220a      	movs	r2, #10
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_SPI1_Init+0x64>)
 800081e:	f004 ff89 	bl	8005734 <HAL_SPI_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000828:	f000 f924 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200001f8 	.word	0x200001f8
 8000834:	40013000 	.word	0x40013000

08000838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_DMA_Init+0x3c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <MX_DMA_Init+0x3c>)
 8000848:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_DMA_Init+0x3c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	2038      	movs	r0, #56	; 0x38
 8000860:	f001 fa59 	bl	8001d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000864:	2038      	movs	r0, #56	; 0x38
 8000866:	f001 fa72 	bl	8001d4e <HAL_NVIC_EnableIRQ>

}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	; 0x30
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
 8000892:	4b72      	ldr	r3, [pc, #456]	; (8000a5c <MX_GPIO_Init+0x1e4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a71      	ldr	r2, [pc, #452]	; (8000a5c <MX_GPIO_Init+0x1e4>)
 8000898:	f043 0310 	orr.w	r3, r3, #16
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b6f      	ldr	r3, [pc, #444]	; (8000a5c <MX_GPIO_Init+0x1e4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0310 	and.w	r3, r3, #16
 80008a6:	61bb      	str	r3, [r7, #24]
 80008a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	4b6b      	ldr	r3, [pc, #428]	; (8000a5c <MX_GPIO_Init+0x1e4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a6a      	ldr	r2, [pc, #424]	; (8000a5c <MX_GPIO_Init+0x1e4>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b68      	ldr	r3, [pc, #416]	; (8000a5c <MX_GPIO_Init+0x1e4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b64      	ldr	r3, [pc, #400]	; (8000a5c <MX_GPIO_Init+0x1e4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a63      	ldr	r2, [pc, #396]	; (8000a5c <MX_GPIO_Init+0x1e4>)
 80008d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b61      	ldr	r3, [pc, #388]	; (8000a5c <MX_GPIO_Init+0x1e4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b5d      	ldr	r3, [pc, #372]	; (8000a5c <MX_GPIO_Init+0x1e4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a5c      	ldr	r2, [pc, #368]	; (8000a5c <MX_GPIO_Init+0x1e4>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b5a      	ldr	r3, [pc, #360]	; (8000a5c <MX_GPIO_Init+0x1e4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	4b56      	ldr	r3, [pc, #344]	; (8000a5c <MX_GPIO_Init+0x1e4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a55      	ldr	r2, [pc, #340]	; (8000a5c <MX_GPIO_Init+0x1e4>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b53      	ldr	r3, [pc, #332]	; (8000a5c <MX_GPIO_Init+0x1e4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b4f      	ldr	r3, [pc, #316]	; (8000a5c <MX_GPIO_Init+0x1e4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a4e      	ldr	r2, [pc, #312]	; (8000a5c <MX_GPIO_Init+0x1e4>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b4c      	ldr	r3, [pc, #304]	; (8000a5c <MX_GPIO_Init+0x1e4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2108      	movs	r1, #8
 800093a:	4849      	ldr	r0, [pc, #292]	; (8000a60 <MX_GPIO_Init+0x1e8>)
 800093c:	f001 ff2e 	bl	800279c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2101      	movs	r1, #1
 8000944:	4847      	ldr	r0, [pc, #284]	; (8000a64 <MX_GPIO_Init+0x1ec>)
 8000946:	f001 ff29 	bl	800279c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800094a:	2200      	movs	r2, #0
 800094c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000950:	4845      	ldr	r0, [pc, #276]	; (8000a68 <MX_GPIO_Init+0x1f0>)
 8000952:	f001 ff23 	bl	800279c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000956:	2308      	movs	r3, #8
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	483c      	ldr	r0, [pc, #240]	; (8000a60 <MX_GPIO_Init+0x1e8>)
 800096e:	f001 fd79 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000972:	2301      	movs	r3, #1
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4836      	ldr	r0, [pc, #216]	; (8000a64 <MX_GPIO_Init+0x1ec>)
 800098a:	f001 fd6b 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800098e:	2308      	movs	r3, #8
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800099e:	2305      	movs	r3, #5
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	482e      	ldr	r0, [pc, #184]	; (8000a64 <MX_GPIO_Init+0x1ec>)
 80009aa:	f001 fd5b 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	482a      	ldr	r0, [pc, #168]	; (8000a6c <MX_GPIO_Init+0x1f4>)
 80009c4:	f001 fd4e 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009c8:	2304      	movs	r3, #4
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4825      	ldr	r0, [pc, #148]	; (8000a70 <MX_GPIO_Init+0x1f8>)
 80009dc:	f001 fd42 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f2:	2305      	movs	r3, #5
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	481c      	ldr	r0, [pc, #112]	; (8000a70 <MX_GPIO_Init+0x1f8>)
 80009fe:	f001 fd31 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a02:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a06:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4813      	ldr	r0, [pc, #76]	; (8000a68 <MX_GPIO_Init+0x1f0>)
 8000a1c:	f001 fd22 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a20:	2320      	movs	r3, #32
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_GPIO_Init+0x1f0>)
 8000a34:	f001 fd16 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a3c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <MX_GPIO_Init+0x1e8>)
 8000a4e:	f001 fd09 	bl	8002464 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a52:	bf00      	nop
 8000a54:	3730      	adds	r7, #48	; 0x30
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40020800 	.word	0x40020800
 8000a68:	40020c00 	.word	0x40020c00
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	40020400 	.word	0x40020400

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <Error_Handler+0x8>
	...

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <HAL_MspInit+0x4c>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_MspInit+0x4c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_MspInit+0x4c>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000abe:	2007      	movs	r0, #7
 8000ac0:	f001 f91e 	bl	8001d00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800

08000ad0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a26      	ldr	r2, [pc, #152]	; (8000b78 <HAL_ADC_MspInit+0xa8>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d145      	bne.n	8000b6e <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <HAL_ADC_MspInit+0xac>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <HAL_ADC_MspInit+0xac>)
 8000aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0xac>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <HAL_ADC_MspInit+0xb0>)
 8000b00:	4a20      	ldr	r2, [pc, #128]	; (8000b84 <HAL_ADC_MspInit+0xb4>)
 8000b02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <HAL_ADC_MspInit+0xb0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <HAL_ADC_MspInit+0xb0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <HAL_ADC_MspInit+0xb0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <HAL_ADC_MspInit+0xb0>)
 8000b18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <HAL_ADC_MspInit+0xb0>)
 8000b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <HAL_ADC_MspInit+0xb0>)
 8000b28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <HAL_ADC_MspInit+0xb0>)
 8000b30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b34:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_ADC_MspInit+0xb0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <HAL_ADC_MspInit+0xb0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b42:	480f      	ldr	r0, [pc, #60]	; (8000b80 <HAL_ADC_MspInit+0xb0>)
 8000b44:	f001 f91e 	bl	8001d84 <HAL_DMA_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 8000b4e:	f7ff ff91 	bl	8000a74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <HAL_ADC_MspInit+0xb0>)
 8000b56:	639a      	str	r2, [r3, #56]	; 0x38
 8000b58:	4a09      	ldr	r2, [pc, #36]	; (8000b80 <HAL_ADC_MspInit+0xb0>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	2012      	movs	r0, #18
 8000b64:	f001 f8d7 	bl	8001d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b68:	2012      	movs	r0, #18
 8000b6a:	f001 f8f0 	bl	8001d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40012000 	.word	0x40012000
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	200000fc 	.word	0x200000fc
 8000b84:	40026410 	.word	0x40026410

08000b88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a19      	ldr	r2, [pc, #100]	; (8000c0c <HAL_I2C_MspInit+0x84>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d12c      	bne.n	8000c04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bc6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bcc:	2312      	movs	r3, #18
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	480c      	ldr	r0, [pc, #48]	; (8000c14 <HAL_I2C_MspInit+0x8c>)
 8000be4:	f001 fc3e 	bl	8002464 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c04:	bf00      	nop
 8000c06:	3728      	adds	r7, #40	; 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40005400 	.word	0x40005400
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020400 	.word	0x40020400

08000c18 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08e      	sub	sp, #56	; 0x38
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a31      	ldr	r2, [pc, #196]	; (8000d08 <HAL_I2S_MspInit+0xf0>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d15a      	bne.n	8000cfe <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c4c:	23c0      	movs	r3, #192	; 0xc0
 8000c4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f004 fc2b 	bl	80054b4 <HAL_RCCEx_PeriphCLKConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c64:	f7ff ff06 	bl	8000a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <HAL_I2S_MspInit+0xf4>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	4a26      	ldr	r2, [pc, #152]	; (8000d0c <HAL_I2S_MspInit+0xf4>)
 8000c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c76:	6413      	str	r3, [r2, #64]	; 0x40
 8000c78:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <HAL_I2S_MspInit+0xf4>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <HAL_I2S_MspInit+0xf4>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	4a1f      	ldr	r2, [pc, #124]	; (8000d0c <HAL_I2S_MspInit+0xf4>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6313      	str	r3, [r2, #48]	; 0x30
 8000c94:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <HAL_I2S_MspInit+0xf4>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_I2S_MspInit+0xf4>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	4a18      	ldr	r2, [pc, #96]	; (8000d0c <HAL_I2S_MspInit+0xf4>)
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <HAL_I2S_MspInit+0xf4>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	f003 0304 	and.w	r3, r3, #4
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ccc:	2306      	movs	r3, #6
 8000cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480e      	ldr	r0, [pc, #56]	; (8000d10 <HAL_I2S_MspInit+0xf8>)
 8000cd8:	f001 fbc4 	bl	8002464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cdc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cee:	2306      	movs	r3, #6
 8000cf0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4806      	ldr	r0, [pc, #24]	; (8000d14 <HAL_I2S_MspInit+0xfc>)
 8000cfa:	f001 fbb3 	bl	8002464 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3738      	adds	r7, #56	; 0x38
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40003c00 	.word	0x40003c00
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000
 8000d14:	40020800 	.word	0x40020800

08000d18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a19      	ldr	r2, [pc, #100]	; (8000d9c <HAL_SPI_MspInit+0x84>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d12b      	bne.n	8000d92 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <HAL_SPI_MspInit+0x88>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	4a17      	ldr	r2, [pc, #92]	; (8000da0 <HAL_SPI_MspInit+0x88>)
 8000d44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d48:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_SPI_MspInit+0x88>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_SPI_MspInit+0x88>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <HAL_SPI_MspInit+0x88>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_SPI_MspInit+0x88>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d72:	23e0      	movs	r3, #224	; 0xe0
 8000d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d82:	2305      	movs	r3, #5
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <HAL_SPI_MspInit+0x8c>)
 8000d8e:	f001 fb69 	bl	8002464 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40013000 	.word	0x40013000
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <NMI_Handler+0x4>

08000dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <MemManage_Handler+0x4>

08000dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f8e4 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <ADC_IRQHandler+0x10>)
 8000e02:	f000 f964 	bl	80010ce <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200000b4 	.word	0x200000b4

08000e10 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <DMA2_Stream0_IRQHandler+0x10>)
 8000e16:	f001 f8bb 	bl	8001f90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200000fc 	.word	0x200000fc

08000e24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <OTG_FS_IRQHandler+0x10>)
 8000e2a:	f001 ff3b 	bl	8002ca4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000634 	.word	0x20000634

08000e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e40:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <_sbrk+0x5c>)
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <_sbrk+0x60>)
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d102      	bne.n	8000e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <_sbrk+0x64>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <_sbrk+0x68>)
 8000e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d207      	bcs.n	8000e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e68:	f007 ffc8 	bl	8008dfc <__errno>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	220c      	movs	r2, #12
 8000e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	e009      	b.n	8000e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <_sbrk+0x64>)
 8000e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20020000 	.word	0x20020000
 8000e98:	00000400 	.word	0x00000400
 8000e9c:	20000250 	.word	0x20000250
 8000ea0:	20000948 	.word	0x20000948

08000ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <SystemInit+0x20>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <SystemInit+0x20>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ece:	490e      	ldr	r1, [pc, #56]	; (8000f08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ee4:	4c0b      	ldr	r4, [pc, #44]	; (8000f14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ef2:	f7ff ffd7 	bl	8000ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f007 ff87 	bl	8008e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efa:	f7ff fafd 	bl	80004f8 <main>
  bx  lr    
 8000efe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000f0c:	080090c8 	.word	0x080090c8
  ldr r2, =_sbss
 8000f10:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000f14:	20000948 	.word	0x20000948

08000f18 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <CAN1_RX0_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <HAL_Init+0x40>)
 8000f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_Init+0x40>)
 8000f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <HAL_Init+0x40>)
 8000f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 fedb 	bl	8001d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 f808 	bl	8000f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff fd96 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023c00 	.word	0x40023c00

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_InitTick+0x54>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_InitTick+0x58>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fef3 	bl	8001d6a <HAL_SYSTICK_Config>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00e      	b.n	8000fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d80a      	bhi.n	8000faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f94:	2200      	movs	r2, #0
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f000 febb 	bl	8001d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <HAL_InitTick+0x5c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20000254 	.word	0x20000254

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000254 	.word	0x20000254

08001000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff ffee 	bl	8000fe8 <HAL_GetTick>
 800100c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001018:	d005      	beq.n	8001026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_Delay+0x44>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001026:	bf00      	nop
 8001028:	f7ff ffde 	bl	8000fe8 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8f7      	bhi.n	8001028 <HAL_Delay+0x28>
  {
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008

08001048 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e033      	b.n	80010c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	2b00      	cmp	r3, #0
 8001064:	d109      	bne.n	800107a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff fd32 	bl	8000ad0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f003 0310 	and.w	r3, r3, #16
 8001082:	2b00      	cmp	r3, #0
 8001084:	d118      	bne.n	80010b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800108e:	f023 0302 	bic.w	r3, r3, #2
 8001092:	f043 0202 	orr.w	r2, r3, #2
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 fbd8 	bl	8001850 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f023 0303 	bic.w	r3, r3, #3
 80010ae:	f043 0201 	orr.w	r2, r3, #1
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	641a      	str	r2, [r3, #64]	; 0x40
 80010b6:	e001      	b.n	80010bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	f003 0320 	and.w	r3, r3, #32
 80010fc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d049      	beq.n	8001198 <HAL_ADC_IRQHandler+0xca>
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d046      	beq.n	8001198 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	2b00      	cmp	r3, #0
 8001114:	d105      	bne.n	8001122 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d12b      	bne.n	8001188 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001134:	2b00      	cmp	r3, #0
 8001136:	d127      	bne.n	8001188 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001142:	2b00      	cmp	r3, #0
 8001144:	d006      	beq.n	8001154 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001150:	2b00      	cmp	r3, #0
 8001152:	d119      	bne.n	8001188 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0220 	bic.w	r2, r2, #32
 8001162:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d105      	bne.n	8001188 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	f043 0201 	orr.w	r2, r3, #1
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff f99f 	bl	80004cc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f06f 0212 	mvn.w	r2, #18
 8001196:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d057      	beq.n	800125e <HAL_ADC_IRQHandler+0x190>
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d054      	beq.n	800125e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d105      	bne.n	80011cc <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d139      	bne.n	800124e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d006      	beq.n	80011f6 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d12b      	bne.n	800124e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001200:	2b00      	cmp	r3, #0
 8001202:	d124      	bne.n	800124e <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800120e:	2b00      	cmp	r3, #0
 8001210:	d11d      	bne.n	800124e <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001216:	2b00      	cmp	r3, #0
 8001218:	d119      	bne.n	800124e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001228:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123e:	2b00      	cmp	r3, #0
 8001240:	d105      	bne.n	800124e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f043 0201 	orr.w	r2, r3, #1
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 fc7c 	bl	8001b4c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f06f 020c 	mvn.w	r2, #12
 800125c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d017      	beq.n	80012a4 <HAL_ADC_IRQHandler+0x1d6>
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d014      	beq.n	80012a4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b01      	cmp	r3, #1
 8001286:	d10d      	bne.n	80012a4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 f945 	bl	8001524 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f06f 0201 	mvn.w	r2, #1
 80012a2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f003 0320 	and.w	r3, r3, #32
 80012aa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012b2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d015      	beq.n	80012e6 <HAL_ADC_IRQHandler+0x218>
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d012      	beq.n	80012e6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c4:	f043 0202 	orr.w	r2, r3, #2
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f06f 0220 	mvn.w	r2, #32
 80012d4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 f92e 	bl	8001538 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f06f 0220 	mvn.w	r2, #32
 80012e4:	601a      	str	r2, [r3, #0]
  }
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <HAL_ADC_Start_DMA+0x1e>
 800130a:	2302      	movs	r3, #2
 800130c:	e0e9      	b.n	80014e2 <HAL_ADC_Start_DMA+0x1f2>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b01      	cmp	r3, #1
 8001322:	d018      	beq.n	8001356 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0201 	orr.w	r2, r2, #1
 8001332:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001334:	4b6d      	ldr	r3, [pc, #436]	; (80014ec <HAL_ADC_Start_DMA+0x1fc>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a6d      	ldr	r2, [pc, #436]	; (80014f0 <HAL_ADC_Start_DMA+0x200>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	0c9a      	lsrs	r2, r3, #18
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001348:	e002      	b.n	8001350 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	3b01      	subs	r3, #1
 800134e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f9      	bne.n	800134a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001364:	d107      	bne.n	8001376 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001374:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b01      	cmp	r3, #1
 8001382:	f040 80a1 	bne.w	80014c8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800138e:	f023 0301 	bic.w	r3, r3, #1
 8001392:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d007      	beq.n	80013b8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013c4:	d106      	bne.n	80013d4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f023 0206 	bic.w	r2, r3, #6
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	645a      	str	r2, [r3, #68]	; 0x44
 80013d2:	e002      	b.n	80013da <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013e2:	4b44      	ldr	r3, [pc, #272]	; (80014f4 <HAL_ADC_Start_DMA+0x204>)
 80013e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ea:	4a43      	ldr	r2, [pc, #268]	; (80014f8 <HAL_ADC_Start_DMA+0x208>)
 80013ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f2:	4a42      	ldr	r2, [pc, #264]	; (80014fc <HAL_ADC_Start_DMA+0x20c>)
 80013f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fa:	4a41      	ldr	r2, [pc, #260]	; (8001500 <HAL_ADC_Start_DMA+0x210>)
 80013fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001406:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001416:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001426:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	334c      	adds	r3, #76	; 0x4c
 8001432:	4619      	mov	r1, r3
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f000 fd52 	bl	8001ee0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 031f 	and.w	r3, r3, #31
 8001444:	2b00      	cmp	r3, #0
 8001446:	d12a      	bne.n	800149e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a2d      	ldr	r2, [pc, #180]	; (8001504 <HAL_ADC_Start_DMA+0x214>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d015      	beq.n	800147e <HAL_ADC_Start_DMA+0x18e>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a2c      	ldr	r2, [pc, #176]	; (8001508 <HAL_ADC_Start_DMA+0x218>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d105      	bne.n	8001468 <HAL_ADC_Start_DMA+0x178>
 800145c:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <HAL_ADC_Start_DMA+0x204>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 031f 	and.w	r3, r3, #31
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00a      	beq.n	800147e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a27      	ldr	r2, [pc, #156]	; (800150c <HAL_ADC_Start_DMA+0x21c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d136      	bne.n	80014e0 <HAL_ADC_Start_DMA+0x1f0>
 8001472:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <HAL_ADC_Start_DMA+0x204>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 0310 	and.w	r3, r3, #16
 800147a:	2b00      	cmp	r3, #0
 800147c:	d130      	bne.n	80014e0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d129      	bne.n	80014e0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	e020      	b.n	80014e0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a18      	ldr	r2, [pc, #96]	; (8001504 <HAL_ADC_Start_DMA+0x214>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d11b      	bne.n	80014e0 <HAL_ADC_Start_DMA+0x1f0>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d114      	bne.n	80014e0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	e00b      	b.n	80014e0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	f043 0210 	orr.w	r2, r3, #16
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d8:	f043 0201 	orr.w	r2, r3, #1
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000000 	.word	0x20000000
 80014f0:	431bde83 	.word	0x431bde83
 80014f4:	40012300 	.word	0x40012300
 80014f8:	08001a49 	.word	0x08001a49
 80014fc:	08001b03 	.word	0x08001b03
 8001500:	08001b1f 	.word	0x08001b1f
 8001504:	40012000 	.word	0x40012000
 8001508:	40012100 	.word	0x40012100
 800150c:	40012200 	.word	0x40012200

08001510 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x1c>
 8001564:	2302      	movs	r3, #2
 8001566:	e105      	b.n	8001774 <HAL_ADC_ConfigChannel+0x228>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b09      	cmp	r3, #9
 8001576:	d925      	bls.n	80015c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68d9      	ldr	r1, [r3, #12]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	b29b      	uxth	r3, r3
 8001584:	461a      	mov	r2, r3
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	3b1e      	subs	r3, #30
 800158e:	2207      	movs	r2, #7
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43da      	mvns	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	400a      	ands	r2, r1
 800159c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68d9      	ldr	r1, [r3, #12]
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	4603      	mov	r3, r0
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4403      	add	r3, r0
 80015b6:	3b1e      	subs	r3, #30
 80015b8:	409a      	lsls	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	e022      	b.n	800160a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6919      	ldr	r1, [r3, #16]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	2207      	movs	r2, #7
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	400a      	ands	r2, r1
 80015e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6919      	ldr	r1, [r3, #16]
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4618      	mov	r0, r3
 80015fa:	4603      	mov	r3, r0
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4403      	add	r3, r0
 8001600:	409a      	lsls	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b06      	cmp	r3, #6
 8001610:	d824      	bhi.n	800165c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	3b05      	subs	r3, #5
 8001624:	221f      	movs	r2, #31
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	400a      	ands	r2, r1
 8001632:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	b29b      	uxth	r3, r3
 8001640:	4618      	mov	r0, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	3b05      	subs	r3, #5
 800164e:	fa00 f203 	lsl.w	r2, r0, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	635a      	str	r2, [r3, #52]	; 0x34
 800165a:	e04c      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b0c      	cmp	r3, #12
 8001662:	d824      	bhi.n	80016ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	3b23      	subs	r3, #35	; 0x23
 8001676:	221f      	movs	r2, #31
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43da      	mvns	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	400a      	ands	r2, r1
 8001684:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	b29b      	uxth	r3, r3
 8001692:	4618      	mov	r0, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	3b23      	subs	r3, #35	; 0x23
 80016a0:	fa00 f203 	lsl.w	r2, r0, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	631a      	str	r2, [r3, #48]	; 0x30
 80016ac:	e023      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	3b41      	subs	r3, #65	; 0x41
 80016c0:	221f      	movs	r2, #31
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	400a      	ands	r2, r1
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4618      	mov	r0, r3
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	3b41      	subs	r3, #65	; 0x41
 80016ea:	fa00 f203 	lsl.w	r2, r0, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <HAL_ADC_ConfigChannel+0x234>)
 80016f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a21      	ldr	r2, [pc, #132]	; (8001784 <HAL_ADC_ConfigChannel+0x238>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d109      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x1cc>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b12      	cmp	r3, #18
 800170a:	d105      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a19      	ldr	r2, [pc, #100]	; (8001784 <HAL_ADC_ConfigChannel+0x238>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d123      	bne.n	800176a <HAL_ADC_ConfigChannel+0x21e>
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b10      	cmp	r3, #16
 8001728:	d003      	beq.n	8001732 <HAL_ADC_ConfigChannel+0x1e6>
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2b11      	cmp	r3, #17
 8001730:	d11b      	bne.n	800176a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b10      	cmp	r3, #16
 8001744:	d111      	bne.n	800176a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <HAL_ADC_ConfigChannel+0x23c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a10      	ldr	r2, [pc, #64]	; (800178c <HAL_ADC_ConfigChannel+0x240>)
 800174c:	fba2 2303 	umull	r2, r3, r2, r3
 8001750:	0c9a      	lsrs	r2, r3, #18
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800175c:	e002      	b.n	8001764 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	3b01      	subs	r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f9      	bne.n	800175e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	40012300 	.word	0x40012300
 8001784:	40012000 	.word	0x40012000
 8001788:	20000000 	.word	0x20000000
 800178c:	431bde83 	.word	0x431bde83

08001790 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_ADC_AnalogWDGConfig+0x18>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e04d      	b.n	8001844 <HAL_ADC_AnalogWDGConfig+0xb4>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	7c1b      	ldrb	r3, [r3, #16]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d108      	bne.n	80017ca <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	e007      	b.n	80017da <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017d8:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80017e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80017ec:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6859      	ldr	r1, [r3, #4]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	6852      	ldr	r2, [r2, #4]
 8001808:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	6892      	ldr	r2, [r2, #8]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 021f 	bic.w	r2, r2, #31
 8001822:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	b29b      	uxth	r3, r3
 8001830:	4619      	mov	r1, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001858:	4b79      	ldr	r3, [pc, #484]	; (8001a40 <ADC_Init+0x1f0>)
 800185a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	431a      	orrs	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001884:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6859      	ldr	r1, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	021a      	lsls	r2, r3, #8
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6899      	ldr	r1, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	4a58      	ldr	r2, [pc, #352]	; (8001a44 <ADC_Init+0x1f4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d022      	beq.n	800192e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6899      	ldr	r1, [r3, #8]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001918:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6899      	ldr	r1, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	e00f      	b.n	800194e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800193c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800194c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0202 	bic.w	r2, r2, #2
 800195c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6899      	ldr	r1, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7e1b      	ldrb	r3, [r3, #24]
 8001968:	005a      	lsls	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d01b      	beq.n	80019b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800198a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800199a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6859      	ldr	r1, [r3, #4]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	3b01      	subs	r3, #1
 80019a8:	035a      	lsls	r2, r3, #13
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	e007      	b.n	80019c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	3b01      	subs	r3, #1
 80019e0:	051a      	lsls	r2, r3, #20
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6899      	ldr	r1, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a06:	025a      	lsls	r2, r3, #9
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6899      	ldr	r1, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	029a      	lsls	r2, r3, #10
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	609a      	str	r2, [r3, #8]
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	40012300 	.word	0x40012300
 8001a44:	0f000001 	.word	0x0f000001

08001a48 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a54:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d13c      	bne.n	8001adc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d12b      	bne.n	8001ad4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d127      	bne.n	8001ad4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d006      	beq.n	8001aa0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d119      	bne.n	8001ad4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0220 	bic.w	r2, r2, #32
 8001aae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d105      	bne.n	8001ad4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	f043 0201 	orr.w	r2, r3, #1
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f7fe fcf9 	bl	80004cc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001ada:	e00e      	b.n	8001afa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f7ff fd25 	bl	8001538 <HAL_ADC_ErrorCallback>
}
 8001aee:	e004      	b.n	8001afa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	4798      	blx	r3
}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f7ff fcfd 	bl	8001510 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2240      	movs	r2, #64	; 0x40
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f043 0204 	orr.w	r2, r3, #4
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7ff fcfa 	bl	8001538 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b44:	bf00      	nop
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b92:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	60d3      	str	r3, [r2, #12]
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	0a1b      	lsrs	r3, r3, #8
 8001bb2:	f003 0307 	and.w	r3, r3, #7
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	db0b      	blt.n	8001bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	f003 021f 	and.w	r2, r3, #31
 8001bdc:	4907      	ldr	r1, [pc, #28]	; (8001bfc <__NVIC_EnableIRQ+0x38>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	095b      	lsrs	r3, r3, #5
 8001be4:	2001      	movs	r0, #1
 8001be6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000e100 	.word	0xe000e100

08001c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	db0a      	blt.n	8001c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	490c      	ldr	r1, [pc, #48]	; (8001c4c <__NVIC_SetPriority+0x4c>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	0112      	lsls	r2, r2, #4
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	440b      	add	r3, r1
 8001c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c28:	e00a      	b.n	8001c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4908      	ldr	r1, [pc, #32]	; (8001c50 <__NVIC_SetPriority+0x50>)
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	3b04      	subs	r3, #4
 8001c38:	0112      	lsls	r2, r2, #4
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	761a      	strb	r2, [r3, #24]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000e100 	.word	0xe000e100
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	; 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f1c3 0307 	rsb	r3, r3, #7
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	bf28      	it	cs
 8001c72:	2304      	movcs	r3, #4
 8001c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	d902      	bls.n	8001c84 <NVIC_EncodePriority+0x30>
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3b03      	subs	r3, #3
 8001c82:	e000      	b.n	8001c86 <NVIC_EncodePriority+0x32>
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	f04f 32ff 	mov.w	r2, #4294967295
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43da      	mvns	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	401a      	ands	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	43d9      	mvns	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	4313      	orrs	r3, r2
         );
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3724      	adds	r7, #36	; 0x24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ccc:	d301      	bcc.n	8001cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00f      	b.n	8001cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <SysTick_Config+0x40>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cda:	210f      	movs	r1, #15
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	f7ff ff8e 	bl	8001c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <SysTick_Config+0x40>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cea:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <SysTick_Config+0x40>)
 8001cec:	2207      	movs	r2, #7
 8001cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	e000e010 	.word	0xe000e010

08001d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ff29 	bl	8001b60 <__NVIC_SetPriorityGrouping>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d28:	f7ff ff3e 	bl	8001ba8 <__NVIC_GetPriorityGrouping>
 8001d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	6978      	ldr	r0, [r7, #20]
 8001d34:	f7ff ff8e 	bl	8001c54 <NVIC_EncodePriority>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff5d 	bl	8001c00 <__NVIC_SetPriority>
}
 8001d46:	bf00      	nop
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff31 	bl	8001bc4 <__NVIC_EnableIRQ>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff ffa2 	bl	8001cbc <SysTick_Config>
 8001d78:	4603      	mov	r3, r0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d90:	f7ff f92a 	bl	8000fe8 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e099      	b.n	8001ed4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0201 	bic.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dc0:	e00f      	b.n	8001de2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dc2:	f7ff f911 	bl	8000fe8 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	d908      	bls.n	8001de2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2203      	movs	r2, #3
 8001dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e078      	b.n	8001ed4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1e8      	bne.n	8001dc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	4b38      	ldr	r3, [pc, #224]	; (8001edc <HAL_DMA_Init+0x158>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d107      	bne.n	8001e4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	4313      	orrs	r3, r2
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f023 0307 	bic.w	r3, r3, #7
 8001e62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d117      	bne.n	8001ea6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00e      	beq.n	8001ea6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 fa6f 	bl	800236c <DMA_CheckFifoParam>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2240      	movs	r2, #64	; 0x40
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e016      	b.n	8001ed4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 fa26 	bl	8002300 <DMA_CalcBaseAndBitshift>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebc:	223f      	movs	r2, #63	; 0x3f
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	f010803f 	.word	0xf010803f

08001ee0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d101      	bne.n	8001f06 <HAL_DMA_Start_IT+0x26>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e040      	b.n	8001f88 <HAL_DMA_Start_IT+0xa8>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d12f      	bne.n	8001f7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 f9b8 	bl	80022a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f38:	223f      	movs	r2, #63	; 0x3f
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0216 	orr.w	r2, r2, #22
 8001f4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0208 	orr.w	r2, r2, #8
 8001f66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	e005      	b.n	8001f86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f82:	2302      	movs	r3, #2
 8001f84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f9c:	4b8e      	ldr	r3, [pc, #568]	; (80021d8 <HAL_DMA_IRQHandler+0x248>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a8e      	ldr	r2, [pc, #568]	; (80021dc <HAL_DMA_IRQHandler+0x24c>)
 8001fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa6:	0a9b      	lsrs	r3, r3, #10
 8001fa8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fba:	2208      	movs	r2, #8
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d01a      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d013      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0204 	bic.w	r2, r2, #4
 8001fe2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe8:	2208      	movs	r2, #8
 8001fea:	409a      	lsls	r2, r3
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff4:	f043 0201 	orr.w	r2, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002000:	2201      	movs	r2, #1
 8002002:	409a      	lsls	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d012      	beq.n	8002032 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00b      	beq.n	8002032 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201e:	2201      	movs	r2, #1
 8002020:	409a      	lsls	r2, r3
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202a:	f043 0202 	orr.w	r2, r3, #2
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	2204      	movs	r2, #4
 8002038:	409a      	lsls	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4013      	ands	r3, r2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d012      	beq.n	8002068 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00b      	beq.n	8002068 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002054:	2204      	movs	r2, #4
 8002056:	409a      	lsls	r2, r3
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002060:	f043 0204 	orr.w	r2, r3, #4
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	2210      	movs	r2, #16
 800206e:	409a      	lsls	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d043      	beq.n	8002100 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d03c      	beq.n	8002100 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208a:	2210      	movs	r2, #16
 800208c:	409a      	lsls	r2, r3
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d018      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d108      	bne.n	80020c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d024      	beq.n	8002100 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	4798      	blx	r3
 80020be:	e01f      	b.n	8002100 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d01b      	beq.n	8002100 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	4798      	blx	r3
 80020d0:	e016      	b.n	8002100 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0208 	bic.w	r2, r2, #8
 80020ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	2220      	movs	r2, #32
 8002106:	409a      	lsls	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4013      	ands	r3, r2
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 808f 	beq.w	8002230 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 8087 	beq.w	8002230 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002126:	2220      	movs	r2, #32
 8002128:	409a      	lsls	r2, r3
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b05      	cmp	r3, #5
 8002138:	d136      	bne.n	80021a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0216 	bic.w	r2, r2, #22
 8002148:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695a      	ldr	r2, [r3, #20]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002158:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	2b00      	cmp	r3, #0
 8002160:	d103      	bne.n	800216a <HAL_DMA_IRQHandler+0x1da>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002166:	2b00      	cmp	r3, #0
 8002168:	d007      	beq.n	800217a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0208 	bic.w	r2, r2, #8
 8002178:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217e:	223f      	movs	r2, #63	; 0x3f
 8002180:	409a      	lsls	r2, r3
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800219a:	2b00      	cmp	r3, #0
 800219c:	d07e      	beq.n	800229c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	4798      	blx	r3
        }
        return;
 80021a6:	e079      	b.n	800229c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d01d      	beq.n	80021f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10d      	bne.n	80021e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d031      	beq.n	8002230 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	4798      	blx	r3
 80021d4:	e02c      	b.n	8002230 <HAL_DMA_IRQHandler+0x2a0>
 80021d6:	bf00      	nop
 80021d8:	20000000 	.word	0x20000000
 80021dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d023      	beq.n	8002230 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
 80021f0:	e01e      	b.n	8002230 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10f      	bne.n	8002220 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0210 	bic.w	r2, r2, #16
 800220e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002234:	2b00      	cmp	r3, #0
 8002236:	d032      	beq.n	800229e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	d022      	beq.n	800228a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2205      	movs	r2, #5
 8002248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0201 	bic.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	3301      	adds	r3, #1
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	429a      	cmp	r2, r3
 8002266:	d307      	bcc.n	8002278 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f2      	bne.n	800225c <HAL_DMA_IRQHandler+0x2cc>
 8002276:	e000      	b.n	800227a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002278:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	4798      	blx	r3
 800229a:	e000      	b.n	800229e <HAL_DMA_IRQHandler+0x30e>
        return;
 800229c:	bf00      	nop
    }
  }
}
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b40      	cmp	r3, #64	; 0x40
 80022d0:	d108      	bne.n	80022e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022e2:	e007      	b.n	80022f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	60da      	str	r2, [r3, #12]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	3b10      	subs	r3, #16
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <DMA_CalcBaseAndBitshift+0x64>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800231a:	4a13      	ldr	r2, [pc, #76]	; (8002368 <DMA_CalcBaseAndBitshift+0x68>)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d909      	bls.n	8002342 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002336:	f023 0303 	bic.w	r3, r3, #3
 800233a:	1d1a      	adds	r2, r3, #4
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	659a      	str	r2, [r3, #88]	; 0x58
 8002340:	e007      	b.n	8002352 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800234a:	f023 0303 	bic.w	r3, r3, #3
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	aaaaaaab 	.word	0xaaaaaaab
 8002368:	080090b0 	.word	0x080090b0

0800236c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d11f      	bne.n	80023c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b03      	cmp	r3, #3
 800238a:	d856      	bhi.n	800243a <DMA_CheckFifoParam+0xce>
 800238c:	a201      	add	r2, pc, #4	; (adr r2, 8002394 <DMA_CheckFifoParam+0x28>)
 800238e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002392:	bf00      	nop
 8002394:	080023a5 	.word	0x080023a5
 8002398:	080023b7 	.word	0x080023b7
 800239c:	080023a5 	.word	0x080023a5
 80023a0:	0800243b 	.word	0x0800243b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d046      	beq.n	800243e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b4:	e043      	b.n	800243e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023be:	d140      	bne.n	8002442 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c4:	e03d      	b.n	8002442 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ce:	d121      	bne.n	8002414 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d837      	bhi.n	8002446 <DMA_CheckFifoParam+0xda>
 80023d6:	a201      	add	r2, pc, #4	; (adr r2, 80023dc <DMA_CheckFifoParam+0x70>)
 80023d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023dc:	080023ed 	.word	0x080023ed
 80023e0:	080023f3 	.word	0x080023f3
 80023e4:	080023ed 	.word	0x080023ed
 80023e8:	08002405 	.word	0x08002405
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      break;
 80023f0:	e030      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d025      	beq.n	800244a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002402:	e022      	b.n	800244a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800240c:	d11f      	bne.n	800244e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002412:	e01c      	b.n	800244e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d903      	bls.n	8002422 <DMA_CheckFifoParam+0xb6>
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d003      	beq.n	8002428 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002420:	e018      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
      break;
 8002426:	e015      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00e      	beq.n	8002452 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
      break;
 8002438:	e00b      	b.n	8002452 <DMA_CheckFifoParam+0xe6>
      break;
 800243a:	bf00      	nop
 800243c:	e00a      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 800243e:	bf00      	nop
 8002440:	e008      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 8002442:	bf00      	nop
 8002444:	e006      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 8002446:	bf00      	nop
 8002448:	e004      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 800244a:	bf00      	nop
 800244c:	e002      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;   
 800244e:	bf00      	nop
 8002450:	e000      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 8002452:	bf00      	nop
    }
  } 
  
  return status; 
 8002454:	7bfb      	ldrb	r3, [r7, #15]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop

08002464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	e16b      	b.n	8002758 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002480:	2201      	movs	r2, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	429a      	cmp	r2, r3
 800249a:	f040 815a 	bne.w	8002752 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d005      	beq.n	80024b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d130      	bne.n	8002518 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	2203      	movs	r2, #3
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ec:	2201      	movs	r2, #1
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 0201 	and.w	r2, r3, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b03      	cmp	r3, #3
 8002522:	d017      	beq.n	8002554 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d123      	bne.n	80025a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	08da      	lsrs	r2, r3, #3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3208      	adds	r2, #8
 8002568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	220f      	movs	r2, #15
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	08da      	lsrs	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3208      	adds	r2, #8
 80025a2:	69b9      	ldr	r1, [r7, #24]
 80025a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0203 	and.w	r2, r3, #3
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80b4 	beq.w	8002752 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	4b60      	ldr	r3, [pc, #384]	; (8002770 <HAL_GPIO_Init+0x30c>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	4a5f      	ldr	r2, [pc, #380]	; (8002770 <HAL_GPIO_Init+0x30c>)
 80025f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f8:	6453      	str	r3, [r2, #68]	; 0x44
 80025fa:	4b5d      	ldr	r3, [pc, #372]	; (8002770 <HAL_GPIO_Init+0x30c>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002606:	4a5b      	ldr	r2, [pc, #364]	; (8002774 <HAL_GPIO_Init+0x310>)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	3302      	adds	r3, #2
 800260e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	220f      	movs	r2, #15
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a52      	ldr	r2, [pc, #328]	; (8002778 <HAL_GPIO_Init+0x314>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d02b      	beq.n	800268a <HAL_GPIO_Init+0x226>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a51      	ldr	r2, [pc, #324]	; (800277c <HAL_GPIO_Init+0x318>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d025      	beq.n	8002686 <HAL_GPIO_Init+0x222>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a50      	ldr	r2, [pc, #320]	; (8002780 <HAL_GPIO_Init+0x31c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d01f      	beq.n	8002682 <HAL_GPIO_Init+0x21e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4f      	ldr	r2, [pc, #316]	; (8002784 <HAL_GPIO_Init+0x320>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d019      	beq.n	800267e <HAL_GPIO_Init+0x21a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4e      	ldr	r2, [pc, #312]	; (8002788 <HAL_GPIO_Init+0x324>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d013      	beq.n	800267a <HAL_GPIO_Init+0x216>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4d      	ldr	r2, [pc, #308]	; (800278c <HAL_GPIO_Init+0x328>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00d      	beq.n	8002676 <HAL_GPIO_Init+0x212>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4c      	ldr	r2, [pc, #304]	; (8002790 <HAL_GPIO_Init+0x32c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d007      	beq.n	8002672 <HAL_GPIO_Init+0x20e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4b      	ldr	r2, [pc, #300]	; (8002794 <HAL_GPIO_Init+0x330>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d101      	bne.n	800266e <HAL_GPIO_Init+0x20a>
 800266a:	2307      	movs	r3, #7
 800266c:	e00e      	b.n	800268c <HAL_GPIO_Init+0x228>
 800266e:	2308      	movs	r3, #8
 8002670:	e00c      	b.n	800268c <HAL_GPIO_Init+0x228>
 8002672:	2306      	movs	r3, #6
 8002674:	e00a      	b.n	800268c <HAL_GPIO_Init+0x228>
 8002676:	2305      	movs	r3, #5
 8002678:	e008      	b.n	800268c <HAL_GPIO_Init+0x228>
 800267a:	2304      	movs	r3, #4
 800267c:	e006      	b.n	800268c <HAL_GPIO_Init+0x228>
 800267e:	2303      	movs	r3, #3
 8002680:	e004      	b.n	800268c <HAL_GPIO_Init+0x228>
 8002682:	2302      	movs	r3, #2
 8002684:	e002      	b.n	800268c <HAL_GPIO_Init+0x228>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <HAL_GPIO_Init+0x228>
 800268a:	2300      	movs	r3, #0
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	f002 0203 	and.w	r2, r2, #3
 8002692:	0092      	lsls	r2, r2, #2
 8002694:	4093      	lsls	r3, r2
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800269c:	4935      	ldr	r1, [pc, #212]	; (8002774 <HAL_GPIO_Init+0x310>)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	089b      	lsrs	r3, r3, #2
 80026a2:	3302      	adds	r3, #2
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026aa:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <HAL_GPIO_Init+0x334>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ce:	4a32      	ldr	r2, [pc, #200]	; (8002798 <HAL_GPIO_Init+0x334>)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026d4:	4b30      	ldr	r3, [pc, #192]	; (8002798 <HAL_GPIO_Init+0x334>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f8:	4a27      	ldr	r2, [pc, #156]	; (8002798 <HAL_GPIO_Init+0x334>)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026fe:	4b26      	ldr	r3, [pc, #152]	; (8002798 <HAL_GPIO_Init+0x334>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002722:	4a1d      	ldr	r2, [pc, #116]	; (8002798 <HAL_GPIO_Init+0x334>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002728:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <HAL_GPIO_Init+0x334>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800274c:	4a12      	ldr	r2, [pc, #72]	; (8002798 <HAL_GPIO_Init+0x334>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3301      	adds	r3, #1
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	2b0f      	cmp	r3, #15
 800275c:	f67f ae90 	bls.w	8002480 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	3724      	adds	r7, #36	; 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800
 8002774:	40013800 	.word	0x40013800
 8002778:	40020000 	.word	0x40020000
 800277c:	40020400 	.word	0x40020400
 8002780:	40020800 	.word	0x40020800
 8002784:	40020c00 	.word	0x40020c00
 8002788:	40021000 	.word	0x40021000
 800278c:	40021400 	.word	0x40021400
 8002790:	40021800 	.word	0x40021800
 8002794:	40021c00 	.word	0x40021c00
 8002798:	40013c00 	.word	0x40013c00

0800279c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	807b      	strh	r3, [r7, #2]
 80027a8:	4613      	mov	r3, r2
 80027aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027ac:	787b      	ldrb	r3, [r7, #1]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027b2:	887a      	ldrh	r2, [r7, #2]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027b8:	e003      	b.n	80027c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ba:	887b      	ldrh	r3, [r7, #2]
 80027bc:	041a      	lsls	r2, r3, #16
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	619a      	str	r2, [r3, #24]
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80027ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d0:	b08f      	sub	sp, #60	; 0x3c
 80027d2:	af0a      	add	r7, sp, #40	; 0x28
 80027d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e054      	b.n	800288a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f006 f854 	bl	80088a8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2203      	movs	r2, #3
 8002804:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d102      	bne.n	800281a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f003 f883 	bl	800592a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	687e      	ldr	r6, [r7, #4]
 800282c:	466d      	mov	r5, sp
 800282e:	f106 0410 	add.w	r4, r6, #16
 8002832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002834:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800283a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800283e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002842:	1d33      	adds	r3, r6, #4
 8002844:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002846:	6838      	ldr	r0, [r7, #0]
 8002848:	f002 fffd 	bl	8005846 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2101      	movs	r1, #1
 8002852:	4618      	mov	r0, r3
 8002854:	f003 f87a 	bl	800594c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	687e      	ldr	r6, [r7, #4]
 8002860:	466d      	mov	r5, sp
 8002862:	f106 0410 	add.w	r4, r6, #16
 8002866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002872:	e885 0003 	stmia.w	r5, {r0, r1}
 8002876:	1d33      	adds	r3, r6, #4
 8002878:	cb0e      	ldmia	r3, {r1, r2, r3}
 800287a:	6838      	ldr	r0, [r7, #0]
 800287c:	f003 fa02 	bl	8005c84 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002892 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002892:	b590      	push	{r4, r7, lr}
 8002894:	b089      	sub	sp, #36	; 0x24
 8002896:	af04      	add	r7, sp, #16
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	4608      	mov	r0, r1
 800289c:	4611      	mov	r1, r2
 800289e:	461a      	mov	r2, r3
 80028a0:	4603      	mov	r3, r0
 80028a2:	70fb      	strb	r3, [r7, #3]
 80028a4:	460b      	mov	r3, r1
 80028a6:	70bb      	strb	r3, [r7, #2]
 80028a8:	4613      	mov	r3, r2
 80028aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_HCD_HC_Init+0x28>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e076      	b.n	80029a8 <HAL_HCD_HC_Init+0x116>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	212c      	movs	r1, #44	; 0x2c
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	333d      	adds	r3, #61	; 0x3d
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	212c      	movs	r1, #44	; 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	3338      	adds	r3, #56	; 0x38
 80028e2:	787a      	ldrb	r2, [r7, #1]
 80028e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80028e6:	78fb      	ldrb	r3, [r7, #3]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	212c      	movs	r1, #44	; 0x2c
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	3340      	adds	r3, #64	; 0x40
 80028f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80028f6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	3339      	adds	r3, #57	; 0x39
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	333f      	adds	r3, #63	; 0x3f
 8002918:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800291c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	78ba      	ldrb	r2, [r7, #2]
 8002922:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002926:	b2d0      	uxtb	r0, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	212c      	movs	r1, #44	; 0x2c
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	4413      	add	r3, r2
 8002932:	333a      	adds	r3, #58	; 0x3a
 8002934:	4602      	mov	r2, r0
 8002936:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002938:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800293c:	2b00      	cmp	r3, #0
 800293e:	da09      	bge.n	8002954 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	333b      	adds	r3, #59	; 0x3b
 800294e:	2201      	movs	r2, #1
 8002950:	701a      	strb	r2, [r3, #0]
 8002952:	e008      	b.n	8002966 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	333b      	adds	r3, #59	; 0x3b
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	212c      	movs	r1, #44	; 0x2c
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	4413      	add	r3, r2
 8002972:	333c      	adds	r3, #60	; 0x3c
 8002974:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002978:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	787c      	ldrb	r4, [r7, #1]
 8002980:	78ba      	ldrb	r2, [r7, #2]
 8002982:	78f9      	ldrb	r1, [r7, #3]
 8002984:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002986:	9302      	str	r3, [sp, #8]
 8002988:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800298c:	9301      	str	r3, [sp, #4]
 800298e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	4623      	mov	r3, r4
 8002996:	f003 fafb 	bl	8005f90 <USB_HC_Init>
 800299a:	4603      	mov	r3, r0
 800299c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd90      	pop	{r4, r7, pc}

080029b0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_HCD_HC_Halt+0x1e>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e00f      	b.n	80029ee <HAL_HCD_HC_Halt+0x3e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	78fa      	ldrb	r2, [r7, #3]
 80029dc:	4611      	mov	r1, r2
 80029de:	4618      	mov	r0, r3
 80029e0:	f003 fd4b 	bl	800647a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	4608      	mov	r0, r1
 8002a02:	4611      	mov	r1, r2
 8002a04:	461a      	mov	r2, r3
 8002a06:	4603      	mov	r3, r0
 8002a08:	70fb      	strb	r3, [r7, #3]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	70bb      	strb	r3, [r7, #2]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	212c      	movs	r1, #44	; 0x2c
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	333b      	adds	r3, #59	; 0x3b
 8002a20:	78ba      	ldrb	r2, [r7, #2]
 8002a22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	333f      	adds	r3, #63	; 0x3f
 8002a32:	787a      	ldrb	r2, [r7, #1]
 8002a34:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002a36:	7c3b      	ldrb	r3, [r7, #16]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d112      	bne.n	8002a62 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	212c      	movs	r1, #44	; 0x2c
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	3342      	adds	r3, #66	; 0x42
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	333d      	adds	r3, #61	; 0x3d
 8002a5c:	7f3a      	ldrb	r2, [r7, #28]
 8002a5e:	701a      	strb	r2, [r3, #0]
 8002a60:	e008      	b.n	8002a74 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	212c      	movs	r1, #44	; 0x2c
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3342      	adds	r3, #66	; 0x42
 8002a70:	2202      	movs	r2, #2
 8002a72:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002a74:	787b      	ldrb	r3, [r7, #1]
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	f200 80c6 	bhi.w	8002c08 <HAL_HCD_HC_SubmitRequest+0x210>
 8002a7c:	a201      	add	r2, pc, #4	; (adr r2, 8002a84 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a82:	bf00      	nop
 8002a84:	08002a95 	.word	0x08002a95
 8002a88:	08002bf5 	.word	0x08002bf5
 8002a8c:	08002af9 	.word	0x08002af9
 8002a90:	08002b77 	.word	0x08002b77
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002a94:	7c3b      	ldrb	r3, [r7, #16]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	f040 80b8 	bne.w	8002c0c <HAL_HCD_HC_SubmitRequest+0x214>
 8002a9c:	78bb      	ldrb	r3, [r7, #2]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 80b4 	bne.w	8002c0c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002aa4:	8b3b      	ldrh	r3, [r7, #24]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d108      	bne.n	8002abc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3355      	adds	r3, #85	; 0x55
 8002ab8:	2201      	movs	r2, #1
 8002aba:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	212c      	movs	r1, #44	; 0x2c
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3355      	adds	r3, #85	; 0x55
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d109      	bne.n	8002ae4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	212c      	movs	r1, #44	; 0x2c
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	3342      	adds	r3, #66	; 0x42
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002ae2:	e093      	b.n	8002c0c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	212c      	movs	r1, #44	; 0x2c
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	3342      	adds	r3, #66	; 0x42
 8002af2:	2202      	movs	r2, #2
 8002af4:	701a      	strb	r2, [r3, #0]
      break;
 8002af6:	e089      	b.n	8002c0c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002af8:	78bb      	ldrb	r3, [r7, #2]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d11d      	bne.n	8002b3a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	3355      	adds	r3, #85	; 0x55
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	212c      	movs	r1, #44	; 0x2c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3342      	adds	r3, #66	; 0x42
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002b24:	e073      	b.n	8002c0e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	3342      	adds	r3, #66	; 0x42
 8002b34:	2202      	movs	r2, #2
 8002b36:	701a      	strb	r2, [r3, #0]
      break;
 8002b38:	e069      	b.n	8002c0e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	3354      	adds	r3, #84	; 0x54
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	3342      	adds	r3, #66	; 0x42
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]
      break;
 8002b60:	e055      	b.n	8002c0e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3342      	adds	r3, #66	; 0x42
 8002b70:	2202      	movs	r2, #2
 8002b72:	701a      	strb	r2, [r3, #0]
      break;
 8002b74:	e04b      	b.n	8002c0e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002b76:	78bb      	ldrb	r3, [r7, #2]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d11d      	bne.n	8002bb8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	3355      	adds	r3, #85	; 0x55
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d109      	bne.n	8002ba4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3342      	adds	r3, #66	; 0x42
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002ba2:	e034      	b.n	8002c0e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	212c      	movs	r1, #44	; 0x2c
 8002baa:	fb01 f303 	mul.w	r3, r1, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	3342      	adds	r3, #66	; 0x42
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	701a      	strb	r2, [r3, #0]
      break;
 8002bb6:	e02a      	b.n	8002c0e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002bb8:	78fb      	ldrb	r3, [r7, #3]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	212c      	movs	r1, #44	; 0x2c
 8002bbe:	fb01 f303 	mul.w	r3, r1, r3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3354      	adds	r3, #84	; 0x54
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d109      	bne.n	8002be0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	212c      	movs	r1, #44	; 0x2c
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3342      	adds	r3, #66	; 0x42
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
      break;
 8002bde:	e016      	b.n	8002c0e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	3342      	adds	r3, #66	; 0x42
 8002bee:	2202      	movs	r2, #2
 8002bf0:	701a      	strb	r2, [r3, #0]
      break;
 8002bf2:	e00c      	b.n	8002c0e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	212c      	movs	r1, #44	; 0x2c
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	3342      	adds	r3, #66	; 0x42
 8002c02:	2200      	movs	r2, #0
 8002c04:	701a      	strb	r2, [r3, #0]
      break;
 8002c06:	e002      	b.n	8002c0e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002c08:	bf00      	nop
 8002c0a:	e000      	b.n	8002c0e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002c0c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3344      	adds	r3, #68	; 0x44
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	8b3a      	ldrh	r2, [r7, #24]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	202c      	movs	r0, #44	; 0x2c
 8002c28:	fb00 f303 	mul.w	r3, r0, r3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	334c      	adds	r3, #76	; 0x4c
 8002c30:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	212c      	movs	r1, #44	; 0x2c
 8002c38:	fb01 f303 	mul.w	r3, r1, r3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3360      	adds	r3, #96	; 0x60
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002c44:	78fb      	ldrb	r3, [r7, #3]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	212c      	movs	r1, #44	; 0x2c
 8002c4a:	fb01 f303 	mul.w	r3, r1, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	3350      	adds	r3, #80	; 0x50
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	212c      	movs	r1, #44	; 0x2c
 8002c5c:	fb01 f303 	mul.w	r3, r1, r3
 8002c60:	4413      	add	r3, r2
 8002c62:	3339      	adds	r3, #57	; 0x39
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	212c      	movs	r1, #44	; 0x2c
 8002c6e:	fb01 f303 	mul.w	r3, r1, r3
 8002c72:	4413      	add	r3, r2
 8002c74:	3361      	adds	r3, #97	; 0x61
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	78fb      	ldrb	r3, [r7, #3]
 8002c80:	222c      	movs	r2, #44	; 0x2c
 8002c82:	fb02 f303 	mul.w	r3, r2, r3
 8002c86:	3338      	adds	r3, #56	; 0x38
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	18d1      	adds	r1, r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	461a      	mov	r2, r3
 8002c94:	f003 fa9e 	bl	80061d4 <USB_HC_StartXfer>
 8002c98:	4603      	mov	r3, r0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop

08002ca4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f002 ff9f 	bl	8005bfe <USB_GetMode>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	f040 80f6 	bne.w	8002eb4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f002 ff83 	bl	8005bd8 <USB_ReadInterrupts>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80ec 	beq.w	8002eb2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f002 ff7a 	bl	8005bd8 <USB_ReadInterrupts>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cee:	d104      	bne.n	8002cfa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002cf8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f002 ff6a 	bl	8005bd8 <USB_ReadInterrupts>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d0e:	d104      	bne.n	8002d1a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f002 ff5a 	bl	8005bd8 <USB_ReadInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d2e:	d104      	bne.n	8002d3a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f002 ff4a 	bl	8005bd8 <USB_ReadInterrupts>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d103      	bne.n	8002d56 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2202      	movs	r2, #2
 8002d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f002 ff3c 	bl	8005bd8 <USB_ReadInterrupts>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d6a:	d11c      	bne.n	8002da6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002d74:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10f      	bne.n	8002da6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002d86:	2110      	movs	r1, #16
 8002d88:	6938      	ldr	r0, [r7, #16]
 8002d8a:	f002 fe2b 	bl	80059e4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002d8e:	6938      	ldr	r0, [r7, #16]
 8002d90:	f002 fe5c 	bl	8005a4c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2101      	movs	r1, #1
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f003 f832 	bl	8005e04 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f005 fdff 	bl	80089a4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f002 ff14 	bl	8005bd8 <USB_ReadInterrupts>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002db6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dba:	d102      	bne.n	8002dc2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f001 f89e 	bl	8003efe <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f002 ff06 	bl	8005bd8 <USB_ReadInterrupts>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d106      	bne.n	8002de4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f005 fdc8 	bl	800896c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2208      	movs	r2, #8
 8002de2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f002 fef5 	bl	8005bd8 <USB_ReadInterrupts>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	2b10      	cmp	r3, #16
 8002df6:	d101      	bne.n	8002dfc <HAL_HCD_IRQHandler+0x158>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e000      	b.n	8002dfe <HAL_HCD_IRQHandler+0x15a>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d012      	beq.n	8002e28 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699a      	ldr	r2, [r3, #24]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0210 	bic.w	r2, r2, #16
 8002e10:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 ffa1 	bl	8003d5a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0210 	orr.w	r2, r2, #16
 8002e26:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f002 fed3 	bl	8005bd8 <USB_ReadInterrupts>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e3c:	d13a      	bne.n	8002eb4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f003 fb08 	bl	8006458 <USB_HC_ReadInterrupt>
 8002e48:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e025      	b.n	8002e9c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d018      	beq.n	8002e96 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e7a:	d106      	bne.n	8002e8a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	4619      	mov	r1, r3
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f8ab 	bl	8002fde <HCD_HC_IN_IRQHandler>
 8002e88:	e005      	b.n	8002e96 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	4619      	mov	r1, r3
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fbf9 	bl	8003688 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d3d4      	bcc.n	8002e50 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eae:	615a      	str	r2, [r3, #20]
 8002eb0:	e000      	b.n	8002eb4 <HAL_HCD_IRQHandler+0x210>
      return;
 8002eb2:	bf00      	nop
    }
  }
}
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_HCD_Start+0x16>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e013      	b.n	8002ef8 <HAL_HCD_Start+0x3e>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2101      	movs	r1, #1
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f002 fff4 	bl	8005ecc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f002 fd0d 	bl	8005908 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_HCD_Stop+0x16>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e00d      	b.n	8002f32 <HAL_HCD_Stop+0x32>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f003 fbe2 	bl	80066ec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f002 ff96 	bl	8005e78 <USB_ResetPort>
 8002f4c:	4603      	mov	r3, r0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	212c      	movs	r1, #44	; 0x2c
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3360      	adds	r3, #96	; 0x60
 8002f70:	781b      	ldrb	r3, [r3, #0]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	460b      	mov	r3, r1
 8002f88:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002f8a:	78fb      	ldrb	r3, [r7, #3]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	212c      	movs	r1, #44	; 0x2c
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	4413      	add	r3, r2
 8002f96:	3350      	adds	r3, #80	; 0x50
 8002f98:	681b      	ldr	r3, [r3, #0]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b082      	sub	sp, #8
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f002 ffda 	bl	8005f6c <USB_GetCurrentFrame>
 8002fb8:	4603      	mov	r3, r0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f002 ffb5 	bl	8005f3e <USB_GetHostSpeed>
 8002fd4:	4603      	mov	r3, r0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b04      	cmp	r3, #4
 800300c:	d11a      	bne.n	8003044 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4413      	add	r3, r2
 8003016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301a:	461a      	mov	r2, r3
 800301c:	2304      	movs	r3, #4
 800301e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	212c      	movs	r1, #44	; 0x2c
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	4413      	add	r3, r2
 800302c:	3361      	adds	r3, #97	; 0x61
 800302e:	2206      	movs	r2, #6
 8003030:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f003 fa1c 	bl	800647a <USB_HC_Halt>
 8003042:	e0af      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800305a:	d11b      	bne.n	8003094 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4413      	add	r3, r2
 8003064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003068:	461a      	mov	r2, r3
 800306a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800306e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	212c      	movs	r1, #44	; 0x2c
 8003076:	fb01 f303 	mul.w	r3, r1, r3
 800307a:	4413      	add	r3, r2
 800307c:	3361      	adds	r3, #97	; 0x61
 800307e:	2207      	movs	r2, #7
 8003080:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f003 f9f4 	bl	800647a <USB_HC_Halt>
 8003092:	e087      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4413      	add	r3, r2
 800309c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	d109      	bne.n	80030be <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b6:	461a      	mov	r2, r3
 80030b8:	2320      	movs	r3, #32
 80030ba:	6093      	str	r3, [r2, #8]
 80030bc:	e072      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d11a      	bne.n	800310a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e0:	461a      	mov	r2, r3
 80030e2:	2308      	movs	r3, #8
 80030e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	212c      	movs	r1, #44	; 0x2c
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	4413      	add	r3, r2
 80030f2:	3361      	adds	r3, #97	; 0x61
 80030f4:	2205      	movs	r2, #5
 80030f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	4611      	mov	r1, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f003 f9b9 	bl	800647a <USB_HC_Halt>
 8003108:	e04c      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4413      	add	r3, r2
 8003112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003120:	d11b      	bne.n	800315a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4413      	add	r3, r2
 800312a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312e:	461a      	mov	r2, r3
 8003130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003134:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	212c      	movs	r1, #44	; 0x2c
 800313c:	fb01 f303 	mul.w	r3, r1, r3
 8003140:	4413      	add	r3, r2
 8003142:	3361      	adds	r3, #97	; 0x61
 8003144:	2208      	movs	r2, #8
 8003146:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	4611      	mov	r1, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f003 f991 	bl	800647a <USB_HC_Halt>
 8003158:	e024      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4413      	add	r3, r2
 8003162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316c:	2b80      	cmp	r3, #128	; 0x80
 800316e:	d119      	bne.n	80031a4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4413      	add	r3, r2
 8003178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317c:	461a      	mov	r2, r3
 800317e:	2380      	movs	r3, #128	; 0x80
 8003180:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	212c      	movs	r1, #44	; 0x2c
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	3361      	adds	r3, #97	; 0x61
 8003190:	2206      	movs	r2, #6
 8003192:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f003 f96b 	bl	800647a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ba:	d112      	bne.n	80031e2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	4611      	mov	r1, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f003 f957 	bl	800647a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d8:	461a      	mov	r2, r3
 80031da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031de:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80031e0:	e24e      	b.n	8003680 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	f040 80df 	bne.w	80033b8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d019      	beq.n	8003236 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	212c      	movs	r1, #44	; 0x2c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	3348      	adds	r3, #72	; 0x48
 8003210:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	0159      	lsls	r1, r3, #5
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	440b      	add	r3, r1
 800321a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003224:	1ad2      	subs	r2, r2, r3
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	202c      	movs	r0, #44	; 0x2c
 800322c:	fb00 f303 	mul.w	r3, r0, r3
 8003230:	440b      	add	r3, r1
 8003232:	3350      	adds	r3, #80	; 0x50
 8003234:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	212c      	movs	r1, #44	; 0x2c
 800323c:	fb01 f303 	mul.w	r3, r1, r3
 8003240:	4413      	add	r3, r2
 8003242:	3361      	adds	r3, #97	; 0x61
 8003244:	2201      	movs	r2, #1
 8003246:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	212c      	movs	r1, #44	; 0x2c
 800324e:	fb01 f303 	mul.w	r3, r1, r3
 8003252:	4413      	add	r3, r2
 8003254:	335c      	adds	r3, #92	; 0x5c
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4413      	add	r3, r2
 8003262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003266:	461a      	mov	r2, r3
 8003268:	2301      	movs	r3, #1
 800326a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	212c      	movs	r1, #44	; 0x2c
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	4413      	add	r3, r2
 8003278:	333f      	adds	r3, #63	; 0x3f
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d009      	beq.n	8003294 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	212c      	movs	r1, #44	; 0x2c
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	4413      	add	r3, r2
 800328c:	333f      	adds	r3, #63	; 0x3f
 800328e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003290:	2b02      	cmp	r3, #2
 8003292:	d111      	bne.n	80032b8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f003 f8eb 	bl	800647a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b0:	461a      	mov	r2, r3
 80032b2:	2310      	movs	r3, #16
 80032b4:	6093      	str	r3, [r2, #8]
 80032b6:	e03a      	b.n	800332e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	212c      	movs	r1, #44	; 0x2c
 80032be:	fb01 f303 	mul.w	r3, r1, r3
 80032c2:	4413      	add	r3, r2
 80032c4:	333f      	adds	r3, #63	; 0x3f
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d009      	beq.n	80032e0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	212c      	movs	r1, #44	; 0x2c
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	333f      	adds	r3, #63	; 0x3f
 80032da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d126      	bne.n	800332e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	0151      	lsls	r1, r2, #5
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	440a      	add	r2, r1
 80032f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032fe:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	212c      	movs	r1, #44	; 0x2c
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	3360      	adds	r3, #96	; 0x60
 800330e:	2201      	movs	r2, #1
 8003310:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	b2d9      	uxtb	r1, r3
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	202c      	movs	r0, #44	; 0x2c
 800331c:	fb00 f303 	mul.w	r3, r0, r3
 8003320:	4413      	add	r3, r2
 8003322:	3360      	adds	r3, #96	; 0x60
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f005 fb49 	bl	80089c0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d12b      	bne.n	800338e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	212c      	movs	r1, #44	; 0x2c
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	4413      	add	r3, r2
 8003342:	3348      	adds	r3, #72	; 0x48
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	202c      	movs	r0, #44	; 0x2c
 800334c:	fb00 f202 	mul.w	r2, r0, r2
 8003350:	440a      	add	r2, r1
 8003352:	3240      	adds	r2, #64	; 0x40
 8003354:	8812      	ldrh	r2, [r2, #0]
 8003356:	fbb3 f3f2 	udiv	r3, r3, r2
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 818e 	beq.w	8003680 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	212c      	movs	r1, #44	; 0x2c
 800336a:	fb01 f303 	mul.w	r3, r1, r3
 800336e:	4413      	add	r3, r2
 8003370:	3354      	adds	r3, #84	; 0x54
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	f083 0301 	eor.w	r3, r3, #1
 8003378:	b2d8      	uxtb	r0, r3
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	212c      	movs	r1, #44	; 0x2c
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	4413      	add	r3, r2
 8003386:	3354      	adds	r3, #84	; 0x54
 8003388:	4602      	mov	r2, r0
 800338a:	701a      	strb	r2, [r3, #0]
}
 800338c:	e178      	b.n	8003680 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	212c      	movs	r1, #44	; 0x2c
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	4413      	add	r3, r2
 800339a:	3354      	adds	r3, #84	; 0x54
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	f083 0301 	eor.w	r3, r3, #1
 80033a2:	b2d8      	uxtb	r0, r3
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	212c      	movs	r1, #44	; 0x2c
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	4413      	add	r3, r2
 80033b0:	3354      	adds	r3, #84	; 0x54
 80033b2:	4602      	mov	r2, r0
 80033b4:	701a      	strb	r2, [r3, #0]
}
 80033b6:	e163      	b.n	8003680 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	f040 80f6 	bne.w	80035bc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	212c      	movs	r1, #44	; 0x2c
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	4413      	add	r3, r2
 80033dc:	3361      	adds	r3, #97	; 0x61
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d109      	bne.n	80033f8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	212c      	movs	r1, #44	; 0x2c
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	3360      	adds	r3, #96	; 0x60
 80033f2:	2201      	movs	r2, #1
 80033f4:	701a      	strb	r2, [r3, #0]
 80033f6:	e0c9      	b.n	800358c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	212c      	movs	r1, #44	; 0x2c
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	4413      	add	r3, r2
 8003404:	3361      	adds	r3, #97	; 0x61
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b05      	cmp	r3, #5
 800340a:	d109      	bne.n	8003420 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	212c      	movs	r1, #44	; 0x2c
 8003412:	fb01 f303 	mul.w	r3, r1, r3
 8003416:	4413      	add	r3, r2
 8003418:	3360      	adds	r3, #96	; 0x60
 800341a:	2205      	movs	r2, #5
 800341c:	701a      	strb	r2, [r3, #0]
 800341e:	e0b5      	b.n	800358c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	212c      	movs	r1, #44	; 0x2c
 8003426:	fb01 f303 	mul.w	r3, r1, r3
 800342a:	4413      	add	r3, r2
 800342c:	3361      	adds	r3, #97	; 0x61
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b06      	cmp	r3, #6
 8003432:	d009      	beq.n	8003448 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	212c      	movs	r1, #44	; 0x2c
 800343a:	fb01 f303 	mul.w	r3, r1, r3
 800343e:	4413      	add	r3, r2
 8003440:	3361      	adds	r3, #97	; 0x61
 8003442:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003444:	2b08      	cmp	r3, #8
 8003446:	d150      	bne.n	80034ea <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	212c      	movs	r1, #44	; 0x2c
 800344e:	fb01 f303 	mul.w	r3, r1, r3
 8003452:	4413      	add	r3, r2
 8003454:	335c      	adds	r3, #92	; 0x5c
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	202c      	movs	r0, #44	; 0x2c
 8003460:	fb00 f303 	mul.w	r3, r0, r3
 8003464:	440b      	add	r3, r1
 8003466:	335c      	adds	r3, #92	; 0x5c
 8003468:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	212c      	movs	r1, #44	; 0x2c
 8003470:	fb01 f303 	mul.w	r3, r1, r3
 8003474:	4413      	add	r3, r2
 8003476:	335c      	adds	r3, #92	; 0x5c
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d912      	bls.n	80034a4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	212c      	movs	r1, #44	; 0x2c
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	4413      	add	r3, r2
 800348a:	335c      	adds	r3, #92	; 0x5c
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	212c      	movs	r1, #44	; 0x2c
 8003496:	fb01 f303 	mul.w	r3, r1, r3
 800349a:	4413      	add	r3, r2
 800349c:	3360      	adds	r3, #96	; 0x60
 800349e:	2204      	movs	r2, #4
 80034a0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034a2:	e073      	b.n	800358c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	212c      	movs	r1, #44	; 0x2c
 80034aa:	fb01 f303 	mul.w	r3, r1, r3
 80034ae:	4413      	add	r3, r2
 80034b0:	3360      	adds	r3, #96	; 0x60
 80034b2:	2202      	movs	r2, #2
 80034b4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034cc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034d4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e2:	461a      	mov	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034e8:	e050      	b.n	800358c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	212c      	movs	r1, #44	; 0x2c
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	4413      	add	r3, r2
 80034f6:	3361      	adds	r3, #97	; 0x61
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d122      	bne.n	8003544 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	212c      	movs	r1, #44	; 0x2c
 8003504:	fb01 f303 	mul.w	r3, r1, r3
 8003508:	4413      	add	r3, r2
 800350a:	3360      	adds	r3, #96	; 0x60
 800350c:	2202      	movs	r2, #2
 800350e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4413      	add	r3, r2
 8003518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003526:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800352e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4413      	add	r3, r2
 8003538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353c:	461a      	mov	r2, r3
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	e023      	b.n	800358c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	212c      	movs	r1, #44	; 0x2c
 800354a:	fb01 f303 	mul.w	r3, r1, r3
 800354e:	4413      	add	r3, r2
 8003550:	3361      	adds	r3, #97	; 0x61
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b07      	cmp	r3, #7
 8003556:	d119      	bne.n	800358c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	335c      	adds	r3, #92	; 0x5c
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	202c      	movs	r0, #44	; 0x2c
 8003570:	fb00 f303 	mul.w	r3, r0, r3
 8003574:	440b      	add	r3, r1
 8003576:	335c      	adds	r3, #92	; 0x5c
 8003578:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	212c      	movs	r1, #44	; 0x2c
 8003580:	fb01 f303 	mul.w	r3, r1, r3
 8003584:	4413      	add	r3, r2
 8003586:	3360      	adds	r3, #96	; 0x60
 8003588:	2204      	movs	r2, #4
 800358a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4413      	add	r3, r2
 8003594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003598:	461a      	mov	r2, r3
 800359a:	2302      	movs	r3, #2
 800359c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	b2d9      	uxtb	r1, r3
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	202c      	movs	r0, #44	; 0x2c
 80035a8:	fb00 f303 	mul.w	r3, r0, r3
 80035ac:	4413      	add	r3, r2
 80035ae:	3360      	adds	r3, #96	; 0x60
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f005 fa03 	bl	80089c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80035ba:	e061      	b.n	8003680 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	2b10      	cmp	r3, #16
 80035d0:	d156      	bne.n	8003680 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	212c      	movs	r1, #44	; 0x2c
 80035d8:	fb01 f303 	mul.w	r3, r1, r3
 80035dc:	4413      	add	r3, r2
 80035de:	333f      	adds	r3, #63	; 0x3f
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d111      	bne.n	800360a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	212c      	movs	r1, #44	; 0x2c
 80035ec:	fb01 f303 	mul.w	r3, r1, r3
 80035f0:	4413      	add	r3, r2
 80035f2:	335c      	adds	r3, #92	; 0x5c
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	4611      	mov	r1, r2
 8003602:	4618      	mov	r0, r3
 8003604:	f002 ff39 	bl	800647a <USB_HC_Halt>
 8003608:	e031      	b.n	800366e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	212c      	movs	r1, #44	; 0x2c
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	333f      	adds	r3, #63	; 0x3f
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d009      	beq.n	8003632 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	212c      	movs	r1, #44	; 0x2c
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	4413      	add	r3, r2
 800362a:	333f      	adds	r3, #63	; 0x3f
 800362c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800362e:	2b02      	cmp	r3, #2
 8003630:	d11d      	bne.n	800366e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	212c      	movs	r1, #44	; 0x2c
 8003638:	fb01 f303 	mul.w	r3, r1, r3
 800363c:	4413      	add	r3, r2
 800363e:	335c      	adds	r3, #92	; 0x5c
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d110      	bne.n	800366e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	212c      	movs	r1, #44	; 0x2c
 8003652:	fb01 f303 	mul.w	r3, r1, r3
 8003656:	4413      	add	r3, r2
 8003658:	3361      	adds	r3, #97	; 0x61
 800365a:	2203      	movs	r2, #3
 800365c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f002 ff06 	bl	800647a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4413      	add	r3, r2
 8003676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367a:	461a      	mov	r2, r3
 800367c:	2310      	movs	r3, #16
 800367e:	6093      	str	r3, [r2, #8]
}
 8003680:	bf00      	nop
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800369e:	78fb      	ldrb	r3, [r7, #3]
 80036a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d11a      	bne.n	80036ee <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c4:	461a      	mov	r2, r3
 80036c6:	2304      	movs	r3, #4
 80036c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	212c      	movs	r1, #44	; 0x2c
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	4413      	add	r3, r2
 80036d6:	3361      	adds	r3, #97	; 0x61
 80036d8:	2206      	movs	r2, #6
 80036da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f002 fec7 	bl	800647a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80036ec:	e331      	b.n	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b20      	cmp	r3, #32
 8003702:	d12e      	bne.n	8003762 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	4413      	add	r3, r2
 800370c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003710:	461a      	mov	r2, r3
 8003712:	2320      	movs	r3, #32
 8003714:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	212c      	movs	r1, #44	; 0x2c
 800371c:	fb01 f303 	mul.w	r3, r1, r3
 8003720:	4413      	add	r3, r2
 8003722:	333d      	adds	r3, #61	; 0x3d
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b01      	cmp	r3, #1
 8003728:	f040 8313 	bne.w	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	212c      	movs	r1, #44	; 0x2c
 8003732:	fb01 f303 	mul.w	r3, r1, r3
 8003736:	4413      	add	r3, r2
 8003738:	333d      	adds	r3, #61	; 0x3d
 800373a:	2200      	movs	r2, #0
 800373c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	212c      	movs	r1, #44	; 0x2c
 8003744:	fb01 f303 	mul.w	r3, r1, r3
 8003748:	4413      	add	r3, r2
 800374a:	3360      	adds	r3, #96	; 0x60
 800374c:	2202      	movs	r2, #2
 800374e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	4611      	mov	r1, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f002 fe8d 	bl	800647a <USB_HC_Halt>
}
 8003760:	e2f7      	b.n	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	4413      	add	r3, r2
 800376a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003778:	d112      	bne.n	80037a0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	4413      	add	r3, r2
 8003782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003786:	461a      	mov	r2, r3
 8003788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800378c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	4611      	mov	r1, r2
 8003798:	4618      	mov	r0, r3
 800379a:	f002 fe6e 	bl	800647a <USB_HC_Halt>
}
 800379e:	e2d8      	b.n	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d140      	bne.n	8003838 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	212c      	movs	r1, #44	; 0x2c
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	4413      	add	r3, r2
 80037c2:	335c      	adds	r3, #92	; 0x5c
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d111      	bne.n	8003802 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	212c      	movs	r1, #44	; 0x2c
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	4413      	add	r3, r2
 80037ea:	333d      	adds	r3, #61	; 0x3d
 80037ec:	2201      	movs	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fc:	461a      	mov	r2, r3
 80037fe:	2340      	movs	r3, #64	; 0x40
 8003800:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	4413      	add	r3, r2
 800380a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380e:	461a      	mov	r2, r3
 8003810:	2301      	movs	r3, #1
 8003812:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	212c      	movs	r1, #44	; 0x2c
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	4413      	add	r3, r2
 8003820:	3361      	adds	r3, #97	; 0x61
 8003822:	2201      	movs	r2, #1
 8003824:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	4611      	mov	r1, r2
 8003830:	4618      	mov	r0, r3
 8003832:	f002 fe22 	bl	800647a <USB_HC_Halt>
}
 8003836:	e28c      	b.n	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	4413      	add	r3, r2
 8003840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384a:	2b40      	cmp	r3, #64	; 0x40
 800384c:	d12c      	bne.n	80038a8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	212c      	movs	r1, #44	; 0x2c
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	4413      	add	r3, r2
 800385a:	3361      	adds	r3, #97	; 0x61
 800385c:	2204      	movs	r2, #4
 800385e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	212c      	movs	r1, #44	; 0x2c
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	4413      	add	r3, r2
 800386c:	333d      	adds	r3, #61	; 0x3d
 800386e:	2201      	movs	r2, #1
 8003870:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	212c      	movs	r1, #44	; 0x2c
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	4413      	add	r3, r2
 800387e:	335c      	adds	r3, #92	; 0x5c
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	4611      	mov	r1, r2
 800388e:	4618      	mov	r0, r3
 8003890:	f002 fdf3 	bl	800647a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	4413      	add	r3, r2
 800389c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a0:	461a      	mov	r2, r3
 80038a2:	2340      	movs	r3, #64	; 0x40
 80038a4:	6093      	str	r3, [r2, #8]
}
 80038a6:	e254      	b.n	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d11a      	bne.n	80038f4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ca:	461a      	mov	r2, r3
 80038cc:	2308      	movs	r3, #8
 80038ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	212c      	movs	r1, #44	; 0x2c
 80038d6:	fb01 f303 	mul.w	r3, r1, r3
 80038da:	4413      	add	r3, r2
 80038dc:	3361      	adds	r3, #97	; 0x61
 80038de:	2205      	movs	r2, #5
 80038e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	4611      	mov	r1, r2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f002 fdc4 	bl	800647a <USB_HC_Halt>
}
 80038f2:	e22e      	b.n	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b10      	cmp	r3, #16
 8003908:	d140      	bne.n	800398c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	212c      	movs	r1, #44	; 0x2c
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	4413      	add	r3, r2
 8003916:	335c      	adds	r3, #92	; 0x5c
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	212c      	movs	r1, #44	; 0x2c
 8003922:	fb01 f303 	mul.w	r3, r1, r3
 8003926:	4413      	add	r3, r2
 8003928:	3361      	adds	r3, #97	; 0x61
 800392a:	2203      	movs	r2, #3
 800392c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	212c      	movs	r1, #44	; 0x2c
 8003934:	fb01 f303 	mul.w	r3, r1, r3
 8003938:	4413      	add	r3, r2
 800393a:	333d      	adds	r3, #61	; 0x3d
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d112      	bne.n	8003968 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	212c      	movs	r1, #44	; 0x2c
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	4413      	add	r3, r2
 800394e:	333c      	adds	r3, #60	; 0x3c
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d108      	bne.n	8003968 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	212c      	movs	r1, #44	; 0x2c
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	4413      	add	r3, r2
 8003962:	333d      	adds	r3, #61	; 0x3d
 8003964:	2201      	movs	r2, #1
 8003966:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	4611      	mov	r1, r2
 8003972:	4618      	mov	r0, r3
 8003974:	f002 fd81 	bl	800647a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	4413      	add	r3, r2
 8003980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003984:	461a      	mov	r2, r3
 8003986:	2310      	movs	r3, #16
 8003988:	6093      	str	r3, [r2, #8]
}
 800398a:	e1e2      	b.n	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	4413      	add	r3, r2
 8003994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399e:	2b80      	cmp	r3, #128	; 0x80
 80039a0:	d164      	bne.n	8003a6c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d111      	bne.n	80039ce <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	212c      	movs	r1, #44	; 0x2c
 80039b0:	fb01 f303 	mul.w	r3, r1, r3
 80039b4:	4413      	add	r3, r2
 80039b6:	3361      	adds	r3, #97	; 0x61
 80039b8:	2206      	movs	r2, #6
 80039ba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	4611      	mov	r1, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f002 fd57 	bl	800647a <USB_HC_Halt>
 80039cc:	e044      	b.n	8003a58 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	212c      	movs	r1, #44	; 0x2c
 80039d4:	fb01 f303 	mul.w	r3, r1, r3
 80039d8:	4413      	add	r3, r2
 80039da:	335c      	adds	r3, #92	; 0x5c
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	202c      	movs	r0, #44	; 0x2c
 80039e6:	fb00 f303 	mul.w	r3, r0, r3
 80039ea:	440b      	add	r3, r1
 80039ec:	335c      	adds	r3, #92	; 0x5c
 80039ee:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	212c      	movs	r1, #44	; 0x2c
 80039f6:	fb01 f303 	mul.w	r3, r1, r3
 80039fa:	4413      	add	r3, r2
 80039fc:	335c      	adds	r3, #92	; 0x5c
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d920      	bls.n	8003a46 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	212c      	movs	r1, #44	; 0x2c
 8003a0a:	fb01 f303 	mul.w	r3, r1, r3
 8003a0e:	4413      	add	r3, r2
 8003a10:	335c      	adds	r3, #92	; 0x5c
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	212c      	movs	r1, #44	; 0x2c
 8003a1c:	fb01 f303 	mul.w	r3, r1, r3
 8003a20:	4413      	add	r3, r2
 8003a22:	3360      	adds	r3, #96	; 0x60
 8003a24:	2204      	movs	r2, #4
 8003a26:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	b2d9      	uxtb	r1, r3
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	202c      	movs	r0, #44	; 0x2c
 8003a32:	fb00 f303 	mul.w	r3, r0, r3
 8003a36:	4413      	add	r3, r2
 8003a38:	3360      	adds	r3, #96	; 0x60
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f004 ffbe 	bl	80089c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a44:	e008      	b.n	8003a58 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	212c      	movs	r1, #44	; 0x2c
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	4413      	add	r3, r2
 8003a52:	3360      	adds	r3, #96	; 0x60
 8003a54:	2202      	movs	r2, #2
 8003a56:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a64:	461a      	mov	r2, r3
 8003a66:	2380      	movs	r3, #128	; 0x80
 8003a68:	6093      	str	r3, [r2, #8]
}
 8003a6a:	e172      	b.n	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a82:	d11b      	bne.n	8003abc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	212c      	movs	r1, #44	; 0x2c
 8003a8a:	fb01 f303 	mul.w	r3, r1, r3
 8003a8e:	4413      	add	r3, r2
 8003a90:	3361      	adds	r3, #97	; 0x61
 8003a92:	2208      	movs	r2, #8
 8003a94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f002 fcea 	bl	800647a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ab8:	6093      	str	r3, [r2, #8]
}
 8003aba:	e14a      	b.n	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	f040 813f 	bne.w	8003d52 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	212c      	movs	r1, #44	; 0x2c
 8003ada:	fb01 f303 	mul.w	r3, r1, r3
 8003ade:	4413      	add	r3, r2
 8003ae0:	3361      	adds	r3, #97	; 0x61
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d17d      	bne.n	8003be4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	212c      	movs	r1, #44	; 0x2c
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	4413      	add	r3, r2
 8003af4:	3360      	adds	r3, #96	; 0x60
 8003af6:	2201      	movs	r2, #1
 8003af8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	212c      	movs	r1, #44	; 0x2c
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	4413      	add	r3, r2
 8003b06:	333f      	adds	r3, #63	; 0x3f
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d00a      	beq.n	8003b24 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	212c      	movs	r1, #44	; 0x2c
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	4413      	add	r3, r2
 8003b1a:	333f      	adds	r3, #63	; 0x3f
 8003b1c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	f040 8100 	bne.w	8003d24 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d113      	bne.n	8003b54 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	212c      	movs	r1, #44	; 0x2c
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	3355      	adds	r3, #85	; 0x55
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	f083 0301 	eor.w	r3, r3, #1
 8003b40:	b2d8      	uxtb	r0, r3
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	212c      	movs	r1, #44	; 0x2c
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3355      	adds	r3, #85	; 0x55
 8003b50:	4602      	mov	r2, r0
 8003b52:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	f040 80e3 	bne.w	8003d24 <HCD_HC_OUT_IRQHandler+0x69c>
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	212c      	movs	r1, #44	; 0x2c
 8003b64:	fb01 f303 	mul.w	r3, r1, r3
 8003b68:	4413      	add	r3, r2
 8003b6a:	334c      	adds	r3, #76	; 0x4c
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80d8 	beq.w	8003d24 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	212c      	movs	r1, #44	; 0x2c
 8003b7a:	fb01 f303 	mul.w	r3, r1, r3
 8003b7e:	4413      	add	r3, r2
 8003b80:	334c      	adds	r3, #76	; 0x4c
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	202c      	movs	r0, #44	; 0x2c
 8003b8a:	fb00 f202 	mul.w	r2, r0, r2
 8003b8e:	440a      	add	r2, r1
 8003b90:	3240      	adds	r2, #64	; 0x40
 8003b92:	8812      	ldrh	r2, [r2, #0]
 8003b94:	4413      	add	r3, r2
 8003b96:	3b01      	subs	r3, #1
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	202c      	movs	r0, #44	; 0x2c
 8003b9e:	fb00 f202 	mul.w	r2, r0, r2
 8003ba2:	440a      	add	r2, r1
 8003ba4:	3240      	adds	r2, #64	; 0x40
 8003ba6:	8812      	ldrh	r2, [r2, #0]
 8003ba8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 80b5 	beq.w	8003d24 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	212c      	movs	r1, #44	; 0x2c
 8003bc0:	fb01 f303 	mul.w	r3, r1, r3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3355      	adds	r3, #85	; 0x55
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	f083 0301 	eor.w	r3, r3, #1
 8003bce:	b2d8      	uxtb	r0, r3
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	212c      	movs	r1, #44	; 0x2c
 8003bd6:	fb01 f303 	mul.w	r3, r1, r3
 8003bda:	4413      	add	r3, r2
 8003bdc:	3355      	adds	r3, #85	; 0x55
 8003bde:	4602      	mov	r2, r0
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	e09f      	b.n	8003d24 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	212c      	movs	r1, #44	; 0x2c
 8003bea:	fb01 f303 	mul.w	r3, r1, r3
 8003bee:	4413      	add	r3, r2
 8003bf0:	3361      	adds	r3, #97	; 0x61
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d109      	bne.n	8003c0c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	212c      	movs	r1, #44	; 0x2c
 8003bfe:	fb01 f303 	mul.w	r3, r1, r3
 8003c02:	4413      	add	r3, r2
 8003c04:	3360      	adds	r3, #96	; 0x60
 8003c06:	2202      	movs	r2, #2
 8003c08:	701a      	strb	r2, [r3, #0]
 8003c0a:	e08b      	b.n	8003d24 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	212c      	movs	r1, #44	; 0x2c
 8003c12:	fb01 f303 	mul.w	r3, r1, r3
 8003c16:	4413      	add	r3, r2
 8003c18:	3361      	adds	r3, #97	; 0x61
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d109      	bne.n	8003c34 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	212c      	movs	r1, #44	; 0x2c
 8003c26:	fb01 f303 	mul.w	r3, r1, r3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3360      	adds	r3, #96	; 0x60
 8003c2e:	2202      	movs	r2, #2
 8003c30:	701a      	strb	r2, [r3, #0]
 8003c32:	e077      	b.n	8003d24 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	212c      	movs	r1, #44	; 0x2c
 8003c3a:	fb01 f303 	mul.w	r3, r1, r3
 8003c3e:	4413      	add	r3, r2
 8003c40:	3361      	adds	r3, #97	; 0x61
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b05      	cmp	r3, #5
 8003c46:	d109      	bne.n	8003c5c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	212c      	movs	r1, #44	; 0x2c
 8003c4e:	fb01 f303 	mul.w	r3, r1, r3
 8003c52:	4413      	add	r3, r2
 8003c54:	3360      	adds	r3, #96	; 0x60
 8003c56:	2205      	movs	r2, #5
 8003c58:	701a      	strb	r2, [r3, #0]
 8003c5a:	e063      	b.n	8003d24 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	212c      	movs	r1, #44	; 0x2c
 8003c62:	fb01 f303 	mul.w	r3, r1, r3
 8003c66:	4413      	add	r3, r2
 8003c68:	3361      	adds	r3, #97	; 0x61
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b06      	cmp	r3, #6
 8003c6e:	d009      	beq.n	8003c84 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	212c      	movs	r1, #44	; 0x2c
 8003c76:	fb01 f303 	mul.w	r3, r1, r3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3361      	adds	r3, #97	; 0x61
 8003c7e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d14f      	bne.n	8003d24 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	212c      	movs	r1, #44	; 0x2c
 8003c8a:	fb01 f303 	mul.w	r3, r1, r3
 8003c8e:	4413      	add	r3, r2
 8003c90:	335c      	adds	r3, #92	; 0x5c
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	202c      	movs	r0, #44	; 0x2c
 8003c9c:	fb00 f303 	mul.w	r3, r0, r3
 8003ca0:	440b      	add	r3, r1
 8003ca2:	335c      	adds	r3, #92	; 0x5c
 8003ca4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	212c      	movs	r1, #44	; 0x2c
 8003cac:	fb01 f303 	mul.w	r3, r1, r3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	335c      	adds	r3, #92	; 0x5c
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d912      	bls.n	8003ce0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	212c      	movs	r1, #44	; 0x2c
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	335c      	adds	r3, #92	; 0x5c
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	212c      	movs	r1, #44	; 0x2c
 8003cd2:	fb01 f303 	mul.w	r3, r1, r3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3360      	adds	r3, #96	; 0x60
 8003cda:	2204      	movs	r2, #4
 8003cdc:	701a      	strb	r2, [r3, #0]
 8003cde:	e021      	b.n	8003d24 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	212c      	movs	r1, #44	; 0x2c
 8003ce6:	fb01 f303 	mul.w	r3, r1, r3
 8003cea:	4413      	add	r3, r2
 8003cec:	3360      	adds	r3, #96	; 0x60
 8003cee:	2202      	movs	r2, #2
 8003cf0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d08:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d10:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1e:	461a      	mov	r2, r3
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d30:	461a      	mov	r2, r3
 8003d32:	2302      	movs	r3, #2
 8003d34:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	b2d9      	uxtb	r1, r3
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	202c      	movs	r0, #44	; 0x2c
 8003d40:	fb00 f303 	mul.w	r3, r0, r3
 8003d44:	4413      	add	r3, r2
 8003d46:	3360      	adds	r3, #96	; 0x60
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f004 fe37 	bl	80089c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d52:	bf00      	nop
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b08a      	sub	sp, #40	; 0x28
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	0c5b      	lsrs	r3, r3, #17
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	091b      	lsrs	r3, r3, #4
 8003d8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d8e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d004      	beq.n	8003da0 <HCD_RXQLVL_IRQHandler+0x46>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b05      	cmp	r3, #5
 8003d9a:	f000 80a9 	beq.w	8003ef0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003d9e:	e0aa      	b.n	8003ef6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80a6 	beq.w	8003ef4 <HCD_RXQLVL_IRQHandler+0x19a>
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	212c      	movs	r1, #44	; 0x2c
 8003dae:	fb01 f303 	mul.w	r3, r1, r3
 8003db2:	4413      	add	r3, r2
 8003db4:	3344      	adds	r3, #68	; 0x44
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 809b 	beq.w	8003ef4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	212c      	movs	r1, #44	; 0x2c
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	4413      	add	r3, r2
 8003dca:	3350      	adds	r3, #80	; 0x50
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	441a      	add	r2, r3
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	202c      	movs	r0, #44	; 0x2c
 8003dd8:	fb00 f303 	mul.w	r3, r0, r3
 8003ddc:	440b      	add	r3, r1
 8003dde:	334c      	adds	r3, #76	; 0x4c
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d87a      	bhi.n	8003edc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	212c      	movs	r1, #44	; 0x2c
 8003df0:	fb01 f303 	mul.w	r3, r1, r3
 8003df4:	4413      	add	r3, r2
 8003df6:	3344      	adds	r3, #68	; 0x44
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	b292      	uxth	r2, r2
 8003dfe:	4619      	mov	r1, r3
 8003e00:	f001 fe92 	bl	8005b28 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	212c      	movs	r1, #44	; 0x2c
 8003e0a:	fb01 f303 	mul.w	r3, r1, r3
 8003e0e:	4413      	add	r3, r2
 8003e10:	3344      	adds	r3, #68	; 0x44
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	441a      	add	r2, r3
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	202c      	movs	r0, #44	; 0x2c
 8003e1e:	fb00 f303 	mul.w	r3, r0, r3
 8003e22:	440b      	add	r3, r1
 8003e24:	3344      	adds	r3, #68	; 0x44
 8003e26:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	212c      	movs	r1, #44	; 0x2c
 8003e2e:	fb01 f303 	mul.w	r3, r1, r3
 8003e32:	4413      	add	r3, r2
 8003e34:	3350      	adds	r3, #80	; 0x50
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	441a      	add	r2, r3
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	202c      	movs	r0, #44	; 0x2c
 8003e42:	fb00 f303 	mul.w	r3, r0, r3
 8003e46:	440b      	add	r3, r1
 8003e48:	3350      	adds	r3, #80	; 0x50
 8003e4a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	0cdb      	lsrs	r3, r3, #19
 8003e5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e60:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	212c      	movs	r1, #44	; 0x2c
 8003e68:	fb01 f303 	mul.w	r3, r1, r3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3340      	adds	r3, #64	; 0x40
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d13c      	bne.n	8003ef4 <HCD_RXQLVL_IRQHandler+0x19a>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d039      	beq.n	8003ef4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e96:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e9e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eac:	461a      	mov	r2, r3
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	212c      	movs	r1, #44	; 0x2c
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3354      	adds	r3, #84	; 0x54
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	f083 0301 	eor.w	r3, r3, #1
 8003ec6:	b2d8      	uxtb	r0, r3
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	212c      	movs	r1, #44	; 0x2c
 8003ece:	fb01 f303 	mul.w	r3, r1, r3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	3354      	adds	r3, #84	; 0x54
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	701a      	strb	r2, [r3, #0]
      break;
 8003eda:	e00b      	b.n	8003ef4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	212c      	movs	r1, #44	; 0x2c
 8003ee2:	fb01 f303 	mul.w	r3, r1, r3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3360      	adds	r3, #96	; 0x60
 8003eea:	2204      	movs	r2, #4
 8003eec:	701a      	strb	r2, [r3, #0]
      break;
 8003eee:	e001      	b.n	8003ef4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003ef0:	bf00      	nop
 8003ef2:	e000      	b.n	8003ef6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003ef4:	bf00      	nop
  }
}
 8003ef6:	bf00      	nop
 8003ef8:	3728      	adds	r7, #40	; 0x28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b086      	sub	sp, #24
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f2a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d10b      	bne.n	8003f4e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d102      	bne.n	8003f46 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f004 fd21 	bl	8008988 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f043 0302 	orr.w	r3, r3, #2
 8003f4c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d132      	bne.n	8003fbe <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f043 0308 	orr.w	r3, r3, #8
 8003f5e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d126      	bne.n	8003fb8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d113      	bne.n	8003f9a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003f78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f7c:	d106      	bne.n	8003f8c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2102      	movs	r1, #2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f001 ff3d 	bl	8005e04 <USB_InitFSLSPClkSel>
 8003f8a:	e011      	b.n	8003fb0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2101      	movs	r1, #1
 8003f92:	4618      	mov	r0, r3
 8003f94:	f001 ff36 	bl	8005e04 <USB_InitFSLSPClkSel>
 8003f98:	e00a      	b.n	8003fb0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d106      	bne.n	8003fb0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fa8:	461a      	mov	r2, r3
 8003faa:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003fae:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f004 fd13 	bl	80089dc <HAL_HCD_PortEnabled_Callback>
 8003fb6:	e002      	b.n	8003fbe <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f004 fd1d 	bl	80089f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	d103      	bne.n	8003fd0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f043 0320 	orr.w	r3, r3, #32
 8003fce:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	6013      	str	r3, [r2, #0]
}
 8003fdc:	bf00      	nop
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e12b      	b.n	800424e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fc fdbc 	bl	8000b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2224      	movs	r2, #36	; 0x24
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0201 	bic.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004036:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004046:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004048:	f001 fa20 	bl	800548c <HAL_RCC_GetPCLK1Freq>
 800404c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4a81      	ldr	r2, [pc, #516]	; (8004258 <HAL_I2C_Init+0x274>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d807      	bhi.n	8004068 <HAL_I2C_Init+0x84>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4a80      	ldr	r2, [pc, #512]	; (800425c <HAL_I2C_Init+0x278>)
 800405c:	4293      	cmp	r3, r2
 800405e:	bf94      	ite	ls
 8004060:	2301      	movls	r3, #1
 8004062:	2300      	movhi	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	e006      	b.n	8004076 <HAL_I2C_Init+0x92>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a7d      	ldr	r2, [pc, #500]	; (8004260 <HAL_I2C_Init+0x27c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	bf94      	ite	ls
 8004070:	2301      	movls	r3, #1
 8004072:	2300      	movhi	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e0e7      	b.n	800424e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4a78      	ldr	r2, [pc, #480]	; (8004264 <HAL_I2C_Init+0x280>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	0c9b      	lsrs	r3, r3, #18
 8004088:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	4a6a      	ldr	r2, [pc, #424]	; (8004258 <HAL_I2C_Init+0x274>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d802      	bhi.n	80040b8 <HAL_I2C_Init+0xd4>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	3301      	adds	r3, #1
 80040b6:	e009      	b.n	80040cc <HAL_I2C_Init+0xe8>
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	4a69      	ldr	r2, [pc, #420]	; (8004268 <HAL_I2C_Init+0x284>)
 80040c4:	fba2 2303 	umull	r2, r3, r2, r3
 80040c8:	099b      	lsrs	r3, r3, #6
 80040ca:	3301      	adds	r3, #1
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	495c      	ldr	r1, [pc, #368]	; (8004258 <HAL_I2C_Init+0x274>)
 80040e8:	428b      	cmp	r3, r1
 80040ea:	d819      	bhi.n	8004120 <HAL_I2C_Init+0x13c>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	1e59      	subs	r1, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040fa:	1c59      	adds	r1, r3, #1
 80040fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004100:	400b      	ands	r3, r1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_I2C_Init+0x138>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	1e59      	subs	r1, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	fbb1 f3f3 	udiv	r3, r1, r3
 8004114:	3301      	adds	r3, #1
 8004116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411a:	e051      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 800411c:	2304      	movs	r3, #4
 800411e:	e04f      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d111      	bne.n	800414c <HAL_I2C_Init+0x168>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	1e58      	subs	r0, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6859      	ldr	r1, [r3, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	440b      	add	r3, r1
 8004136:	fbb0 f3f3 	udiv	r3, r0, r3
 800413a:	3301      	adds	r3, #1
 800413c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	e012      	b.n	8004172 <HAL_I2C_Init+0x18e>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	1e58      	subs	r0, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	0099      	lsls	r1, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004162:	3301      	adds	r3, #1
 8004164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf0c      	ite	eq
 800416c:	2301      	moveq	r3, #1
 800416e:	2300      	movne	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_I2C_Init+0x196>
 8004176:	2301      	movs	r3, #1
 8004178:	e022      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10e      	bne.n	80041a0 <HAL_I2C_Init+0x1bc>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1e58      	subs	r0, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6859      	ldr	r1, [r3, #4]
 800418a:	460b      	mov	r3, r1
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	440b      	add	r3, r1
 8004190:	fbb0 f3f3 	udiv	r3, r0, r3
 8004194:	3301      	adds	r3, #1
 8004196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800419a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800419e:	e00f      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	1e58      	subs	r0, r3, #1
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6859      	ldr	r1, [r3, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	0099      	lsls	r1, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b6:	3301      	adds	r3, #1
 80041b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	6809      	ldr	r1, [r1, #0]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69da      	ldr	r2, [r3, #28]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6911      	ldr	r1, [r2, #16]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	68d2      	ldr	r2, [r2, #12]
 80041fa:	4311      	orrs	r1, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6812      	ldr	r2, [r2, #0]
 8004200:	430b      	orrs	r3, r1
 8004202:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	000186a0 	.word	0x000186a0
 800425c:	001e847f 	.word	0x001e847f
 8004260:	003d08ff 	.word	0x003d08ff
 8004264:	431bde83 	.word	0x431bde83
 8004268:	10624dd3 	.word	0x10624dd3

0800426c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e128      	b.n	80044d0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d109      	bne.n	800429e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a90      	ldr	r2, [pc, #576]	; (80044d8 <HAL_I2S_Init+0x26c>)
 8004296:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7fc fcbd 	bl	8000c18 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2202      	movs	r2, #2
 80042a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80042b4:	f023 030f 	bic.w	r3, r3, #15
 80042b8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2202      	movs	r2, #2
 80042c0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d060      	beq.n	800438c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d102      	bne.n	80042d8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80042d2:	2310      	movs	r3, #16
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	e001      	b.n	80042dc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80042d8:	2320      	movs	r3, #32
 80042da:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	d802      	bhi.n	80042ea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80042ea:	2001      	movs	r0, #1
 80042ec:	f001 f9c4 	bl	8005678 <HAL_RCCEx_GetPeriphCLKFreq>
 80042f0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042fa:	d125      	bne.n	8004348 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d010      	beq.n	8004326 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	fbb2 f2f3 	udiv	r2, r2, r3
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	461a      	mov	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004320:	3305      	adds	r3, #5
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	e01f      	b.n	8004366 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	461a      	mov	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004342:	3305      	adds	r3, #5
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	e00e      	b.n	8004366 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	461a      	mov	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004362:	3305      	adds	r3, #5
 8004364:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	4a5c      	ldr	r2, [pc, #368]	; (80044dc <HAL_I2S_Init+0x270>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	08db      	lsrs	r3, r3, #3
 8004370:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	085b      	lsrs	r3, r3, #1
 8004382:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	021b      	lsls	r3, r3, #8
 8004388:	61bb      	str	r3, [r7, #24]
 800438a:	e003      	b.n	8004394 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800438c:	2302      	movs	r3, #2
 800438e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d902      	bls.n	80043a0 <HAL_I2S_Init+0x134>
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	2bff      	cmp	r3, #255	; 0xff
 800439e:	d907      	bls.n	80043b0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a4:	f043 0210 	orr.w	r2, r3, #16
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e08f      	b.n	80044d0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	ea42 0103 	orr.w	r1, r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80043ce:	f023 030f 	bic.w	r3, r3, #15
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6851      	ldr	r1, [r2, #4]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6892      	ldr	r2, [r2, #8]
 80043da:	4311      	orrs	r1, r2
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	68d2      	ldr	r2, [r2, #12]
 80043e0:	4311      	orrs	r1, r2
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6992      	ldr	r2, [r2, #24]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	431a      	orrs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043f2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d161      	bne.n	80044c0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a38      	ldr	r2, [pc, #224]	; (80044e0 <HAL_I2S_Init+0x274>)
 8004400:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a37      	ldr	r2, [pc, #220]	; (80044e4 <HAL_I2S_Init+0x278>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d101      	bne.n	8004410 <HAL_I2S_Init+0x1a4>
 800440c:	4b36      	ldr	r3, [pc, #216]	; (80044e8 <HAL_I2S_Init+0x27c>)
 800440e:	e001      	b.n	8004414 <HAL_I2S_Init+0x1a8>
 8004410:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6812      	ldr	r2, [r2, #0]
 800441a:	4932      	ldr	r1, [pc, #200]	; (80044e4 <HAL_I2S_Init+0x278>)
 800441c:	428a      	cmp	r2, r1
 800441e:	d101      	bne.n	8004424 <HAL_I2S_Init+0x1b8>
 8004420:	4a31      	ldr	r2, [pc, #196]	; (80044e8 <HAL_I2S_Init+0x27c>)
 8004422:	e001      	b.n	8004428 <HAL_I2S_Init+0x1bc>
 8004424:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004428:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800442c:	f023 030f 	bic.w	r3, r3, #15
 8004430:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a2b      	ldr	r2, [pc, #172]	; (80044e4 <HAL_I2S_Init+0x278>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d101      	bne.n	8004440 <HAL_I2S_Init+0x1d4>
 800443c:	4b2a      	ldr	r3, [pc, #168]	; (80044e8 <HAL_I2S_Init+0x27c>)
 800443e:	e001      	b.n	8004444 <HAL_I2S_Init+0x1d8>
 8004440:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004444:	2202      	movs	r2, #2
 8004446:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a25      	ldr	r2, [pc, #148]	; (80044e4 <HAL_I2S_Init+0x278>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d101      	bne.n	8004456 <HAL_I2S_Init+0x1ea>
 8004452:	4b25      	ldr	r3, [pc, #148]	; (80044e8 <HAL_I2S_Init+0x27c>)
 8004454:	e001      	b.n	800445a <HAL_I2S_Init+0x1ee>
 8004456:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004466:	d003      	beq.n	8004470 <HAL_I2S_Init+0x204>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d103      	bne.n	8004478 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004470:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	e001      	b.n	800447c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004478:	2300      	movs	r3, #0
 800447a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004486:	4313      	orrs	r3, r2
 8004488:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004490:	4313      	orrs	r3, r2
 8004492:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800449a:	4313      	orrs	r3, r2
 800449c:	b29a      	uxth	r2, r3
 800449e:	897b      	ldrh	r3, [r7, #10]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044a8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a0d      	ldr	r2, [pc, #52]	; (80044e4 <HAL_I2S_Init+0x278>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d101      	bne.n	80044b8 <HAL_I2S_Init+0x24c>
 80044b4:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <HAL_I2S_Init+0x27c>)
 80044b6:	e001      	b.n	80044bc <HAL_I2S_Init+0x250>
 80044b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044bc:	897a      	ldrh	r2, [r7, #10]
 80044be:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3720      	adds	r7, #32
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	080045e3 	.word	0x080045e3
 80044dc:	cccccccd 	.word	0xcccccccd
 80044e0:	080046f9 	.word	0x080046f9
 80044e4:	40003800 	.word	0x40003800
 80044e8:	40003400 	.word	0x40003400

080044ec <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	881a      	ldrh	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	1c9a      	adds	r2, r3, #2
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10e      	bne.n	800457c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800456c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff ffb8 	bl	80044ec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	b292      	uxth	r2, r2
 8004598:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459e:	1c9a      	adds	r2, r3, #2
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10e      	bne.n	80045da <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045ca:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7ff ff93 	bl	8004500 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b086      	sub	sp, #24
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d13a      	bne.n	8004674 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b01      	cmp	r3, #1
 8004606:	d109      	bne.n	800461c <I2S_IRQHandler+0x3a>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b40      	cmp	r3, #64	; 0x40
 8004614:	d102      	bne.n	800461c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7ff ffb4 	bl	8004584 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004622:	2b40      	cmp	r3, #64	; 0x40
 8004624:	d126      	bne.n	8004674 <I2S_IRQHandler+0x92>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b20      	cmp	r3, #32
 8004632:	d11f      	bne.n	8004674 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004642:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004644:	2300      	movs	r3, #0
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004666:	f043 0202 	orr.w	r2, r3, #2
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7ff ff50 	bl	8004514 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b03      	cmp	r3, #3
 800467e:	d136      	bne.n	80046ee <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b02      	cmp	r3, #2
 8004688:	d109      	bne.n	800469e <I2S_IRQHandler+0xbc>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004694:	2b80      	cmp	r3, #128	; 0x80
 8004696:	d102      	bne.n	800469e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7ff ff45 	bl	8004528 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d122      	bne.n	80046ee <I2S_IRQHandler+0x10c>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	d11b      	bne.n	80046ee <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046c4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80046c6:	2300      	movs	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e0:	f043 0204 	orr.w	r2, r3, #4
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff ff13 	bl	8004514 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046ee:	bf00      	nop
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a92      	ldr	r2, [pc, #584]	; (8004958 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d101      	bne.n	8004716 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004712:	4b92      	ldr	r3, [pc, #584]	; (800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004714:	e001      	b.n	800471a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004716:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a8b      	ldr	r2, [pc, #556]	; (8004958 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d101      	bne.n	8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004730:	4b8a      	ldr	r3, [pc, #552]	; (800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004732:	e001      	b.n	8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004734:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004744:	d004      	beq.n	8004750 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	f040 8099 	bne.w	8004882 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b02      	cmp	r3, #2
 8004758:	d107      	bne.n	800476a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f925 	bl	80049b4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b01      	cmp	r3, #1
 8004772:	d107      	bne.n	8004784 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f9c8 	bl	8004b14 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478a:	2b40      	cmp	r3, #64	; 0x40
 800478c:	d13a      	bne.n	8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d035      	beq.n	8004804 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a6e      	ldr	r2, [pc, #440]	; (8004958 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d101      	bne.n	80047a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80047a2:	4b6e      	ldr	r3, [pc, #440]	; (800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047a4:	e001      	b.n	80047aa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80047a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4969      	ldr	r1, [pc, #420]	; (8004958 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047b2:	428b      	cmp	r3, r1
 80047b4:	d101      	bne.n	80047ba <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80047b6:	4b69      	ldr	r3, [pc, #420]	; (800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047b8:	e001      	b.n	80047be <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80047ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047c2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	f043 0202 	orr.w	r2, r3, #2
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff fe88 	bl	8004514 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b08      	cmp	r3, #8
 800480c:	f040 80c3 	bne.w	8004996 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 80bd 	beq.w	8004996 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800482a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a49      	ldr	r2, [pc, #292]	; (8004958 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d101      	bne.n	800483a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004836:	4b49      	ldr	r3, [pc, #292]	; (800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004838:	e001      	b.n	800483e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800483a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4944      	ldr	r1, [pc, #272]	; (8004958 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004846:	428b      	cmp	r3, r1
 8004848:	d101      	bne.n	800484e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800484a:	4b44      	ldr	r3, [pc, #272]	; (800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800484c:	e001      	b.n	8004852 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800484e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004852:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004856:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004858:	2300      	movs	r3, #0
 800485a:	60bb      	str	r3, [r7, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004872:	f043 0204 	orr.w	r2, r3, #4
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff fe4a 	bl	8004514 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004880:	e089      	b.n	8004996 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b02      	cmp	r3, #2
 800488a:	d107      	bne.n	800489c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f8be 	bl	8004a18 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d107      	bne.n	80048b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f8fd 	bl	8004ab0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048bc:	2b40      	cmp	r3, #64	; 0x40
 80048be:	d12f      	bne.n	8004920 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d02a      	beq.n	8004920 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048d8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a1e      	ldr	r2, [pc, #120]	; (8004958 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d101      	bne.n	80048e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80048e4:	4b1d      	ldr	r3, [pc, #116]	; (800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048e6:	e001      	b.n	80048ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80048e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4919      	ldr	r1, [pc, #100]	; (8004958 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048f4:	428b      	cmp	r3, r1
 80048f6:	d101      	bne.n	80048fc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80048f8:	4b18      	ldr	r3, [pc, #96]	; (800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048fa:	e001      	b.n	8004900 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80048fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004900:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004904:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004912:	f043 0202 	orr.w	r2, r3, #2
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7ff fdfa 	bl	8004514 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b08      	cmp	r3, #8
 8004928:	d136      	bne.n	8004998 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f003 0320 	and.w	r3, r3, #32
 8004930:	2b00      	cmp	r3, #0
 8004932:	d031      	beq.n	8004998 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a07      	ldr	r2, [pc, #28]	; (8004958 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d101      	bne.n	8004942 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800493e:	4b07      	ldr	r3, [pc, #28]	; (800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004940:	e001      	b.n	8004946 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004942:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4902      	ldr	r1, [pc, #8]	; (8004958 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800494e:	428b      	cmp	r3, r1
 8004950:	d106      	bne.n	8004960 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004952:	4b02      	ldr	r3, [pc, #8]	; (800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004954:	e006      	b.n	8004964 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004956:	bf00      	nop
 8004958:	40003800 	.word	0x40003800
 800495c:	40003400 	.word	0x40003400
 8004960:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004964:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004968:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004978:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004986:	f043 0204 	orr.w	r2, r3, #4
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7ff fdc0 	bl	8004514 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004994:	e000      	b.n	8004998 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004996:	bf00      	nop
}
 8004998:	bf00      	nop
 800499a:	3720      	adds	r7, #32
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	1c99      	adds	r1, r3, #2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6251      	str	r1, [r2, #36]	; 0x24
 80049c6:	881a      	ldrh	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d113      	bne.n	8004a0e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049f4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d106      	bne.n	8004a0e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff ffc9 	bl	80049a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	1c99      	adds	r1, r3, #2
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6251      	str	r1, [r2, #36]	; 0x24
 8004a2a:	8819      	ldrh	r1, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a1d      	ldr	r2, [pc, #116]	; (8004aa8 <I2SEx_TxISR_I2SExt+0x90>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d101      	bne.n	8004a3a <I2SEx_TxISR_I2SExt+0x22>
 8004a36:	4b1d      	ldr	r3, [pc, #116]	; (8004aac <I2SEx_TxISR_I2SExt+0x94>)
 8004a38:	e001      	b.n	8004a3e <I2SEx_TxISR_I2SExt+0x26>
 8004a3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a3e:	460a      	mov	r2, r1
 8004a40:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d121      	bne.n	8004a9e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a12      	ldr	r2, [pc, #72]	; (8004aa8 <I2SEx_TxISR_I2SExt+0x90>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d101      	bne.n	8004a68 <I2SEx_TxISR_I2SExt+0x50>
 8004a64:	4b11      	ldr	r3, [pc, #68]	; (8004aac <I2SEx_TxISR_I2SExt+0x94>)
 8004a66:	e001      	b.n	8004a6c <I2SEx_TxISR_I2SExt+0x54>
 8004a68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	490d      	ldr	r1, [pc, #52]	; (8004aa8 <I2SEx_TxISR_I2SExt+0x90>)
 8004a74:	428b      	cmp	r3, r1
 8004a76:	d101      	bne.n	8004a7c <I2SEx_TxISR_I2SExt+0x64>
 8004a78:	4b0c      	ldr	r3, [pc, #48]	; (8004aac <I2SEx_TxISR_I2SExt+0x94>)
 8004a7a:	e001      	b.n	8004a80 <I2SEx_TxISR_I2SExt+0x68>
 8004a7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a84:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d106      	bne.n	8004a9e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7ff ff81 	bl	80049a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a9e:	bf00      	nop
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40003800 	.word	0x40003800
 8004aac:	40003400 	.word	0x40003400

08004ab0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68d8      	ldr	r0, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	1c99      	adds	r1, r3, #2
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004ac8:	b282      	uxth	r2, r0
 8004aca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d113      	bne.n	8004b0c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004af2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff ff4a 	bl	80049a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b0c:	bf00      	nop
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a20      	ldr	r2, [pc, #128]	; (8004ba4 <I2SEx_RxISR_I2SExt+0x90>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d101      	bne.n	8004b2a <I2SEx_RxISR_I2SExt+0x16>
 8004b26:	4b20      	ldr	r3, [pc, #128]	; (8004ba8 <I2SEx_RxISR_I2SExt+0x94>)
 8004b28:	e001      	b.n	8004b2e <I2SEx_RxISR_I2SExt+0x1a>
 8004b2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b2e:	68d8      	ldr	r0, [r3, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	1c99      	adds	r1, r3, #2
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004b3a:	b282      	uxth	r2, r0
 8004b3c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d121      	bne.n	8004b9a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a12      	ldr	r2, [pc, #72]	; (8004ba4 <I2SEx_RxISR_I2SExt+0x90>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d101      	bne.n	8004b64 <I2SEx_RxISR_I2SExt+0x50>
 8004b60:	4b11      	ldr	r3, [pc, #68]	; (8004ba8 <I2SEx_RxISR_I2SExt+0x94>)
 8004b62:	e001      	b.n	8004b68 <I2SEx_RxISR_I2SExt+0x54>
 8004b64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	490d      	ldr	r1, [pc, #52]	; (8004ba4 <I2SEx_RxISR_I2SExt+0x90>)
 8004b70:	428b      	cmp	r3, r1
 8004b72:	d101      	bne.n	8004b78 <I2SEx_RxISR_I2SExt+0x64>
 8004b74:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <I2SEx_RxISR_I2SExt+0x94>)
 8004b76:	e001      	b.n	8004b7c <I2SEx_RxISR_I2SExt+0x68>
 8004b78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b7c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b80:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d106      	bne.n	8004b9a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff ff03 	bl	80049a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40003800 	.word	0x40003800
 8004ba8:	40003400 	.word	0x40003400

08004bac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e267      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d075      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bca:	4b88      	ldr	r3, [pc, #544]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d00c      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bd6:	4b85      	ldr	r3, [pc, #532]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d112      	bne.n	8004c08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004be2:	4b82      	ldr	r3, [pc, #520]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bee:	d10b      	bne.n	8004c08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf0:	4b7e      	ldr	r3, [pc, #504]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d05b      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x108>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d157      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e242      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c10:	d106      	bne.n	8004c20 <HAL_RCC_OscConfig+0x74>
 8004c12:	4b76      	ldr	r3, [pc, #472]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a75      	ldr	r2, [pc, #468]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	e01d      	b.n	8004c5c <HAL_RCC_OscConfig+0xb0>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c28:	d10c      	bne.n	8004c44 <HAL_RCC_OscConfig+0x98>
 8004c2a:	4b70      	ldr	r3, [pc, #448]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a6f      	ldr	r2, [pc, #444]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	4b6d      	ldr	r3, [pc, #436]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a6c      	ldr	r2, [pc, #432]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	e00b      	b.n	8004c5c <HAL_RCC_OscConfig+0xb0>
 8004c44:	4b69      	ldr	r3, [pc, #420]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a68      	ldr	r2, [pc, #416]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	4b66      	ldr	r3, [pc, #408]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a65      	ldr	r2, [pc, #404]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d013      	beq.n	8004c8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c64:	f7fc f9c0 	bl	8000fe8 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c6c:	f7fc f9bc 	bl	8000fe8 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b64      	cmp	r3, #100	; 0x64
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e207      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7e:	4b5b      	ldr	r3, [pc, #364]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0f0      	beq.n	8004c6c <HAL_RCC_OscConfig+0xc0>
 8004c8a:	e014      	b.n	8004cb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8c:	f7fc f9ac 	bl	8000fe8 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c94:	f7fc f9a8 	bl	8000fe8 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b64      	cmp	r3, #100	; 0x64
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e1f3      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ca6:	4b51      	ldr	r3, [pc, #324]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0xe8>
 8004cb2:	e000      	b.n	8004cb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d063      	beq.n	8004d8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cc2:	4b4a      	ldr	r3, [pc, #296]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00b      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cce:	4b47      	ldr	r3, [pc, #284]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d11c      	bne.n	8004d14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cda:	4b44      	ldr	r3, [pc, #272]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d116      	bne.n	8004d14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ce6:	4b41      	ldr	r3, [pc, #260]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <HAL_RCC_OscConfig+0x152>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d001      	beq.n	8004cfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e1c7      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cfe:	4b3b      	ldr	r3, [pc, #236]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	4937      	ldr	r1, [pc, #220]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d12:	e03a      	b.n	8004d8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d020      	beq.n	8004d5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d1c:	4b34      	ldr	r3, [pc, #208]	; (8004df0 <HAL_RCC_OscConfig+0x244>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d22:	f7fc f961 	bl	8000fe8 <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d2a:	f7fc f95d 	bl	8000fe8 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e1a8      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3c:	4b2b      	ldr	r3, [pc, #172]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d48:	4b28      	ldr	r3, [pc, #160]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	4925      	ldr	r1, [pc, #148]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	600b      	str	r3, [r1, #0]
 8004d5c:	e015      	b.n	8004d8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d5e:	4b24      	ldr	r3, [pc, #144]	; (8004df0 <HAL_RCC_OscConfig+0x244>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7fc f940 	bl	8000fe8 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d6c:	f7fc f93c 	bl	8000fe8 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e187      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d7e:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d036      	beq.n	8004e04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d016      	beq.n	8004dcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d9e:	4b15      	ldr	r3, [pc, #84]	; (8004df4 <HAL_RCC_OscConfig+0x248>)
 8004da0:	2201      	movs	r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da4:	f7fc f920 	bl	8000fe8 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dac:	f7fc f91c 	bl	8000fe8 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e167      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dbe:	4b0b      	ldr	r3, [pc, #44]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0f0      	beq.n	8004dac <HAL_RCC_OscConfig+0x200>
 8004dca:	e01b      	b.n	8004e04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dcc:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <HAL_RCC_OscConfig+0x248>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd2:	f7fc f909 	bl	8000fe8 <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd8:	e00e      	b.n	8004df8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dda:	f7fc f905 	bl	8000fe8 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d907      	bls.n	8004df8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e150      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
 8004dec:	40023800 	.word	0x40023800
 8004df0:	42470000 	.word	0x42470000
 8004df4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004df8:	4b88      	ldr	r3, [pc, #544]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1ea      	bne.n	8004dda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 8097 	beq.w	8004f40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e12:	2300      	movs	r3, #0
 8004e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e16:	4b81      	ldr	r3, [pc, #516]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10f      	bne.n	8004e42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e22:	2300      	movs	r3, #0
 8004e24:	60bb      	str	r3, [r7, #8]
 8004e26:	4b7d      	ldr	r3, [pc, #500]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	4a7c      	ldr	r2, [pc, #496]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e30:	6413      	str	r3, [r2, #64]	; 0x40
 8004e32:	4b7a      	ldr	r3, [pc, #488]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	60bb      	str	r3, [r7, #8]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e42:	4b77      	ldr	r3, [pc, #476]	; (8005020 <HAL_RCC_OscConfig+0x474>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d118      	bne.n	8004e80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e4e:	4b74      	ldr	r3, [pc, #464]	; (8005020 <HAL_RCC_OscConfig+0x474>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a73      	ldr	r2, [pc, #460]	; (8005020 <HAL_RCC_OscConfig+0x474>)
 8004e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e5a:	f7fc f8c5 	bl	8000fe8 <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e62:	f7fc f8c1 	bl	8000fe8 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e10c      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e74:	4b6a      	ldr	r3, [pc, #424]	; (8005020 <HAL_RCC_OscConfig+0x474>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0f0      	beq.n	8004e62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d106      	bne.n	8004e96 <HAL_RCC_OscConfig+0x2ea>
 8004e88:	4b64      	ldr	r3, [pc, #400]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8c:	4a63      	ldr	r2, [pc, #396]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	6713      	str	r3, [r2, #112]	; 0x70
 8004e94:	e01c      	b.n	8004ed0 <HAL_RCC_OscConfig+0x324>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	2b05      	cmp	r3, #5
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x30c>
 8004e9e:	4b5f      	ldr	r3, [pc, #380]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea2:	4a5e      	ldr	r2, [pc, #376]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004ea4:	f043 0304 	orr.w	r3, r3, #4
 8004ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eaa:	4b5c      	ldr	r3, [pc, #368]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eae:	4a5b      	ldr	r2, [pc, #364]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb6:	e00b      	b.n	8004ed0 <HAL_RCC_OscConfig+0x324>
 8004eb8:	4b58      	ldr	r3, [pc, #352]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebc:	4a57      	ldr	r2, [pc, #348]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004ebe:	f023 0301 	bic.w	r3, r3, #1
 8004ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec4:	4b55      	ldr	r3, [pc, #340]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec8:	4a54      	ldr	r2, [pc, #336]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004eca:	f023 0304 	bic.w	r3, r3, #4
 8004ece:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d015      	beq.n	8004f04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed8:	f7fc f886 	bl	8000fe8 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ede:	e00a      	b.n	8004ef6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee0:	f7fc f882 	bl	8000fe8 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e0cb      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef6:	4b49      	ldr	r3, [pc, #292]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0ee      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x334>
 8004f02:	e014      	b.n	8004f2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f04:	f7fc f870 	bl	8000fe8 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f0a:	e00a      	b.n	8004f22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f0c:	f7fc f86c 	bl	8000fe8 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e0b5      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f22:	4b3e      	ldr	r3, [pc, #248]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1ee      	bne.n	8004f0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f2e:	7dfb      	ldrb	r3, [r7, #23]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d105      	bne.n	8004f40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f34:	4b39      	ldr	r3, [pc, #228]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	4a38      	ldr	r2, [pc, #224]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80a1 	beq.w	800508c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f4a:	4b34      	ldr	r3, [pc, #208]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 030c 	and.w	r3, r3, #12
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d05c      	beq.n	8005010 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d141      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f5e:	4b31      	ldr	r3, [pc, #196]	; (8005024 <HAL_RCC_OscConfig+0x478>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f64:	f7fc f840 	bl	8000fe8 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f6c:	f7fc f83c 	bl	8000fe8 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e087      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f7e:	4b27      	ldr	r3, [pc, #156]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69da      	ldr	r2, [r3, #28]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	019b      	lsls	r3, r3, #6
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa0:	085b      	lsrs	r3, r3, #1
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	041b      	lsls	r3, r3, #16
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	061b      	lsls	r3, r3, #24
 8004fae:	491b      	ldr	r1, [pc, #108]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fb4:	4b1b      	ldr	r3, [pc, #108]	; (8005024 <HAL_RCC_OscConfig+0x478>)
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fba:	f7fc f815 	bl	8000fe8 <HAL_GetTick>
 8004fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fc2:	f7fc f811 	bl	8000fe8 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e05c      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd4:	4b11      	ldr	r3, [pc, #68]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0f0      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x416>
 8004fe0:	e054      	b.n	800508c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fe2:	4b10      	ldr	r3, [pc, #64]	; (8005024 <HAL_RCC_OscConfig+0x478>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe8:	f7fb fffe 	bl	8000fe8 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ff0:	f7fb fffa 	bl	8000fe8 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e045      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005002:	4b06      	ldr	r3, [pc, #24]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1f0      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x444>
 800500e:	e03d      	b.n	800508c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d107      	bne.n	8005028 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e038      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
 800501c:	40023800 	.word	0x40023800
 8005020:	40007000 	.word	0x40007000
 8005024:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005028:	4b1b      	ldr	r3, [pc, #108]	; (8005098 <HAL_RCC_OscConfig+0x4ec>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d028      	beq.n	8005088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005040:	429a      	cmp	r2, r3
 8005042:	d121      	bne.n	8005088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800504e:	429a      	cmp	r2, r3
 8005050:	d11a      	bne.n	8005088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005058:	4013      	ands	r3, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800505e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005060:	4293      	cmp	r3, r2
 8005062:	d111      	bne.n	8005088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506e:	085b      	lsrs	r3, r3, #1
 8005070:	3b01      	subs	r3, #1
 8005072:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005074:	429a      	cmp	r2, r3
 8005076:	d107      	bne.n	8005088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005084:	429a      	cmp	r2, r3
 8005086:	d001      	beq.n	800508c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e000      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40023800 	.word	0x40023800

0800509c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e0cc      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050b0:	4b68      	ldr	r3, [pc, #416]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d90c      	bls.n	80050d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050be:	4b65      	ldr	r3, [pc, #404]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c6:	4b63      	ldr	r3, [pc, #396]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d001      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e0b8      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d020      	beq.n	8005126 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d005      	beq.n	80050fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050f0:	4b59      	ldr	r3, [pc, #356]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	4a58      	ldr	r2, [pc, #352]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b00      	cmp	r3, #0
 8005106:	d005      	beq.n	8005114 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005108:	4b53      	ldr	r3, [pc, #332]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	4a52      	ldr	r2, [pc, #328]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005112:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005114:	4b50      	ldr	r3, [pc, #320]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	494d      	ldr	r1, [pc, #308]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	4313      	orrs	r3, r2
 8005124:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d044      	beq.n	80051bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d107      	bne.n	800514a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800513a:	4b47      	ldr	r3, [pc, #284]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d119      	bne.n	800517a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e07f      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d003      	beq.n	800515a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005156:	2b03      	cmp	r3, #3
 8005158:	d107      	bne.n	800516a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800515a:	4b3f      	ldr	r3, [pc, #252]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d109      	bne.n	800517a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e06f      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800516a:	4b3b      	ldr	r3, [pc, #236]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e067      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800517a:	4b37      	ldr	r3, [pc, #220]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f023 0203 	bic.w	r2, r3, #3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	4934      	ldr	r1, [pc, #208]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 8005188:	4313      	orrs	r3, r2
 800518a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800518c:	f7fb ff2c 	bl	8000fe8 <HAL_GetTick>
 8005190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005192:	e00a      	b.n	80051aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005194:	f7fb ff28 	bl	8000fe8 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e04f      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051aa:	4b2b      	ldr	r3, [pc, #172]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 020c 	and.w	r2, r3, #12
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d1eb      	bne.n	8005194 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051bc:	4b25      	ldr	r3, [pc, #148]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d20c      	bcs.n	80051e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ca:	4b22      	ldr	r3, [pc, #136]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d2:	4b20      	ldr	r3, [pc, #128]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d001      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e032      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d008      	beq.n	8005202 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051f0:	4b19      	ldr	r3, [pc, #100]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	4916      	ldr	r1, [pc, #88]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0308 	and.w	r3, r3, #8
 800520a:	2b00      	cmp	r3, #0
 800520c:	d009      	beq.n	8005222 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800520e:	4b12      	ldr	r3, [pc, #72]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	490e      	ldr	r1, [pc, #56]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800521e:	4313      	orrs	r3, r2
 8005220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005222:	f000 f821 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8005226:	4602      	mov	r2, r0
 8005228:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	091b      	lsrs	r3, r3, #4
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	490a      	ldr	r1, [pc, #40]	; (800525c <HAL_RCC_ClockConfig+0x1c0>)
 8005234:	5ccb      	ldrb	r3, [r1, r3]
 8005236:	fa22 f303 	lsr.w	r3, r2, r3
 800523a:	4a09      	ldr	r2, [pc, #36]	; (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 800523c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800523e:	4b09      	ldr	r3, [pc, #36]	; (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f7fb fe8c 	bl	8000f60 <HAL_InitTick>

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40023c00 	.word	0x40023c00
 8005258:	40023800 	.word	0x40023800
 800525c:	08009098 	.word	0x08009098
 8005260:	20000000 	.word	0x20000000
 8005264:	20000004 	.word	0x20000004

08005268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800526c:	b094      	sub	sp, #80	; 0x50
 800526e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	647b      	str	r3, [r7, #68]	; 0x44
 8005274:	2300      	movs	r3, #0
 8005276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005278:	2300      	movs	r3, #0
 800527a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005280:	4b79      	ldr	r3, [pc, #484]	; (8005468 <HAL_RCC_GetSysClockFreq+0x200>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f003 030c 	and.w	r3, r3, #12
 8005288:	2b08      	cmp	r3, #8
 800528a:	d00d      	beq.n	80052a8 <HAL_RCC_GetSysClockFreq+0x40>
 800528c:	2b08      	cmp	r3, #8
 800528e:	f200 80e1 	bhi.w	8005454 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <HAL_RCC_GetSysClockFreq+0x34>
 8005296:	2b04      	cmp	r3, #4
 8005298:	d003      	beq.n	80052a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800529a:	e0db      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800529c:	4b73      	ldr	r3, [pc, #460]	; (800546c <HAL_RCC_GetSysClockFreq+0x204>)
 800529e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80052a0:	e0db      	b.n	800545a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052a2:	4b73      	ldr	r3, [pc, #460]	; (8005470 <HAL_RCC_GetSysClockFreq+0x208>)
 80052a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052a6:	e0d8      	b.n	800545a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052a8:	4b6f      	ldr	r3, [pc, #444]	; (8005468 <HAL_RCC_GetSysClockFreq+0x200>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052b2:	4b6d      	ldr	r3, [pc, #436]	; (8005468 <HAL_RCC_GetSysClockFreq+0x200>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d063      	beq.n	8005386 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052be:	4b6a      	ldr	r3, [pc, #424]	; (8005468 <HAL_RCC_GetSysClockFreq+0x200>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	099b      	lsrs	r3, r3, #6
 80052c4:	2200      	movs	r2, #0
 80052c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80052c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80052ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d0:	633b      	str	r3, [r7, #48]	; 0x30
 80052d2:	2300      	movs	r3, #0
 80052d4:	637b      	str	r3, [r7, #52]	; 0x34
 80052d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80052da:	4622      	mov	r2, r4
 80052dc:	462b      	mov	r3, r5
 80052de:	f04f 0000 	mov.w	r0, #0
 80052e2:	f04f 0100 	mov.w	r1, #0
 80052e6:	0159      	lsls	r1, r3, #5
 80052e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052ec:	0150      	lsls	r0, r2, #5
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	4621      	mov	r1, r4
 80052f4:	1a51      	subs	r1, r2, r1
 80052f6:	6139      	str	r1, [r7, #16]
 80052f8:	4629      	mov	r1, r5
 80052fa:	eb63 0301 	sbc.w	r3, r3, r1
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800530c:	4659      	mov	r1, fp
 800530e:	018b      	lsls	r3, r1, #6
 8005310:	4651      	mov	r1, sl
 8005312:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005316:	4651      	mov	r1, sl
 8005318:	018a      	lsls	r2, r1, #6
 800531a:	4651      	mov	r1, sl
 800531c:	ebb2 0801 	subs.w	r8, r2, r1
 8005320:	4659      	mov	r1, fp
 8005322:	eb63 0901 	sbc.w	r9, r3, r1
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005332:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005336:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800533a:	4690      	mov	r8, r2
 800533c:	4699      	mov	r9, r3
 800533e:	4623      	mov	r3, r4
 8005340:	eb18 0303 	adds.w	r3, r8, r3
 8005344:	60bb      	str	r3, [r7, #8]
 8005346:	462b      	mov	r3, r5
 8005348:	eb49 0303 	adc.w	r3, r9, r3
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800535a:	4629      	mov	r1, r5
 800535c:	024b      	lsls	r3, r1, #9
 800535e:	4621      	mov	r1, r4
 8005360:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005364:	4621      	mov	r1, r4
 8005366:	024a      	lsls	r2, r1, #9
 8005368:	4610      	mov	r0, r2
 800536a:	4619      	mov	r1, r3
 800536c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800536e:	2200      	movs	r2, #0
 8005370:	62bb      	str	r3, [r7, #40]	; 0x28
 8005372:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005374:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005378:	f7fa ff26 	bl	80001c8 <__aeabi_uldivmod>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4613      	mov	r3, r2
 8005382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005384:	e058      	b.n	8005438 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005386:	4b38      	ldr	r3, [pc, #224]	; (8005468 <HAL_RCC_GetSysClockFreq+0x200>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	099b      	lsrs	r3, r3, #6
 800538c:	2200      	movs	r2, #0
 800538e:	4618      	mov	r0, r3
 8005390:	4611      	mov	r1, r2
 8005392:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005396:	623b      	str	r3, [r7, #32]
 8005398:	2300      	movs	r3, #0
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
 800539c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053a0:	4642      	mov	r2, r8
 80053a2:	464b      	mov	r3, r9
 80053a4:	f04f 0000 	mov.w	r0, #0
 80053a8:	f04f 0100 	mov.w	r1, #0
 80053ac:	0159      	lsls	r1, r3, #5
 80053ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053b2:	0150      	lsls	r0, r2, #5
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4641      	mov	r1, r8
 80053ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80053be:	4649      	mov	r1, r9
 80053c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053d8:	ebb2 040a 	subs.w	r4, r2, sl
 80053dc:	eb63 050b 	sbc.w	r5, r3, fp
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	00eb      	lsls	r3, r5, #3
 80053ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053ee:	00e2      	lsls	r2, r4, #3
 80053f0:	4614      	mov	r4, r2
 80053f2:	461d      	mov	r5, r3
 80053f4:	4643      	mov	r3, r8
 80053f6:	18e3      	adds	r3, r4, r3
 80053f8:	603b      	str	r3, [r7, #0]
 80053fa:	464b      	mov	r3, r9
 80053fc:	eb45 0303 	adc.w	r3, r5, r3
 8005400:	607b      	str	r3, [r7, #4]
 8005402:	f04f 0200 	mov.w	r2, #0
 8005406:	f04f 0300 	mov.w	r3, #0
 800540a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800540e:	4629      	mov	r1, r5
 8005410:	028b      	lsls	r3, r1, #10
 8005412:	4621      	mov	r1, r4
 8005414:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005418:	4621      	mov	r1, r4
 800541a:	028a      	lsls	r2, r1, #10
 800541c:	4610      	mov	r0, r2
 800541e:	4619      	mov	r1, r3
 8005420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005422:	2200      	movs	r2, #0
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	61fa      	str	r2, [r7, #28]
 8005428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800542c:	f7fa fecc 	bl	80001c8 <__aeabi_uldivmod>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4613      	mov	r3, r2
 8005436:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005438:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <HAL_RCC_GetSysClockFreq+0x200>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	0c1b      	lsrs	r3, r3, #16
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	3301      	adds	r3, #1
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005448:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800544a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800544c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005450:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005452:	e002      	b.n	800545a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005454:	4b05      	ldr	r3, [pc, #20]	; (800546c <HAL_RCC_GetSysClockFreq+0x204>)
 8005456:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800545a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800545c:	4618      	mov	r0, r3
 800545e:	3750      	adds	r7, #80	; 0x50
 8005460:	46bd      	mov	sp, r7
 8005462:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005466:	bf00      	nop
 8005468:	40023800 	.word	0x40023800
 800546c:	00f42400 	.word	0x00f42400
 8005470:	007a1200 	.word	0x007a1200

08005474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005478:	4b03      	ldr	r3, [pc, #12]	; (8005488 <HAL_RCC_GetHCLKFreq+0x14>)
 800547a:	681b      	ldr	r3, [r3, #0]
}
 800547c:	4618      	mov	r0, r3
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	20000000 	.word	0x20000000

0800548c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005490:	f7ff fff0 	bl	8005474 <HAL_RCC_GetHCLKFreq>
 8005494:	4602      	mov	r2, r0
 8005496:	4b05      	ldr	r3, [pc, #20]	; (80054ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	0a9b      	lsrs	r3, r3, #10
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	4903      	ldr	r1, [pc, #12]	; (80054b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054a2:	5ccb      	ldrb	r3, [r1, r3]
 80054a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40023800 	.word	0x40023800
 80054b0:	080090a8 	.word	0x080090a8

080054b4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d105      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d035      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80054dc:	4b62      	ldr	r3, [pc, #392]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054e2:	f7fb fd81 	bl	8000fe8 <HAL_GetTick>
 80054e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054e8:	e008      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80054ea:	f7fb fd7d 	bl	8000fe8 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d901      	bls.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e0b0      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054fc:	4b5b      	ldr	r3, [pc, #364]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1f0      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	019a      	lsls	r2, r3, #6
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	071b      	lsls	r3, r3, #28
 8005514:	4955      	ldr	r1, [pc, #340]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800551c:	4b52      	ldr	r3, [pc, #328]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800551e:	2201      	movs	r2, #1
 8005520:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005522:	f7fb fd61 	bl	8000fe8 <HAL_GetTick>
 8005526:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005528:	e008      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800552a:	f7fb fd5d 	bl	8000fe8 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e090      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800553c:	4b4b      	ldr	r3, [pc, #300]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0f0      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 8083 	beq.w	800565c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005556:	2300      	movs	r3, #0
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	4b44      	ldr	r3, [pc, #272]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	4a43      	ldr	r2, [pc, #268]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005564:	6413      	str	r3, [r2, #64]	; 0x40
 8005566:	4b41      	ldr	r3, [pc, #260]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005572:	4b3f      	ldr	r3, [pc, #252]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a3e      	ldr	r2, [pc, #248]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800557c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800557e:	f7fb fd33 	bl	8000fe8 <HAL_GetTick>
 8005582:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005584:	e008      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005586:	f7fb fd2f 	bl	8000fe8 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e062      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005598:	4b35      	ldr	r3, [pc, #212]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0f0      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055a4:	4b31      	ldr	r3, [pc, #196]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d02f      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d028      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055c2:	4b2a      	ldr	r3, [pc, #168]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055cc:	4b29      	ldr	r3, [pc, #164]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80055ce:	2201      	movs	r2, #1
 80055d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055d2:	4b28      	ldr	r3, [pc, #160]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80055d8:	4a24      	ldr	r2, [pc, #144]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055de:	4b23      	ldr	r3, [pc, #140]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d114      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80055ea:	f7fb fcfd 	bl	8000fe8 <HAL_GetTick>
 80055ee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055f0:	e00a      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055f2:	f7fb fcf9 	bl	8000fe8 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005600:	4293      	cmp	r3, r2
 8005602:	d901      	bls.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e02a      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005608:	4b18      	ldr	r3, [pc, #96]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800560a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0ee      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800561c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005620:	d10d      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005622:	4b12      	ldr	r3, [pc, #72]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005636:	490d      	ldr	r1, [pc, #52]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005638:	4313      	orrs	r3, r2
 800563a:	608b      	str	r3, [r1, #8]
 800563c:	e005      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800563e:	4b0b      	ldr	r3, [pc, #44]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	4a0a      	ldr	r2, [pc, #40]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005644:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005648:	6093      	str	r3, [r2, #8]
 800564a:	4b08      	ldr	r3, [pc, #32]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800564c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005656:	4905      	ldr	r1, [pc, #20]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005658:	4313      	orrs	r3, r2
 800565a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	42470068 	.word	0x42470068
 800566c:	40023800 	.word	0x40023800
 8005670:	40007000 	.word	0x40007000
 8005674:	42470e40 	.word	0x42470e40

08005678 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d13e      	bne.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005696:	4b23      	ldr	r3, [pc, #140]	; (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d005      	beq.n	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d12f      	bne.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80056ac:	4b1e      	ldr	r3, [pc, #120]	; (8005728 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056ae:	617b      	str	r3, [r7, #20]
          break;
 80056b0:	e02f      	b.n	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80056b2:	4b1c      	ldr	r3, [pc, #112]	; (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056be:	d108      	bne.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80056c0:	4b18      	ldr	r3, [pc, #96]	; (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056c8:	4a18      	ldr	r2, [pc, #96]	; (800572c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80056ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	e007      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80056d2:	4b14      	ldr	r3, [pc, #80]	; (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056da:	4a15      	ldr	r2, [pc, #84]	; (8005730 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80056dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80056e2:	4b10      	ldr	r3, [pc, #64]	; (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80056e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e8:	099b      	lsrs	r3, r3, #6
 80056ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	fb02 f303 	mul.w	r3, r2, r3
 80056f4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80056f6:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80056f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056fc:	0f1b      	lsrs	r3, r3, #28
 80056fe:	f003 0307 	and.w	r3, r3, #7
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	fbb2 f3f3 	udiv	r3, r2, r3
 8005708:	617b      	str	r3, [r7, #20]
          break;
 800570a:	e002      	b.n	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	617b      	str	r3, [r7, #20]
          break;
 8005710:	bf00      	nop
        }
      }
      break;
 8005712:	bf00      	nop
    }
  }
  return frequency;
 8005714:	697b      	ldr	r3, [r7, #20]
}
 8005716:	4618      	mov	r0, r3
 8005718:	371c      	adds	r7, #28
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40023800 	.word	0x40023800
 8005728:	00bb8000 	.word	0x00bb8000
 800572c:	007a1200 	.word	0x007a1200
 8005730:	00f42400 	.word	0x00f42400

08005734 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e07b      	b.n	800583e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	2b00      	cmp	r3, #0
 800574c:	d108      	bne.n	8005760 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005756:	d009      	beq.n	800576c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	61da      	str	r2, [r3, #28]
 800575e:	e005      	b.n	800576c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d106      	bne.n	800578c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7fb fac6 	bl	8000d18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057b4:	431a      	orrs	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	431a      	orrs	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057e6:	431a      	orrs	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f0:	ea42 0103 	orr.w	r1, r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	0c1b      	lsrs	r3, r3, #16
 800580a:	f003 0104 	and.w	r1, r3, #4
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	f003 0210 	and.w	r2, r3, #16
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69da      	ldr	r2, [r3, #28]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800582c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005846:	b084      	sub	sp, #16
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	f107 001c 	add.w	r0, r7, #28
 8005854:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585a:	2b01      	cmp	r3, #1
 800585c:	d122      	bne.n	80058a4 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005862:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005888:	2b01      	cmp	r3, #1
 800588a:	d105      	bne.n	8005898 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f9bf 	bl	8005c1c <USB_CoreReset>
 800589e:	4603      	mov	r3, r0
 80058a0:	73fb      	strb	r3, [r7, #15]
 80058a2:	e01a      	b.n	80058da <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f9b3 	bl	8005c1c <USB_CoreReset>
 80058b6:	4603      	mov	r3, r0
 80058b8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d106      	bne.n	80058ce <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	639a      	str	r2, [r3, #56]	; 0x38
 80058cc:	e005      	b.n	80058da <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d10b      	bne.n	80058f8 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f043 0206 	orr.w	r2, r3, #6
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f043 0220 	orr.w	r2, r3, #32
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005904:	b004      	add	sp, #16
 8005906:	4770      	bx	lr

08005908 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f043 0201 	orr.w	r2, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f023 0201 	bic.w	r2, r3, #1
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	460b      	mov	r3, r1
 8005956:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005968:	78fb      	ldrb	r3, [r7, #3]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d115      	bne.n	800599a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800597a:	2001      	movs	r0, #1
 800597c:	f7fb fb40 	bl	8001000 <HAL_Delay>
      ms++;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3301      	adds	r3, #1
 8005984:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f939 	bl	8005bfe <USB_GetMode>
 800598c:	4603      	mov	r3, r0
 800598e:	2b01      	cmp	r3, #1
 8005990:	d01e      	beq.n	80059d0 <USB_SetCurrentMode+0x84>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2b31      	cmp	r3, #49	; 0x31
 8005996:	d9f0      	bls.n	800597a <USB_SetCurrentMode+0x2e>
 8005998:	e01a      	b.n	80059d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800599a:	78fb      	ldrb	r3, [r7, #3]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d115      	bne.n	80059cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059ac:	2001      	movs	r0, #1
 80059ae:	f7fb fb27 	bl	8001000 <HAL_Delay>
      ms++;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	3301      	adds	r3, #1
 80059b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f920 	bl	8005bfe <USB_GetMode>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d005      	beq.n	80059d0 <USB_SetCurrentMode+0x84>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b31      	cmp	r3, #49	; 0x31
 80059c8:	d9f0      	bls.n	80059ac <USB_SetCurrentMode+0x60>
 80059ca:	e001      	b.n	80059d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e005      	b.n	80059dc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b32      	cmp	r3, #50	; 0x32
 80059d4:	d101      	bne.n	80059da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e000      	b.n	80059dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3301      	adds	r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4a13      	ldr	r2, [pc, #76]	; (8005a48 <USB_FlushTxFifo+0x64>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d901      	bls.n	8005a04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e01b      	b.n	8005a3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	daf2      	bge.n	80059f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	019b      	lsls	r3, r3, #6
 8005a14:	f043 0220 	orr.w	r2, r3, #32
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4a08      	ldr	r2, [pc, #32]	; (8005a48 <USB_FlushTxFifo+0x64>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d901      	bls.n	8005a2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e006      	b.n	8005a3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	d0f0      	beq.n	8005a1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	00030d40 	.word	0x00030d40

08005a4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4a11      	ldr	r2, [pc, #68]	; (8005aa8 <USB_FlushRxFifo+0x5c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d901      	bls.n	8005a6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e018      	b.n	8005a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	daf2      	bge.n	8005a58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2210      	movs	r2, #16
 8005a7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4a08      	ldr	r2, [pc, #32]	; (8005aa8 <USB_FlushRxFifo+0x5c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d901      	bls.n	8005a8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e006      	b.n	8005a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	2b10      	cmp	r3, #16
 8005a98:	d0f0      	beq.n	8005a7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	00030d40 	.word	0x00030d40

08005aac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b089      	sub	sp, #36	; 0x24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	461a      	mov	r2, r3
 8005aba:	460b      	mov	r3, r1
 8005abc:	71fb      	strb	r3, [r7, #7]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005aca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d123      	bne.n	8005b1a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ad2:	88bb      	ldrh	r3, [r7, #4]
 8005ad4:	3303      	adds	r3, #3
 8005ad6:	089b      	lsrs	r3, r3, #2
 8005ad8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005ada:	2300      	movs	r3, #0
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	e018      	b.n	8005b12 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ae0:	79fb      	ldrb	r3, [r7, #7]
 8005ae2:	031a      	lsls	r2, r3, #12
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aec:	461a      	mov	r2, r3
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	3301      	adds	r3, #1
 8005af8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	3301      	adds	r3, #1
 8005afe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	3301      	adds	r3, #1
 8005b04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	61bb      	str	r3, [r7, #24]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d3e2      	bcc.n	8005ae0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3724      	adds	r7, #36	; 0x24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b08b      	sub	sp, #44	; 0x2c
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	4613      	mov	r3, r2
 8005b34:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b3e:	88fb      	ldrh	r3, [r7, #6]
 8005b40:	089b      	lsrs	r3, r3, #2
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b46:	88fb      	ldrh	r3, [r7, #6]
 8005b48:	f003 0303 	and.w	r3, r3, #3
 8005b4c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b4e:	2300      	movs	r3, #0
 8005b50:	623b      	str	r3, [r7, #32]
 8005b52:	e014      	b.n	8005b7e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	3301      	adds	r3, #1
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	3301      	adds	r3, #1
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	3301      	adds	r3, #1
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	3301      	adds	r3, #1
 8005b76:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	623b      	str	r3, [r7, #32]
 8005b7e:	6a3a      	ldr	r2, [r7, #32]
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d3e6      	bcc.n	8005b54 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b86:	8bfb      	ldrh	r3, [r7, #30]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01e      	beq.n	8005bca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b96:	461a      	mov	r2, r3
 8005b98:	f107 0310 	add.w	r3, r7, #16
 8005b9c:	6812      	ldr	r2, [r2, #0]
 8005b9e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	701a      	strb	r2, [r3, #0]
      i++;
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	623b      	str	r3, [r7, #32]
      pDest++;
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	3301      	adds	r3, #1
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005bbe:	8bfb      	ldrh	r3, [r7, #30]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005bc4:	8bfb      	ldrh	r3, [r7, #30]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1ea      	bne.n	8005ba0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	372c      	adds	r7, #44	; 0x2c
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	4013      	ands	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
	...

08005c1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4a13      	ldr	r2, [pc, #76]	; (8005c80 <USB_CoreReset+0x64>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d901      	bls.n	8005c3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e01b      	b.n	8005c72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	daf2      	bge.n	8005c28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	f043 0201 	orr.w	r2, r3, #1
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3301      	adds	r3, #1
 8005c56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4a09      	ldr	r2, [pc, #36]	; (8005c80 <USB_CoreReset+0x64>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d901      	bls.n	8005c64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e006      	b.n	8005c72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d0f0      	beq.n	8005c52 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	00030d40 	.word	0x00030d40

08005c84 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c84:	b084      	sub	sp, #16
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b086      	sub	sp, #24
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cba:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d018      	beq.n	8005d0c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d10a      	bne.n	8005cf6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cee:	f043 0304 	orr.w	r3, r3, #4
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	e014      	b.n	8005d20 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d04:	f023 0304 	bic.w	r3, r3, #4
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	e009      	b.n	8005d20 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d1a:	f023 0304 	bic.w	r3, r3, #4
 8005d1e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d20:	2110      	movs	r1, #16
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7ff fe5e 	bl	80059e4 <USB_FlushTxFifo>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7ff fe8a 	bl	8005a4c <USB_FlushRxFifo>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d42:	2300      	movs	r3, #0
 8005d44:	613b      	str	r3, [r7, #16]
 8005d46:	e015      	b.n	8005d74 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d54:	461a      	mov	r2, r3
 8005d56:	f04f 33ff 	mov.w	r3, #4294967295
 8005d5a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d68:	461a      	mov	r2, r3
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	3301      	adds	r3, #1
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d3e5      	bcc.n	8005d48 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f04f 32ff 	mov.w	r2, #4294967295
 8005d88:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00b      	beq.n	8005dae <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d9c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a13      	ldr	r2, [pc, #76]	; (8005df0 <USB_HostInit+0x16c>)
 8005da2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a13      	ldr	r2, [pc, #76]	; (8005df4 <USB_HostInit+0x170>)
 8005da8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005dac:	e009      	b.n	8005dc2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2280      	movs	r2, #128	; 0x80
 8005db2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a10      	ldr	r2, [pc, #64]	; (8005df8 <USB_HostInit+0x174>)
 8005db8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a0f      	ldr	r2, [pc, #60]	; (8005dfc <USB_HostInit+0x178>)
 8005dbe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d105      	bne.n	8005dd4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	f043 0210 	orr.w	r2, r3, #16
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	699a      	ldr	r2, [r3, #24]
 8005dd8:	4b09      	ldr	r3, [pc, #36]	; (8005e00 <USB_HostInit+0x17c>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dec:	b004      	add	sp, #16
 8005dee:	4770      	bx	lr
 8005df0:	01000200 	.word	0x01000200
 8005df4:	00e00300 	.word	0x00e00300
 8005df8:	00600080 	.word	0x00600080
 8005dfc:	004000e0 	.word	0x004000e0
 8005e00:	a3200008 	.word	0xa3200008

08005e04 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e22:	f023 0303 	bic.w	r3, r3, #3
 8005e26:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	f003 0303 	and.w	r3, r3, #3
 8005e36:	68f9      	ldr	r1, [r7, #12]
 8005e38:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d107      	bne.n	8005e56 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e52:	6053      	str	r3, [r2, #4]
 8005e54:	e009      	b.n	8005e6a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d106      	bne.n	8005e6a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e62:	461a      	mov	r2, r3
 8005e64:	f241 7370 	movw	r3, #6000	; 0x1770
 8005e68:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e98:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005ea8:	2064      	movs	r0, #100	; 0x64
 8005eaa:	f7fb f8a9 	bl	8001000 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005eb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eba:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005ebc:	200a      	movs	r0, #10
 8005ebe:	f7fb f89f 	bl	8001000 <HAL_Delay>

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ef0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d109      	bne.n	8005f10 <USB_DriveVbus+0x44>
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d106      	bne.n	8005f10 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f0e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f1a:	d109      	bne.n	8005f30 <USB_DriveVbus+0x64>
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d106      	bne.n	8005f30 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f2e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b085      	sub	sp, #20
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	0c5b      	lsrs	r3, r3, #17
 8005f5c:	f003 0303 	and.w	r3, r3, #3
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	b29b      	uxth	r3, r3
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
	...

08005f90 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b088      	sub	sp, #32
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	4608      	mov	r0, r1
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	70fb      	strb	r3, [r7, #3]
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	70bb      	strb	r3, [r7, #2]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005fb2:	78fb      	ldrb	r3, [r7, #3]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005fc6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d87e      	bhi.n	80060cc <USB_HC_Init+0x13c>
 8005fce:	a201      	add	r2, pc, #4	; (adr r2, 8005fd4 <USB_HC_Init+0x44>)
 8005fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd4:	08005fe5 	.word	0x08005fe5
 8005fd8:	0800608f 	.word	0x0800608f
 8005fdc:	08005fe5 	.word	0x08005fe5
 8005fe0:	08006051 	.word	0x08006051
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f240 439d 	movw	r3, #1181	; 0x49d
 8005ff6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ff8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	da10      	bge.n	8006022 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006000:	78fb      	ldrb	r3, [r7, #3]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	4413      	add	r3, r2
 8006008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	78fa      	ldrb	r2, [r7, #3]
 8006010:	0151      	lsls	r1, r2, #5
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	440a      	add	r2, r1
 8006016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800601a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800601e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006020:	e057      	b.n	80060d2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602a:	2b00      	cmp	r3, #0
 800602c:	d051      	beq.n	80060d2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800602e:	78fb      	ldrb	r3, [r7, #3]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	4413      	add	r3, r2
 8006036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	78fa      	ldrb	r2, [r7, #3]
 800603e:	0151      	lsls	r1, r2, #5
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	440a      	add	r2, r1
 8006044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006048:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800604c:	60d3      	str	r3, [r2, #12]
      break;
 800604e:	e040      	b.n	80060d2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	4413      	add	r3, r2
 8006058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605c:	461a      	mov	r2, r3
 800605e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006062:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006064:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006068:	2b00      	cmp	r3, #0
 800606a:	da34      	bge.n	80060d6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	4413      	add	r3, r2
 8006074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	78fa      	ldrb	r2, [r7, #3]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	440a      	add	r2, r1
 8006082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800608a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800608c:	e023      	b.n	80060d6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800608e:	78fb      	ldrb	r3, [r7, #3]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	4413      	add	r3, r2
 8006096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609a:	461a      	mov	r2, r3
 800609c:	f240 2325 	movw	r3, #549	; 0x225
 80060a0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80060a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	da17      	bge.n	80060da <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80060aa:	78fb      	ldrb	r3, [r7, #3]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	78fa      	ldrb	r2, [r7, #3]
 80060ba:	0151      	lsls	r1, r2, #5
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	440a      	add	r2, r1
 80060c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060c4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80060c8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80060ca:	e006      	b.n	80060da <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	77fb      	strb	r3, [r7, #31]
      break;
 80060d0:	e004      	b.n	80060dc <USB_HC_Init+0x14c>
      break;
 80060d2:	bf00      	nop
 80060d4:	e002      	b.n	80060dc <USB_HC_Init+0x14c>
      break;
 80060d6:	bf00      	nop
 80060d8:	e000      	b.n	80060dc <USB_HC_Init+0x14c>
      break;
 80060da:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80060dc:	78fb      	ldrb	r3, [r7, #3]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	78fa      	ldrb	r2, [r7, #3]
 80060ec:	0151      	lsls	r1, r2, #5
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	440a      	add	r2, r1
 80060f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f6:	f043 0302 	orr.w	r3, r3, #2
 80060fa:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006102:	699a      	ldr	r2, [r3, #24]
 8006104:	78fb      	ldrb	r3, [r7, #3]
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	2101      	movs	r1, #1
 800610c:	fa01 f303 	lsl.w	r3, r1, r3
 8006110:	6939      	ldr	r1, [r7, #16]
 8006112:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006116:	4313      	orrs	r3, r2
 8006118:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006126:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800612a:	2b00      	cmp	r3, #0
 800612c:	da03      	bge.n	8006136 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800612e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006132:	61bb      	str	r3, [r7, #24]
 8006134:	e001      	b.n	800613a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006136:	2300      	movs	r3, #0
 8006138:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7ff feff 	bl	8005f3e <USB_GetHostSpeed>
 8006140:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006142:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006146:	2b02      	cmp	r3, #2
 8006148:	d106      	bne.n	8006158 <USB_HC_Init+0x1c8>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b02      	cmp	r3, #2
 800614e:	d003      	beq.n	8006158 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006154:	617b      	str	r3, [r7, #20]
 8006156:	e001      	b.n	800615c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800615c:	787b      	ldrb	r3, [r7, #1]
 800615e:	059b      	lsls	r3, r3, #22
 8006160:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006164:	78bb      	ldrb	r3, [r7, #2]
 8006166:	02db      	lsls	r3, r3, #11
 8006168:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800616c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800616e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006172:	049b      	lsls	r3, r3, #18
 8006174:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006178:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800617a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800617c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006180:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006186:	78fb      	ldrb	r3, [r7, #3]
 8006188:	0159      	lsls	r1, r3, #5
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	440b      	add	r3, r1
 800618e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006192:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006198:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800619a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d003      	beq.n	80061aa <USB_HC_Init+0x21a>
 80061a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d10f      	bne.n	80061ca <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80061aa:	78fb      	ldrb	r3, [r7, #3]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	78fa      	ldrb	r2, [r7, #3]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061c8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80061ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3720      	adds	r7, #32
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08c      	sub	sp, #48	; 0x30
 80061d8:	af02      	add	r7, sp, #8
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	4613      	mov	r3, r2
 80061e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	785b      	ldrb	r3, [r3, #1]
 80061ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80061ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061f0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d02d      	beq.n	800625a <USB_HC_StartXfer+0x86>
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	791b      	ldrb	r3, [r3, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d129      	bne.n	800625a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006206:	79fb      	ldrb	r3, [r7, #7]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d117      	bne.n	800623c <USB_HC_StartXfer+0x68>
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	79db      	ldrb	r3, [r3, #7]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <USB_HC_StartXfer+0x48>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	79db      	ldrb	r3, [r3, #7]
 8006218:	2b02      	cmp	r3, #2
 800621a:	d10f      	bne.n	800623c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	4413      	add	r3, r2
 8006224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	0151      	lsls	r1, r2, #5
 800622e:	6a3a      	ldr	r2, [r7, #32]
 8006230:	440a      	add	r2, r1
 8006232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10b      	bne.n	800625a <USB_HC_StartXfer+0x86>
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	795b      	ldrb	r3, [r3, #5]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d107      	bne.n	800625a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	785b      	ldrb	r3, [r3, #1]
 800624e:	4619      	mov	r1, r3
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 fa0f 	bl	8006674 <USB_DoPing>
      return HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	e0f8      	b.n	800644c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d018      	beq.n	8006294 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	8912      	ldrh	r2, [r2, #8]
 800626a:	4413      	add	r3, r2
 800626c:	3b01      	subs	r3, #1
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	8912      	ldrh	r2, [r2, #8]
 8006272:	fbb3 f3f2 	udiv	r3, r3, r2
 8006276:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006278:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800627a:	8b7b      	ldrh	r3, [r7, #26]
 800627c:	429a      	cmp	r2, r3
 800627e:	d90b      	bls.n	8006298 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006280:	8b7b      	ldrh	r3, [r7, #26]
 8006282:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006284:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	8912      	ldrh	r2, [r2, #8]
 800628a:	fb03 f202 	mul.w	r2, r3, r2
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	611a      	str	r2, [r3, #16]
 8006292:	e001      	b.n	8006298 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006294:	2301      	movs	r3, #1
 8006296:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	78db      	ldrb	r3, [r3, #3]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d007      	beq.n	80062b0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	8912      	ldrh	r2, [r2, #8]
 80062a6:	fb03 f202 	mul.w	r2, r3, r2
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	611a      	str	r2, [r3, #16]
 80062ae:	e003      	b.n	80062b8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	695a      	ldr	r2, [r3, #20]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062c2:	04d9      	lsls	r1, r3, #19
 80062c4:	4b63      	ldr	r3, [pc, #396]	; (8006454 <USB_HC_StartXfer+0x280>)
 80062c6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062c8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	7a9b      	ldrb	r3, [r3, #10]
 80062ce:	075b      	lsls	r3, r3, #29
 80062d0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062d4:	69f9      	ldr	r1, [r7, #28]
 80062d6:	0148      	lsls	r0, r1, #5
 80062d8:	6a39      	ldr	r1, [r7, #32]
 80062da:	4401      	add	r1, r0
 80062dc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062e0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062e2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80062e4:	79fb      	ldrb	r3, [r7, #7]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d009      	beq.n	80062fe <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	68d9      	ldr	r1, [r3, #12]
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fa:	460a      	mov	r2, r1
 80062fc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	bf0c      	ite	eq
 800630e:	2301      	moveq	r3, #1
 8006310:	2300      	movne	r3, #0
 8006312:	b2db      	uxtb	r3, r3
 8006314:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	4413      	add	r3, r2
 800631e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	0151      	lsls	r1, r2, #5
 8006328:	6a3a      	ldr	r2, [r7, #32]
 800632a:	440a      	add	r2, r1
 800632c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006330:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006334:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	4413      	add	r3, r2
 800633e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	7e7b      	ldrb	r3, [r7, #25]
 8006346:	075b      	lsls	r3, r3, #29
 8006348:	69f9      	ldr	r1, [r7, #28]
 800634a:	0148      	lsls	r0, r1, #5
 800634c:	6a39      	ldr	r1, [r7, #32]
 800634e:	4401      	add	r1, r0
 8006350:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006354:	4313      	orrs	r3, r2
 8006356:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	4413      	add	r3, r2
 8006360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800636e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	78db      	ldrb	r3, [r3, #3]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d004      	beq.n	8006382 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800637e:	613b      	str	r3, [r7, #16]
 8006380:	e003      	b.n	800638a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006388:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006390:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	4413      	add	r3, r2
 800639a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800639e:	461a      	mov	r2, r3
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80063a4:	79fb      	ldrb	r3, [r7, #7]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e04e      	b.n	800644c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	78db      	ldrb	r3, [r3, #3]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d149      	bne.n	800644a <USB_HC_StartXfer+0x276>
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d045      	beq.n	800644a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	79db      	ldrb	r3, [r3, #7]
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d830      	bhi.n	8006428 <USB_HC_StartXfer+0x254>
 80063c6:	a201      	add	r2, pc, #4	; (adr r2, 80063cc <USB_HC_StartXfer+0x1f8>)
 80063c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063cc:	080063dd 	.word	0x080063dd
 80063d0:	08006401 	.word	0x08006401
 80063d4:	080063dd 	.word	0x080063dd
 80063d8:	08006401 	.word	0x08006401
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	3303      	adds	r3, #3
 80063e2:	089b      	lsrs	r3, r3, #2
 80063e4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80063e6:	8afa      	ldrh	r2, [r7, #22]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d91c      	bls.n	800642c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	f043 0220 	orr.w	r2, r3, #32
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	619a      	str	r2, [r3, #24]
        }
        break;
 80063fe:	e015      	b.n	800642c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	3303      	adds	r3, #3
 8006406:	089b      	lsrs	r3, r3, #2
 8006408:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800640a:	8afa      	ldrh	r2, [r7, #22]
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	b29b      	uxth	r3, r3
 8006416:	429a      	cmp	r2, r3
 8006418:	d90a      	bls.n	8006430 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	619a      	str	r2, [r3, #24]
        }
        break;
 8006426:	e003      	b.n	8006430 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006428:	bf00      	nop
 800642a:	e002      	b.n	8006432 <USB_HC_StartXfer+0x25e>
        break;
 800642c:	bf00      	nop
 800642e:	e000      	b.n	8006432 <USB_HC_StartXfer+0x25e>
        break;
 8006430:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	68d9      	ldr	r1, [r3, #12]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	785a      	ldrb	r2, [r3, #1]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	b29b      	uxth	r3, r3
 8006440:	2000      	movs	r0, #0
 8006442:	9000      	str	r0, [sp, #0]
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f7ff fb31 	bl	8005aac <USB_WritePacket>
  }

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3728      	adds	r7, #40	; 0x28
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	1ff80000 	.word	0x1ff80000

08006458 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	b29b      	uxth	r3, r3
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800647a:	b480      	push	{r7}
 800647c:	b089      	sub	sp, #36	; 0x24
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	460b      	mov	r3, r1
 8006484:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800648a:	78fb      	ldrb	r3, [r7, #3]
 800648c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	015a      	lsls	r2, r3, #5
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	4413      	add	r3, r2
 800649a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	0c9b      	lsrs	r3, r3, #18
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	0fdb      	lsrs	r3, r3, #31
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	2b20      	cmp	r3, #32
 80064c8:	d104      	bne.n	80064d4 <USB_HC_Halt+0x5a>
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	e0c8      	b.n	8006666 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <USB_HC_Halt+0x66>
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d163      	bne.n	80065a8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	0151      	lsls	r1, r2, #5
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	440a      	add	r2, r1
 80064f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064fe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f003 0320 	and.w	r3, r3, #32
 8006508:	2b00      	cmp	r3, #0
 800650a:	f040 80ab 	bne.w	8006664 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006512:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d133      	bne.n	8006582 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4413      	add	r3, r2
 8006522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	0151      	lsls	r1, r2, #5
 800652c:	69fa      	ldr	r2, [r7, #28]
 800652e:	440a      	add	r2, r1
 8006530:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006534:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006538:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	4413      	add	r3, r2
 8006542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	0151      	lsls	r1, r2, #5
 800654c:	69fa      	ldr	r2, [r7, #28]
 800654e:	440a      	add	r2, r1
 8006550:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006554:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006558:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3301      	adds	r3, #1
 800655e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006566:	d81d      	bhi.n	80065a4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	4413      	add	r3, r2
 8006570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800657a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800657e:	d0ec      	beq.n	800655a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006580:	e070      	b.n	8006664 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	4413      	add	r3, r2
 800658a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	0151      	lsls	r1, r2, #5
 8006594:	69fa      	ldr	r2, [r7, #28]
 8006596:	440a      	add	r2, r1
 8006598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800659c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065a0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065a2:	e05f      	b.n	8006664 <USB_HC_Halt+0x1ea>
            break;
 80065a4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065a6:	e05d      	b.n	8006664 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	0151      	lsls	r1, r2, #5
 80065ba:	69fa      	ldr	r2, [r7, #28]
 80065bc:	440a      	add	r2, r1
 80065be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065c6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d133      	bne.n	8006640 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	0151      	lsls	r1, r2, #5
 80065ea:	69fa      	ldr	r2, [r7, #28]
 80065ec:	440a      	add	r2, r1
 80065ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	0151      	lsls	r1, r2, #5
 800660a:	69fa      	ldr	r2, [r7, #28]
 800660c:	440a      	add	r2, r1
 800660e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006616:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3301      	adds	r3, #1
 800661c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006624:	d81d      	bhi.n	8006662 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	4413      	add	r3, r2
 800662e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800663c:	d0ec      	beq.n	8006618 <USB_HC_Halt+0x19e>
 800663e:	e011      	b.n	8006664 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	4413      	add	r3, r2
 8006648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	440a      	add	r2, r1
 8006656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800665a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	e000      	b.n	8006664 <USB_HC_Halt+0x1ea>
          break;
 8006662:	bf00      	nop
    }
  }

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3724      	adds	r7, #36	; 0x24
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
	...

08006674 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006684:	78fb      	ldrb	r3, [r7, #3]
 8006686:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006688:	2301      	movs	r3, #1
 800668a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	04da      	lsls	r2, r3, #19
 8006690:	4b15      	ldr	r3, [pc, #84]	; (80066e8 <USB_DoPing+0x74>)
 8006692:	4013      	ands	r3, r2
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	0151      	lsls	r1, r2, #5
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	440a      	add	r2, r1
 800669c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066a4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066bc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066c4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d2:	461a      	mov	r2, r3
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	1ff80000 	.word	0x1ff80000

080066ec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7ff f912 	bl	800592a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006706:	2110      	movs	r1, #16
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff f96b 	bl	80059e4 <USB_FlushTxFifo>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff f997 	bl	8005a4c <USB_FlushRxFifo>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006728:	2300      	movs	r3, #0
 800672a:	61bb      	str	r3, [r7, #24]
 800672c:	e01f      	b.n	800676e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	4413      	add	r3, r2
 8006736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006744:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800674c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006754:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	4413      	add	r3, r2
 800675e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006762:	461a      	mov	r2, r3
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	3301      	adds	r3, #1
 800676c:	61bb      	str	r3, [r7, #24]
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	2b0f      	cmp	r3, #15
 8006772:	d9dc      	bls.n	800672e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006774:	2300      	movs	r3, #0
 8006776:	61bb      	str	r3, [r7, #24]
 8006778:	e034      	b.n	80067e4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	4413      	add	r3, r2
 8006782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006790:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006798:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067a0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ae:	461a      	mov	r2, r3
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	3301      	adds	r3, #1
 80067b8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067c0:	d80c      	bhi.n	80067dc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067d8:	d0ec      	beq.n	80067b4 <USB_StopHost+0xc8>
 80067da:	e000      	b.n	80067de <USB_StopHost+0xf2>
        break;
 80067dc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	3301      	adds	r3, #1
 80067e2:	61bb      	str	r3, [r7, #24]
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	2b0f      	cmp	r3, #15
 80067e8:	d9c7      	bls.n	800677a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067f0:	461a      	mov	r2, r3
 80067f2:	f04f 33ff 	mov.w	r3, #4294967295
 80067f6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f04f 32ff 	mov.w	r2, #4294967295
 80067fe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7ff f881 	bl	8005908 <USB_EnableGlobalInt>

  return ret;
 8006806:	7ffb      	ldrb	r3, [r7, #31]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3720      	adds	r7, #32
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006810:	b590      	push	{r4, r7, lr}
 8006812:	b089      	sub	sp, #36	; 0x24
 8006814:	af04      	add	r7, sp, #16
 8006816:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006818:	2301      	movs	r3, #1
 800681a:	2202      	movs	r2, #2
 800681c:	2102      	movs	r1, #2
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fc66 	bl	80070f0 <USBH_FindInterface>
 8006824:	4603      	mov	r3, r0
 8006826:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006828:	7bfb      	ldrb	r3, [r7, #15]
 800682a:	2bff      	cmp	r3, #255	; 0xff
 800682c:	d002      	beq.n	8006834 <USBH_CDC_InterfaceInit+0x24>
 800682e:	7bfb      	ldrb	r3, [r7, #15]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d901      	bls.n	8006838 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006834:	2302      	movs	r3, #2
 8006836:	e13d      	b.n	8006ab4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fc3b 	bl	80070b8 <USBH_SelectInterface>
 8006842:	4603      	mov	r3, r0
 8006844:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006846:	7bbb      	ldrb	r3, [r7, #14]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800684c:	2302      	movs	r3, #2
 800684e:	e131      	b.n	8006ab4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006856:	2050      	movs	r0, #80	; 0x50
 8006858:	f002 fafa 	bl	8008e50 <malloc>
 800685c:	4603      	mov	r3, r0
 800685e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006866:	69db      	ldr	r3, [r3, #28]
 8006868:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006870:	2302      	movs	r3, #2
 8006872:	e11f      	b.n	8006ab4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006874:	2250      	movs	r2, #80	; 0x50
 8006876:	2100      	movs	r1, #0
 8006878:	68b8      	ldr	r0, [r7, #8]
 800687a:	f002 faf9 	bl	8008e70 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800687e:	7bfb      	ldrb	r3, [r7, #15]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	211a      	movs	r1, #26
 8006884:	fb01 f303 	mul.w	r3, r1, r3
 8006888:	4413      	add	r3, r2
 800688a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	b25b      	sxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	da15      	bge.n	80068c2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	211a      	movs	r1, #26
 800689c:	fb01 f303 	mul.w	r3, r1, r3
 80068a0:	4413      	add	r3, r2
 80068a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068a6:	781a      	ldrb	r2, [r3, #0]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	211a      	movs	r1, #26
 80068b2:	fb01 f303 	mul.w	r3, r1, r3
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068bc:	881a      	ldrh	r2, [r3, #0]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	785b      	ldrb	r3, [r3, #1]
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 ff2c 	bl	8008726 <USBH_AllocPipe>
 80068ce:	4603      	mov	r3, r0
 80068d0:	461a      	mov	r2, r3
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	7819      	ldrb	r1, [r3, #0]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	7858      	ldrb	r0, [r3, #1]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	8952      	ldrh	r2, [r2, #10]
 80068ee:	9202      	str	r2, [sp, #8]
 80068f0:	2203      	movs	r2, #3
 80068f2:	9201      	str	r2, [sp, #4]
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	4623      	mov	r3, r4
 80068f8:	4602      	mov	r2, r0
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f001 fee4 	bl	80086c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2200      	movs	r2, #0
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f002 f9f3 	bl	8008cf4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800690e:	2300      	movs	r3, #0
 8006910:	2200      	movs	r2, #0
 8006912:	210a      	movs	r1, #10
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fbeb 	bl	80070f0 <USBH_FindInterface>
 800691a:	4603      	mov	r3, r0
 800691c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800691e:	7bfb      	ldrb	r3, [r7, #15]
 8006920:	2bff      	cmp	r3, #255	; 0xff
 8006922:	d002      	beq.n	800692a <USBH_CDC_InterfaceInit+0x11a>
 8006924:	7bfb      	ldrb	r3, [r7, #15]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d901      	bls.n	800692e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800692a:	2302      	movs	r3, #2
 800692c:	e0c2      	b.n	8006ab4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800692e:	7bfb      	ldrb	r3, [r7, #15]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	211a      	movs	r1, #26
 8006934:	fb01 f303 	mul.w	r3, r1, r3
 8006938:	4413      	add	r3, r2
 800693a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	b25b      	sxtb	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	da16      	bge.n	8006974 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006946:	7bfb      	ldrb	r3, [r7, #15]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	211a      	movs	r1, #26
 800694c:	fb01 f303 	mul.w	r3, r1, r3
 8006950:	4413      	add	r3, r2
 8006952:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006956:	781a      	ldrb	r2, [r3, #0]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	211a      	movs	r1, #26
 8006962:	fb01 f303 	mul.w	r3, r1, r3
 8006966:	4413      	add	r3, r2
 8006968:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800696c:	881a      	ldrh	r2, [r3, #0]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	835a      	strh	r2, [r3, #26]
 8006972:	e015      	b.n	80069a0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	211a      	movs	r1, #26
 800697a:	fb01 f303 	mul.w	r3, r1, r3
 800697e:	4413      	add	r3, r2
 8006980:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006984:	781a      	ldrb	r2, [r3, #0]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800698a:	7bfb      	ldrb	r3, [r7, #15]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	211a      	movs	r1, #26
 8006990:	fb01 f303 	mul.w	r3, r1, r3
 8006994:	4413      	add	r3, r2
 8006996:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800699a:	881a      	ldrh	r2, [r3, #0]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	211a      	movs	r1, #26
 80069a6:	fb01 f303 	mul.w	r3, r1, r3
 80069aa:	4413      	add	r3, r2
 80069ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	b25b      	sxtb	r3, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	da16      	bge.n	80069e6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	211a      	movs	r1, #26
 80069be:	fb01 f303 	mul.w	r3, r1, r3
 80069c2:	4413      	add	r3, r2
 80069c4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069c8:	781a      	ldrb	r2, [r3, #0]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	211a      	movs	r1, #26
 80069d4:	fb01 f303 	mul.w	r3, r1, r3
 80069d8:	4413      	add	r3, r2
 80069da:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80069de:	881a      	ldrh	r2, [r3, #0]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	835a      	strh	r2, [r3, #26]
 80069e4:	e015      	b.n	8006a12 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	211a      	movs	r1, #26
 80069ec:	fb01 f303 	mul.w	r3, r1, r3
 80069f0:	4413      	add	r3, r2
 80069f2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069f6:	781a      	ldrb	r2, [r3, #0]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	211a      	movs	r1, #26
 8006a02:	fb01 f303 	mul.w	r3, r1, r3
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a0c:	881a      	ldrh	r2, [r3, #0]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	7b9b      	ldrb	r3, [r3, #14]
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 fe84 	bl	8008726 <USBH_AllocPipe>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	461a      	mov	r2, r3
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	7bdb      	ldrb	r3, [r3, #15]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 fe7a 	bl	8008726 <USBH_AllocPipe>
 8006a32:	4603      	mov	r3, r0
 8006a34:	461a      	mov	r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	7b59      	ldrb	r1, [r3, #13]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	7b98      	ldrb	r0, [r3, #14]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	8b12      	ldrh	r2, [r2, #24]
 8006a52:	9202      	str	r2, [sp, #8]
 8006a54:	2202      	movs	r2, #2
 8006a56:	9201      	str	r2, [sp, #4]
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	4623      	mov	r3, r4
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f001 fe32 	bl	80086c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	7b19      	ldrb	r1, [r3, #12]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	7bd8      	ldrb	r0, [r3, #15]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	8b52      	ldrh	r2, [r2, #26]
 8006a7c:	9202      	str	r2, [sp, #8]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	9201      	str	r2, [sp, #4]
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	4623      	mov	r3, r4
 8006a86:	4602      	mov	r2, r0
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f001 fe1d 	bl	80086c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	7b5b      	ldrb	r3, [r3, #13]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f002 f928 	bl	8008cf4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	7b1b      	ldrb	r3, [r3, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f002 f921 	bl	8008cf4 <USBH_LL_SetToggle>

  return USBH_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd90      	pop	{r4, r7, pc}

08006abc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00e      	beq.n	8006af4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 fe12 	bl	8008706 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f001 fe3d 	bl	8008768 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	7b1b      	ldrb	r3, [r3, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00e      	beq.n	8006b1a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	7b1b      	ldrb	r3, [r3, #12]
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f001 fdff 	bl	8008706 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	7b1b      	ldrb	r3, [r3, #12]
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f001 fe2a 	bl	8008768 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	7b5b      	ldrb	r3, [r3, #13]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00e      	beq.n	8006b40 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	7b5b      	ldrb	r3, [r3, #13]
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f001 fdec 	bl	8008706 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	7b5b      	ldrb	r3, [r3, #13]
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 fe17 	bl	8008768 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00b      	beq.n	8006b64 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f002 f983 	bl	8008e60 <free>
    phost->pActiveClass->pData = 0U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b60:	2200      	movs	r2, #0
 8006b62:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b084      	sub	sp, #16
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	3340      	adds	r3, #64	; 0x40
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f8b1 	bl	8006cee <GetLineCoding>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006b90:	7afb      	ldrb	r3, [r7, #11]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d105      	bne.n	8006ba2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b9c:	2102      	movs	r1, #2
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006ba2:	7afb      	ldrb	r3, [r7, #11]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006bcc:	2b04      	cmp	r3, #4
 8006bce:	d877      	bhi.n	8006cc0 <USBH_CDC_Process+0x114>
 8006bd0:	a201      	add	r2, pc, #4	; (adr r2, 8006bd8 <USBH_CDC_Process+0x2c>)
 8006bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd6:	bf00      	nop
 8006bd8:	08006bed 	.word	0x08006bed
 8006bdc:	08006bf3 	.word	0x08006bf3
 8006be0:	08006c23 	.word	0x08006c23
 8006be4:	08006c97 	.word	0x08006c97
 8006be8:	08006ca5 	.word	0x08006ca5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf0:	e06d      	b.n	8006cce <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f897 	bl	8006d2c <SetLineCoding>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c02:	7bbb      	ldrb	r3, [r7, #14]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d104      	bne.n	8006c12 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c10:	e058      	b.n	8006cc4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d055      	beq.n	8006cc4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2204      	movs	r2, #4
 8006c1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c20:	e050      	b.n	8006cc4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	3340      	adds	r3, #64	; 0x40
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f860 	bl	8006cee <GetLineCoding>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c32:	7bbb      	ldrb	r3, [r7, #14]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d126      	bne.n	8006c86 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c4a:	791b      	ldrb	r3, [r3, #4]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d13b      	bne.n	8006cc8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d133      	bne.n	8006cc8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d12b      	bne.n	8006cc8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c78:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d124      	bne.n	8006cc8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f958 	bl	8006f34 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c84:	e020      	b.n	8006cc8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006c86:	7bbb      	ldrb	r3, [r7, #14]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d01d      	beq.n	8006cc8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2204      	movs	r2, #4
 8006c90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c94:	e018      	b.n	8006cc8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f867 	bl	8006d6a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f8da 	bl	8006e56 <CDC_ProcessReception>
      break;
 8006ca2:	e014      	b.n	8006cce <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 ffef 	bl	8007c8a <USBH_ClrFeature>
 8006cac:	4603      	mov	r3, r0
 8006cae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006cb0:	7bbb      	ldrb	r3, [r7, #14]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10a      	bne.n	8006ccc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006cbe:	e005      	b.n	8006ccc <USBH_CDC_Process+0x120>

    default:
      break;
 8006cc0:	bf00      	nop
 8006cc2:	e004      	b.n	8006cce <USBH_CDC_Process+0x122>
      break;
 8006cc4:	bf00      	nop
 8006cc6:	e002      	b.n	8006cce <USBH_CDC_Process+0x122>
      break;
 8006cc8:	bf00      	nop
 8006cca:	e000      	b.n	8006cce <USBH_CDC_Process+0x122>
      break;
 8006ccc:	bf00      	nop

  }

  return status;
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b082      	sub	sp, #8
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	22a1      	movs	r2, #161	; 0xa1
 8006cfc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2221      	movs	r2, #33	; 0x21
 8006d02:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2207      	movs	r2, #7
 8006d14:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2207      	movs	r2, #7
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f001 fa81 	bl	8008224 <USBH_CtlReq>
 8006d22:	4603      	mov	r3, r0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2221      	movs	r2, #33	; 0x21
 8006d3a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2207      	movs	r2, #7
 8006d52:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2207      	movs	r2, #7
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f001 fa62 	bl	8008224 <USBH_CtlReq>
 8006d60:	4603      	mov	r3, r0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b086      	sub	sp, #24
 8006d6e:	af02      	add	r7, sp, #8
 8006d70:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d002      	beq.n	8006d90 <CDC_ProcessTransmission+0x26>
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d023      	beq.n	8006dd6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006d8e:	e05e      	b.n	8006e4e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	8b12      	ldrh	r2, [r2, #24]
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d90b      	bls.n	8006db4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	69d9      	ldr	r1, [r3, #28]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	8b1a      	ldrh	r2, [r3, #24]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	7b5b      	ldrb	r3, [r3, #13]
 8006da8:	2001      	movs	r0, #1
 8006daa:	9000      	str	r0, [sp, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 fc48 	bl	8008642 <USBH_BulkSendData>
 8006db2:	e00b      	b.n	8006dcc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	7b5b      	ldrb	r3, [r3, #13]
 8006dc2:	2001      	movs	r0, #1
 8006dc4:	9000      	str	r0, [sp, #0]
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f001 fc3b 	bl	8008642 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006dd4:	e03b      	b.n	8006e4e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	7b5b      	ldrb	r3, [r3, #13]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 ff5f 	bl	8008ca0 <USBH_LL_GetURBState>
 8006de2:	4603      	mov	r3, r0
 8006de4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006de6:	7afb      	ldrb	r3, [r7, #11]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d128      	bne.n	8006e3e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	8b12      	ldrh	r2, [r2, #24]
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d90e      	bls.n	8006e16 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	8b12      	ldrh	r2, [r2, #24]
 8006e00:	1a9a      	subs	r2, r3, r2
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	8b12      	ldrh	r2, [r2, #24]
 8006e0e:	441a      	add	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	61da      	str	r2, [r3, #28]
 8006e14:	e002      	b.n	8006e1c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d004      	beq.n	8006e2e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e2c:	e00e      	b.n	8006e4c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f868 	bl	8006f0c <USBH_CDC_TransmitCallback>
      break;
 8006e3c:	e006      	b.n	8006e4c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006e3e:	7afb      	ldrb	r3, [r7, #11]
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d103      	bne.n	8006e4c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e4c:	bf00      	nop
  }
}
 8006e4e:	bf00      	nop
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b086      	sub	sp, #24
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d002      	beq.n	8006e7c <CDC_ProcessReception+0x26>
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	d00e      	beq.n	8006e98 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006e7a:	e043      	b.n	8006f04 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	6a19      	ldr	r1, [r3, #32]
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	8b5a      	ldrh	r2, [r3, #26]
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	7b1b      	ldrb	r3, [r3, #12]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f001 fbff 	bl	800868c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2204      	movs	r2, #4
 8006e92:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e96:	e035      	b.n	8006f04 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	7b1b      	ldrb	r3, [r3, #12]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f001 fefe 	bl	8008ca0 <USBH_LL_GetURBState>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006ea8:	7cfb      	ldrb	r3, [r7, #19]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d129      	bne.n	8006f02 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	7b1b      	ldrb	r3, [r3, #12]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f001 fe61 	bl	8008b7c <USBH_LL_GetLastXferSize>
 8006eba:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d016      	beq.n	8006ef4 <CDC_ProcessReception+0x9e>
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	8b5b      	ldrh	r3, [r3, #26]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d910      	bls.n	8006ef4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	1ad2      	subs	r2, r2, r3
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	6a1a      	ldr	r2, [r3, #32]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	441a      	add	r2, r3
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2203      	movs	r2, #3
 8006eee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006ef2:	e006      	b.n	8006f02 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f80f 	bl	8006f20 <USBH_CDC_ReceiveCallback>
      break;
 8006f02:	bf00      	nop
  }
}
 8006f04:	bf00      	nop
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	4613      	mov	r3, r2
 8006f54:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	e029      	b.n	8006fb4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	79fa      	ldrb	r2, [r7, #7]
 8006f64:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f000 f81f 	bl	8006fbc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f001 fd31 	bl	8008a14 <USBH_LL_Init>

  return USBH_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	e009      	b.n	8006fe2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	33e0      	adds	r3, #224	; 0xe0
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	2200      	movs	r2, #0
 8006fda:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2b0f      	cmp	r3, #15
 8006fe6:	d9f2      	bls.n	8006fce <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006fe8:	2300      	movs	r3, #0
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	e009      	b.n	8007002 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3301      	adds	r3, #1
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007008:	d3f1      	bcc.n	8006fee <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2240      	movs	r2, #64	; 0x40
 800702e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d016      	beq.n	80070a6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10e      	bne.n	80070a0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007088:	1c59      	adds	r1, r3, #1
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	33de      	adds	r3, #222	; 0xde
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	73fb      	strb	r3, [r7, #15]
 800709e:	e004      	b.n	80070aa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80070a0:	2302      	movs	r3, #2
 80070a2:	73fb      	strb	r3, [r7, #15]
 80070a4:	e001      	b.n	80070aa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80070a6:	2302      	movs	r3, #2
 80070a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80070ce:	78fa      	ldrb	r2, [r7, #3]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d204      	bcs.n	80070de <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	78fa      	ldrb	r2, [r7, #3]
 80070d8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80070dc:	e001      	b.n	80070e2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80070de:	2302      	movs	r3, #2
 80070e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b087      	sub	sp, #28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	4608      	mov	r0, r1
 80070fa:	4611      	mov	r1, r2
 80070fc:	461a      	mov	r2, r3
 80070fe:	4603      	mov	r3, r0
 8007100:	70fb      	strb	r3, [r7, #3]
 8007102:	460b      	mov	r3, r1
 8007104:	70bb      	strb	r3, [r7, #2]
 8007106:	4613      	mov	r3, r2
 8007108:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800710e:	2300      	movs	r3, #0
 8007110:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007118:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800711a:	e025      	b.n	8007168 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800711c:	7dfb      	ldrb	r3, [r7, #23]
 800711e:	221a      	movs	r2, #26
 8007120:	fb02 f303 	mul.w	r3, r2, r3
 8007124:	3308      	adds	r3, #8
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	4413      	add	r3, r2
 800712a:	3302      	adds	r3, #2
 800712c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	795b      	ldrb	r3, [r3, #5]
 8007132:	78fa      	ldrb	r2, [r7, #3]
 8007134:	429a      	cmp	r2, r3
 8007136:	d002      	beq.n	800713e <USBH_FindInterface+0x4e>
 8007138:	78fb      	ldrb	r3, [r7, #3]
 800713a:	2bff      	cmp	r3, #255	; 0xff
 800713c:	d111      	bne.n	8007162 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007142:	78ba      	ldrb	r2, [r7, #2]
 8007144:	429a      	cmp	r2, r3
 8007146:	d002      	beq.n	800714e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007148:	78bb      	ldrb	r3, [r7, #2]
 800714a:	2bff      	cmp	r3, #255	; 0xff
 800714c:	d109      	bne.n	8007162 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007152:	787a      	ldrb	r2, [r7, #1]
 8007154:	429a      	cmp	r2, r3
 8007156:	d002      	beq.n	800715e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007158:	787b      	ldrb	r3, [r7, #1]
 800715a:	2bff      	cmp	r3, #255	; 0xff
 800715c:	d101      	bne.n	8007162 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800715e:	7dfb      	ldrb	r3, [r7, #23]
 8007160:	e006      	b.n	8007170 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007162:	7dfb      	ldrb	r3, [r7, #23]
 8007164:	3301      	adds	r3, #1
 8007166:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007168:	7dfb      	ldrb	r3, [r7, #23]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d9d6      	bls.n	800711c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800716e:	23ff      	movs	r3, #255	; 0xff
}
 8007170:	4618      	mov	r0, r3
 8007172:	371c      	adds	r7, #28
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f001 fc81 	bl	8008a8c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800718a:	2101      	movs	r1, #1
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f001 fd9a 	bl	8008cc6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af04      	add	r7, sp, #16
 80071a2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80071a4:	2302      	movs	r3, #2
 80071a6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d102      	bne.n	80071be <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2203      	movs	r2, #3
 80071bc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b0b      	cmp	r3, #11
 80071c6:	f200 81be 	bhi.w	8007546 <USBH_Process+0x3aa>
 80071ca:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <USBH_Process+0x34>)
 80071cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d0:	08007201 	.word	0x08007201
 80071d4:	08007233 	.word	0x08007233
 80071d8:	0800729b 	.word	0x0800729b
 80071dc:	080074e1 	.word	0x080074e1
 80071e0:	08007547 	.word	0x08007547
 80071e4:	0800733f 	.word	0x0800733f
 80071e8:	08007487 	.word	0x08007487
 80071ec:	08007375 	.word	0x08007375
 80071f0:	08007395 	.word	0x08007395
 80071f4:	080073b5 	.word	0x080073b5
 80071f8:	080073f9 	.word	0x080073f9
 80071fc:	080074c9 	.word	0x080074c9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 819e 	beq.w	800754a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007214:	20c8      	movs	r0, #200	; 0xc8
 8007216:	f001 fd9d 	bl	8008d54 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f001 fc93 	bl	8008b46 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007230:	e18b      	b.n	800754a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007238:	2b01      	cmp	r3, #1
 800723a:	d107      	bne.n	800724c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800724a:	e18d      	b.n	8007568 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007256:	d914      	bls.n	8007282 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800725e:	3301      	adds	r3, #1
 8007260:	b2da      	uxtb	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800726e:	2b03      	cmp	r3, #3
 8007270:	d903      	bls.n	800727a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	220d      	movs	r2, #13
 8007276:	701a      	strb	r2, [r3, #0]
      break;
 8007278:	e176      	b.n	8007568 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	701a      	strb	r2, [r3, #0]
      break;
 8007280:	e172      	b.n	8007568 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007288:	f103 020a 	add.w	r2, r3, #10
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007292:	200a      	movs	r0, #10
 8007294:	f001 fd5e 	bl	8008d54 <USBH_Delay>
      break;
 8007298:	e166      	b.n	8007568 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d005      	beq.n	80072b0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072aa:	2104      	movs	r1, #4
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80072b0:	2064      	movs	r0, #100	; 0x64
 80072b2:	f001 fd4f 	bl	8008d54 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f001 fc1e 	bl	8008af8 <USBH_LL_GetSpeed>
 80072bc:	4603      	mov	r3, r0
 80072be:	461a      	mov	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2205      	movs	r2, #5
 80072ca:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80072cc:	2100      	movs	r1, #0
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f001 fa29 	bl	8008726 <USBH_AllocPipe>
 80072d4:	4603      	mov	r3, r0
 80072d6:	461a      	mov	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80072dc:	2180      	movs	r1, #128	; 0x80
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f001 fa21 	bl	8008726 <USBH_AllocPipe>
 80072e4:	4603      	mov	r3, r0
 80072e6:	461a      	mov	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	7919      	ldrb	r1, [r3, #4]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007300:	b292      	uxth	r2, r2
 8007302:	9202      	str	r2, [sp, #8]
 8007304:	2200      	movs	r2, #0
 8007306:	9201      	str	r2, [sp, #4]
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	4603      	mov	r3, r0
 800730c:	2280      	movs	r2, #128	; 0x80
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f001 f9da 	bl	80086c8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	7959      	ldrb	r1, [r3, #5]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007328:	b292      	uxth	r2, r2
 800732a:	9202      	str	r2, [sp, #8]
 800732c:	2200      	movs	r2, #0
 800732e:	9201      	str	r2, [sp, #4]
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	4603      	mov	r3, r0
 8007334:	2200      	movs	r2, #0
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f001 f9c6 	bl	80086c8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800733c:	e114      	b.n	8007568 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f918 	bl	8007574 <USBH_HandleEnum>
 8007344:	4603      	mov	r3, r0
 8007346:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007348:	7bbb      	ldrb	r3, [r7, #14]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	f040 80fe 	bne.w	800754e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007360:	2b01      	cmp	r3, #1
 8007362:	d103      	bne.n	800736c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2208      	movs	r2, #8
 8007368:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800736a:	e0f0      	b.n	800754e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2207      	movs	r2, #7
 8007370:	701a      	strb	r2, [r3, #0]
      break;
 8007372:	e0ec      	b.n	800754e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 80e9 	beq.w	8007552 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007386:	2101      	movs	r1, #1
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2208      	movs	r2, #8
 8007390:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007392:	e0de      	b.n	8007552 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800739a:	b29b      	uxth	r3, r3
 800739c:	4619      	mov	r1, r3
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fc2c 	bl	8007bfc <USBH_SetCfg>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f040 80d5 	bne.w	8007556 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2209      	movs	r2, #9
 80073b0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073b2:	e0d0      	b.n	8007556 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80073ba:	f003 0320 	and.w	r3, r3, #32
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d016      	beq.n	80073f0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80073c2:	2101      	movs	r1, #1
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fc3c 	bl	8007c42 <USBH_SetFeature>
 80073ca:	4603      	mov	r3, r0
 80073cc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d103      	bne.n	80073de <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	220a      	movs	r2, #10
 80073da:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073dc:	e0bd      	b.n	800755a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80073de:	7bbb      	ldrb	r3, [r7, #14]
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	f040 80b9 	bne.w	800755a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	220a      	movs	r2, #10
 80073ec:	701a      	strb	r2, [r3, #0]
      break;
 80073ee:	e0b4      	b.n	800755a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	220a      	movs	r2, #10
 80073f4:	701a      	strb	r2, [r3, #0]
      break;
 80073f6:	e0b0      	b.n	800755a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f000 80ad 	beq.w	800755e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800740c:	2300      	movs	r3, #0
 800740e:	73fb      	strb	r3, [r7, #15]
 8007410:	e016      	b.n	8007440 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007412:	7bfa      	ldrb	r2, [r7, #15]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	32de      	adds	r2, #222	; 0xde
 8007418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741c:	791a      	ldrb	r2, [r3, #4]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007424:	429a      	cmp	r2, r3
 8007426:	d108      	bne.n	800743a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007428:	7bfa      	ldrb	r2, [r7, #15]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	32de      	adds	r2, #222	; 0xde
 800742e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007438:	e005      	b.n	8007446 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	3301      	adds	r3, #1
 800743e:	73fb      	strb	r3, [r7, #15]
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d0e5      	beq.n	8007412 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800744c:	2b00      	cmp	r3, #0
 800744e:	d016      	beq.n	800747e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	4798      	blx	r3
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d109      	bne.n	8007476 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2206      	movs	r2, #6
 8007466:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800746e:	2103      	movs	r1, #3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007474:	e073      	b.n	800755e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	220d      	movs	r2, #13
 800747a:	701a      	strb	r2, [r3, #0]
      break;
 800747c:	e06f      	b.n	800755e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	220d      	movs	r2, #13
 8007482:	701a      	strb	r2, [r3, #0]
      break;
 8007484:	e06b      	b.n	800755e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800748c:	2b00      	cmp	r3, #0
 800748e:	d017      	beq.n	80074c0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	4798      	blx	r3
 800749c:	4603      	mov	r3, r0
 800749e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80074a0:	7bbb      	ldrb	r3, [r7, #14]
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d103      	bne.n	80074b0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	220b      	movs	r2, #11
 80074ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074ae:	e058      	b.n	8007562 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80074b0:	7bbb      	ldrb	r3, [r7, #14]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d154      	bne.n	8007562 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	220d      	movs	r2, #13
 80074bc:	701a      	strb	r2, [r3, #0]
      break;
 80074be:	e050      	b.n	8007562 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	220d      	movs	r2, #13
 80074c4:	701a      	strb	r2, [r3, #0]
      break;
 80074c6:	e04c      	b.n	8007562 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d049      	beq.n	8007566 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	4798      	blx	r3
      }
      break;
 80074de:	e042      	b.n	8007566 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7ff fd67 	bl	8006fbc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d009      	beq.n	800750c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007512:	2b00      	cmp	r3, #0
 8007514:	d005      	beq.n	8007522 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800751c:	2105      	movs	r1, #5
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b01      	cmp	r3, #1
 800752c:	d107      	bne.n	800753e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7ff fe20 	bl	800717c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800753c:	e014      	b.n	8007568 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f001 faa4 	bl	8008a8c <USBH_LL_Start>
      break;
 8007544:	e010      	b.n	8007568 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007546:	bf00      	nop
 8007548:	e00e      	b.n	8007568 <USBH_Process+0x3cc>
      break;
 800754a:	bf00      	nop
 800754c:	e00c      	b.n	8007568 <USBH_Process+0x3cc>
      break;
 800754e:	bf00      	nop
 8007550:	e00a      	b.n	8007568 <USBH_Process+0x3cc>
    break;
 8007552:	bf00      	nop
 8007554:	e008      	b.n	8007568 <USBH_Process+0x3cc>
      break;
 8007556:	bf00      	nop
 8007558:	e006      	b.n	8007568 <USBH_Process+0x3cc>
      break;
 800755a:	bf00      	nop
 800755c:	e004      	b.n	8007568 <USBH_Process+0x3cc>
      break;
 800755e:	bf00      	nop
 8007560:	e002      	b.n	8007568 <USBH_Process+0x3cc>
      break;
 8007562:	bf00      	nop
 8007564:	e000      	b.n	8007568 <USBH_Process+0x3cc>
      break;
 8007566:	bf00      	nop
  }
  return USBH_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop

08007574 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b088      	sub	sp, #32
 8007578:	af04      	add	r7, sp, #16
 800757a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800757c:	2301      	movs	r3, #1
 800757e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007580:	2301      	movs	r3, #1
 8007582:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	785b      	ldrb	r3, [r3, #1]
 8007588:	2b07      	cmp	r3, #7
 800758a:	f200 81c1 	bhi.w	8007910 <USBH_HandleEnum+0x39c>
 800758e:	a201      	add	r2, pc, #4	; (adr r2, 8007594 <USBH_HandleEnum+0x20>)
 8007590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007594:	080075b5 	.word	0x080075b5
 8007598:	08007673 	.word	0x08007673
 800759c:	080076dd 	.word	0x080076dd
 80075a0:	0800776b 	.word	0x0800776b
 80075a4:	080077d5 	.word	0x080077d5
 80075a8:	08007845 	.word	0x08007845
 80075ac:	0800788b 	.word	0x0800788b
 80075b0:	080078d1 	.word	0x080078d1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80075b4:	2108      	movs	r1, #8
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fa50 	bl	8007a5c <USBH_Get_DevDesc>
 80075bc:	4603      	mov	r3, r0
 80075be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075c0:	7bbb      	ldrb	r3, [r7, #14]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d130      	bne.n	8007628 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	7919      	ldrb	r1, [r3, #4]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80075ea:	b292      	uxth	r2, r2
 80075ec:	9202      	str	r2, [sp, #8]
 80075ee:	2200      	movs	r2, #0
 80075f0:	9201      	str	r2, [sp, #4]
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	4603      	mov	r3, r0
 80075f6:	2280      	movs	r2, #128	; 0x80
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f001 f865 	bl	80086c8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	7959      	ldrb	r1, [r3, #5]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007612:	b292      	uxth	r2, r2
 8007614:	9202      	str	r2, [sp, #8]
 8007616:	2200      	movs	r2, #0
 8007618:	9201      	str	r2, [sp, #4]
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	4603      	mov	r3, r0
 800761e:	2200      	movs	r2, #0
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f001 f851 	bl	80086c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007626:	e175      	b.n	8007914 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007628:	7bbb      	ldrb	r3, [r7, #14]
 800762a:	2b03      	cmp	r3, #3
 800762c:	f040 8172 	bne.w	8007914 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007636:	3301      	adds	r3, #1
 8007638:	b2da      	uxtb	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007646:	2b03      	cmp	r3, #3
 8007648:	d903      	bls.n	8007652 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	220d      	movs	r2, #13
 800764e:	701a      	strb	r2, [r3, #0]
      break;
 8007650:	e160      	b.n	8007914 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	795b      	ldrb	r3, [r3, #5]
 8007656:	4619      	mov	r1, r3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f001 f885 	bl	8008768 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	791b      	ldrb	r3, [r3, #4]
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 f87f 	bl	8008768 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	701a      	strb	r2, [r3, #0]
      break;
 8007670:	e150      	b.n	8007914 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007672:	2112      	movs	r1, #18
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f9f1 	bl	8007a5c <USBH_Get_DevDesc>
 800767a:	4603      	mov	r3, r0
 800767c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800767e:	7bbb      	ldrb	r3, [r7, #14]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d103      	bne.n	800768c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2202      	movs	r2, #2
 8007688:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800768a:	e145      	b.n	8007918 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800768c:	7bbb      	ldrb	r3, [r7, #14]
 800768e:	2b03      	cmp	r3, #3
 8007690:	f040 8142 	bne.w	8007918 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800769a:	3301      	adds	r3, #1
 800769c:	b2da      	uxtb	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	d903      	bls.n	80076b6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	220d      	movs	r2, #13
 80076b2:	701a      	strb	r2, [r3, #0]
      break;
 80076b4:	e130      	b.n	8007918 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	795b      	ldrb	r3, [r3, #5]
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f001 f853 	bl	8008768 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	791b      	ldrb	r3, [r3, #4]
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f001 f84d 	bl	8008768 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	701a      	strb	r2, [r3, #0]
      break;
 80076da:	e11d      	b.n	8007918 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80076dc:	2101      	movs	r1, #1
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fa68 	bl	8007bb4 <USBH_SetAddress>
 80076e4:	4603      	mov	r3, r0
 80076e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d132      	bne.n	8007754 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80076ee:	2002      	movs	r0, #2
 80076f0:	f001 fb30 	bl	8008d54 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2203      	movs	r2, #3
 8007700:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	7919      	ldrb	r1, [r3, #4]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007716:	b292      	uxth	r2, r2
 8007718:	9202      	str	r2, [sp, #8]
 800771a:	2200      	movs	r2, #0
 800771c:	9201      	str	r2, [sp, #4]
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	4603      	mov	r3, r0
 8007722:	2280      	movs	r2, #128	; 0x80
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 ffcf 	bl	80086c8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	7959      	ldrb	r1, [r3, #5]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800773e:	b292      	uxth	r2, r2
 8007740:	9202      	str	r2, [sp, #8]
 8007742:	2200      	movs	r2, #0
 8007744:	9201      	str	r2, [sp, #4]
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	4603      	mov	r3, r0
 800774a:	2200      	movs	r2, #0
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 ffbb 	bl	80086c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007752:	e0e3      	b.n	800791c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	2b03      	cmp	r3, #3
 8007758:	f040 80e0 	bne.w	800791c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	220d      	movs	r2, #13
 8007760:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	705a      	strb	r2, [r3, #1]
      break;
 8007768:	e0d8      	b.n	800791c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800776a:	2109      	movs	r1, #9
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f99d 	bl	8007aac <USBH_Get_CfgDesc>
 8007772:	4603      	mov	r3, r0
 8007774:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007776:	7bbb      	ldrb	r3, [r7, #14]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d103      	bne.n	8007784 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2204      	movs	r2, #4
 8007780:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007782:	e0cd      	b.n	8007920 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007784:	7bbb      	ldrb	r3, [r7, #14]
 8007786:	2b03      	cmp	r3, #3
 8007788:	f040 80ca 	bne.w	8007920 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007792:	3301      	adds	r3, #1
 8007794:	b2da      	uxtb	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077a2:	2b03      	cmp	r3, #3
 80077a4:	d903      	bls.n	80077ae <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	220d      	movs	r2, #13
 80077aa:	701a      	strb	r2, [r3, #0]
      break;
 80077ac:	e0b8      	b.n	8007920 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	795b      	ldrb	r3, [r3, #5]
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 ffd7 	bl	8008768 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	791b      	ldrb	r3, [r3, #4]
 80077be:	4619      	mov	r1, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 ffd1 	bl	8008768 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	701a      	strb	r2, [r3, #0]
      break;
 80077d2:	e0a5      	b.n	8007920 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f965 	bl	8007aac <USBH_Get_CfgDesc>
 80077e2:	4603      	mov	r3, r0
 80077e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077e6:	7bbb      	ldrb	r3, [r7, #14]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d103      	bne.n	80077f4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2205      	movs	r2, #5
 80077f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077f2:	e097      	b.n	8007924 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077f4:	7bbb      	ldrb	r3, [r7, #14]
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	f040 8094 	bne.w	8007924 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007802:	3301      	adds	r3, #1
 8007804:	b2da      	uxtb	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007812:	2b03      	cmp	r3, #3
 8007814:	d903      	bls.n	800781e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	220d      	movs	r2, #13
 800781a:	701a      	strb	r2, [r3, #0]
      break;
 800781c:	e082      	b.n	8007924 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	795b      	ldrb	r3, [r3, #5]
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 ff9f 	bl	8008768 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	791b      	ldrb	r3, [r3, #4]
 800782e:	4619      	mov	r1, r3
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 ff99 	bl	8008768 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	701a      	strb	r2, [r3, #0]
      break;
 8007842:	e06f      	b.n	8007924 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800784a:	2b00      	cmp	r3, #0
 800784c:	d019      	beq.n	8007882 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800785a:	23ff      	movs	r3, #255	; 0xff
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f949 	bl	8007af4 <USBH_Get_StringDesc>
 8007862:	4603      	mov	r3, r0
 8007864:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007866:	7bbb      	ldrb	r3, [r7, #14]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d103      	bne.n	8007874 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2206      	movs	r2, #6
 8007870:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007872:	e059      	b.n	8007928 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	2b03      	cmp	r3, #3
 8007878:	d156      	bne.n	8007928 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2206      	movs	r2, #6
 800787e:	705a      	strb	r2, [r3, #1]
      break;
 8007880:	e052      	b.n	8007928 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2206      	movs	r2, #6
 8007886:	705a      	strb	r2, [r3, #1]
      break;
 8007888:	e04e      	b.n	8007928 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007890:	2b00      	cmp	r3, #0
 8007892:	d019      	beq.n	80078c8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078a0:	23ff      	movs	r3, #255	; 0xff
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f926 	bl	8007af4 <USBH_Get_StringDesc>
 80078a8:	4603      	mov	r3, r0
 80078aa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d103      	bne.n	80078ba <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2207      	movs	r2, #7
 80078b6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078b8:	e038      	b.n	800792c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d135      	bne.n	800792c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2207      	movs	r2, #7
 80078c4:	705a      	strb	r2, [r3, #1]
      break;
 80078c6:	e031      	b.n	800792c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2207      	movs	r2, #7
 80078cc:	705a      	strb	r2, [r3, #1]
      break;
 80078ce:	e02d      	b.n	800792c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d017      	beq.n	800790a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078e6:	23ff      	movs	r3, #255	; 0xff
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f903 	bl	8007af4 <USBH_Get_StringDesc>
 80078ee:	4603      	mov	r3, r0
 80078f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d102      	bne.n	80078fe <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80078fc:	e018      	b.n	8007930 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	2b03      	cmp	r3, #3
 8007902:	d115      	bne.n	8007930 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007904:	2300      	movs	r3, #0
 8007906:	73fb      	strb	r3, [r7, #15]
      break;
 8007908:	e012      	b.n	8007930 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	73fb      	strb	r3, [r7, #15]
      break;
 800790e:	e00f      	b.n	8007930 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007910:	bf00      	nop
 8007912:	e00e      	b.n	8007932 <USBH_HandleEnum+0x3be>
      break;
 8007914:	bf00      	nop
 8007916:	e00c      	b.n	8007932 <USBH_HandleEnum+0x3be>
      break;
 8007918:	bf00      	nop
 800791a:	e00a      	b.n	8007932 <USBH_HandleEnum+0x3be>
      break;
 800791c:	bf00      	nop
 800791e:	e008      	b.n	8007932 <USBH_HandleEnum+0x3be>
      break;
 8007920:	bf00      	nop
 8007922:	e006      	b.n	8007932 <USBH_HandleEnum+0x3be>
      break;
 8007924:	bf00      	nop
 8007926:	e004      	b.n	8007932 <USBH_HandleEnum+0x3be>
      break;
 8007928:	bf00      	nop
 800792a:	e002      	b.n	8007932 <USBH_HandleEnum+0x3be>
      break;
 800792c:	bf00      	nop
 800792e:	e000      	b.n	8007932 <USBH_HandleEnum+0x3be>
      break;
 8007930:	bf00      	nop
  }
  return Status;
 8007932:	7bfb      	ldrb	r3, [r7, #15]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800794e:	bf00      	nop
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b082      	sub	sp, #8
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007968:	1c5a      	adds	r2, r3, #1
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f804 	bl	800797e <USBH_HandleSof>
}
 8007976:	bf00      	nop
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b082      	sub	sp, #8
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b0b      	cmp	r3, #11
 800798e:	d10a      	bne.n	80079a6 <USBH_HandleSof+0x28>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007996:	2b00      	cmp	r3, #0
 8007998:	d005      	beq.n	80079a6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	4798      	blx	r3
  }
}
 80079a6:	bf00      	nop
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80079be:	bf00      	nop
}
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80079da:	bf00      	nop
}
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f001 f844 	bl	8008ac2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	791b      	ldrb	r3, [r3, #4]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fe91 	bl	8008768 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	795b      	ldrb	r3, [r3, #5]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fe8b 	bl	8008768 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af02      	add	r7, sp, #8
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007a6e:	78fb      	ldrb	r3, [r7, #3]
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	4613      	mov	r3, r2
 8007a76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f864 	bl	8007b4a <USBH_GetDescriptor>
 8007a82:	4603      	mov	r3, r0
 8007a84:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10a      	bne.n	8007aa2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a98:	78fa      	ldrb	r2, [r7, #3]
 8007a9a:	b292      	uxth	r2, r2
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	f000 f918 	bl	8007cd2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af02      	add	r7, sp, #8
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	331c      	adds	r3, #28
 8007abc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007abe:	887b      	ldrh	r3, [r7, #2]
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ac8:	2100      	movs	r1, #0
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f83d 	bl	8007b4a <USBH_GetDescriptor>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d107      	bne.n	8007aea <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007ada:	887b      	ldrh	r3, [r7, #2]
 8007adc:	461a      	mov	r2, r3
 8007ade:	68b9      	ldr	r1, [r7, #8]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f987 	bl	8007df4 <USBH_ParseCfgDesc>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af02      	add	r7, sp, #8
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	607a      	str	r2, [r7, #4]
 8007afe:	461a      	mov	r2, r3
 8007b00:	460b      	mov	r3, r1
 8007b02:	72fb      	strb	r3, [r7, #11]
 8007b04:	4613      	mov	r3, r2
 8007b06:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007b08:	7afb      	ldrb	r3, [r7, #11]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b10:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007b18:	893b      	ldrh	r3, [r7, #8]
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	2100      	movs	r1, #0
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f000 f812 	bl	8007b4a <USBH_GetDescriptor>
 8007b26:	4603      	mov	r3, r0
 8007b28:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d107      	bne.n	8007b40 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b36:	893a      	ldrh	r2, [r7, #8]
 8007b38:	6879      	ldr	r1, [r7, #4]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 fb24 	bl	8008188 <USBH_ParseStringDesc>
  }

  return status;
 8007b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	60f8      	str	r0, [r7, #12]
 8007b52:	607b      	str	r3, [r7, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	72fb      	strb	r3, [r7, #11]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	789b      	ldrb	r3, [r3, #2]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d11c      	bne.n	8007b9e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007b64:	7afb      	ldrb	r3, [r7, #11]
 8007b66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2206      	movs	r2, #6
 8007b74:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	893a      	ldrh	r2, [r7, #8]
 8007b7a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007b7c:	893b      	ldrh	r3, [r7, #8]
 8007b7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b86:	d104      	bne.n	8007b92 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f240 4209 	movw	r2, #1033	; 0x409
 8007b8e:	829a      	strh	r2, [r3, #20]
 8007b90:	e002      	b.n	8007b98 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	8b3a      	ldrh	r2, [r7, #24]
 8007b9c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007b9e:	8b3b      	ldrh	r3, [r7, #24]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	6879      	ldr	r1, [r7, #4]
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 fb3d 	bl	8008224 <USBH_CtlReq>
 8007baa:	4603      	mov	r3, r0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	789b      	ldrb	r3, [r3, #2]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d10f      	bne.n	8007be8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2205      	movs	r2, #5
 8007bd2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007bd4:	78fb      	ldrb	r3, [r7, #3]
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007be8:	2200      	movs	r2, #0
 8007bea:	2100      	movs	r1, #0
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fb19 	bl	8008224 <USBH_CtlReq>
 8007bf2:	4603      	mov	r3, r0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	460b      	mov	r3, r1
 8007c06:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	789b      	ldrb	r3, [r3, #2]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d10e      	bne.n	8007c2e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2209      	movs	r2, #9
 8007c1a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	887a      	ldrh	r2, [r7, #2]
 8007c20:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2100      	movs	r1, #0
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 faf6 	bl	8008224 <USBH_CtlReq>
 8007c38:	4603      	mov	r3, r0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b082      	sub	sp, #8
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	789b      	ldrb	r3, [r3, #2]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d10f      	bne.n	8007c76 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2203      	movs	r2, #3
 8007c60:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007c62:	78fb      	ldrb	r3, [r7, #3]
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c76:	2200      	movs	r2, #0
 8007c78:	2100      	movs	r1, #0
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fad2 	bl	8008224 <USBH_CtlReq>
 8007c80:	4603      	mov	r3, r0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	460b      	mov	r3, r1
 8007c94:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	789b      	ldrb	r3, [r3, #2]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d10f      	bne.n	8007cbe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 faae 	bl	8008224 <USBH_CtlReq>
 8007cc8:	4603      	mov	r3, r0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b085      	sub	sp, #20
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	60f8      	str	r0, [r7, #12]
 8007cda:	60b9      	str	r1, [r7, #8]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	781a      	ldrb	r2, [r3, #0]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	785a      	ldrb	r2, [r3, #1]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	3302      	adds	r3, #2
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	3303      	adds	r3, #3
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	021b      	lsls	r3, r3, #8
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	4313      	orrs	r3, r2
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	791a      	ldrb	r2, [r3, #4]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	795a      	ldrb	r2, [r3, #5]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	799a      	ldrb	r2, [r3, #6]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	79da      	ldrb	r2, [r3, #7]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	79db      	ldrb	r3, [r3, #7]
 8007d30:	2b20      	cmp	r3, #32
 8007d32:	dc11      	bgt.n	8007d58 <USBH_ParseDevDesc+0x86>
 8007d34:	2b08      	cmp	r3, #8
 8007d36:	db16      	blt.n	8007d66 <USBH_ParseDevDesc+0x94>
 8007d38:	3b08      	subs	r3, #8
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d40:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	bf14      	ite	ne
 8007d4c:	2301      	movne	r3, #1
 8007d4e:	2300      	moveq	r3, #0
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d102      	bne.n	8007d5c <USBH_ParseDevDesc+0x8a>
 8007d56:	e006      	b.n	8007d66 <USBH_ParseDevDesc+0x94>
 8007d58:	2b40      	cmp	r3, #64	; 0x40
 8007d5a:	d104      	bne.n	8007d66 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	79da      	ldrb	r2, [r3, #7]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	71da      	strb	r2, [r3, #7]
      break;
 8007d64:	e003      	b.n	8007d6e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2240      	movs	r2, #64	; 0x40
 8007d6a:	71da      	strb	r2, [r3, #7]
      break;
 8007d6c:	bf00      	nop
  }

  if (length > 8U)
 8007d6e:	88fb      	ldrh	r3, [r7, #6]
 8007d70:	2b08      	cmp	r3, #8
 8007d72:	d939      	bls.n	8007de8 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	3308      	adds	r3, #8
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	3309      	adds	r3, #9
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	021b      	lsls	r3, r3, #8
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	330a      	adds	r3, #10
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	330b      	adds	r3, #11
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	021b      	lsls	r3, r3, #8
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	4313      	orrs	r3, r2
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	330c      	adds	r3, #12
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	330d      	adds	r3, #13
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	021b      	lsls	r3, r3, #8
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	7b9a      	ldrb	r2, [r3, #14]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	7bda      	ldrb	r2, [r3, #15]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	7c1a      	ldrb	r2, [r3, #16]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	7c5a      	ldrb	r2, [r3, #17]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	745a      	strb	r2, [r3, #17]
  }
}
 8007de8:	bf00      	nop
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08c      	sub	sp, #48	; 0x30
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007e08:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	781a      	ldrb	r2, [r3, #0]
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	785a      	ldrb	r2, [r3, #1]
 8007e30:	6a3b      	ldr	r3, [r7, #32]
 8007e32:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	3302      	adds	r3, #2
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	3303      	adds	r3, #3
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	021b      	lsls	r3, r3, #8
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e50:	bf28      	it	cs
 8007e52:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	6a3b      	ldr	r3, [r7, #32]
 8007e5a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	791a      	ldrb	r2, [r3, #4]
 8007e60:	6a3b      	ldr	r3, [r7, #32]
 8007e62:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	795a      	ldrb	r2, [r3, #5]
 8007e68:	6a3b      	ldr	r3, [r7, #32]
 8007e6a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	799a      	ldrb	r2, [r3, #6]
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	79da      	ldrb	r2, [r3, #7]
 8007e78:	6a3b      	ldr	r3, [r7, #32]
 8007e7a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	7a1a      	ldrb	r2, [r3, #8]
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2b09      	cmp	r3, #9
 8007e8a:	d002      	beq.n	8007e92 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	2209      	movs	r2, #9
 8007e90:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007e92:	88fb      	ldrh	r3, [r7, #6]
 8007e94:	2b09      	cmp	r3, #9
 8007e96:	f240 809d 	bls.w	8007fd4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007e9a:	2309      	movs	r3, #9
 8007e9c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ea2:	e081      	b.n	8007fa8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ea4:	f107 0316 	add.w	r3, r7, #22
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eac:	f000 f99f 	bl	80081ee <USBH_GetNextDesc>
 8007eb0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb4:	785b      	ldrb	r3, [r3, #1]
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	d176      	bne.n	8007fa8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2b09      	cmp	r3, #9
 8007ec0:	d002      	beq.n	8007ec8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec4:	2209      	movs	r2, #9
 8007ec6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ecc:	221a      	movs	r2, #26
 8007ece:	fb02 f303 	mul.w	r3, r2, r3
 8007ed2:	3308      	adds	r3, #8
 8007ed4:	6a3a      	ldr	r2, [r7, #32]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	3302      	adds	r3, #2
 8007eda:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007edc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ede:	69f8      	ldr	r0, [r7, #28]
 8007ee0:	f000 f87e 	bl	8007fe0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007eea:	2300      	movs	r3, #0
 8007eec:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007eee:	e043      	b.n	8007f78 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ef0:	f107 0316 	add.w	r3, r7, #22
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ef8:	f000 f979 	bl	80081ee <USBH_GetNextDesc>
 8007efc:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f00:	785b      	ldrb	r3, [r3, #1]
 8007f02:	2b05      	cmp	r3, #5
 8007f04:	d138      	bne.n	8007f78 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	795b      	ldrb	r3, [r3, #5]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d10f      	bne.n	8007f2e <USBH_ParseCfgDesc+0x13a>
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	799b      	ldrb	r3, [r3, #6]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d10b      	bne.n	8007f2e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	79db      	ldrb	r3, [r3, #7]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10f      	bne.n	8007f3e <USBH_ParseCfgDesc+0x14a>
 8007f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	2b09      	cmp	r3, #9
 8007f24:	d00b      	beq.n	8007f3e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f28:	2209      	movs	r2, #9
 8007f2a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f2c:	e007      	b.n	8007f3e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	2b07      	cmp	r3, #7
 8007f34:	d004      	beq.n	8007f40 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f38:	2207      	movs	r2, #7
 8007f3a:	701a      	strb	r2, [r3, #0]
 8007f3c:	e000      	b.n	8007f40 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f3e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007f40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f44:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f48:	3201      	adds	r2, #1
 8007f4a:	00d2      	lsls	r2, r2, #3
 8007f4c:	211a      	movs	r1, #26
 8007f4e:	fb01 f303 	mul.w	r3, r1, r3
 8007f52:	4413      	add	r3, r2
 8007f54:	3308      	adds	r3, #8
 8007f56:	6a3a      	ldr	r2, [r7, #32]
 8007f58:	4413      	add	r3, r2
 8007f5a:	3304      	adds	r3, #4
 8007f5c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f60:	69b9      	ldr	r1, [r7, #24]
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f000 f86b 	bl	800803e <USBH_ParseEPDesc>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007f6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f72:	3301      	adds	r3, #1
 8007f74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	791b      	ldrb	r3, [r3, #4]
 8007f7c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d204      	bcs.n	8007f8e <USBH_ParseCfgDesc+0x19a>
 8007f84:	6a3b      	ldr	r3, [r7, #32]
 8007f86:	885a      	ldrh	r2, [r3, #2]
 8007f88:	8afb      	ldrh	r3, [r7, #22]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d8b0      	bhi.n	8007ef0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	791b      	ldrb	r3, [r3, #4]
 8007f92:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d201      	bcs.n	8007f9e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e01c      	b.n	8007fd8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d805      	bhi.n	8007fbc <USBH_ParseCfgDesc+0x1c8>
 8007fb0:	6a3b      	ldr	r3, [r7, #32]
 8007fb2:	885a      	ldrh	r2, [r3, #2]
 8007fb4:	8afb      	ldrh	r3, [r7, #22]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	f63f af74 	bhi.w	8007ea4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	791b      	ldrb	r3, [r3, #4]
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	bf28      	it	cs
 8007fc4:	2302      	movcs	r3, #2
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d201      	bcs.n	8007fd4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e001      	b.n	8007fd8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007fd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3730      	adds	r7, #48	; 0x30
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	781a      	ldrb	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	785a      	ldrb	r2, [r3, #1]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	789a      	ldrb	r2, [r3, #2]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	78da      	ldrb	r2, [r3, #3]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	791a      	ldrb	r2, [r3, #4]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	795a      	ldrb	r2, [r3, #5]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	799a      	ldrb	r2, [r3, #6]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	79da      	ldrb	r2, [r3, #7]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	7a1a      	ldrb	r2, [r3, #8]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	721a      	strb	r2, [r3, #8]
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800803e:	b480      	push	{r7}
 8008040:	b087      	sub	sp, #28
 8008042:	af00      	add	r7, sp, #0
 8008044:	60f8      	str	r0, [r7, #12]
 8008046:	60b9      	str	r1, [r7, #8]
 8008048:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	781a      	ldrb	r2, [r3, #0]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	785a      	ldrb	r2, [r3, #1]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	789a      	ldrb	r2, [r3, #2]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	78da      	ldrb	r2, [r3, #3]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3304      	adds	r3, #4
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	b29a      	uxth	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	3305      	adds	r3, #5
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	b29b      	uxth	r3, r3
 800807e:	021b      	lsls	r3, r3, #8
 8008080:	b29b      	uxth	r3, r3
 8008082:	4313      	orrs	r3, r2
 8008084:	b29a      	uxth	r2, r3
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	799a      	ldrb	r2, [r3, #6]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	889b      	ldrh	r3, [r3, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d102      	bne.n	80080a0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800809a:	2303      	movs	r3, #3
 800809c:	75fb      	strb	r3, [r7, #23]
 800809e:	e033      	b.n	8008108 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	889b      	ldrh	r3, [r3, #4]
 80080a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80080a8:	f023 0307 	bic.w	r3, r3, #7
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	889b      	ldrh	r3, [r3, #4]
 80080b6:	b21a      	sxth	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3304      	adds	r3, #4
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	b299      	uxth	r1, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	3305      	adds	r3, #5
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	021b      	lsls	r3, r3, #8
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	430b      	orrs	r3, r1
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d110      	bne.n	80080fa <USBH_ParseEPDesc+0xbc>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3304      	adds	r3, #4
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	b299      	uxth	r1, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3305      	adds	r3, #5
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	021b      	lsls	r3, r3, #8
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	430b      	orrs	r3, r1
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	b21b      	sxth	r3, r3
 80080f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080f6:	b21b      	sxth	r3, r3
 80080f8:	e001      	b.n	80080fe <USBH_ParseEPDesc+0xc0>
 80080fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080fe:	4313      	orrs	r3, r2
 8008100:	b21b      	sxth	r3, r3
 8008102:	b29a      	uxth	r2, r3
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800810e:	2b00      	cmp	r3, #0
 8008110:	d116      	bne.n	8008140 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	78db      	ldrb	r3, [r3, #3]
 8008116:	f003 0303 	and.w	r3, r3, #3
 800811a:	2b01      	cmp	r3, #1
 800811c:	d005      	beq.n	800812a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	78db      	ldrb	r3, [r3, #3]
 8008122:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008126:	2b03      	cmp	r3, #3
 8008128:	d127      	bne.n	800817a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	799b      	ldrb	r3, [r3, #6]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <USBH_ParseEPDesc+0xfc>
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	799b      	ldrb	r3, [r3, #6]
 8008136:	2b10      	cmp	r3, #16
 8008138:	d91f      	bls.n	800817a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800813a:	2303      	movs	r3, #3
 800813c:	75fb      	strb	r3, [r7, #23]
 800813e:	e01c      	b.n	800817a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	78db      	ldrb	r3, [r3, #3]
 8008144:	f003 0303 	and.w	r3, r3, #3
 8008148:	2b01      	cmp	r3, #1
 800814a:	d10a      	bne.n	8008162 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	799b      	ldrb	r3, [r3, #6]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d003      	beq.n	800815c <USBH_ParseEPDesc+0x11e>
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	799b      	ldrb	r3, [r3, #6]
 8008158:	2b10      	cmp	r3, #16
 800815a:	d90e      	bls.n	800817a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800815c:	2303      	movs	r3, #3
 800815e:	75fb      	strb	r3, [r7, #23]
 8008160:	e00b      	b.n	800817a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	78db      	ldrb	r3, [r3, #3]
 8008166:	f003 0303 	and.w	r3, r3, #3
 800816a:	2b03      	cmp	r3, #3
 800816c:	d105      	bne.n	800817a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	799b      	ldrb	r3, [r3, #6]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008176:	2303      	movs	r3, #3
 8008178:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800817a:	7dfb      	ldrb	r3, [r7, #23]
}
 800817c:	4618      	mov	r0, r3
 800817e:	371c      	adds	r7, #28
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	4613      	mov	r3, r2
 8008194:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	3301      	adds	r3, #1
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	2b03      	cmp	r3, #3
 800819e:	d120      	bne.n	80081e2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	1e9a      	subs	r2, r3, #2
 80081a6:	88fb      	ldrh	r3, [r7, #6]
 80081a8:	4293      	cmp	r3, r2
 80081aa:	bf28      	it	cs
 80081ac:	4613      	movcs	r3, r2
 80081ae:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	3302      	adds	r3, #2
 80081b4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80081b6:	2300      	movs	r3, #0
 80081b8:	82fb      	strh	r3, [r7, #22]
 80081ba:	e00b      	b.n	80081d4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80081bc:	8afb      	ldrh	r3, [r7, #22]
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	4413      	add	r3, r2
 80081c2:	781a      	ldrb	r2, [r3, #0]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	3301      	adds	r3, #1
 80081cc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80081ce:	8afb      	ldrh	r3, [r7, #22]
 80081d0:	3302      	adds	r3, #2
 80081d2:	82fb      	strh	r3, [r7, #22]
 80081d4:	8afa      	ldrh	r2, [r7, #22]
 80081d6:	8abb      	ldrh	r3, [r7, #20]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d3ef      	bcc.n	80081bc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	2200      	movs	r2, #0
 80081e0:	701a      	strb	r2, [r3, #0]
  }
}
 80081e2:	bf00      	nop
 80081e4:	371c      	adds	r7, #28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b085      	sub	sp, #20
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	881a      	ldrh	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	b29b      	uxth	r3, r3
 8008202:	4413      	add	r3, r2
 8008204:	b29a      	uxth	r2, r3
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4413      	add	r3, r2
 8008214:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008216:	68fb      	ldr	r3, [r7, #12]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	4613      	mov	r3, r2
 8008230:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008232:	2301      	movs	r3, #1
 8008234:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	789b      	ldrb	r3, [r3, #2]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d002      	beq.n	8008244 <USBH_CtlReq+0x20>
 800823e:	2b02      	cmp	r3, #2
 8008240:	d00f      	beq.n	8008262 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008242:	e027      	b.n	8008294 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	88fa      	ldrh	r2, [r7, #6]
 800824e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2201      	movs	r2, #1
 8008254:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2202      	movs	r2, #2
 800825a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800825c:	2301      	movs	r3, #1
 800825e:	75fb      	strb	r3, [r7, #23]
      break;
 8008260:	e018      	b.n	8008294 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f000 f81c 	bl	80082a0 <USBH_HandleControl>
 8008268:	4603      	mov	r3, r0
 800826a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800826c:	7dfb      	ldrb	r3, [r7, #23]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <USBH_CtlReq+0x54>
 8008272:	7dfb      	ldrb	r3, [r7, #23]
 8008274:	2b03      	cmp	r3, #3
 8008276:	d106      	bne.n	8008286 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2201      	movs	r2, #1
 800827c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	761a      	strb	r2, [r3, #24]
      break;
 8008284:	e005      	b.n	8008292 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008286:	7dfb      	ldrb	r3, [r7, #23]
 8008288:	2b02      	cmp	r3, #2
 800828a:	d102      	bne.n	8008292 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2201      	movs	r2, #1
 8008290:	709a      	strb	r2, [r3, #2]
      break;
 8008292:	bf00      	nop
  }
  return status;
 8008294:	7dfb      	ldrb	r3, [r7, #23]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
	...

080082a0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af02      	add	r7, sp, #8
 80082a6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80082a8:	2301      	movs	r3, #1
 80082aa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80082ac:	2300      	movs	r3, #0
 80082ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	7e1b      	ldrb	r3, [r3, #24]
 80082b4:	3b01      	subs	r3, #1
 80082b6:	2b0a      	cmp	r3, #10
 80082b8:	f200 8156 	bhi.w	8008568 <USBH_HandleControl+0x2c8>
 80082bc:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <USBH_HandleControl+0x24>)
 80082be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c2:	bf00      	nop
 80082c4:	080082f1 	.word	0x080082f1
 80082c8:	0800830b 	.word	0x0800830b
 80082cc:	08008375 	.word	0x08008375
 80082d0:	0800839b 	.word	0x0800839b
 80082d4:	080083d3 	.word	0x080083d3
 80082d8:	080083fd 	.word	0x080083fd
 80082dc:	0800844f 	.word	0x0800844f
 80082e0:	08008471 	.word	0x08008471
 80082e4:	080084ad 	.word	0x080084ad
 80082e8:	080084d3 	.word	0x080084d3
 80082ec:	08008511 	.word	0x08008511
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f103 0110 	add.w	r1, r3, #16
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	795b      	ldrb	r3, [r3, #5]
 80082fa:	461a      	mov	r2, r3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f943 	bl	8008588 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2202      	movs	r2, #2
 8008306:	761a      	strb	r2, [r3, #24]
      break;
 8008308:	e139      	b.n	800857e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	795b      	ldrb	r3, [r3, #5]
 800830e:	4619      	mov	r1, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fcc5 	bl	8008ca0 <USBH_LL_GetURBState>
 8008316:	4603      	mov	r3, r0
 8008318:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800831a:	7bbb      	ldrb	r3, [r7, #14]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d11e      	bne.n	800835e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	7c1b      	ldrb	r3, [r3, #16]
 8008324:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008328:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	8adb      	ldrh	r3, [r3, #22]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00a      	beq.n	8008348 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008332:	7b7b      	ldrb	r3, [r7, #13]
 8008334:	2b80      	cmp	r3, #128	; 0x80
 8008336:	d103      	bne.n	8008340 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2203      	movs	r2, #3
 800833c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800833e:	e115      	b.n	800856c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2205      	movs	r2, #5
 8008344:	761a      	strb	r2, [r3, #24]
      break;
 8008346:	e111      	b.n	800856c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008348:	7b7b      	ldrb	r3, [r7, #13]
 800834a:	2b80      	cmp	r3, #128	; 0x80
 800834c:	d103      	bne.n	8008356 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2209      	movs	r2, #9
 8008352:	761a      	strb	r2, [r3, #24]
      break;
 8008354:	e10a      	b.n	800856c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2207      	movs	r2, #7
 800835a:	761a      	strb	r2, [r3, #24]
      break;
 800835c:	e106      	b.n	800856c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	2b04      	cmp	r3, #4
 8008362:	d003      	beq.n	800836c <USBH_HandleControl+0xcc>
 8008364:	7bbb      	ldrb	r3, [r7, #14]
 8008366:	2b02      	cmp	r3, #2
 8008368:	f040 8100 	bne.w	800856c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	220b      	movs	r2, #11
 8008370:	761a      	strb	r2, [r3, #24]
      break;
 8008372:	e0fb      	b.n	800856c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800837a:	b29a      	uxth	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6899      	ldr	r1, [r3, #8]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	899a      	ldrh	r2, [r3, #12]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	791b      	ldrb	r3, [r3, #4]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f93a 	bl	8008606 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2204      	movs	r2, #4
 8008396:	761a      	strb	r2, [r3, #24]
      break;
 8008398:	e0f1      	b.n	800857e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	791b      	ldrb	r3, [r3, #4]
 800839e:	4619      	mov	r1, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fc7d 	bl	8008ca0 <USBH_LL_GetURBState>
 80083a6:	4603      	mov	r3, r0
 80083a8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80083aa:	7bbb      	ldrb	r3, [r7, #14]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d102      	bne.n	80083b6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2209      	movs	r2, #9
 80083b4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	2b05      	cmp	r3, #5
 80083ba:	d102      	bne.n	80083c2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80083bc:	2303      	movs	r3, #3
 80083be:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083c0:	e0d6      	b.n	8008570 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	2b04      	cmp	r3, #4
 80083c6:	f040 80d3 	bne.w	8008570 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	220b      	movs	r2, #11
 80083ce:	761a      	strb	r2, [r3, #24]
      break;
 80083d0:	e0ce      	b.n	8008570 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6899      	ldr	r1, [r3, #8]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	899a      	ldrh	r2, [r3, #12]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	795b      	ldrb	r3, [r3, #5]
 80083de:	2001      	movs	r0, #1
 80083e0:	9000      	str	r0, [sp, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f8ea 	bl	80085bc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2206      	movs	r2, #6
 80083f8:	761a      	strb	r2, [r3, #24]
      break;
 80083fa:	e0c0      	b.n	800857e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	795b      	ldrb	r3, [r3, #5]
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fc4c 	bl	8008ca0 <USBH_LL_GetURBState>
 8008408:	4603      	mov	r3, r0
 800840a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800840c:	7bbb      	ldrb	r3, [r7, #14]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d103      	bne.n	800841a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2207      	movs	r2, #7
 8008416:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008418:	e0ac      	b.n	8008574 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800841a:	7bbb      	ldrb	r3, [r7, #14]
 800841c:	2b05      	cmp	r3, #5
 800841e:	d105      	bne.n	800842c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	220c      	movs	r2, #12
 8008424:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008426:	2303      	movs	r3, #3
 8008428:	73fb      	strb	r3, [r7, #15]
      break;
 800842a:	e0a3      	b.n	8008574 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	2b02      	cmp	r3, #2
 8008430:	d103      	bne.n	800843a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2205      	movs	r2, #5
 8008436:	761a      	strb	r2, [r3, #24]
      break;
 8008438:	e09c      	b.n	8008574 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	2b04      	cmp	r3, #4
 800843e:	f040 8099 	bne.w	8008574 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	220b      	movs	r2, #11
 8008446:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008448:	2302      	movs	r3, #2
 800844a:	73fb      	strb	r3, [r7, #15]
      break;
 800844c:	e092      	b.n	8008574 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	791b      	ldrb	r3, [r3, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	2100      	movs	r1, #0
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f8d5 	bl	8008606 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008462:	b29a      	uxth	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2208      	movs	r2, #8
 800846c:	761a      	strb	r2, [r3, #24]

      break;
 800846e:	e086      	b.n	800857e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	791b      	ldrb	r3, [r3, #4]
 8008474:	4619      	mov	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fc12 	bl	8008ca0 <USBH_LL_GetURBState>
 800847c:	4603      	mov	r3, r0
 800847e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d105      	bne.n	8008492 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	220d      	movs	r2, #13
 800848a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008490:	e072      	b.n	8008578 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008492:	7bbb      	ldrb	r3, [r7, #14]
 8008494:	2b04      	cmp	r3, #4
 8008496:	d103      	bne.n	80084a0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	220b      	movs	r2, #11
 800849c:	761a      	strb	r2, [r3, #24]
      break;
 800849e:	e06b      	b.n	8008578 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
 80084a2:	2b05      	cmp	r3, #5
 80084a4:	d168      	bne.n	8008578 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80084a6:	2303      	movs	r3, #3
 80084a8:	73fb      	strb	r3, [r7, #15]
      break;
 80084aa:	e065      	b.n	8008578 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	795b      	ldrb	r3, [r3, #5]
 80084b0:	2201      	movs	r2, #1
 80084b2:	9200      	str	r2, [sp, #0]
 80084b4:	2200      	movs	r2, #0
 80084b6:	2100      	movs	r1, #0
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f87f 	bl	80085bc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	220a      	movs	r2, #10
 80084ce:	761a      	strb	r2, [r3, #24]
      break;
 80084d0:	e055      	b.n	800857e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	795b      	ldrb	r3, [r3, #5]
 80084d6:	4619      	mov	r1, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fbe1 	bl	8008ca0 <USBH_LL_GetURBState>
 80084de:	4603      	mov	r3, r0
 80084e0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d105      	bne.n	80084f4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	220d      	movs	r2, #13
 80084f0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084f2:	e043      	b.n	800857c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d103      	bne.n	8008502 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2209      	movs	r2, #9
 80084fe:	761a      	strb	r2, [r3, #24]
      break;
 8008500:	e03c      	b.n	800857c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008502:	7bbb      	ldrb	r3, [r7, #14]
 8008504:	2b04      	cmp	r3, #4
 8008506:	d139      	bne.n	800857c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	220b      	movs	r2, #11
 800850c:	761a      	strb	r2, [r3, #24]
      break;
 800850e:	e035      	b.n	800857c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	7e5b      	ldrb	r3, [r3, #25]
 8008514:	3301      	adds	r3, #1
 8008516:	b2da      	uxtb	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	765a      	strb	r2, [r3, #25]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	7e5b      	ldrb	r3, [r3, #25]
 8008520:	2b02      	cmp	r3, #2
 8008522:	d806      	bhi.n	8008532 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2201      	movs	r2, #1
 800852e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008530:	e025      	b.n	800857e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008538:	2106      	movs	r1, #6
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	795b      	ldrb	r3, [r3, #5]
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f90c 	bl	8008768 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	791b      	ldrb	r3, [r3, #4]
 8008554:	4619      	mov	r1, r3
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 f906 	bl	8008768 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008562:	2302      	movs	r3, #2
 8008564:	73fb      	strb	r3, [r7, #15]
      break;
 8008566:	e00a      	b.n	800857e <USBH_HandleControl+0x2de>

    default:
      break;
 8008568:	bf00      	nop
 800856a:	e008      	b.n	800857e <USBH_HandleControl+0x2de>
      break;
 800856c:	bf00      	nop
 800856e:	e006      	b.n	800857e <USBH_HandleControl+0x2de>
      break;
 8008570:	bf00      	nop
 8008572:	e004      	b.n	800857e <USBH_HandleControl+0x2de>
      break;
 8008574:	bf00      	nop
 8008576:	e002      	b.n	800857e <USBH_HandleControl+0x2de>
      break;
 8008578:	bf00      	nop
 800857a:	e000      	b.n	800857e <USBH_HandleControl+0x2de>
      break;
 800857c:	bf00      	nop
  }

  return status;
 800857e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b088      	sub	sp, #32
 800858c:	af04      	add	r7, sp, #16
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	4613      	mov	r3, r2
 8008594:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008596:	79f9      	ldrb	r1, [r7, #7]
 8008598:	2300      	movs	r3, #0
 800859a:	9303      	str	r3, [sp, #12]
 800859c:	2308      	movs	r3, #8
 800859e:	9302      	str	r3, [sp, #8]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	9301      	str	r3, [sp, #4]
 80085a4:	2300      	movs	r3, #0
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	2300      	movs	r3, #0
 80085aa:	2200      	movs	r2, #0
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f000 fb46 	bl	8008c3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b088      	sub	sp, #32
 80085c0:	af04      	add	r7, sp, #16
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	4611      	mov	r1, r2
 80085c8:	461a      	mov	r2, r3
 80085ca:	460b      	mov	r3, r1
 80085cc:	80fb      	strh	r3, [r7, #6]
 80085ce:	4613      	mov	r3, r2
 80085d0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80085dc:	2300      	movs	r3, #0
 80085de:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085e0:	7979      	ldrb	r1, [r7, #5]
 80085e2:	7e3b      	ldrb	r3, [r7, #24]
 80085e4:	9303      	str	r3, [sp, #12]
 80085e6:	88fb      	ldrh	r3, [r7, #6]
 80085e8:	9302      	str	r3, [sp, #8]
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	9301      	str	r3, [sp, #4]
 80085ee:	2301      	movs	r3, #1
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	2300      	movs	r3, #0
 80085f4:	2200      	movs	r2, #0
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f000 fb21 	bl	8008c3e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b088      	sub	sp, #32
 800860a:	af04      	add	r7, sp, #16
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	4611      	mov	r1, r2
 8008612:	461a      	mov	r2, r3
 8008614:	460b      	mov	r3, r1
 8008616:	80fb      	strh	r3, [r7, #6]
 8008618:	4613      	mov	r3, r2
 800861a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800861c:	7979      	ldrb	r1, [r7, #5]
 800861e:	2300      	movs	r3, #0
 8008620:	9303      	str	r3, [sp, #12]
 8008622:	88fb      	ldrh	r3, [r7, #6]
 8008624:	9302      	str	r3, [sp, #8]
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	9301      	str	r3, [sp, #4]
 800862a:	2301      	movs	r3, #1
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	2300      	movs	r3, #0
 8008630:	2201      	movs	r2, #1
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f000 fb03 	bl	8008c3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008638:	2300      	movs	r3, #0

}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b088      	sub	sp, #32
 8008646:	af04      	add	r7, sp, #16
 8008648:	60f8      	str	r0, [r7, #12]
 800864a:	60b9      	str	r1, [r7, #8]
 800864c:	4611      	mov	r1, r2
 800864e:	461a      	mov	r2, r3
 8008650:	460b      	mov	r3, r1
 8008652:	80fb      	strh	r3, [r7, #6]
 8008654:	4613      	mov	r3, r2
 8008656:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800865e:	2b00      	cmp	r3, #0
 8008660:	d001      	beq.n	8008666 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008662:	2300      	movs	r3, #0
 8008664:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008666:	7979      	ldrb	r1, [r7, #5]
 8008668:	7e3b      	ldrb	r3, [r7, #24]
 800866a:	9303      	str	r3, [sp, #12]
 800866c:	88fb      	ldrh	r3, [r7, #6]
 800866e:	9302      	str	r3, [sp, #8]
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	9301      	str	r3, [sp, #4]
 8008674:	2301      	movs	r3, #1
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	2302      	movs	r3, #2
 800867a:	2200      	movs	r2, #0
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 fade 	bl	8008c3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af04      	add	r7, sp, #16
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	4611      	mov	r1, r2
 8008698:	461a      	mov	r2, r3
 800869a:	460b      	mov	r3, r1
 800869c:	80fb      	strh	r3, [r7, #6]
 800869e:	4613      	mov	r3, r2
 80086a0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80086a2:	7979      	ldrb	r1, [r7, #5]
 80086a4:	2300      	movs	r3, #0
 80086a6:	9303      	str	r3, [sp, #12]
 80086a8:	88fb      	ldrh	r3, [r7, #6]
 80086aa:	9302      	str	r3, [sp, #8]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	9301      	str	r3, [sp, #4]
 80086b0:	2301      	movs	r3, #1
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	2302      	movs	r3, #2
 80086b6:	2201      	movs	r2, #1
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f000 fac0 	bl	8008c3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b086      	sub	sp, #24
 80086cc:	af04      	add	r7, sp, #16
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	4608      	mov	r0, r1
 80086d2:	4611      	mov	r1, r2
 80086d4:	461a      	mov	r2, r3
 80086d6:	4603      	mov	r3, r0
 80086d8:	70fb      	strb	r3, [r7, #3]
 80086da:	460b      	mov	r3, r1
 80086dc:	70bb      	strb	r3, [r7, #2]
 80086de:	4613      	mov	r3, r2
 80086e0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80086e2:	7878      	ldrb	r0, [r7, #1]
 80086e4:	78ba      	ldrb	r2, [r7, #2]
 80086e6:	78f9      	ldrb	r1, [r7, #3]
 80086e8:	8b3b      	ldrh	r3, [r7, #24]
 80086ea:	9302      	str	r3, [sp, #8]
 80086ec:	7d3b      	ldrb	r3, [r7, #20]
 80086ee:	9301      	str	r3, [sp, #4]
 80086f0:	7c3b      	ldrb	r3, [r7, #16]
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	4603      	mov	r3, r0
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fa53 	bl	8008ba2 <USBH_LL_OpenPipe>

  return USBH_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	460b      	mov	r3, r1
 8008710:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008712:	78fb      	ldrb	r3, [r7, #3]
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fa72 	bl	8008c00 <USBH_LL_ClosePipe>

  return USBH_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b084      	sub	sp, #16
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	460b      	mov	r3, r1
 8008730:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 f836 	bl	80087a4 <USBH_GetFreePipe>
 8008738:	4603      	mov	r3, r0
 800873a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800873c:	89fb      	ldrh	r3, [r7, #14]
 800873e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008742:	4293      	cmp	r3, r2
 8008744:	d00a      	beq.n	800875c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008746:	78fa      	ldrb	r2, [r7, #3]
 8008748:	89fb      	ldrh	r3, [r7, #14]
 800874a:	f003 030f 	and.w	r3, r3, #15
 800874e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008752:	6879      	ldr	r1, [r7, #4]
 8008754:	33e0      	adds	r3, #224	; 0xe0
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	440b      	add	r3, r1
 800875a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800875c:	89fb      	ldrh	r3, [r7, #14]
 800875e:	b2db      	uxtb	r3, r3
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008774:	78fb      	ldrb	r3, [r7, #3]
 8008776:	2b0f      	cmp	r3, #15
 8008778:	d80d      	bhi.n	8008796 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800877a:	78fb      	ldrb	r3, [r7, #3]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	33e0      	adds	r3, #224	; 0xe0
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	78fb      	ldrb	r3, [r7, #3]
 8008788:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800878c:	6879      	ldr	r1, [r7, #4]
 800878e:	33e0      	adds	r3, #224	; 0xe0
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	440b      	add	r3, r1
 8008794:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80087b0:	2300      	movs	r3, #0
 80087b2:	73fb      	strb	r3, [r7, #15]
 80087b4:	e00f      	b.n	80087d6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80087b6:	7bfb      	ldrb	r3, [r7, #15]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	33e0      	adds	r3, #224	; 0xe0
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d102      	bne.n	80087d0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	e007      	b.n	80087e0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
 80087d2:	3301      	adds	r3, #1
 80087d4:	73fb      	strb	r3, [r7, #15]
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
 80087d8:	2b0f      	cmp	r3, #15
 80087da:	d9ec      	bls.n	80087b6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80087dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3714      	adds	r7, #20
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80087f0:	2201      	movs	r2, #1
 80087f2:	490e      	ldr	r1, [pc, #56]	; (800882c <MX_USB_HOST_Init+0x40>)
 80087f4:	480e      	ldr	r0, [pc, #56]	; (8008830 <MX_USB_HOST_Init+0x44>)
 80087f6:	f7fe fba7 	bl	8006f48 <USBH_Init>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d001      	beq.n	8008804 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008800:	f7f8 f938 	bl	8000a74 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008804:	490b      	ldr	r1, [pc, #44]	; (8008834 <MX_USB_HOST_Init+0x48>)
 8008806:	480a      	ldr	r0, [pc, #40]	; (8008830 <MX_USB_HOST_Init+0x44>)
 8008808:	f7fe fc2c 	bl	8007064 <USBH_RegisterClass>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008812:	f7f8 f92f 	bl	8000a74 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008816:	4806      	ldr	r0, [pc, #24]	; (8008830 <MX_USB_HOST_Init+0x44>)
 8008818:	f7fe fcb0 	bl	800717c <USBH_Start>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008822:	f7f8 f927 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008826:	bf00      	nop
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	0800884d 	.word	0x0800884d
 8008830:	20000258 	.word	0x20000258
 8008834:	2000000c 	.word	0x2000000c

08008838 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800883c:	4802      	ldr	r0, [pc, #8]	; (8008848 <MX_USB_HOST_Process+0x10>)
 800883e:	f7fe fcad 	bl	800719c <USBH_Process>
}
 8008842:	bf00      	nop
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	20000258 	.word	0x20000258

0800884c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	460b      	mov	r3, r1
 8008856:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008858:	78fb      	ldrb	r3, [r7, #3]
 800885a:	3b01      	subs	r3, #1
 800885c:	2b04      	cmp	r3, #4
 800885e:	d819      	bhi.n	8008894 <USBH_UserProcess+0x48>
 8008860:	a201      	add	r2, pc, #4	; (adr r2, 8008868 <USBH_UserProcess+0x1c>)
 8008862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008866:	bf00      	nop
 8008868:	08008895 	.word	0x08008895
 800886c:	08008885 	.word	0x08008885
 8008870:	08008895 	.word	0x08008895
 8008874:	0800888d 	.word	0x0800888d
 8008878:	0800887d 	.word	0x0800887d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800887c:	4b09      	ldr	r3, [pc, #36]	; (80088a4 <USBH_UserProcess+0x58>)
 800887e:	2203      	movs	r2, #3
 8008880:	701a      	strb	r2, [r3, #0]
  break;
 8008882:	e008      	b.n	8008896 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008884:	4b07      	ldr	r3, [pc, #28]	; (80088a4 <USBH_UserProcess+0x58>)
 8008886:	2202      	movs	r2, #2
 8008888:	701a      	strb	r2, [r3, #0]
  break;
 800888a:	e004      	b.n	8008896 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800888c:	4b05      	ldr	r3, [pc, #20]	; (80088a4 <USBH_UserProcess+0x58>)
 800888e:	2201      	movs	r2, #1
 8008890:	701a      	strb	r2, [r3, #0]
  break;
 8008892:	e000      	b.n	8008896 <USBH_UserProcess+0x4a>

  default:
  break;
 8008894:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008896:	bf00      	nop
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	20000630 	.word	0x20000630

080088a8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08a      	sub	sp, #40	; 0x28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088b0:	f107 0314 	add.w	r3, r7, #20
 80088b4:	2200      	movs	r2, #0
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	605a      	str	r2, [r3, #4]
 80088ba:	609a      	str	r2, [r3, #8]
 80088bc:	60da      	str	r2, [r3, #12]
 80088be:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088c8:	d147      	bne.n	800895a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088ca:	2300      	movs	r3, #0
 80088cc:	613b      	str	r3, [r7, #16]
 80088ce:	4b25      	ldr	r3, [pc, #148]	; (8008964 <HAL_HCD_MspInit+0xbc>)
 80088d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d2:	4a24      	ldr	r2, [pc, #144]	; (8008964 <HAL_HCD_MspInit+0xbc>)
 80088d4:	f043 0301 	orr.w	r3, r3, #1
 80088d8:	6313      	str	r3, [r2, #48]	; 0x30
 80088da:	4b22      	ldr	r3, [pc, #136]	; (8008964 <HAL_HCD_MspInit+0xbc>)
 80088dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	613b      	str	r3, [r7, #16]
 80088e4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80088e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088ec:	2300      	movs	r3, #0
 80088ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088f0:	2300      	movs	r3, #0
 80088f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80088f4:	f107 0314 	add.w	r3, r7, #20
 80088f8:	4619      	mov	r1, r3
 80088fa:	481b      	ldr	r0, [pc, #108]	; (8008968 <HAL_HCD_MspInit+0xc0>)
 80088fc:	f7f9 fdb2 	bl	8002464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008900:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008906:	2302      	movs	r3, #2
 8008908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800890a:	2300      	movs	r3, #0
 800890c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800890e:	2300      	movs	r3, #0
 8008910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008912:	230a      	movs	r3, #10
 8008914:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008916:	f107 0314 	add.w	r3, r7, #20
 800891a:	4619      	mov	r1, r3
 800891c:	4812      	ldr	r0, [pc, #72]	; (8008968 <HAL_HCD_MspInit+0xc0>)
 800891e:	f7f9 fda1 	bl	8002464 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008922:	4b10      	ldr	r3, [pc, #64]	; (8008964 <HAL_HCD_MspInit+0xbc>)
 8008924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008926:	4a0f      	ldr	r2, [pc, #60]	; (8008964 <HAL_HCD_MspInit+0xbc>)
 8008928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800892c:	6353      	str	r3, [r2, #52]	; 0x34
 800892e:	2300      	movs	r3, #0
 8008930:	60fb      	str	r3, [r7, #12]
 8008932:	4b0c      	ldr	r3, [pc, #48]	; (8008964 <HAL_HCD_MspInit+0xbc>)
 8008934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008936:	4a0b      	ldr	r2, [pc, #44]	; (8008964 <HAL_HCD_MspInit+0xbc>)
 8008938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800893c:	6453      	str	r3, [r2, #68]	; 0x44
 800893e:	4b09      	ldr	r3, [pc, #36]	; (8008964 <HAL_HCD_MspInit+0xbc>)
 8008940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008946:	60fb      	str	r3, [r7, #12]
 8008948:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800894a:	2200      	movs	r2, #0
 800894c:	2100      	movs	r1, #0
 800894e:	2043      	movs	r0, #67	; 0x43
 8008950:	f7f9 f9e1 	bl	8001d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008954:	2043      	movs	r0, #67	; 0x43
 8008956:	f7f9 f9fa 	bl	8001d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800895a:	bf00      	nop
 800895c:	3728      	adds	r7, #40	; 0x28
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	40023800 	.word	0x40023800
 8008968:	40020000 	.word	0x40020000

0800896c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800897a:	4618      	mov	r0, r3
 800897c:	f7fe ffed 	bl	800795a <USBH_LL_IncTimer>
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008996:	4618      	mov	r0, r3
 8008998:	f7ff f825 	bl	80079e6 <USBH_LL_Connect>
}
 800899c:	bf00      	nop
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7ff f82e 	bl	8007a14 <USBH_LL_Disconnect>
}
 80089b8:	bf00      	nop
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	70fb      	strb	r3, [r7, #3]
 80089cc:	4613      	mov	r3, r2
 80089ce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe ffdf 	bl	80079ae <USBH_LL_PortEnabled>
}
 80089f0:	bf00      	nop
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7fe ffdf 	bl	80079ca <USBH_LL_PortDisabled>
}
 8008a0c:	bf00      	nop
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d12a      	bne.n	8008a7c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008a26:	4a18      	ldr	r2, [pc, #96]	; (8008a88 <USBH_LL_Init+0x74>)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a15      	ldr	r2, [pc, #84]	; (8008a88 <USBH_LL_Init+0x74>)
 8008a32:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a36:	4b14      	ldr	r3, [pc, #80]	; (8008a88 <USBH_LL_Init+0x74>)
 8008a38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a3c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008a3e:	4b12      	ldr	r3, [pc, #72]	; (8008a88 <USBH_LL_Init+0x74>)
 8008a40:	2208      	movs	r2, #8
 8008a42:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008a44:	4b10      	ldr	r3, [pc, #64]	; (8008a88 <USBH_LL_Init+0x74>)
 8008a46:	2201      	movs	r2, #1
 8008a48:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a4a:	4b0f      	ldr	r3, [pc, #60]	; (8008a88 <USBH_LL_Init+0x74>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008a50:	4b0d      	ldr	r3, [pc, #52]	; (8008a88 <USBH_LL_Init+0x74>)
 8008a52:	2202      	movs	r2, #2
 8008a54:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a56:	4b0c      	ldr	r3, [pc, #48]	; (8008a88 <USBH_LL_Init+0x74>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008a5c:	480a      	ldr	r0, [pc, #40]	; (8008a88 <USBH_LL_Init+0x74>)
 8008a5e:	f7f9 feb6 	bl	80027ce <HAL_HCD_Init>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d001      	beq.n	8008a6c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008a68:	f7f8 f804 	bl	8000a74 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008a6c:	4806      	ldr	r0, [pc, #24]	; (8008a88 <USBH_LL_Init+0x74>)
 8008a6e:	f7fa fa9a 	bl	8002fa6 <HAL_HCD_GetCurrentFrame>
 8008a72:	4603      	mov	r3, r0
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7fe ff60 	bl	800793c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	20000634 	.word	0x20000634

08008a8c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7fa fa09 	bl	8002eba <HAL_HCD_Start>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f000 f95c 	bl	8008d6c <USBH_Get_USB_Status>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b084      	sub	sp, #16
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fa fa11 	bl	8002f00 <HAL_HCD_Stop>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f000 f941 	bl	8008d6c <USBH_Get_USB_Status>
 8008aea:	4603      	mov	r3, r0
 8008aec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aee:	7bbb      	ldrb	r3, [r7, #14]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008b00:	2301      	movs	r3, #1
 8008b02:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fa fa59 	bl	8002fc2 <HAL_HCD_GetCurrentSpeed>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d00c      	beq.n	8008b30 <USBH_LL_GetSpeed+0x38>
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d80d      	bhi.n	8008b36 <USBH_LL_GetSpeed+0x3e>
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d002      	beq.n	8008b24 <USBH_LL_GetSpeed+0x2c>
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d003      	beq.n	8008b2a <USBH_LL_GetSpeed+0x32>
 8008b22:	e008      	b.n	8008b36 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008b24:	2300      	movs	r3, #0
 8008b26:	73fb      	strb	r3, [r7, #15]
    break;
 8008b28:	e008      	b.n	8008b3c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b2e:	e005      	b.n	8008b3c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008b30:	2302      	movs	r3, #2
 8008b32:	73fb      	strb	r3, [r7, #15]
    break;
 8008b34:	e002      	b.n	8008b3c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008b36:	2301      	movs	r3, #1
 8008b38:	73fb      	strb	r3, [r7, #15]
    break;
 8008b3a:	bf00      	nop
  }
  return  speed;
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7fa f9ec 	bl	8002f3a <HAL_HCD_ResetPort>
 8008b62:	4603      	mov	r3, r0
 8008b64:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f000 f8ff 	bl	8008d6c <USBH_Get_USB_Status>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b72:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	460b      	mov	r3, r1
 8008b86:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b8e:	78fa      	ldrb	r2, [r7, #3]
 8008b90:	4611      	mov	r1, r2
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fa f9f3 	bl	8002f7e <HAL_HCD_HC_GetXferCount>
 8008b98:	4603      	mov	r3, r0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008ba2:	b590      	push	{r4, r7, lr}
 8008ba4:	b089      	sub	sp, #36	; 0x24
 8008ba6:	af04      	add	r7, sp, #16
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	4608      	mov	r0, r1
 8008bac:	4611      	mov	r1, r2
 8008bae:	461a      	mov	r2, r3
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	70fb      	strb	r3, [r7, #3]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70bb      	strb	r3, [r7, #2]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008bca:	787c      	ldrb	r4, [r7, #1]
 8008bcc:	78ba      	ldrb	r2, [r7, #2]
 8008bce:	78f9      	ldrb	r1, [r7, #3]
 8008bd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bd2:	9302      	str	r3, [sp, #8]
 8008bd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008bd8:	9301      	str	r3, [sp, #4]
 8008bda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bde:	9300      	str	r3, [sp, #0]
 8008be0:	4623      	mov	r3, r4
 8008be2:	f7f9 fe56 	bl	8002892 <HAL_HCD_HC_Init>
 8008be6:	4603      	mov	r3, r0
 8008be8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 f8bd 	bl	8008d6c <USBH_Get_USB_Status>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd90      	pop	{r4, r7, pc}

08008c00 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c1a:	78fa      	ldrb	r2, [r7, #3]
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7f9 fec6 	bl	80029b0 <HAL_HCD_HC_Halt>
 8008c24:	4603      	mov	r3, r0
 8008c26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 f89e 	bl	8008d6c <USBH_Get_USB_Status>
 8008c30:	4603      	mov	r3, r0
 8008c32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008c3e:	b590      	push	{r4, r7, lr}
 8008c40:	b089      	sub	sp, #36	; 0x24
 8008c42:	af04      	add	r7, sp, #16
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	4608      	mov	r0, r1
 8008c48:	4611      	mov	r1, r2
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	70fb      	strb	r3, [r7, #3]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70bb      	strb	r3, [r7, #2]
 8008c54:	4613      	mov	r3, r2
 8008c56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c66:	787c      	ldrb	r4, [r7, #1]
 8008c68:	78ba      	ldrb	r2, [r7, #2]
 8008c6a:	78f9      	ldrb	r1, [r7, #3]
 8008c6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c70:	9303      	str	r3, [sp, #12]
 8008c72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c74:	9302      	str	r3, [sp, #8]
 8008c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c78:	9301      	str	r3, [sp, #4]
 8008c7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	4623      	mov	r3, r4
 8008c82:	f7f9 feb9 	bl	80029f8 <HAL_HCD_HC_SubmitRequest>
 8008c86:	4603      	mov	r3, r0
 8008c88:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 f86d 	bl	8008d6c <USBH_Get_USB_Status>
 8008c92:	4603      	mov	r3, r0
 8008c94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c96:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd90      	pop	{r4, r7, pc}

08008ca0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cb2:	78fa      	ldrb	r2, [r7, #3]
 8008cb4:	4611      	mov	r1, r2
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fa f94d 	bl	8002f56 <HAL_HCD_HC_GetURBState>
 8008cbc:	4603      	mov	r3, r0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b082      	sub	sp, #8
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	460b      	mov	r3, r1
 8008cd0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d103      	bne.n	8008ce4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008cdc:	78fb      	ldrb	r3, [r7, #3]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 f870 	bl	8008dc4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008ce4:	20c8      	movs	r0, #200	; 0xc8
 8008ce6:	f7f8 f98b 	bl	8001000 <HAL_Delay>
  return USBH_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	70fb      	strb	r3, [r7, #3]
 8008d00:	4613      	mov	r3, r2
 8008d02:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d0a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008d0c:	78fb      	ldrb	r3, [r7, #3]
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	212c      	movs	r1, #44	; 0x2c
 8008d12:	fb01 f303 	mul.w	r3, r1, r3
 8008d16:	4413      	add	r3, r2
 8008d18:	333b      	adds	r3, #59	; 0x3b
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d009      	beq.n	8008d34 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008d20:	78fb      	ldrb	r3, [r7, #3]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	212c      	movs	r1, #44	; 0x2c
 8008d26:	fb01 f303 	mul.w	r3, r1, r3
 8008d2a:	4413      	add	r3, r2
 8008d2c:	3354      	adds	r3, #84	; 0x54
 8008d2e:	78ba      	ldrb	r2, [r7, #2]
 8008d30:	701a      	strb	r2, [r3, #0]
 8008d32:	e008      	b.n	8008d46 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008d34:	78fb      	ldrb	r3, [r7, #3]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	212c      	movs	r1, #44	; 0x2c
 8008d3a:	fb01 f303 	mul.w	r3, r1, r3
 8008d3e:	4413      	add	r3, r2
 8008d40:	3355      	adds	r3, #85	; 0x55
 8008d42:	78ba      	ldrb	r2, [r7, #2]
 8008d44:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3714      	adds	r7, #20
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f7f8 f94f 	bl	8001000 <HAL_Delay>
}
 8008d62:	bf00      	nop
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
	...

08008d6c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	4603      	mov	r3, r0
 8008d74:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d7a:	79fb      	ldrb	r3, [r7, #7]
 8008d7c:	2b03      	cmp	r3, #3
 8008d7e:	d817      	bhi.n	8008db0 <USBH_Get_USB_Status+0x44>
 8008d80:	a201      	add	r2, pc, #4	; (adr r2, 8008d88 <USBH_Get_USB_Status+0x1c>)
 8008d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d86:	bf00      	nop
 8008d88:	08008d99 	.word	0x08008d99
 8008d8c:	08008d9f 	.word	0x08008d9f
 8008d90:	08008da5 	.word	0x08008da5
 8008d94:	08008dab 	.word	0x08008dab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d9c:	e00b      	b.n	8008db6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008d9e:	2302      	movs	r3, #2
 8008da0:	73fb      	strb	r3, [r7, #15]
    break;
 8008da2:	e008      	b.n	8008db6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008da4:	2301      	movs	r3, #1
 8008da6:	73fb      	strb	r3, [r7, #15]
    break;
 8008da8:	e005      	b.n	8008db6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008daa:	2302      	movs	r3, #2
 8008dac:	73fb      	strb	r3, [r7, #15]
    break;
 8008dae:	e002      	b.n	8008db6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008db0:	2302      	movs	r3, #2
 8008db2:	73fb      	strb	r3, [r7, #15]
    break;
 8008db4:	bf00      	nop
  }
  return usb_status;
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	4603      	mov	r3, r0
 8008dcc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008dce:	79fb      	ldrb	r3, [r7, #7]
 8008dd0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008dd2:	79fb      	ldrb	r3, [r7, #7]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d102      	bne.n	8008dde <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73fb      	strb	r3, [r7, #15]
 8008ddc:	e001      	b.n	8008de2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008dde:	2301      	movs	r3, #1
 8008de0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
 8008de4:	461a      	mov	r2, r3
 8008de6:	2101      	movs	r1, #1
 8008de8:	4803      	ldr	r0, [pc, #12]	; (8008df8 <MX_DriverVbusFS+0x34>)
 8008dea:	f7f9 fcd7 	bl	800279c <HAL_GPIO_WritePin>
}
 8008dee:	bf00      	nop
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	40020800 	.word	0x40020800

08008dfc <__errno>:
 8008dfc:	4b01      	ldr	r3, [pc, #4]	; (8008e04 <__errno+0x8>)
 8008dfe:	6818      	ldr	r0, [r3, #0]
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	2000002c 	.word	0x2000002c

08008e08 <__libc_init_array>:
 8008e08:	b570      	push	{r4, r5, r6, lr}
 8008e0a:	4d0d      	ldr	r5, [pc, #52]	; (8008e40 <__libc_init_array+0x38>)
 8008e0c:	4c0d      	ldr	r4, [pc, #52]	; (8008e44 <__libc_init_array+0x3c>)
 8008e0e:	1b64      	subs	r4, r4, r5
 8008e10:	10a4      	asrs	r4, r4, #2
 8008e12:	2600      	movs	r6, #0
 8008e14:	42a6      	cmp	r6, r4
 8008e16:	d109      	bne.n	8008e2c <__libc_init_array+0x24>
 8008e18:	4d0b      	ldr	r5, [pc, #44]	; (8008e48 <__libc_init_array+0x40>)
 8008e1a:	4c0c      	ldr	r4, [pc, #48]	; (8008e4c <__libc_init_array+0x44>)
 8008e1c:	f000 f92e 	bl	800907c <_init>
 8008e20:	1b64      	subs	r4, r4, r5
 8008e22:	10a4      	asrs	r4, r4, #2
 8008e24:	2600      	movs	r6, #0
 8008e26:	42a6      	cmp	r6, r4
 8008e28:	d105      	bne.n	8008e36 <__libc_init_array+0x2e>
 8008e2a:	bd70      	pop	{r4, r5, r6, pc}
 8008e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e30:	4798      	blx	r3
 8008e32:	3601      	adds	r6, #1
 8008e34:	e7ee      	b.n	8008e14 <__libc_init_array+0xc>
 8008e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e3a:	4798      	blx	r3
 8008e3c:	3601      	adds	r6, #1
 8008e3e:	e7f2      	b.n	8008e26 <__libc_init_array+0x1e>
 8008e40:	080090c0 	.word	0x080090c0
 8008e44:	080090c0 	.word	0x080090c0
 8008e48:	080090c0 	.word	0x080090c0
 8008e4c:	080090c4 	.word	0x080090c4

08008e50 <malloc>:
 8008e50:	4b02      	ldr	r3, [pc, #8]	; (8008e5c <malloc+0xc>)
 8008e52:	4601      	mov	r1, r0
 8008e54:	6818      	ldr	r0, [r3, #0]
 8008e56:	f000 b87f 	b.w	8008f58 <_malloc_r>
 8008e5a:	bf00      	nop
 8008e5c:	2000002c 	.word	0x2000002c

08008e60 <free>:
 8008e60:	4b02      	ldr	r3, [pc, #8]	; (8008e6c <free+0xc>)
 8008e62:	4601      	mov	r1, r0
 8008e64:	6818      	ldr	r0, [r3, #0]
 8008e66:	f000 b80b 	b.w	8008e80 <_free_r>
 8008e6a:	bf00      	nop
 8008e6c:	2000002c 	.word	0x2000002c

08008e70 <memset>:
 8008e70:	4402      	add	r2, r0
 8008e72:	4603      	mov	r3, r0
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d100      	bne.n	8008e7a <memset+0xa>
 8008e78:	4770      	bx	lr
 8008e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e7e:	e7f9      	b.n	8008e74 <memset+0x4>

08008e80 <_free_r>:
 8008e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e82:	2900      	cmp	r1, #0
 8008e84:	d044      	beq.n	8008f10 <_free_r+0x90>
 8008e86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e8a:	9001      	str	r0, [sp, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f1a1 0404 	sub.w	r4, r1, #4
 8008e92:	bfb8      	it	lt
 8008e94:	18e4      	addlt	r4, r4, r3
 8008e96:	f000 f8e3 	bl	8009060 <__malloc_lock>
 8008e9a:	4a1e      	ldr	r2, [pc, #120]	; (8008f14 <_free_r+0x94>)
 8008e9c:	9801      	ldr	r0, [sp, #4]
 8008e9e:	6813      	ldr	r3, [r2, #0]
 8008ea0:	b933      	cbnz	r3, 8008eb0 <_free_r+0x30>
 8008ea2:	6063      	str	r3, [r4, #4]
 8008ea4:	6014      	str	r4, [r2, #0]
 8008ea6:	b003      	add	sp, #12
 8008ea8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008eac:	f000 b8de 	b.w	800906c <__malloc_unlock>
 8008eb0:	42a3      	cmp	r3, r4
 8008eb2:	d908      	bls.n	8008ec6 <_free_r+0x46>
 8008eb4:	6825      	ldr	r5, [r4, #0]
 8008eb6:	1961      	adds	r1, r4, r5
 8008eb8:	428b      	cmp	r3, r1
 8008eba:	bf01      	itttt	eq
 8008ebc:	6819      	ldreq	r1, [r3, #0]
 8008ebe:	685b      	ldreq	r3, [r3, #4]
 8008ec0:	1949      	addeq	r1, r1, r5
 8008ec2:	6021      	streq	r1, [r4, #0]
 8008ec4:	e7ed      	b.n	8008ea2 <_free_r+0x22>
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	b10b      	cbz	r3, 8008ed0 <_free_r+0x50>
 8008ecc:	42a3      	cmp	r3, r4
 8008ece:	d9fa      	bls.n	8008ec6 <_free_r+0x46>
 8008ed0:	6811      	ldr	r1, [r2, #0]
 8008ed2:	1855      	adds	r5, r2, r1
 8008ed4:	42a5      	cmp	r5, r4
 8008ed6:	d10b      	bne.n	8008ef0 <_free_r+0x70>
 8008ed8:	6824      	ldr	r4, [r4, #0]
 8008eda:	4421      	add	r1, r4
 8008edc:	1854      	adds	r4, r2, r1
 8008ede:	42a3      	cmp	r3, r4
 8008ee0:	6011      	str	r1, [r2, #0]
 8008ee2:	d1e0      	bne.n	8008ea6 <_free_r+0x26>
 8008ee4:	681c      	ldr	r4, [r3, #0]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	6053      	str	r3, [r2, #4]
 8008eea:	4421      	add	r1, r4
 8008eec:	6011      	str	r1, [r2, #0]
 8008eee:	e7da      	b.n	8008ea6 <_free_r+0x26>
 8008ef0:	d902      	bls.n	8008ef8 <_free_r+0x78>
 8008ef2:	230c      	movs	r3, #12
 8008ef4:	6003      	str	r3, [r0, #0]
 8008ef6:	e7d6      	b.n	8008ea6 <_free_r+0x26>
 8008ef8:	6825      	ldr	r5, [r4, #0]
 8008efa:	1961      	adds	r1, r4, r5
 8008efc:	428b      	cmp	r3, r1
 8008efe:	bf04      	itt	eq
 8008f00:	6819      	ldreq	r1, [r3, #0]
 8008f02:	685b      	ldreq	r3, [r3, #4]
 8008f04:	6063      	str	r3, [r4, #4]
 8008f06:	bf04      	itt	eq
 8008f08:	1949      	addeq	r1, r1, r5
 8008f0a:	6021      	streq	r1, [r4, #0]
 8008f0c:	6054      	str	r4, [r2, #4]
 8008f0e:	e7ca      	b.n	8008ea6 <_free_r+0x26>
 8008f10:	b003      	add	sp, #12
 8008f12:	bd30      	pop	{r4, r5, pc}
 8008f14:	20000938 	.word	0x20000938

08008f18 <sbrk_aligned>:
 8008f18:	b570      	push	{r4, r5, r6, lr}
 8008f1a:	4e0e      	ldr	r6, [pc, #56]	; (8008f54 <sbrk_aligned+0x3c>)
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	6831      	ldr	r1, [r6, #0]
 8008f20:	4605      	mov	r5, r0
 8008f22:	b911      	cbnz	r1, 8008f2a <sbrk_aligned+0x12>
 8008f24:	f000 f88c 	bl	8009040 <_sbrk_r>
 8008f28:	6030      	str	r0, [r6, #0]
 8008f2a:	4621      	mov	r1, r4
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	f000 f887 	bl	8009040 <_sbrk_r>
 8008f32:	1c43      	adds	r3, r0, #1
 8008f34:	d00a      	beq.n	8008f4c <sbrk_aligned+0x34>
 8008f36:	1cc4      	adds	r4, r0, #3
 8008f38:	f024 0403 	bic.w	r4, r4, #3
 8008f3c:	42a0      	cmp	r0, r4
 8008f3e:	d007      	beq.n	8008f50 <sbrk_aligned+0x38>
 8008f40:	1a21      	subs	r1, r4, r0
 8008f42:	4628      	mov	r0, r5
 8008f44:	f000 f87c 	bl	8009040 <_sbrk_r>
 8008f48:	3001      	adds	r0, #1
 8008f4a:	d101      	bne.n	8008f50 <sbrk_aligned+0x38>
 8008f4c:	f04f 34ff 	mov.w	r4, #4294967295
 8008f50:	4620      	mov	r0, r4
 8008f52:	bd70      	pop	{r4, r5, r6, pc}
 8008f54:	2000093c 	.word	0x2000093c

08008f58 <_malloc_r>:
 8008f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f5c:	1ccd      	adds	r5, r1, #3
 8008f5e:	f025 0503 	bic.w	r5, r5, #3
 8008f62:	3508      	adds	r5, #8
 8008f64:	2d0c      	cmp	r5, #12
 8008f66:	bf38      	it	cc
 8008f68:	250c      	movcc	r5, #12
 8008f6a:	2d00      	cmp	r5, #0
 8008f6c:	4607      	mov	r7, r0
 8008f6e:	db01      	blt.n	8008f74 <_malloc_r+0x1c>
 8008f70:	42a9      	cmp	r1, r5
 8008f72:	d905      	bls.n	8008f80 <_malloc_r+0x28>
 8008f74:	230c      	movs	r3, #12
 8008f76:	603b      	str	r3, [r7, #0]
 8008f78:	2600      	movs	r6, #0
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f80:	4e2e      	ldr	r6, [pc, #184]	; (800903c <_malloc_r+0xe4>)
 8008f82:	f000 f86d 	bl	8009060 <__malloc_lock>
 8008f86:	6833      	ldr	r3, [r6, #0]
 8008f88:	461c      	mov	r4, r3
 8008f8a:	bb34      	cbnz	r4, 8008fda <_malloc_r+0x82>
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	4638      	mov	r0, r7
 8008f90:	f7ff ffc2 	bl	8008f18 <sbrk_aligned>
 8008f94:	1c43      	adds	r3, r0, #1
 8008f96:	4604      	mov	r4, r0
 8008f98:	d14d      	bne.n	8009036 <_malloc_r+0xde>
 8008f9a:	6834      	ldr	r4, [r6, #0]
 8008f9c:	4626      	mov	r6, r4
 8008f9e:	2e00      	cmp	r6, #0
 8008fa0:	d140      	bne.n	8009024 <_malloc_r+0xcc>
 8008fa2:	6823      	ldr	r3, [r4, #0]
 8008fa4:	4631      	mov	r1, r6
 8008fa6:	4638      	mov	r0, r7
 8008fa8:	eb04 0803 	add.w	r8, r4, r3
 8008fac:	f000 f848 	bl	8009040 <_sbrk_r>
 8008fb0:	4580      	cmp	r8, r0
 8008fb2:	d13a      	bne.n	800902a <_malloc_r+0xd2>
 8008fb4:	6821      	ldr	r1, [r4, #0]
 8008fb6:	3503      	adds	r5, #3
 8008fb8:	1a6d      	subs	r5, r5, r1
 8008fba:	f025 0503 	bic.w	r5, r5, #3
 8008fbe:	3508      	adds	r5, #8
 8008fc0:	2d0c      	cmp	r5, #12
 8008fc2:	bf38      	it	cc
 8008fc4:	250c      	movcc	r5, #12
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	4638      	mov	r0, r7
 8008fca:	f7ff ffa5 	bl	8008f18 <sbrk_aligned>
 8008fce:	3001      	adds	r0, #1
 8008fd0:	d02b      	beq.n	800902a <_malloc_r+0xd2>
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	442b      	add	r3, r5
 8008fd6:	6023      	str	r3, [r4, #0]
 8008fd8:	e00e      	b.n	8008ff8 <_malloc_r+0xa0>
 8008fda:	6822      	ldr	r2, [r4, #0]
 8008fdc:	1b52      	subs	r2, r2, r5
 8008fde:	d41e      	bmi.n	800901e <_malloc_r+0xc6>
 8008fe0:	2a0b      	cmp	r2, #11
 8008fe2:	d916      	bls.n	8009012 <_malloc_r+0xba>
 8008fe4:	1961      	adds	r1, r4, r5
 8008fe6:	42a3      	cmp	r3, r4
 8008fe8:	6025      	str	r5, [r4, #0]
 8008fea:	bf18      	it	ne
 8008fec:	6059      	strne	r1, [r3, #4]
 8008fee:	6863      	ldr	r3, [r4, #4]
 8008ff0:	bf08      	it	eq
 8008ff2:	6031      	streq	r1, [r6, #0]
 8008ff4:	5162      	str	r2, [r4, r5]
 8008ff6:	604b      	str	r3, [r1, #4]
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	f104 060b 	add.w	r6, r4, #11
 8008ffe:	f000 f835 	bl	800906c <__malloc_unlock>
 8009002:	f026 0607 	bic.w	r6, r6, #7
 8009006:	1d23      	adds	r3, r4, #4
 8009008:	1af2      	subs	r2, r6, r3
 800900a:	d0b6      	beq.n	8008f7a <_malloc_r+0x22>
 800900c:	1b9b      	subs	r3, r3, r6
 800900e:	50a3      	str	r3, [r4, r2]
 8009010:	e7b3      	b.n	8008f7a <_malloc_r+0x22>
 8009012:	6862      	ldr	r2, [r4, #4]
 8009014:	42a3      	cmp	r3, r4
 8009016:	bf0c      	ite	eq
 8009018:	6032      	streq	r2, [r6, #0]
 800901a:	605a      	strne	r2, [r3, #4]
 800901c:	e7ec      	b.n	8008ff8 <_malloc_r+0xa0>
 800901e:	4623      	mov	r3, r4
 8009020:	6864      	ldr	r4, [r4, #4]
 8009022:	e7b2      	b.n	8008f8a <_malloc_r+0x32>
 8009024:	4634      	mov	r4, r6
 8009026:	6876      	ldr	r6, [r6, #4]
 8009028:	e7b9      	b.n	8008f9e <_malloc_r+0x46>
 800902a:	230c      	movs	r3, #12
 800902c:	603b      	str	r3, [r7, #0]
 800902e:	4638      	mov	r0, r7
 8009030:	f000 f81c 	bl	800906c <__malloc_unlock>
 8009034:	e7a1      	b.n	8008f7a <_malloc_r+0x22>
 8009036:	6025      	str	r5, [r4, #0]
 8009038:	e7de      	b.n	8008ff8 <_malloc_r+0xa0>
 800903a:	bf00      	nop
 800903c:	20000938 	.word	0x20000938

08009040 <_sbrk_r>:
 8009040:	b538      	push	{r3, r4, r5, lr}
 8009042:	4d06      	ldr	r5, [pc, #24]	; (800905c <_sbrk_r+0x1c>)
 8009044:	2300      	movs	r3, #0
 8009046:	4604      	mov	r4, r0
 8009048:	4608      	mov	r0, r1
 800904a:	602b      	str	r3, [r5, #0]
 800904c:	f7f7 fef4 	bl	8000e38 <_sbrk>
 8009050:	1c43      	adds	r3, r0, #1
 8009052:	d102      	bne.n	800905a <_sbrk_r+0x1a>
 8009054:	682b      	ldr	r3, [r5, #0]
 8009056:	b103      	cbz	r3, 800905a <_sbrk_r+0x1a>
 8009058:	6023      	str	r3, [r4, #0]
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	20000940 	.word	0x20000940

08009060 <__malloc_lock>:
 8009060:	4801      	ldr	r0, [pc, #4]	; (8009068 <__malloc_lock+0x8>)
 8009062:	f000 b809 	b.w	8009078 <__retarget_lock_acquire_recursive>
 8009066:	bf00      	nop
 8009068:	20000944 	.word	0x20000944

0800906c <__malloc_unlock>:
 800906c:	4801      	ldr	r0, [pc, #4]	; (8009074 <__malloc_unlock+0x8>)
 800906e:	f000 b804 	b.w	800907a <__retarget_lock_release_recursive>
 8009072:	bf00      	nop
 8009074:	20000944 	.word	0x20000944

08009078 <__retarget_lock_acquire_recursive>:
 8009078:	4770      	bx	lr

0800907a <__retarget_lock_release_recursive>:
 800907a:	4770      	bx	lr

0800907c <_init>:
 800907c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907e:	bf00      	nop
 8009080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009082:	bc08      	pop	{r3}
 8009084:	469e      	mov	lr, r3
 8009086:	4770      	bx	lr

08009088 <_fini>:
 8009088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800908a:	bf00      	nop
 800908c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800908e:	bc08      	pop	{r3}
 8009090:	469e      	mov	lr, r3
 8009092:	4770      	bx	lr
