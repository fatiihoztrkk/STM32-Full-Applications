
WatchDog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08009938  08009938  00019938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800995c  0800995c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800995c  0800995c  0001995c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009964  08009964  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009964  08009964  00019964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009968  08009968  00019968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800996c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008d4  20000090  20000090  00020090  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000964  20000964  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018c3c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e76  00000000  00000000  00038cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  0003cb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011b0  00000000  00000000  0003dec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002524f  00000000  00000000  0003f078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ab8b  00000000  00000000  000642c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8488  00000000  00000000  0007ee52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001572da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005344  00000000  00000000  0015732c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009920 	.word	0x08009920

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009920 	.word	0x08009920

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_uldivmod>:
 8000964:	b953      	cbnz	r3, 800097c <__aeabi_uldivmod+0x18>
 8000966:	b94a      	cbnz	r2, 800097c <__aeabi_uldivmod+0x18>
 8000968:	2900      	cmp	r1, #0
 800096a:	bf08      	it	eq
 800096c:	2800      	cmpeq	r0, #0
 800096e:	bf1c      	itt	ne
 8000970:	f04f 31ff 	movne.w	r1, #4294967295
 8000974:	f04f 30ff 	movne.w	r0, #4294967295
 8000978:	f000 b974 	b.w	8000c64 <__aeabi_idiv0>
 800097c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000980:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000984:	f000 f806 	bl	8000994 <__udivmoddi4>
 8000988:	f8dd e004 	ldr.w	lr, [sp, #4]
 800098c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000990:	b004      	add	sp, #16
 8000992:	4770      	bx	lr

08000994 <__udivmoddi4>:
 8000994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000998:	9d08      	ldr	r5, [sp, #32]
 800099a:	4604      	mov	r4, r0
 800099c:	468e      	mov	lr, r1
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d14d      	bne.n	8000a3e <__udivmoddi4+0xaa>
 80009a2:	428a      	cmp	r2, r1
 80009a4:	4694      	mov	ip, r2
 80009a6:	d969      	bls.n	8000a7c <__udivmoddi4+0xe8>
 80009a8:	fab2 f282 	clz	r2, r2
 80009ac:	b152      	cbz	r2, 80009c4 <__udivmoddi4+0x30>
 80009ae:	fa01 f302 	lsl.w	r3, r1, r2
 80009b2:	f1c2 0120 	rsb	r1, r2, #32
 80009b6:	fa20 f101 	lsr.w	r1, r0, r1
 80009ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80009be:	ea41 0e03 	orr.w	lr, r1, r3
 80009c2:	4094      	lsls	r4, r2
 80009c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c8:	0c21      	lsrs	r1, r4, #16
 80009ca:	fbbe f6f8 	udiv	r6, lr, r8
 80009ce:	fa1f f78c 	uxth.w	r7, ip
 80009d2:	fb08 e316 	mls	r3, r8, r6, lr
 80009d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009da:	fb06 f107 	mul.w	r1, r6, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d90a      	bls.n	80009f8 <__udivmoddi4+0x64>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80009ea:	f080 811f 	bcs.w	8000c2c <__udivmoddi4+0x298>
 80009ee:	4299      	cmp	r1, r3
 80009f0:	f240 811c 	bls.w	8000c2c <__udivmoddi4+0x298>
 80009f4:	3e02      	subs	r6, #2
 80009f6:	4463      	add	r3, ip
 80009f8:	1a5b      	subs	r3, r3, r1
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3310 	mls	r3, r8, r0, r3
 8000a04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a08:	fb00 f707 	mul.w	r7, r0, r7
 8000a0c:	42a7      	cmp	r7, r4
 8000a0e:	d90a      	bls.n	8000a26 <__udivmoddi4+0x92>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a18:	f080 810a 	bcs.w	8000c30 <__udivmoddi4+0x29c>
 8000a1c:	42a7      	cmp	r7, r4
 8000a1e:	f240 8107 	bls.w	8000c30 <__udivmoddi4+0x29c>
 8000a22:	4464      	add	r4, ip
 8000a24:	3802      	subs	r0, #2
 8000a26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a2a:	1be4      	subs	r4, r4, r7
 8000a2c:	2600      	movs	r6, #0
 8000a2e:	b11d      	cbz	r5, 8000a38 <__udivmoddi4+0xa4>
 8000a30:	40d4      	lsrs	r4, r2
 8000a32:	2300      	movs	r3, #0
 8000a34:	e9c5 4300 	strd	r4, r3, [r5]
 8000a38:	4631      	mov	r1, r6
 8000a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3e:	428b      	cmp	r3, r1
 8000a40:	d909      	bls.n	8000a56 <__udivmoddi4+0xc2>
 8000a42:	2d00      	cmp	r5, #0
 8000a44:	f000 80ef 	beq.w	8000c26 <__udivmoddi4+0x292>
 8000a48:	2600      	movs	r6, #0
 8000a4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a4e:	4630      	mov	r0, r6
 8000a50:	4631      	mov	r1, r6
 8000a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a56:	fab3 f683 	clz	r6, r3
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d14a      	bne.n	8000af4 <__udivmoddi4+0x160>
 8000a5e:	428b      	cmp	r3, r1
 8000a60:	d302      	bcc.n	8000a68 <__udivmoddi4+0xd4>
 8000a62:	4282      	cmp	r2, r0
 8000a64:	f200 80f9 	bhi.w	8000c5a <__udivmoddi4+0x2c6>
 8000a68:	1a84      	subs	r4, r0, r2
 8000a6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a6e:	2001      	movs	r0, #1
 8000a70:	469e      	mov	lr, r3
 8000a72:	2d00      	cmp	r5, #0
 8000a74:	d0e0      	beq.n	8000a38 <__udivmoddi4+0xa4>
 8000a76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a7a:	e7dd      	b.n	8000a38 <__udivmoddi4+0xa4>
 8000a7c:	b902      	cbnz	r2, 8000a80 <__udivmoddi4+0xec>
 8000a7e:	deff      	udf	#255	; 0xff
 8000a80:	fab2 f282 	clz	r2, r2
 8000a84:	2a00      	cmp	r2, #0
 8000a86:	f040 8092 	bne.w	8000bae <__udivmoddi4+0x21a>
 8000a8a:	eba1 010c 	sub.w	r1, r1, ip
 8000a8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a92:	fa1f fe8c 	uxth.w	lr, ip
 8000a96:	2601      	movs	r6, #1
 8000a98:	0c20      	lsrs	r0, r4, #16
 8000a9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000aa2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000aa6:	fb0e f003 	mul.w	r0, lr, r3
 8000aaa:	4288      	cmp	r0, r1
 8000aac:	d908      	bls.n	8000ac0 <__udivmoddi4+0x12c>
 8000aae:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ab6:	d202      	bcs.n	8000abe <__udivmoddi4+0x12a>
 8000ab8:	4288      	cmp	r0, r1
 8000aba:	f200 80cb 	bhi.w	8000c54 <__udivmoddi4+0x2c0>
 8000abe:	4643      	mov	r3, r8
 8000ac0:	1a09      	subs	r1, r1, r0
 8000ac2:	b2a4      	uxth	r4, r4
 8000ac4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ac8:	fb07 1110 	mls	r1, r7, r0, r1
 8000acc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ad0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ad4:	45a6      	cmp	lr, r4
 8000ad6:	d908      	bls.n	8000aea <__udivmoddi4+0x156>
 8000ad8:	eb1c 0404 	adds.w	r4, ip, r4
 8000adc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ae0:	d202      	bcs.n	8000ae8 <__udivmoddi4+0x154>
 8000ae2:	45a6      	cmp	lr, r4
 8000ae4:	f200 80bb 	bhi.w	8000c5e <__udivmoddi4+0x2ca>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	eba4 040e 	sub.w	r4, r4, lr
 8000aee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000af2:	e79c      	b.n	8000a2e <__udivmoddi4+0x9a>
 8000af4:	f1c6 0720 	rsb	r7, r6, #32
 8000af8:	40b3      	lsls	r3, r6
 8000afa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000afe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b02:	fa20 f407 	lsr.w	r4, r0, r7
 8000b06:	fa01 f306 	lsl.w	r3, r1, r6
 8000b0a:	431c      	orrs	r4, r3
 8000b0c:	40f9      	lsrs	r1, r7
 8000b0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b12:	fa00 f306 	lsl.w	r3, r0, r6
 8000b16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b1a:	0c20      	lsrs	r0, r4, #16
 8000b1c:	fa1f fe8c 	uxth.w	lr, ip
 8000b20:	fb09 1118 	mls	r1, r9, r8, r1
 8000b24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b28:	fb08 f00e 	mul.w	r0, r8, lr
 8000b2c:	4288      	cmp	r0, r1
 8000b2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b32:	d90b      	bls.n	8000b4c <__udivmoddi4+0x1b8>
 8000b34:	eb1c 0101 	adds.w	r1, ip, r1
 8000b38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b3c:	f080 8088 	bcs.w	8000c50 <__udivmoddi4+0x2bc>
 8000b40:	4288      	cmp	r0, r1
 8000b42:	f240 8085 	bls.w	8000c50 <__udivmoddi4+0x2bc>
 8000b46:	f1a8 0802 	sub.w	r8, r8, #2
 8000b4a:	4461      	add	r1, ip
 8000b4c:	1a09      	subs	r1, r1, r0
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b54:	fb09 1110 	mls	r1, r9, r0, r1
 8000b58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	458e      	cmp	lr, r1
 8000b62:	d908      	bls.n	8000b76 <__udivmoddi4+0x1e2>
 8000b64:	eb1c 0101 	adds.w	r1, ip, r1
 8000b68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b6c:	d26c      	bcs.n	8000c48 <__udivmoddi4+0x2b4>
 8000b6e:	458e      	cmp	lr, r1
 8000b70:	d96a      	bls.n	8000c48 <__udivmoddi4+0x2b4>
 8000b72:	3802      	subs	r0, #2
 8000b74:	4461      	add	r1, ip
 8000b76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b7e:	eba1 010e 	sub.w	r1, r1, lr
 8000b82:	42a1      	cmp	r1, r4
 8000b84:	46c8      	mov	r8, r9
 8000b86:	46a6      	mov	lr, r4
 8000b88:	d356      	bcc.n	8000c38 <__udivmoddi4+0x2a4>
 8000b8a:	d053      	beq.n	8000c34 <__udivmoddi4+0x2a0>
 8000b8c:	b15d      	cbz	r5, 8000ba6 <__udivmoddi4+0x212>
 8000b8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000b92:	eb61 010e 	sbc.w	r1, r1, lr
 8000b96:	fa01 f707 	lsl.w	r7, r1, r7
 8000b9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000b9e:	40f1      	lsrs	r1, r6
 8000ba0:	431f      	orrs	r7, r3
 8000ba2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ba6:	2600      	movs	r6, #0
 8000ba8:	4631      	mov	r1, r6
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	f1c2 0320 	rsb	r3, r2, #32
 8000bb2:	40d8      	lsrs	r0, r3
 8000bb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bbc:	4091      	lsls	r1, r2
 8000bbe:	4301      	orrs	r1, r0
 8000bc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc4:	fa1f fe8c 	uxth.w	lr, ip
 8000bc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bcc:	fb07 3610 	mls	r6, r7, r0, r3
 8000bd0:	0c0b      	lsrs	r3, r1, #16
 8000bd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bd6:	fb00 f60e 	mul.w	r6, r0, lr
 8000bda:	429e      	cmp	r6, r3
 8000bdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x260>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bea:	d22f      	bcs.n	8000c4c <__udivmoddi4+0x2b8>
 8000bec:	429e      	cmp	r6, r3
 8000bee:	d92d      	bls.n	8000c4c <__udivmoddi4+0x2b8>
 8000bf0:	3802      	subs	r0, #2
 8000bf2:	4463      	add	r3, ip
 8000bf4:	1b9b      	subs	r3, r3, r6
 8000bf6:	b289      	uxth	r1, r1
 8000bf8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bfc:	fb07 3316 	mls	r3, r7, r6, r3
 8000c00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c04:	fb06 f30e 	mul.w	r3, r6, lr
 8000c08:	428b      	cmp	r3, r1
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x28a>
 8000c0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c10:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c14:	d216      	bcs.n	8000c44 <__udivmoddi4+0x2b0>
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d914      	bls.n	8000c44 <__udivmoddi4+0x2b0>
 8000c1a:	3e02      	subs	r6, #2
 8000c1c:	4461      	add	r1, ip
 8000c1e:	1ac9      	subs	r1, r1, r3
 8000c20:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c24:	e738      	b.n	8000a98 <__udivmoddi4+0x104>
 8000c26:	462e      	mov	r6, r5
 8000c28:	4628      	mov	r0, r5
 8000c2a:	e705      	b.n	8000a38 <__udivmoddi4+0xa4>
 8000c2c:	4606      	mov	r6, r0
 8000c2e:	e6e3      	b.n	80009f8 <__udivmoddi4+0x64>
 8000c30:	4618      	mov	r0, r3
 8000c32:	e6f8      	b.n	8000a26 <__udivmoddi4+0x92>
 8000c34:	454b      	cmp	r3, r9
 8000c36:	d2a9      	bcs.n	8000b8c <__udivmoddi4+0x1f8>
 8000c38:	ebb9 0802 	subs.w	r8, r9, r2
 8000c3c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c40:	3801      	subs	r0, #1
 8000c42:	e7a3      	b.n	8000b8c <__udivmoddi4+0x1f8>
 8000c44:	4646      	mov	r6, r8
 8000c46:	e7ea      	b.n	8000c1e <__udivmoddi4+0x28a>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	e794      	b.n	8000b76 <__udivmoddi4+0x1e2>
 8000c4c:	4640      	mov	r0, r8
 8000c4e:	e7d1      	b.n	8000bf4 <__udivmoddi4+0x260>
 8000c50:	46d0      	mov	r8, sl
 8000c52:	e77b      	b.n	8000b4c <__udivmoddi4+0x1b8>
 8000c54:	3b02      	subs	r3, #2
 8000c56:	4461      	add	r1, ip
 8000c58:	e732      	b.n	8000ac0 <__udivmoddi4+0x12c>
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	e709      	b.n	8000a72 <__udivmoddi4+0xde>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	e742      	b.n	8000aea <__udivmoddi4+0x156>

08000c64 <__aeabi_idiv0>:
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <HAL_ADC_LevelOutOfWindowCallback>:
static void MX_ADC1_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

	    if(hadc->Instance == ADC1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_ADC_LevelOutOfWindowCallback+0x2c>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d108      	bne.n	8000c8c <HAL_ADC_LevelOutOfWindowCallback+0x24>

	    {
	    	flag = 1;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <HAL_ADC_LevelOutOfWindowCallback+0x30>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
	    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 8000c80:	2201      	movs	r2, #1
 8000c82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <HAL_ADC_LevelOutOfWindowCallback+0x34>)
 8000c88:	f002 f9da 	bl	8003040 <HAL_GPIO_WritePin>
	    }
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40012000 	.word	0x40012000
 8000c98:	200000b0 	.word	0x200000b0
 8000c9c:	40020c00 	.word	0x40020c00

08000ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca4:	f000 fd8c 	bl	80017c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca8:	f000 f896 	bl	8000dd8 <SystemClock_Config>

  //ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cac:	f000 fa36 	bl	800111c <MX_GPIO_Init>
  MX_DMA_Init();
 8000cb0:	f000 fa14 	bl	80010dc <MX_DMA_Init>
  MX_I2C1_Init();
 8000cb4:	f000 f97e 	bl	8000fb4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000cb8:	f000 f9aa 	bl	8001010 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000cbc:	f000 f9d8 	bl	8001070 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000cc0:	f008 f9e6 	bl	8009090 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000cc4:	f000 f8f2 	bl	8000eac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)AdcRaw,2);
 8000cc8:	2202      	movs	r2, #2
 8000cca:	493b      	ldr	r1, [pc, #236]	; (8000db8 <main+0x118>)
 8000ccc:	483b      	ldr	r0, [pc, #236]	; (8000dbc <main+0x11c>)
 8000cce:	f000 ff61 	bl	8001b94 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000cd2:	f008 fa03 	bl	80090dc <MX_USB_HOST_Process>

  	if(flag){
 8000cd6:	4b3a      	ldr	r3, [pc, #232]	; (8000dc0 <main+0x120>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <main+0x44>

  		flag = 0;
 8000cde:	4b38      	ldr	r3, [pc, #224]	; (8000dc0 <main+0x120>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
  	}

	VrefInt = (VREFINT*ADCMAX)/AdcRaw[0];
 8000ce4:	4b34      	ldr	r3, [pc, #208]	; (8000db8 <main+0x118>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fbbf 	bl	800046c <__aeabi_i2d>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	a129      	add	r1, pc, #164	; (adr r1, 8000d98 <main+0xf8>)
 8000cf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000cf8:	f7ff fd4c 	bl	8000794 <__aeabi_ddiv>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	460b      	mov	r3, r1
 8000d00:	4930      	ldr	r1, [pc, #192]	; (8000dc4 <main+0x124>)
 8000d02:	e9c1 2300 	strd	r2, r3, [r1]
	VTmpSensor = (VrefInt*AdcRaw[1])/ADCMAX;
 8000d06:	4b2c      	ldr	r3, [pc, #176]	; (8000db8 <main+0x118>)
 8000d08:	885b      	ldrh	r3, [r3, #2]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fbae 	bl	800046c <__aeabi_i2d>
 8000d10:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <main+0x124>)
 8000d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d16:	f7ff fc13 	bl	8000540 <__aeabi_dmul>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	4610      	mov	r0, r2
 8000d20:	4619      	mov	r1, r3
 8000d22:	a31f      	add	r3, pc, #124	; (adr r3, 8000da0 <main+0x100>)
 8000d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d28:	f7ff fd34 	bl	8000794 <__aeabi_ddiv>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	460b      	mov	r3, r1
 8000d30:	4925      	ldr	r1, [pc, #148]	; (8000dc8 <main+0x128>)
 8000d32:	e9c1 2300 	strd	r2, r3, [r1]
	Temp = ((VTmpSensor-V25)/AVG_Slope)+25 ;
 8000d36:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <main+0x128>)
 8000d38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d3c:	a31a      	add	r3, pc, #104	; (adr r3, 8000da8 <main+0x108>)
 8000d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d42:	f7ff fa45 	bl	80001d0 <__aeabi_dsub>
 8000d46:	4602      	mov	r2, r0
 8000d48:	460b      	mov	r3, r1
 8000d4a:	4610      	mov	r0, r2
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	a318      	add	r3, pc, #96	; (adr r3, 8000db0 <main+0x110>)
 8000d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d54:	f7ff fd1e 	bl	8000794 <__aeabi_ddiv>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f04f 0200 	mov.w	r2, #0
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <main+0x12c>)
 8000d66:	f7ff fa35 	bl	80001d4 <__adddf3>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	4918      	ldr	r1, [pc, #96]	; (8000dd0 <main+0x130>)
 8000d70:	e9c1 2300 	strd	r2, r3, [r1]

	if (AdcRaw[1] <1110 && AdcRaw[1] > 250)
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <main+0x118>)
 8000d76:	885b      	ldrh	r3, [r3, #2]
 8000d78:	f240 4255 	movw	r2, #1109	; 0x455
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d8a8      	bhi.n	8000cd2 <main+0x32>
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <main+0x118>)
 8000d82:	885b      	ldrh	r3, [r3, #2]
 8000d84:	2bfa      	cmp	r3, #250	; 0xfa
 8000d86:	d9a4      	bls.n	8000cd2 <main+0x32>
	{
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d8e:	4811      	ldr	r0, [pc, #68]	; (8000dd4 <main+0x134>)
 8000d90:	f002 f956 	bl	8003040 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 8000d94:	e79d      	b.n	8000cd2 <main+0x32>
 8000d96:	bf00      	nop
 8000d98:	33333333 	.word	0x33333333
 8000d9c:	40b35af3 	.word	0x40b35af3
 8000da0:	00000000 	.word	0x00000000
 8000da4:	40affe00 	.word	0x40affe00
 8000da8:	851eb852 	.word	0x851eb852
 8000dac:	3fe851eb 	.word	0x3fe851eb
 8000db0:	47ae147b 	.word	0x47ae147b
 8000db4:	3f647ae1 	.word	0x3f647ae1
 8000db8:	200000ac 	.word	0x200000ac
 8000dbc:	200000d0 	.word	0x200000d0
 8000dc0:	200000b0 	.word	0x200000b0
 8000dc4:	200000b8 	.word	0x200000b8
 8000dc8:	200000c0 	.word	0x200000c0
 8000dcc:	40390000 	.word	0x40390000
 8000dd0:	200000c8 	.word	0x200000c8
 8000dd4:	40020c00 	.word	0x40020c00

08000dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b094      	sub	sp, #80	; 0x50
 8000ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	2230      	movs	r2, #48	; 0x30
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f008 fc94 	bl	8009714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <SystemClock_Config+0xcc>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	4a27      	ldr	r2, [pc, #156]	; (8000ea4 <SystemClock_Config+0xcc>)
 8000e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0c:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <SystemClock_Config+0xcc>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <SystemClock_Config+0xd0>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <SystemClock_Config+0xd0>)
 8000e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <SystemClock_Config+0xd0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e34:	2301      	movs	r3, #1
 8000e36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e48:	2308      	movs	r3, #8
 8000e4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e4c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e52:	2302      	movs	r3, #2
 8000e54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e56:	2307      	movs	r3, #7
 8000e58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f004 faf6 	bl	8005450 <HAL_RCC_OscConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e6a:	f000 fa55 	bl	8001318 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6e:	230f      	movs	r3, #15
 8000e70:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e72:	2302      	movs	r3, #2
 8000e74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	2105      	movs	r1, #5
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f004 fd57 	bl	8005940 <HAL_RCC_ClockConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e98:	f000 fa3e 	bl	8001318 <Error_Handler>
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	3750      	adds	r7, #80	; 0x50
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40007000 	.word	0x40007000

08000eac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]
 8000ec2:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ed0:	4b34      	ldr	r3, [pc, #208]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000ed2:	4a35      	ldr	r2, [pc, #212]	; (8000fa8 <MX_ADC1_Init+0xfc>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ed6:	4b33      	ldr	r3, [pc, #204]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000ed8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000edc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ede:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ee4:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eea:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef0:	4b2c      	ldr	r3, [pc, #176]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ef8:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000efe:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f00:	4a2a      	ldr	r2, [pc, #168]	; (8000fac <MX_ADC1_Init+0x100>)
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000f0a:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f10:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f1e:	4821      	ldr	r0, [pc, #132]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f20:	f000 fce4 	bl	80018ec <HAL_ADC_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8000f2a:	f000 f9f5 	bl	8001318 <Error_Handler>
  }

  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000f2e:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <MX_ADC1_Init+0x104>)
 8000f30:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 1117;
 8000f32:	f240 435d 	movw	r3, #1117	; 0x45d
 8000f36:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.LowThreshold = 1024;
 8000f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f3c:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f3e:	2310      	movs	r3, #16
 8000f40:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.ITMode = ENABLE;
 8000f42:	2301      	movs	r3, #1
 8000f44:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4815      	ldr	r0, [pc, #84]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f50:	f001 f870 	bl	8002034 <HAL_ADC_AnalogWDGConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f5a:	f000 f9dd 	bl	8001318 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000f5e:	2311      	movs	r3, #17
 8000f60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f66:	2307      	movs	r3, #7
 8000f68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f70:	f000 ff3e 	bl	8001df0 <HAL_ADC_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000f7a:	f000 f9cd 	bl	8001318 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f7e:	2310      	movs	r3, #16
 8000f80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f82:	2302      	movs	r3, #2
 8000f84:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f86:	463b      	mov	r3, r7
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f8c:	f000 ff30 	bl	8001df0 <HAL_ADC_ConfigChannel>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000f96:	f000 f9bf 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	3728      	adds	r7, #40	; 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200000d0 	.word	0x200000d0
 8000fa8:	40012000 	.word	0x40012000
 8000fac:	0f000001 	.word	0x0f000001
 8000fb0:	00800200 	.word	0x00800200

08000fb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <MX_I2C1_Init+0x50>)
 8000fba:	4a13      	ldr	r2, [pc, #76]	; (8001008 <MX_I2C1_Init+0x54>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_I2C1_Init+0x50>)
 8000fc0:	4a12      	ldr	r2, [pc, #72]	; (800100c <MX_I2C1_Init+0x58>)
 8000fc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_I2C1_Init+0x50>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <MX_I2C1_Init+0x50>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <MX_I2C1_Init+0x50>)
 8000fd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <MX_I2C1_Init+0x50>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <MX_I2C1_Init+0x50>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <MX_I2C1_Init+0x50>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <MX_I2C1_Init+0x50>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <MX_I2C1_Init+0x50>)
 8000ff2:	f003 fc49 	bl	8004888 <HAL_I2C_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ffc:	f000 f98c 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000178 	.word	0x20000178
 8001008:	40005400 	.word	0x40005400
 800100c:	000186a0 	.word	0x000186a0

08001010 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <MX_I2S3_Init+0x54>)
 8001016:	4a14      	ldr	r2, [pc, #80]	; (8001068 <MX_I2S3_Init+0x58>)
 8001018:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_I2S3_Init+0x54>)
 800101c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001020:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <MX_I2S3_Init+0x54>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_I2S3_Init+0x54>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <MX_I2S3_Init+0x54>)
 8001030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001034:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <MX_I2S3_Init+0x54>)
 8001038:	4a0c      	ldr	r2, [pc, #48]	; (800106c <MX_I2S3_Init+0x5c>)
 800103a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_I2S3_Init+0x54>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <MX_I2S3_Init+0x54>)
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_I2S3_Init+0x54>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_I2S3_Init+0x54>)
 8001050:	f003 fd5e 	bl	8004b10 <HAL_I2S_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800105a:	f000 f95d 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200001cc 	.word	0x200001cc
 8001068:	40003c00 	.word	0x40003c00
 800106c:	00017700 	.word	0x00017700

08001070 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001074:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <MX_SPI1_Init+0x64>)
 8001076:	4a18      	ldr	r2, [pc, #96]	; (80010d8 <MX_SPI1_Init+0x68>)
 8001078:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_SPI1_Init+0x64>)
 800107c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001080:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_SPI1_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_SPI1_Init+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_SPI1_Init+0x64>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_SPI1_Init+0x64>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_SPI1_Init+0x64>)
 800109c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_SPI1_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <MX_SPI1_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_SPI1_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <MX_SPI1_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_SPI1_Init+0x64>)
 80010bc:	220a      	movs	r2, #10
 80010be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_SPI1_Init+0x64>)
 80010c2:	f004 ff89 	bl	8005fd8 <HAL_SPI_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010cc:	f000 f924 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000214 	.word	0x20000214
 80010d8:	40013000 	.word	0x40013000

080010dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_DMA_Init+0x3c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <MX_DMA_Init+0x3c>)
 80010ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_DMA_Init+0x3c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2038      	movs	r0, #56	; 0x38
 8001104:	f001 fa59 	bl	80025ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001108:	2038      	movs	r0, #56	; 0x38
 800110a:	f001 fa72 	bl	80025f2 <HAL_NVIC_EnableIRQ>

}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	4b72      	ldr	r3, [pc, #456]	; (8001300 <MX_GPIO_Init+0x1e4>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a71      	ldr	r2, [pc, #452]	; (8001300 <MX_GPIO_Init+0x1e4>)
 800113c:	f043 0310 	orr.w	r3, r3, #16
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b6f      	ldr	r3, [pc, #444]	; (8001300 <MX_GPIO_Init+0x1e4>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0310 	and.w	r3, r3, #16
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	4b6b      	ldr	r3, [pc, #428]	; (8001300 <MX_GPIO_Init+0x1e4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a6a      	ldr	r2, [pc, #424]	; (8001300 <MX_GPIO_Init+0x1e4>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b68      	ldr	r3, [pc, #416]	; (8001300 <MX_GPIO_Init+0x1e4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	4b64      	ldr	r3, [pc, #400]	; (8001300 <MX_GPIO_Init+0x1e4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a63      	ldr	r2, [pc, #396]	; (8001300 <MX_GPIO_Init+0x1e4>)
 8001174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b61      	ldr	r3, [pc, #388]	; (8001300 <MX_GPIO_Init+0x1e4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b5d      	ldr	r3, [pc, #372]	; (8001300 <MX_GPIO_Init+0x1e4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a5c      	ldr	r2, [pc, #368]	; (8001300 <MX_GPIO_Init+0x1e4>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b5a      	ldr	r3, [pc, #360]	; (8001300 <MX_GPIO_Init+0x1e4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	4b56      	ldr	r3, [pc, #344]	; (8001300 <MX_GPIO_Init+0x1e4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a55      	ldr	r2, [pc, #340]	; (8001300 <MX_GPIO_Init+0x1e4>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b53      	ldr	r3, [pc, #332]	; (8001300 <MX_GPIO_Init+0x1e4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b4f      	ldr	r3, [pc, #316]	; (8001300 <MX_GPIO_Init+0x1e4>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a4e      	ldr	r2, [pc, #312]	; (8001300 <MX_GPIO_Init+0x1e4>)
 80011c8:	f043 0308 	orr.w	r3, r3, #8
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b4c      	ldr	r3, [pc, #304]	; (8001300 <MX_GPIO_Init+0x1e4>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2108      	movs	r1, #8
 80011de:	4849      	ldr	r0, [pc, #292]	; (8001304 <MX_GPIO_Init+0x1e8>)
 80011e0:	f001 ff2e 	bl	8003040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	2101      	movs	r1, #1
 80011e8:	4847      	ldr	r0, [pc, #284]	; (8001308 <MX_GPIO_Init+0x1ec>)
 80011ea:	f001 ff29 	bl	8003040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011ee:	2200      	movs	r2, #0
 80011f0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80011f4:	4845      	ldr	r0, [pc, #276]	; (800130c <MX_GPIO_Init+0x1f0>)
 80011f6:	f001 ff23 	bl	8003040 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80011fa:	2308      	movs	r3, #8
 80011fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4619      	mov	r1, r3
 8001210:	483c      	ldr	r0, [pc, #240]	; (8001304 <MX_GPIO_Init+0x1e8>)
 8001212:	f001 fd79 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001216:	2301      	movs	r3, #1
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	4619      	mov	r1, r3
 800122c:	4836      	ldr	r0, [pc, #216]	; (8001308 <MX_GPIO_Init+0x1ec>)
 800122e:	f001 fd6b 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001232:	2308      	movs	r3, #8
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001242:	2305      	movs	r3, #5
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	482e      	ldr	r0, [pc, #184]	; (8001308 <MX_GPIO_Init+0x1ec>)
 800124e:	f001 fd5b 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001252:	2301      	movs	r3, #1
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001256:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800125a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4619      	mov	r1, r3
 8001266:	482a      	ldr	r0, [pc, #168]	; (8001310 <MX_GPIO_Init+0x1f4>)
 8001268:	f001 fd4e 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800126c:	2304      	movs	r3, #4
 800126e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	4619      	mov	r1, r3
 800127e:	4825      	ldr	r0, [pc, #148]	; (8001314 <MX_GPIO_Init+0x1f8>)
 8001280:	f001 fd42 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001296:	2305      	movs	r3, #5
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	4619      	mov	r1, r3
 80012a0:	481c      	ldr	r0, [pc, #112]	; (8001314 <MX_GPIO_Init+0x1f8>)
 80012a2:	f001 fd31 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012a6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80012aa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	4813      	ldr	r0, [pc, #76]	; (800130c <MX_GPIO_Init+0x1f0>)
 80012c0:	f001 fd22 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80012c4:	2320      	movs	r3, #32
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	4619      	mov	r1, r3
 80012d6:	480d      	ldr	r0, [pc, #52]	; (800130c <MX_GPIO_Init+0x1f0>)
 80012d8:	f001 fd16 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80012dc:	2302      	movs	r3, #2
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012e0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80012e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_GPIO_Init+0x1e8>)
 80012f2:	f001 fd09 	bl	8002d08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012f6:	bf00      	nop
 80012f8:	3730      	adds	r7, #48	; 0x30
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40021000 	.word	0x40021000
 8001308:	40020800 	.word	0x40020800
 800130c:	40020c00 	.word	0x40020c00
 8001310:	40020000 	.word	0x40020000
 8001314:	40020400 	.word	0x40020400

08001318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
}
 800131e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001320:	e7fe      	b.n	8001320 <Error_Handler+0x8>
	...

08001324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_MspInit+0x4c>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	4a0f      	ldr	r2, [pc, #60]	; (8001370 <HAL_MspInit+0x4c>)
 8001334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001338:	6453      	str	r3, [r2, #68]	; 0x44
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <HAL_MspInit+0x4c>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_MspInit+0x4c>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	4a08      	ldr	r2, [pc, #32]	; (8001370 <HAL_MspInit+0x4c>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	6413      	str	r3, [r2, #64]	; 0x40
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_MspInit+0x4c>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001362:	2007      	movs	r0, #7
 8001364:	f001 f91e 	bl	80025a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40023800 	.word	0x40023800

08001374 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a26      	ldr	r2, [pc, #152]	; (800141c <HAL_ADC_MspInit+0xa8>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d145      	bne.n	8001412 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b25      	ldr	r3, [pc, #148]	; (8001420 <HAL_ADC_MspInit+0xac>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	4a24      	ldr	r2, [pc, #144]	; (8001420 <HAL_ADC_MspInit+0xac>)
 8001390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	4b22      	ldr	r3, [pc, #136]	; (8001420 <HAL_ADC_MspInit+0xac>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80013a2:	4b20      	ldr	r3, [pc, #128]	; (8001424 <HAL_ADC_MspInit+0xb0>)
 80013a4:	4a20      	ldr	r2, [pc, #128]	; (8001428 <HAL_ADC_MspInit+0xb4>)
 80013a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80013a8:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <HAL_ADC_MspInit+0xb0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ae:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <HAL_ADC_MspInit+0xb0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <HAL_ADC_MspInit+0xb0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <HAL_ADC_MspInit+0xb0>)
 80013bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_ADC_MspInit+0xb0>)
 80013c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_ADC_MspInit+0xb0>)
 80013cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <HAL_ADC_MspInit+0xb0>)
 80013d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_ADC_MspInit+0xb0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013e0:	4b10      	ldr	r3, [pc, #64]	; (8001424 <HAL_ADC_MspInit+0xb0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013e6:	480f      	ldr	r0, [pc, #60]	; (8001424 <HAL_ADC_MspInit+0xb0>)
 80013e8:	f001 f91e 	bl	8002628 <HAL_DMA_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 80013f2:	f7ff ff91 	bl	8001318 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <HAL_ADC_MspInit+0xb0>)
 80013fa:	639a      	str	r2, [r3, #56]	; 0x38
 80013fc:	4a09      	ldr	r2, [pc, #36]	; (8001424 <HAL_ADC_MspInit+0xb0>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	2012      	movs	r0, #18
 8001408:	f001 f8d7 	bl	80025ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800140c:	2012      	movs	r0, #18
 800140e:	f001 f8f0 	bl	80025f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40012000 	.word	0x40012000
 8001420:	40023800 	.word	0x40023800
 8001424:	20000118 	.word	0x20000118
 8001428:	40026410 	.word	0x40026410

0800142c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a19      	ldr	r2, [pc, #100]	; (80014b0 <HAL_I2C_MspInit+0x84>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d12c      	bne.n	80014a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800146a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800146e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001470:	2312      	movs	r3, #18
 8001472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001474:	2301      	movs	r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800147c:	2304      	movs	r3, #4
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	480c      	ldr	r0, [pc, #48]	; (80014b8 <HAL_I2C_MspInit+0x8c>)
 8001488:	f001 fc3e 	bl	8002d08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 8001496:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800149a:	6413      	str	r3, [r2, #64]	; 0x40
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_I2C_MspInit+0x88>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014a8:	bf00      	nop
 80014aa:	3728      	adds	r7, #40	; 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40005400 	.word	0x40005400
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020400 	.word	0x40020400

080014bc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08e      	sub	sp, #56	; 0x38
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a31      	ldr	r2, [pc, #196]	; (80015ac <HAL_I2S_MspInit+0xf0>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d15a      	bne.n	80015a2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80014ec:	2301      	movs	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80014f0:	23c0      	movs	r3, #192	; 0xc0
 80014f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4618      	mov	r0, r3
 80014fe:	f004 fc2b 	bl	8005d58 <HAL_RCCEx_PeriphCLKConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001508:	f7ff ff06 	bl	8001318 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <HAL_I2S_MspInit+0xf4>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	4a26      	ldr	r2, [pc, #152]	; (80015b0 <HAL_I2S_MspInit+0xf4>)
 8001516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800151a:	6413      	str	r3, [r2, #64]	; 0x40
 800151c:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <HAL_I2S_MspInit+0xf4>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HAL_I2S_MspInit+0xf4>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	4a1f      	ldr	r2, [pc, #124]	; (80015b0 <HAL_I2S_MspInit+0xf4>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6313      	str	r3, [r2, #48]	; 0x30
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_I2S_MspInit+0xf4>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_I2S_MspInit+0xf4>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <HAL_I2S_MspInit+0xf4>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	6313      	str	r3, [r2, #48]	; 0x30
 8001554:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <HAL_I2S_MspInit+0xf4>)
 8001556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001560:	2310      	movs	r3, #16
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001570:	2306      	movs	r3, #6
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001578:	4619      	mov	r1, r3
 800157a:	480e      	ldr	r0, [pc, #56]	; (80015b4 <HAL_I2S_MspInit+0xf8>)
 800157c:	f001 fbc4 	bl	8002d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001580:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001592:	2306      	movs	r3, #6
 8001594:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159a:	4619      	mov	r1, r3
 800159c:	4806      	ldr	r0, [pc, #24]	; (80015b8 <HAL_I2S_MspInit+0xfc>)
 800159e:	f001 fbb3 	bl	8002d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015a2:	bf00      	nop
 80015a4:	3738      	adds	r7, #56	; 0x38
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40003c00 	.word	0x40003c00
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020000 	.word	0x40020000
 80015b8:	40020800 	.word	0x40020800

080015bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a19      	ldr	r2, [pc, #100]	; (8001640 <HAL_SPI_MspInit+0x84>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d12b      	bne.n	8001636 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <HAL_SPI_MspInit+0x88>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	4a17      	ldr	r2, [pc, #92]	; (8001644 <HAL_SPI_MspInit+0x88>)
 80015e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015ec:	6453      	str	r3, [r2, #68]	; 0x44
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_SPI_MspInit+0x88>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_SPI_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a10      	ldr	r2, [pc, #64]	; (8001644 <HAL_SPI_MspInit+0x88>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <HAL_SPI_MspInit+0x88>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001616:	23e0      	movs	r3, #224	; 0xe0
 8001618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001626:	2305      	movs	r3, #5
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	4805      	ldr	r0, [pc, #20]	; (8001648 <HAL_SPI_MspInit+0x8c>)
 8001632:	f001 fb69 	bl	8002d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40013000 	.word	0x40013000
 8001644:	40023800 	.word	0x40023800
 8001648:	40020000 	.word	0x40020000

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <NMI_Handler+0x4>

08001652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <HardFault_Handler+0x4>

08001658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <MemManage_Handler+0x4>

0800165e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <UsageFault_Handler+0x4>

0800166a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001698:	f000 f8e4 	bl	8001864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <ADC_IRQHandler+0x10>)
 80016a6:	f000 f964 	bl	8001972 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200000d0 	.word	0x200000d0

080016b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <DMA2_Stream0_IRQHandler+0x10>)
 80016ba:	f001 f8bb 	bl	8002834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000118 	.word	0x20000118

080016c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <OTG_FS_IRQHandler+0x10>)
 80016ce:	f001 ff3b 	bl	8003548 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000650 	.word	0x20000650

080016dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e4:	4a14      	ldr	r2, [pc, #80]	; (8001738 <_sbrk+0x5c>)
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <_sbrk+0x60>)
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f0:	4b13      	ldr	r3, [pc, #76]	; (8001740 <_sbrk+0x64>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d102      	bne.n	80016fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <_sbrk+0x64>)
 80016fa:	4a12      	ldr	r2, [pc, #72]	; (8001744 <_sbrk+0x68>)
 80016fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	429a      	cmp	r2, r3
 800170a:	d207      	bcs.n	800171c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800170c:	f007 ffc8 	bl	80096a0 <__errno>
 8001710:	4603      	mov	r3, r0
 8001712:	220c      	movs	r2, #12
 8001714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
 800171a:	e009      	b.n	8001730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <_sbrk+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	4a05      	ldr	r2, [pc, #20]	; (8001740 <_sbrk+0x64>)
 800172c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800172e:	68fb      	ldr	r3, [r7, #12]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20020000 	.word	0x20020000
 800173c:	00000400 	.word	0x00000400
 8001740:	2000026c 	.word	0x2000026c
 8001744:	20000968 	.word	0x20000968

08001748 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <SystemInit+0x20>)
 800174e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001752:	4a05      	ldr	r2, [pc, #20]	; (8001768 <SystemInit+0x20>)
 8001754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800176c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001770:	480d      	ldr	r0, [pc, #52]	; (80017a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001772:	490e      	ldr	r1, [pc, #56]	; (80017ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001774:	4a0e      	ldr	r2, [pc, #56]	; (80017b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001778:	e002      	b.n	8001780 <LoopCopyDataInit>

0800177a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800177c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177e:	3304      	adds	r3, #4

08001780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001784:	d3f9      	bcc.n	800177a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001786:	4a0b      	ldr	r2, [pc, #44]	; (80017b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001788:	4c0b      	ldr	r4, [pc, #44]	; (80017b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800178c:	e001      	b.n	8001792 <LoopFillZerobss>

0800178e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001790:	3204      	adds	r2, #4

08001792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001794:	d3fb      	bcc.n	800178e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001796:	f7ff ffd7 	bl	8001748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800179a:	f007 ff87 	bl	80096ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800179e:	f7ff fa7f 	bl	8000ca0 <main>
  bx  lr    
 80017a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ac:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80017b0:	0800996c 	.word	0x0800996c
  ldr r2, =_sbss
 80017b4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80017b8:	20000964 	.word	0x20000964

080017bc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017bc:	e7fe      	b.n	80017bc <CAN1_RX0_IRQHandler>
	...

080017c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_Init+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0d      	ldr	r2, [pc, #52]	; (8001800 <HAL_Init+0x40>)
 80017ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_Init+0x40>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <HAL_Init+0x40>)
 80017d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <HAL_Init+0x40>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a07      	ldr	r2, [pc, #28]	; (8001800 <HAL_Init+0x40>)
 80017e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e8:	2003      	movs	r0, #3
 80017ea:	f000 fedb 	bl	80025a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ee:	2000      	movs	r0, #0
 80017f0:	f000 f808 	bl	8001804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f4:	f7ff fd96 	bl	8001324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023c00 	.word	0x40023c00

08001804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_InitTick+0x54>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_InitTick+0x58>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181a:	fbb3 f3f1 	udiv	r3, r3, r1
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f000 fef3 	bl	800260e <HAL_SYSTICK_Config>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e00e      	b.n	8001850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d80a      	bhi.n	800184e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f000 febb 	bl	80025ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001844:	4a06      	ldr	r2, [pc, #24]	; (8001860 <HAL_InitTick+0x5c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	e000      	b.n	8001850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000000 	.word	0x20000000
 800185c:	20000008 	.word	0x20000008
 8001860:	20000004 	.word	0x20000004

08001864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_IncTick+0x20>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_IncTick+0x24>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <HAL_IncTick+0x24>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000008 	.word	0x20000008
 8001888:	20000270 	.word	0x20000270

0800188c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return uwTick;
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <HAL_GetTick+0x14>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000270 	.word	0x20000270

080018a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ac:	f7ff ffee 	bl	800188c <HAL_GetTick>
 80018b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018bc:	d005      	beq.n	80018ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_Delay+0x44>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ca:	bf00      	nop
 80018cc:	f7ff ffde 	bl	800188c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d8f7      	bhi.n	80018cc <HAL_Delay+0x28>
  {
  }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000008 	.word	0x20000008

080018ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e033      	b.n	800196a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	2b00      	cmp	r3, #0
 8001908:	d109      	bne.n	800191e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff fd32 	bl	8001374 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	2b00      	cmp	r3, #0
 8001928:	d118      	bne.n	800195c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001932:	f023 0302 	bic.w	r3, r3, #2
 8001936:	f043 0202 	orr.w	r2, r3, #2
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 fbd8 	bl	80020f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f023 0303 	bic.w	r3, r3, #3
 8001952:	f043 0201 	orr.w	r2, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	641a      	str	r2, [r3, #64]	; 0x40
 800195a:	e001      	b.n	8001960 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001968:	7bfb      	ldrb	r3, [r7, #15]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	f003 0320 	and.w	r3, r3, #32
 80019a0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d049      	beq.n	8001a3c <HAL_ADC_IRQHandler+0xca>
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d046      	beq.n	8001a3c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f003 0310 	and.w	r3, r3, #16
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d105      	bne.n	80019c6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d12b      	bne.n	8001a2c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d127      	bne.n	8001a2c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d006      	beq.n	80019f8 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d119      	bne.n	8001a2c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0220 	bic.w	r2, r2, #32
 8001a06:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d105      	bne.n	8001a2c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	f043 0201 	orr.w	r2, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f9c1 	bl	8001db4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f06f 0212 	mvn.w	r2, #18
 8001a3a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d057      	beq.n	8001b02 <HAL_ADC_IRQHandler+0x190>
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d054      	beq.n	8001b02 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	f003 0310 	and.w	r3, r3, #16
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d105      	bne.n	8001a70 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d139      	bne.n	8001af2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d006      	beq.n	8001a9a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d12b      	bne.n	8001af2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d124      	bne.n	8001af2 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d11d      	bne.n	8001af2 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d119      	bne.n	8001af2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001acc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d105      	bne.n	8001af2 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f043 0201 	orr.w	r2, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 fc7c 	bl	80023f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f06f 020c 	mvn.w	r2, #12
 8001b00:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b10:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d017      	beq.n	8001b48 <HAL_ADC_IRQHandler+0x1d6>
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d014      	beq.n	8001b48 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d10d      	bne.n	8001b48 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff f895 	bl	8000c68 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f06f 0201 	mvn.w	r2, #1
 8001b46:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 0320 	and.w	r3, r3, #32
 8001b4e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b56:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d015      	beq.n	8001b8a <HAL_ADC_IRQHandler+0x218>
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d012      	beq.n	8001b8a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b68:	f043 0202 	orr.w	r2, r3, #2
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f06f 0220 	mvn.w	r2, #32
 8001b78:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f92e 	bl	8001ddc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f06f 0220 	mvn.w	r2, #32
 8001b88:	601a      	str	r2, [r3, #0]
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADC_Start_DMA+0x1e>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e0e9      	b.n	8001d86 <HAL_ADC_Start_DMA+0x1f2>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d018      	beq.n	8001bfa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bd8:	4b6d      	ldr	r3, [pc, #436]	; (8001d90 <HAL_ADC_Start_DMA+0x1fc>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a6d      	ldr	r2, [pc, #436]	; (8001d94 <HAL_ADC_Start_DMA+0x200>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	0c9a      	lsrs	r2, r3, #18
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001bec:	e002      	b.n	8001bf4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f9      	bne.n	8001bee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c08:	d107      	bne.n	8001c1a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c18:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	f040 80a1 	bne.w	8001d6c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c32:	f023 0301 	bic.w	r3, r3, #1
 8001c36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d007      	beq.n	8001c5c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c68:	d106      	bne.n	8001c78 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f023 0206 	bic.w	r2, r3, #6
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	645a      	str	r2, [r3, #68]	; 0x44
 8001c76:	e002      	b.n	8001c7e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c86:	4b44      	ldr	r3, [pc, #272]	; (8001d98 <HAL_ADC_Start_DMA+0x204>)
 8001c88:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8e:	4a43      	ldr	r2, [pc, #268]	; (8001d9c <HAL_ADC_Start_DMA+0x208>)
 8001c90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c96:	4a42      	ldr	r2, [pc, #264]	; (8001da0 <HAL_ADC_Start_DMA+0x20c>)
 8001c98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9e:	4a41      	ldr	r2, [pc, #260]	; (8001da4 <HAL_ADC_Start_DMA+0x210>)
 8001ca0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001caa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001cba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	334c      	adds	r3, #76	; 0x4c
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f000 fd52 	bl	8002784 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 031f 	and.w	r3, r3, #31
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d12a      	bne.n	8001d42 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a2d      	ldr	r2, [pc, #180]	; (8001da8 <HAL_ADC_Start_DMA+0x214>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d015      	beq.n	8001d22 <HAL_ADC_Start_DMA+0x18e>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a2c      	ldr	r2, [pc, #176]	; (8001dac <HAL_ADC_Start_DMA+0x218>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d105      	bne.n	8001d0c <HAL_ADC_Start_DMA+0x178>
 8001d00:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <HAL_ADC_Start_DMA+0x204>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00a      	beq.n	8001d22 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a27      	ldr	r2, [pc, #156]	; (8001db0 <HAL_ADC_Start_DMA+0x21c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d136      	bne.n	8001d84 <HAL_ADC_Start_DMA+0x1f0>
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <HAL_ADC_Start_DMA+0x204>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 0310 	and.w	r3, r3, #16
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d130      	bne.n	8001d84 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d129      	bne.n	8001d84 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	e020      	b.n	8001d84 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a18      	ldr	r2, [pc, #96]	; (8001da8 <HAL_ADC_Start_DMA+0x214>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d11b      	bne.n	8001d84 <HAL_ADC_Start_DMA+0x1f0>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d114      	bne.n	8001d84 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	e00b      	b.n	8001d84 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f043 0210 	orr.w	r2, r3, #16
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7c:	f043 0201 	orr.w	r2, r3, #1
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000000 	.word	0x20000000
 8001d94:	431bde83 	.word	0x431bde83
 8001d98:	40012300 	.word	0x40012300
 8001d9c:	080022ed 	.word	0x080022ed
 8001da0:	080023a7 	.word	0x080023a7
 8001da4:	080023c3 	.word	0x080023c3
 8001da8:	40012000 	.word	0x40012000
 8001dac:	40012100 	.word	0x40012100
 8001db0:	40012200 	.word	0x40012200

08001db4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x1c>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e105      	b.n	8002018 <HAL_ADC_ConfigChannel+0x228>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b09      	cmp	r3, #9
 8001e1a:	d925      	bls.n	8001e68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68d9      	ldr	r1, [r3, #12]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	3b1e      	subs	r3, #30
 8001e32:	2207      	movs	r2, #7
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43da      	mvns	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	400a      	ands	r2, r1
 8001e40:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68d9      	ldr	r1, [r3, #12]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	4603      	mov	r3, r0
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4403      	add	r3, r0
 8001e5a:	3b1e      	subs	r3, #30
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	e022      	b.n	8001eae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6919      	ldr	r1, [r3, #16]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	4613      	mov	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	2207      	movs	r2, #7
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	400a      	ands	r2, r1
 8001e8a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6919      	ldr	r1, [r3, #16]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4403      	add	r3, r0
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d824      	bhi.n	8001f00 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3b05      	subs	r3, #5
 8001ec8:	221f      	movs	r2, #31
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	400a      	ands	r2, r1
 8001ed6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	3b05      	subs	r3, #5
 8001ef2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	635a      	str	r2, [r3, #52]	; 0x34
 8001efe:	e04c      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b0c      	cmp	r3, #12
 8001f06:	d824      	bhi.n	8001f52 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	3b23      	subs	r3, #35	; 0x23
 8001f1a:	221f      	movs	r2, #31
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43da      	mvns	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	400a      	ands	r2, r1
 8001f28:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4618      	mov	r0, r3
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	3b23      	subs	r3, #35	; 0x23
 8001f44:	fa00 f203 	lsl.w	r2, r0, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f50:	e023      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	3b41      	subs	r3, #65	; 0x41
 8001f64:	221f      	movs	r2, #31
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	400a      	ands	r2, r1
 8001f72:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	4618      	mov	r0, r3
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3b41      	subs	r3, #65	; 0x41
 8001f8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f9a:	4b22      	ldr	r3, [pc, #136]	; (8002024 <HAL_ADC_ConfigChannel+0x234>)
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a21      	ldr	r2, [pc, #132]	; (8002028 <HAL_ADC_ConfigChannel+0x238>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d109      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x1cc>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b12      	cmp	r3, #18
 8001fae:	d105      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a19      	ldr	r2, [pc, #100]	; (8002028 <HAL_ADC_ConfigChannel+0x238>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d123      	bne.n	800200e <HAL_ADC_ConfigChannel+0x21e>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b10      	cmp	r3, #16
 8001fcc:	d003      	beq.n	8001fd6 <HAL_ADC_ConfigChannel+0x1e6>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b11      	cmp	r3, #17
 8001fd4:	d11b      	bne.n	800200e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b10      	cmp	r3, #16
 8001fe8:	d111      	bne.n	800200e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <HAL_ADC_ConfigChannel+0x23c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a10      	ldr	r2, [pc, #64]	; (8002030 <HAL_ADC_ConfigChannel+0x240>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	0c9a      	lsrs	r2, r3, #18
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002000:	e002      	b.n	8002008 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	3b01      	subs	r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f9      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	40012300 	.word	0x40012300
 8002028:	40012000 	.word	0x40012000
 800202c:	20000000 	.word	0x20000000
 8002030:	431bde83 	.word	0x431bde83

08002034 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_ADC_AnalogWDGConfig+0x18>
 8002048:	2302      	movs	r3, #2
 800204a:	e04d      	b.n	80020e8 <HAL_ADC_AnalogWDGConfig+0xb4>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	7c1b      	ldrb	r3, [r3, #16]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d108      	bne.n	800206e <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	e007      	b.n	800207e <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800207c:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800208c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002090:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6859      	ldr	r1, [r3, #4]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	6852      	ldr	r2, [r2, #4]
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	6892      	ldr	r2, [r2, #8]
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 021f 	bic.w	r2, r2, #31
 80020c6:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	4619      	mov	r1, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020fc:	4b79      	ldr	r3, [pc, #484]	; (80022e4 <ADC_Init+0x1f0>)
 80020fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	431a      	orrs	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002128:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6859      	ldr	r1, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	021a      	lsls	r2, r3, #8
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800214c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6859      	ldr	r1, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800216e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6899      	ldr	r1, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	4a58      	ldr	r2, [pc, #352]	; (80022e8 <ADC_Init+0x1f4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d022      	beq.n	80021d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800219a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6899      	ldr	r1, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6899      	ldr	r1, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	e00f      	b.n	80021f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0202 	bic.w	r2, r2, #2
 8002200:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6899      	ldr	r1, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	7e1b      	ldrb	r3, [r3, #24]
 800220c:	005a      	lsls	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d01b      	beq.n	8002258 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800222e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800223e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6859      	ldr	r1, [r3, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	3b01      	subs	r3, #1
 800224c:	035a      	lsls	r2, r3, #13
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	e007      	b.n	8002268 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002266:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	3b01      	subs	r3, #1
 8002284:	051a      	lsls	r2, r3, #20
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800229c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6899      	ldr	r1, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022aa:	025a      	lsls	r2, r3, #9
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6899      	ldr	r1, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	029a      	lsls	r2, r3, #10
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	609a      	str	r2, [r3, #8]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40012300 	.word	0x40012300
 80022e8:	0f000001 	.word	0x0f000001

080022ec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002302:	2b00      	cmp	r3, #0
 8002304:	d13c      	bne.n	8002380 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d12b      	bne.n	8002378 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002324:	2b00      	cmp	r3, #0
 8002326:	d127      	bne.n	8002378 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002332:	2b00      	cmp	r3, #0
 8002334:	d006      	beq.n	8002344 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002340:	2b00      	cmp	r3, #0
 8002342:	d119      	bne.n	8002378 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0220 	bic.w	r2, r2, #32
 8002352:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d105      	bne.n	8002378 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f043 0201 	orr.w	r2, r3, #1
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f7ff fd1b 	bl	8001db4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800237e:	e00e      	b.n	800239e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f7ff fd25 	bl	8001ddc <HAL_ADC_ErrorCallback>
}
 8002392:	e004      	b.n	800239e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	4798      	blx	r3
}
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b084      	sub	sp, #16
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f7ff fd07 	bl	8001dc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ce:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2240      	movs	r2, #64	; 0x40
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	f043 0204 	orr.w	r2, r3, #4
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f7ff fcfa 	bl	8001ddc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023e8:	bf00      	nop
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002420:	4013      	ands	r3, r2
 8002422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800242c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002436:	4a04      	ldr	r2, [pc, #16]	; (8002448 <__NVIC_SetPriorityGrouping+0x44>)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	60d3      	str	r3, [r2, #12]
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <__NVIC_GetPriorityGrouping+0x18>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	f003 0307 	and.w	r3, r3, #7
}
 800245a:	4618      	mov	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	2b00      	cmp	r3, #0
 8002478:	db0b      	blt.n	8002492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	f003 021f 	and.w	r2, r3, #31
 8002480:	4907      	ldr	r1, [pc, #28]	; (80024a0 <__NVIC_EnableIRQ+0x38>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	2001      	movs	r0, #1
 800248a:	fa00 f202 	lsl.w	r2, r0, r2
 800248e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000e100 	.word	0xe000e100

080024a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	6039      	str	r1, [r7, #0]
 80024ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	db0a      	blt.n	80024ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	490c      	ldr	r1, [pc, #48]	; (80024f0 <__NVIC_SetPriority+0x4c>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	0112      	lsls	r2, r2, #4
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	440b      	add	r3, r1
 80024c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024cc:	e00a      	b.n	80024e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4908      	ldr	r1, [pc, #32]	; (80024f4 <__NVIC_SetPriority+0x50>)
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	3b04      	subs	r3, #4
 80024dc:	0112      	lsls	r2, r2, #4
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	440b      	add	r3, r1
 80024e2:	761a      	strb	r2, [r3, #24]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000e100 	.word	0xe000e100
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	; 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f1c3 0307 	rsb	r3, r3, #7
 8002512:	2b04      	cmp	r3, #4
 8002514:	bf28      	it	cs
 8002516:	2304      	movcs	r3, #4
 8002518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3304      	adds	r3, #4
 800251e:	2b06      	cmp	r3, #6
 8002520:	d902      	bls.n	8002528 <NVIC_EncodePriority+0x30>
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3b03      	subs	r3, #3
 8002526:	e000      	b.n	800252a <NVIC_EncodePriority+0x32>
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800252c:	f04f 32ff 	mov.w	r2, #4294967295
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43da      	mvns	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	401a      	ands	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002540:	f04f 31ff 	mov.w	r1, #4294967295
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	43d9      	mvns	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	4313      	orrs	r3, r2
         );
}
 8002552:	4618      	mov	r0, r3
 8002554:	3724      	adds	r7, #36	; 0x24
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002570:	d301      	bcc.n	8002576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002572:	2301      	movs	r3, #1
 8002574:	e00f      	b.n	8002596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002576:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <SysTick_Config+0x40>)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3b01      	subs	r3, #1
 800257c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800257e:	210f      	movs	r1, #15
 8002580:	f04f 30ff 	mov.w	r0, #4294967295
 8002584:	f7ff ff8e 	bl	80024a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <SysTick_Config+0x40>)
 800258a:	2200      	movs	r2, #0
 800258c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800258e:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <SysTick_Config+0x40>)
 8002590:	2207      	movs	r2, #7
 8002592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	e000e010 	.word	0xe000e010

080025a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff ff29 	bl	8002404 <__NVIC_SetPriorityGrouping>
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b086      	sub	sp, #24
 80025be:	af00      	add	r7, sp, #0
 80025c0:	4603      	mov	r3, r0
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
 80025c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025cc:	f7ff ff3e 	bl	800244c <__NVIC_GetPriorityGrouping>
 80025d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	6978      	ldr	r0, [r7, #20]
 80025d8:	f7ff ff8e 	bl	80024f8 <NVIC_EncodePriority>
 80025dc:	4602      	mov	r2, r0
 80025de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff5d 	bl	80024a4 <__NVIC_SetPriority>
}
 80025ea:	bf00      	nop
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	4603      	mov	r3, r0
 80025fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ff31 	bl	8002468 <__NVIC_EnableIRQ>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff ffa2 	bl	8002560 <SysTick_Config>
 800261c:	4603      	mov	r3, r0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002634:	f7ff f92a 	bl	800188c <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e099      	b.n	8002778 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0201 	bic.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002664:	e00f      	b.n	8002686 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002666:	f7ff f911 	bl	800188c <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b05      	cmp	r3, #5
 8002672:	d908      	bls.n	8002686 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2220      	movs	r2, #32
 8002678:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2203      	movs	r2, #3
 800267e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e078      	b.n	8002778 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1e8      	bne.n	8002666 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	4b38      	ldr	r3, [pc, #224]	; (8002780 <HAL_DMA_Init+0x158>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d107      	bne.n	80026f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	4313      	orrs	r3, r2
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f023 0307 	bic.w	r3, r3, #7
 8002706:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	4313      	orrs	r3, r2
 8002710:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	2b04      	cmp	r3, #4
 8002718:	d117      	bne.n	800274a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4313      	orrs	r3, r2
 8002722:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00e      	beq.n	800274a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 fa6f 	bl	8002c10 <DMA_CheckFifoParam>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2240      	movs	r2, #64	; 0x40
 800273c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002746:	2301      	movs	r3, #1
 8002748:	e016      	b.n	8002778 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fa26 	bl	8002ba4 <DMA_CalcBaseAndBitshift>
 8002758:	4603      	mov	r3, r0
 800275a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002760:	223f      	movs	r2, #63	; 0x3f
 8002762:	409a      	lsls	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	f010803f 	.word	0xf010803f

08002784 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_DMA_Start_IT+0x26>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e040      	b.n	800282c <HAL_DMA_Start_IT+0xa8>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d12f      	bne.n	800281e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2202      	movs	r2, #2
 80027c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f9b8 	bl	8002b48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027dc:	223f      	movs	r2, #63	; 0x3f
 80027de:	409a      	lsls	r2, r3
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0216 	orr.w	r2, r2, #22
 80027f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d007      	beq.n	800280c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0208 	orr.w	r2, r2, #8
 800280a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	e005      	b.n	800282a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002826:	2302      	movs	r3, #2
 8002828:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800282a:	7dfb      	ldrb	r3, [r7, #23]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002840:	4b8e      	ldr	r3, [pc, #568]	; (8002a7c <HAL_DMA_IRQHandler+0x248>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a8e      	ldr	r2, [pc, #568]	; (8002a80 <HAL_DMA_IRQHandler+0x24c>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	0a9b      	lsrs	r3, r3, #10
 800284c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002852:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285e:	2208      	movs	r2, #8
 8002860:	409a      	lsls	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d01a      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d013      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0204 	bic.w	r2, r2, #4
 8002886:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	2208      	movs	r2, #8
 800288e:	409a      	lsls	r2, r3
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002898:	f043 0201 	orr.w	r2, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a4:	2201      	movs	r2, #1
 80028a6:	409a      	lsls	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d012      	beq.n	80028d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c2:	2201      	movs	r2, #1
 80028c4:	409a      	lsls	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ce:	f043 0202 	orr.w	r2, r3, #2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028da:	2204      	movs	r2, #4
 80028dc:	409a      	lsls	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d012      	beq.n	800290c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00b      	beq.n	800290c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	2204      	movs	r2, #4
 80028fa:	409a      	lsls	r2, r3
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002904:	f043 0204 	orr.w	r2, r3, #4
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002910:	2210      	movs	r2, #16
 8002912:	409a      	lsls	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4013      	ands	r3, r2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d043      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d03c      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292e:	2210      	movs	r2, #16
 8002930:	409a      	lsls	r2, r3
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d018      	beq.n	8002976 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d108      	bne.n	8002964 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d024      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	4798      	blx	r3
 8002962:	e01f      	b.n	80029a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01b      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	4798      	blx	r3
 8002974:	e016      	b.n	80029a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d107      	bne.n	8002994 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0208 	bic.w	r2, r2, #8
 8002992:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a8:	2220      	movs	r2, #32
 80029aa:	409a      	lsls	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 808f 	beq.w	8002ad4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 8087 	beq.w	8002ad4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ca:	2220      	movs	r2, #32
 80029cc:	409a      	lsls	r2, r3
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b05      	cmp	r3, #5
 80029dc:	d136      	bne.n	8002a4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0216 	bic.w	r2, r2, #22
 80029ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695a      	ldr	r2, [r3, #20]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d103      	bne.n	8002a0e <HAL_DMA_IRQHandler+0x1da>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0208 	bic.w	r2, r2, #8
 8002a1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a22:	223f      	movs	r2, #63	; 0x3f
 8002a24:	409a      	lsls	r2, r3
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d07e      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4798      	blx	r3
        }
        return;
 8002a4a:	e079      	b.n	8002b40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d01d      	beq.n	8002a96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10d      	bne.n	8002a84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d031      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	4798      	blx	r3
 8002a78:	e02c      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x2a0>
 8002a7a:	bf00      	nop
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d023      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	4798      	blx	r3
 8002a94:	e01e      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10f      	bne.n	8002ac4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0210 	bic.w	r2, r2, #16
 8002ab2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d032      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d022      	beq.n	8002b2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2205      	movs	r2, #5
 8002aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	3301      	adds	r3, #1
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d307      	bcc.n	8002b1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f2      	bne.n	8002b00 <HAL_DMA_IRQHandler+0x2cc>
 8002b1a:	e000      	b.n	8002b1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
 8002b3e:	e000      	b.n	8002b42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b40:	bf00      	nop
    }
  }
}
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b40      	cmp	r3, #64	; 0x40
 8002b74:	d108      	bne.n	8002b88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b86:	e007      	b.n	8002b98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	60da      	str	r2, [r3, #12]
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	3b10      	subs	r3, #16
 8002bb4:	4a14      	ldr	r2, [pc, #80]	; (8002c08 <DMA_CalcBaseAndBitshift+0x64>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bbe:	4a13      	ldr	r2, [pc, #76]	; (8002c0c <DMA_CalcBaseAndBitshift+0x68>)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d909      	bls.n	8002be6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bda:	f023 0303 	bic.w	r3, r3, #3
 8002bde:	1d1a      	adds	r2, r3, #4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	659a      	str	r2, [r3, #88]	; 0x58
 8002be4:	e007      	b.n	8002bf6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bee:	f023 0303 	bic.w	r3, r3, #3
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	aaaaaaab 	.word	0xaaaaaaab
 8002c0c:	08009954 	.word	0x08009954

08002c10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d11f      	bne.n	8002c6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d856      	bhi.n	8002cde <DMA_CheckFifoParam+0xce>
 8002c30:	a201      	add	r2, pc, #4	; (adr r2, 8002c38 <DMA_CheckFifoParam+0x28>)
 8002c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c36:	bf00      	nop
 8002c38:	08002c49 	.word	0x08002c49
 8002c3c:	08002c5b 	.word	0x08002c5b
 8002c40:	08002c49 	.word	0x08002c49
 8002c44:	08002cdf 	.word	0x08002cdf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d046      	beq.n	8002ce2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c58:	e043      	b.n	8002ce2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c62:	d140      	bne.n	8002ce6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c68:	e03d      	b.n	8002ce6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c72:	d121      	bne.n	8002cb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d837      	bhi.n	8002cea <DMA_CheckFifoParam+0xda>
 8002c7a:	a201      	add	r2, pc, #4	; (adr r2, 8002c80 <DMA_CheckFifoParam+0x70>)
 8002c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c80:	08002c91 	.word	0x08002c91
 8002c84:	08002c97 	.word	0x08002c97
 8002c88:	08002c91 	.word	0x08002c91
 8002c8c:	08002ca9 	.word	0x08002ca9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
      break;
 8002c94:	e030      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d025      	beq.n	8002cee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca6:	e022      	b.n	8002cee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cb0:	d11f      	bne.n	8002cf2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cb6:	e01c      	b.n	8002cf2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d903      	bls.n	8002cc6 <DMA_CheckFifoParam+0xb6>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d003      	beq.n	8002ccc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cc4:	e018      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8002cca:	e015      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00e      	beq.n	8002cf6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
      break;
 8002cdc:	e00b      	b.n	8002cf6 <DMA_CheckFifoParam+0xe6>
      break;
 8002cde:	bf00      	nop
 8002ce0:	e00a      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ce2:	bf00      	nop
 8002ce4:	e008      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ce6:	bf00      	nop
 8002ce8:	e006      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cea:	bf00      	nop
 8002cec:	e004      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cee:	bf00      	nop
 8002cf0:	e002      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cf2:	bf00      	nop
 8002cf4:	e000      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cf6:	bf00      	nop
    }
  } 
  
  return status; 
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop

08002d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b089      	sub	sp, #36	; 0x24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	e16b      	b.n	8002ffc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d24:	2201      	movs	r2, #1
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4013      	ands	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	f040 815a 	bne.w	8002ff6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d005      	beq.n	8002d5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d130      	bne.n	8002dbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	2203      	movs	r2, #3
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d90:	2201      	movs	r2, #1
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 0201 	and.w	r2, r3, #1
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d017      	beq.n	8002df8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d123      	bne.n	8002e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	08da      	lsrs	r2, r3, #3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3208      	adds	r2, #8
 8002e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	220f      	movs	r2, #15
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	08da      	lsrs	r2, r3, #3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3208      	adds	r2, #8
 8002e46:	69b9      	ldr	r1, [r7, #24]
 8002e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	2203      	movs	r2, #3
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0203 	and.w	r2, r3, #3
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80b4 	beq.w	8002ff6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	4b60      	ldr	r3, [pc, #384]	; (8003014 <HAL_GPIO_Init+0x30c>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	4a5f      	ldr	r2, [pc, #380]	; (8003014 <HAL_GPIO_Init+0x30c>)
 8002e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9e:	4b5d      	ldr	r3, [pc, #372]	; (8003014 <HAL_GPIO_Init+0x30c>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eaa:	4a5b      	ldr	r2, [pc, #364]	; (8003018 <HAL_GPIO_Init+0x310>)
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	089b      	lsrs	r3, r3, #2
 8002eb0:	3302      	adds	r3, #2
 8002eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	220f      	movs	r2, #15
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a52      	ldr	r2, [pc, #328]	; (800301c <HAL_GPIO_Init+0x314>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d02b      	beq.n	8002f2e <HAL_GPIO_Init+0x226>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a51      	ldr	r2, [pc, #324]	; (8003020 <HAL_GPIO_Init+0x318>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d025      	beq.n	8002f2a <HAL_GPIO_Init+0x222>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a50      	ldr	r2, [pc, #320]	; (8003024 <HAL_GPIO_Init+0x31c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d01f      	beq.n	8002f26 <HAL_GPIO_Init+0x21e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a4f      	ldr	r2, [pc, #316]	; (8003028 <HAL_GPIO_Init+0x320>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d019      	beq.n	8002f22 <HAL_GPIO_Init+0x21a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a4e      	ldr	r2, [pc, #312]	; (800302c <HAL_GPIO_Init+0x324>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d013      	beq.n	8002f1e <HAL_GPIO_Init+0x216>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a4d      	ldr	r2, [pc, #308]	; (8003030 <HAL_GPIO_Init+0x328>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00d      	beq.n	8002f1a <HAL_GPIO_Init+0x212>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a4c      	ldr	r2, [pc, #304]	; (8003034 <HAL_GPIO_Init+0x32c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d007      	beq.n	8002f16 <HAL_GPIO_Init+0x20e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a4b      	ldr	r2, [pc, #300]	; (8003038 <HAL_GPIO_Init+0x330>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d101      	bne.n	8002f12 <HAL_GPIO_Init+0x20a>
 8002f0e:	2307      	movs	r3, #7
 8002f10:	e00e      	b.n	8002f30 <HAL_GPIO_Init+0x228>
 8002f12:	2308      	movs	r3, #8
 8002f14:	e00c      	b.n	8002f30 <HAL_GPIO_Init+0x228>
 8002f16:	2306      	movs	r3, #6
 8002f18:	e00a      	b.n	8002f30 <HAL_GPIO_Init+0x228>
 8002f1a:	2305      	movs	r3, #5
 8002f1c:	e008      	b.n	8002f30 <HAL_GPIO_Init+0x228>
 8002f1e:	2304      	movs	r3, #4
 8002f20:	e006      	b.n	8002f30 <HAL_GPIO_Init+0x228>
 8002f22:	2303      	movs	r3, #3
 8002f24:	e004      	b.n	8002f30 <HAL_GPIO_Init+0x228>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e002      	b.n	8002f30 <HAL_GPIO_Init+0x228>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_GPIO_Init+0x228>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	f002 0203 	and.w	r2, r2, #3
 8002f36:	0092      	lsls	r2, r2, #2
 8002f38:	4093      	lsls	r3, r2
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f40:	4935      	ldr	r1, [pc, #212]	; (8003018 <HAL_GPIO_Init+0x310>)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	3302      	adds	r3, #2
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f4e:	4b3b      	ldr	r3, [pc, #236]	; (800303c <HAL_GPIO_Init+0x334>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	43db      	mvns	r3, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f72:	4a32      	ldr	r2, [pc, #200]	; (800303c <HAL_GPIO_Init+0x334>)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f78:	4b30      	ldr	r3, [pc, #192]	; (800303c <HAL_GPIO_Init+0x334>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f9c:	4a27      	ldr	r2, [pc, #156]	; (800303c <HAL_GPIO_Init+0x334>)
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fa2:	4b26      	ldr	r3, [pc, #152]	; (800303c <HAL_GPIO_Init+0x334>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	43db      	mvns	r3, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fc6:	4a1d      	ldr	r2, [pc, #116]	; (800303c <HAL_GPIO_Init+0x334>)
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fcc:	4b1b      	ldr	r3, [pc, #108]	; (800303c <HAL_GPIO_Init+0x334>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ff0:	4a12      	ldr	r2, [pc, #72]	; (800303c <HAL_GPIO_Init+0x334>)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	61fb      	str	r3, [r7, #28]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	2b0f      	cmp	r3, #15
 8003000:	f67f ae90 	bls.w	8002d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003004:	bf00      	nop
 8003006:	bf00      	nop
 8003008:	3724      	adds	r7, #36	; 0x24
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800
 8003018:	40013800 	.word	0x40013800
 800301c:	40020000 	.word	0x40020000
 8003020:	40020400 	.word	0x40020400
 8003024:	40020800 	.word	0x40020800
 8003028:	40020c00 	.word	0x40020c00
 800302c:	40021000 	.word	0x40021000
 8003030:	40021400 	.word	0x40021400
 8003034:	40021800 	.word	0x40021800
 8003038:	40021c00 	.word	0x40021c00
 800303c:	40013c00 	.word	0x40013c00

08003040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	807b      	strh	r3, [r7, #2]
 800304c:	4613      	mov	r3, r2
 800304e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003050:	787b      	ldrb	r3, [r7, #1]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003056:	887a      	ldrh	r2, [r7, #2]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800305c:	e003      	b.n	8003066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800305e:	887b      	ldrh	r3, [r7, #2]
 8003060:	041a      	lsls	r2, r3, #16
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	619a      	str	r2, [r3, #24]
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003072:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003074:	b08f      	sub	sp, #60	; 0x3c
 8003076:	af0a      	add	r7, sp, #40	; 0x28
 8003078:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e054      	b.n	800312e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f006 f854 	bl	800914c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2203      	movs	r2, #3
 80030a8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d102      	bne.n	80030be <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f003 f883 	bl	80061ce <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	603b      	str	r3, [r7, #0]
 80030ce:	687e      	ldr	r6, [r7, #4]
 80030d0:	466d      	mov	r5, sp
 80030d2:	f106 0410 	add.w	r4, r6, #16
 80030d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80030e6:	1d33      	adds	r3, r6, #4
 80030e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030ea:	6838      	ldr	r0, [r7, #0]
 80030ec:	f002 fffd 	bl	80060ea <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2101      	movs	r1, #1
 80030f6:	4618      	mov	r0, r3
 80030f8:	f003 f87a 	bl	80061f0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	603b      	str	r3, [r7, #0]
 8003102:	687e      	ldr	r6, [r7, #4]
 8003104:	466d      	mov	r5, sp
 8003106:	f106 0410 	add.w	r4, r6, #16
 800310a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800310c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800310e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003112:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003116:	e885 0003 	stmia.w	r5, {r0, r1}
 800311a:	1d33      	adds	r3, r6, #4
 800311c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800311e:	6838      	ldr	r0, [r7, #0]
 8003120:	f003 fa02 	bl	8006528 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003136 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003136:	b590      	push	{r4, r7, lr}
 8003138:	b089      	sub	sp, #36	; 0x24
 800313a:	af04      	add	r7, sp, #16
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	4608      	mov	r0, r1
 8003140:	4611      	mov	r1, r2
 8003142:	461a      	mov	r2, r3
 8003144:	4603      	mov	r3, r0
 8003146:	70fb      	strb	r3, [r7, #3]
 8003148:	460b      	mov	r3, r1
 800314a:	70bb      	strb	r3, [r7, #2]
 800314c:	4613      	mov	r3, r2
 800314e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_HCD_HC_Init+0x28>
 800315a:	2302      	movs	r3, #2
 800315c:	e076      	b.n	800324c <HAL_HCD_HC_Init+0x116>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003166:	78fb      	ldrb	r3, [r7, #3]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	212c      	movs	r1, #44	; 0x2c
 800316c:	fb01 f303 	mul.w	r3, r1, r3
 8003170:	4413      	add	r3, r2
 8003172:	333d      	adds	r3, #61	; 0x3d
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	212c      	movs	r1, #44	; 0x2c
 800317e:	fb01 f303 	mul.w	r3, r1, r3
 8003182:	4413      	add	r3, r2
 8003184:	3338      	adds	r3, #56	; 0x38
 8003186:	787a      	ldrb	r2, [r7, #1]
 8003188:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	212c      	movs	r1, #44	; 0x2c
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	4413      	add	r3, r2
 8003196:	3340      	adds	r3, #64	; 0x40
 8003198:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800319a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	212c      	movs	r1, #44	; 0x2c
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	3339      	adds	r3, #57	; 0x39
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80031ae:	78fb      	ldrb	r3, [r7, #3]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	212c      	movs	r1, #44	; 0x2c
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	333f      	adds	r3, #63	; 0x3f
 80031bc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80031c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	78ba      	ldrb	r2, [r7, #2]
 80031c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031ca:	b2d0      	uxtb	r0, r2
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	212c      	movs	r1, #44	; 0x2c
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	4413      	add	r3, r2
 80031d6:	333a      	adds	r3, #58	; 0x3a
 80031d8:	4602      	mov	r2, r0
 80031da:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80031dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	da09      	bge.n	80031f8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	212c      	movs	r1, #44	; 0x2c
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	4413      	add	r3, r2
 80031f0:	333b      	adds	r3, #59	; 0x3b
 80031f2:	2201      	movs	r2, #1
 80031f4:	701a      	strb	r2, [r3, #0]
 80031f6:	e008      	b.n	800320a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	212c      	movs	r1, #44	; 0x2c
 80031fe:	fb01 f303 	mul.w	r3, r1, r3
 8003202:	4413      	add	r3, r2
 8003204:	333b      	adds	r3, #59	; 0x3b
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800320a:	78fb      	ldrb	r3, [r7, #3]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	212c      	movs	r1, #44	; 0x2c
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	4413      	add	r3, r2
 8003216:	333c      	adds	r3, #60	; 0x3c
 8003218:	f897 2020 	ldrb.w	r2, [r7, #32]
 800321c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	787c      	ldrb	r4, [r7, #1]
 8003224:	78ba      	ldrb	r2, [r7, #2]
 8003226:	78f9      	ldrb	r1, [r7, #3]
 8003228:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800322a:	9302      	str	r3, [sp, #8]
 800322c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003230:	9301      	str	r3, [sp, #4]
 8003232:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	4623      	mov	r3, r4
 800323a:	f003 fafb 	bl	8006834 <USB_HC_Init>
 800323e:	4603      	mov	r3, r0
 8003240:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800324a:	7bfb      	ldrb	r3, [r7, #15]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	bd90      	pop	{r4, r7, pc}

08003254 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_HCD_HC_Halt+0x1e>
 800326e:	2302      	movs	r3, #2
 8003270:	e00f      	b.n	8003292 <HAL_HCD_HC_Halt+0x3e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	4611      	mov	r1, r2
 8003282:	4618      	mov	r0, r3
 8003284:	f003 fd4b 	bl	8006d1e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003290:	7bfb      	ldrb	r3, [r7, #15]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	4608      	mov	r0, r1
 80032a6:	4611      	mov	r1, r2
 80032a8:	461a      	mov	r2, r3
 80032aa:	4603      	mov	r3, r0
 80032ac:	70fb      	strb	r3, [r7, #3]
 80032ae:	460b      	mov	r3, r1
 80032b0:	70bb      	strb	r3, [r7, #2]
 80032b2:	4613      	mov	r3, r2
 80032b4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	212c      	movs	r1, #44	; 0x2c
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	333b      	adds	r3, #59	; 0x3b
 80032c4:	78ba      	ldrb	r2, [r7, #2]
 80032c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	212c      	movs	r1, #44	; 0x2c
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	4413      	add	r3, r2
 80032d4:	333f      	adds	r3, #63	; 0x3f
 80032d6:	787a      	ldrb	r2, [r7, #1]
 80032d8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80032da:	7c3b      	ldrb	r3, [r7, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d112      	bne.n	8003306 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	212c      	movs	r1, #44	; 0x2c
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	4413      	add	r3, r2
 80032ec:	3342      	adds	r3, #66	; 0x42
 80032ee:	2203      	movs	r2, #3
 80032f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	212c      	movs	r1, #44	; 0x2c
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	333d      	adds	r3, #61	; 0x3d
 8003300:	7f3a      	ldrb	r2, [r7, #28]
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	e008      	b.n	8003318 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	212c      	movs	r1, #44	; 0x2c
 800330c:	fb01 f303 	mul.w	r3, r1, r3
 8003310:	4413      	add	r3, r2
 8003312:	3342      	adds	r3, #66	; 0x42
 8003314:	2202      	movs	r2, #2
 8003316:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003318:	787b      	ldrb	r3, [r7, #1]
 800331a:	2b03      	cmp	r3, #3
 800331c:	f200 80c6 	bhi.w	80034ac <HAL_HCD_HC_SubmitRequest+0x210>
 8003320:	a201      	add	r2, pc, #4	; (adr r2, 8003328 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003326:	bf00      	nop
 8003328:	08003339 	.word	0x08003339
 800332c:	08003499 	.word	0x08003499
 8003330:	0800339d 	.word	0x0800339d
 8003334:	0800341b 	.word	0x0800341b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003338:	7c3b      	ldrb	r3, [r7, #16]
 800333a:	2b01      	cmp	r3, #1
 800333c:	f040 80b8 	bne.w	80034b0 <HAL_HCD_HC_SubmitRequest+0x214>
 8003340:	78bb      	ldrb	r3, [r7, #2]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f040 80b4 	bne.w	80034b0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003348:	8b3b      	ldrh	r3, [r7, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d108      	bne.n	8003360 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	212c      	movs	r1, #44	; 0x2c
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	3355      	adds	r3, #85	; 0x55
 800335c:	2201      	movs	r2, #1
 800335e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	212c      	movs	r1, #44	; 0x2c
 8003366:	fb01 f303 	mul.w	r3, r1, r3
 800336a:	4413      	add	r3, r2
 800336c:	3355      	adds	r3, #85	; 0x55
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d109      	bne.n	8003388 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003374:	78fb      	ldrb	r3, [r7, #3]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	212c      	movs	r1, #44	; 0x2c
 800337a:	fb01 f303 	mul.w	r3, r1, r3
 800337e:	4413      	add	r3, r2
 8003380:	3342      	adds	r3, #66	; 0x42
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003386:	e093      	b.n	80034b0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	212c      	movs	r1, #44	; 0x2c
 800338e:	fb01 f303 	mul.w	r3, r1, r3
 8003392:	4413      	add	r3, r2
 8003394:	3342      	adds	r3, #66	; 0x42
 8003396:	2202      	movs	r2, #2
 8003398:	701a      	strb	r2, [r3, #0]
      break;
 800339a:	e089      	b.n	80034b0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800339c:	78bb      	ldrb	r3, [r7, #2]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d11d      	bne.n	80033de <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80033a2:	78fb      	ldrb	r3, [r7, #3]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	212c      	movs	r1, #44	; 0x2c
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	3355      	adds	r3, #85	; 0x55
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033b6:	78fb      	ldrb	r3, [r7, #3]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	212c      	movs	r1, #44	; 0x2c
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	3342      	adds	r3, #66	; 0x42
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80033c8:	e073      	b.n	80034b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	212c      	movs	r1, #44	; 0x2c
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	4413      	add	r3, r2
 80033d6:	3342      	adds	r3, #66	; 0x42
 80033d8:	2202      	movs	r2, #2
 80033da:	701a      	strb	r2, [r3, #0]
      break;
 80033dc:	e069      	b.n	80034b2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80033de:	78fb      	ldrb	r3, [r7, #3]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	212c      	movs	r1, #44	; 0x2c
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	3354      	adds	r3, #84	; 0x54
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	212c      	movs	r1, #44	; 0x2c
 80033f8:	fb01 f303 	mul.w	r3, r1, r3
 80033fc:	4413      	add	r3, r2
 80033fe:	3342      	adds	r3, #66	; 0x42
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
      break;
 8003404:	e055      	b.n	80034b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	212c      	movs	r1, #44	; 0x2c
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	4413      	add	r3, r2
 8003412:	3342      	adds	r3, #66	; 0x42
 8003414:	2202      	movs	r2, #2
 8003416:	701a      	strb	r2, [r3, #0]
      break;
 8003418:	e04b      	b.n	80034b2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800341a:	78bb      	ldrb	r3, [r7, #2]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d11d      	bne.n	800345c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	212c      	movs	r1, #44	; 0x2c
 8003426:	fb01 f303 	mul.w	r3, r1, r3
 800342a:	4413      	add	r3, r2
 800342c:	3355      	adds	r3, #85	; 0x55
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d109      	bne.n	8003448 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	212c      	movs	r1, #44	; 0x2c
 800343a:	fb01 f303 	mul.w	r3, r1, r3
 800343e:	4413      	add	r3, r2
 8003440:	3342      	adds	r3, #66	; 0x42
 8003442:	2200      	movs	r2, #0
 8003444:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003446:	e034      	b.n	80034b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	212c      	movs	r1, #44	; 0x2c
 800344e:	fb01 f303 	mul.w	r3, r1, r3
 8003452:	4413      	add	r3, r2
 8003454:	3342      	adds	r3, #66	; 0x42
 8003456:	2202      	movs	r2, #2
 8003458:	701a      	strb	r2, [r3, #0]
      break;
 800345a:	e02a      	b.n	80034b2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	212c      	movs	r1, #44	; 0x2c
 8003462:	fb01 f303 	mul.w	r3, r1, r3
 8003466:	4413      	add	r3, r2
 8003468:	3354      	adds	r3, #84	; 0x54
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d109      	bne.n	8003484 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	212c      	movs	r1, #44	; 0x2c
 8003476:	fb01 f303 	mul.w	r3, r1, r3
 800347a:	4413      	add	r3, r2
 800347c:	3342      	adds	r3, #66	; 0x42
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]
      break;
 8003482:	e016      	b.n	80034b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	212c      	movs	r1, #44	; 0x2c
 800348a:	fb01 f303 	mul.w	r3, r1, r3
 800348e:	4413      	add	r3, r2
 8003490:	3342      	adds	r3, #66	; 0x42
 8003492:	2202      	movs	r2, #2
 8003494:	701a      	strb	r2, [r3, #0]
      break;
 8003496:	e00c      	b.n	80034b2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	212c      	movs	r1, #44	; 0x2c
 800349e:	fb01 f303 	mul.w	r3, r1, r3
 80034a2:	4413      	add	r3, r2
 80034a4:	3342      	adds	r3, #66	; 0x42
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
      break;
 80034aa:	e002      	b.n	80034b2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80034ac:	bf00      	nop
 80034ae:	e000      	b.n	80034b2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80034b0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	212c      	movs	r1, #44	; 0x2c
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	4413      	add	r3, r2
 80034be:	3344      	adds	r3, #68	; 0x44
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	8b3a      	ldrh	r2, [r7, #24]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	202c      	movs	r0, #44	; 0x2c
 80034cc:	fb00 f303 	mul.w	r3, r0, r3
 80034d0:	440b      	add	r3, r1
 80034d2:	334c      	adds	r3, #76	; 0x4c
 80034d4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	212c      	movs	r1, #44	; 0x2c
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	4413      	add	r3, r2
 80034e2:	3360      	adds	r3, #96	; 0x60
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	212c      	movs	r1, #44	; 0x2c
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	3350      	adds	r3, #80	; 0x50
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	212c      	movs	r1, #44	; 0x2c
 8003500:	fb01 f303 	mul.w	r3, r1, r3
 8003504:	4413      	add	r3, r2
 8003506:	3339      	adds	r3, #57	; 0x39
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	212c      	movs	r1, #44	; 0x2c
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	4413      	add	r3, r2
 8003518:	3361      	adds	r3, #97	; 0x61
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6818      	ldr	r0, [r3, #0]
 8003522:	78fb      	ldrb	r3, [r7, #3]
 8003524:	222c      	movs	r2, #44	; 0x2c
 8003526:	fb02 f303 	mul.w	r3, r2, r3
 800352a:	3338      	adds	r3, #56	; 0x38
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	18d1      	adds	r1, r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	461a      	mov	r2, r3
 8003538:	f003 fa9e 	bl	8006a78 <USB_HC_StartXfer>
 800353c:	4603      	mov	r3, r0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop

08003548 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f002 ff9f 	bl	80064a2 <USB_GetMode>
 8003564:	4603      	mov	r3, r0
 8003566:	2b01      	cmp	r3, #1
 8003568:	f040 80f6 	bne.w	8003758 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f002 ff83 	bl	800647c <USB_ReadInterrupts>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80ec 	beq.w	8003756 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f002 ff7a 	bl	800647c <USB_ReadInterrupts>
 8003588:	4603      	mov	r3, r0
 800358a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003592:	d104      	bne.n	800359e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800359c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f002 ff6a 	bl	800647c <USB_ReadInterrupts>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035b2:	d104      	bne.n	80035be <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f002 ff5a 	bl	800647c <USB_ReadInterrupts>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035d2:	d104      	bne.n	80035de <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80035dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f002 ff4a 	bl	800647c <USB_ReadInterrupts>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d103      	bne.n	80035fa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2202      	movs	r2, #2
 80035f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f002 ff3c 	bl	800647c <USB_ReadInterrupts>
 8003604:	4603      	mov	r3, r0
 8003606:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800360a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800360e:	d11c      	bne.n	800364a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003618:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10f      	bne.n	800364a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800362a:	2110      	movs	r1, #16
 800362c:	6938      	ldr	r0, [r7, #16]
 800362e:	f002 fe2b 	bl	8006288 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003632:	6938      	ldr	r0, [r7, #16]
 8003634:	f002 fe5c 	bl	80062f0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2101      	movs	r1, #1
 800363e:	4618      	mov	r0, r3
 8003640:	f003 f832 	bl	80066a8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f005 fdff 	bl	8009248 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f002 ff14 	bl	800647c <USB_ReadInterrupts>
 8003654:	4603      	mov	r3, r0
 8003656:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800365a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800365e:	d102      	bne.n	8003666 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f001 f89e 	bl	80047a2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f002 ff06 	bl	800647c <USB_ReadInterrupts>
 8003670:	4603      	mov	r3, r0
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b08      	cmp	r3, #8
 8003678:	d106      	bne.n	8003688 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f005 fdc8 	bl	8009210 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2208      	movs	r2, #8
 8003686:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f002 fef5 	bl	800647c <USB_ReadInterrupts>
 8003692:	4603      	mov	r3, r0
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b10      	cmp	r3, #16
 800369a:	d101      	bne.n	80036a0 <HAL_HCD_IRQHandler+0x158>
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <HAL_HCD_IRQHandler+0x15a>
 80036a0:	2300      	movs	r3, #0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d012      	beq.n	80036cc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699a      	ldr	r2, [r3, #24]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0210 	bic.w	r2, r2, #16
 80036b4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 ffa1 	bl	80045fe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0210 	orr.w	r2, r2, #16
 80036ca:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f002 fed3 	bl	800647c <USB_ReadInterrupts>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036e0:	d13a      	bne.n	8003758 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 fb08 	bl	8006cfc <USB_HC_ReadInterrupt>
 80036ec:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	e025      	b.n	8003740 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d018      	beq.n	800373a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4413      	add	r3, r2
 8003710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800371a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371e:	d106      	bne.n	800372e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	4619      	mov	r1, r3
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f8ab 	bl	8003882 <HCD_HC_IN_IRQHandler>
 800372c:	e005      	b.n	800373a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	4619      	mov	r1, r3
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fbf9 	bl	8003f2c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	3301      	adds	r3, #1
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	429a      	cmp	r2, r3
 8003748:	d3d4      	bcc.n	80036f4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003752:	615a      	str	r2, [r3, #20]
 8003754:	e000      	b.n	8003758 <HAL_HCD_IRQHandler+0x210>
      return;
 8003756:	bf00      	nop
    }
  }
}
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_HCD_Start+0x16>
 8003770:	2302      	movs	r3, #2
 8003772:	e013      	b.n	800379c <HAL_HCD_Start+0x3e>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2101      	movs	r1, #1
 8003782:	4618      	mov	r0, r3
 8003784:	f002 fff4 	bl	8006770 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f002 fd0d 	bl	80061ac <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_HCD_Stop+0x16>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e00d      	b.n	80037d6 <HAL_HCD_Stop+0x32>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f003 fbe2 	bl	8006f90 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f002 ff96 	bl	800671c <USB_ResetPort>
 80037f0:	4603      	mov	r3, r0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	460b      	mov	r3, r1
 8003804:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003806:	78fb      	ldrb	r3, [r7, #3]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	212c      	movs	r1, #44	; 0x2c
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	4413      	add	r3, r2
 8003812:	3360      	adds	r3, #96	; 0x60
 8003814:	781b      	ldrb	r3, [r3, #0]
}
 8003816:	4618      	mov	r0, r3
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	460b      	mov	r3, r1
 800382c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	212c      	movs	r1, #44	; 0x2c
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	4413      	add	r3, r2
 800383a:	3350      	adds	r3, #80	; 0x50
 800383c:	681b      	ldr	r3, [r3, #0]
}
 800383e:	4618      	mov	r0, r3
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f002 ffda 	bl	8006810 <USB_GetCurrentFrame>
 800385c:	4603      	mov	r3, r0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f002 ffb5 	bl	80067e2 <USB_GetHostSpeed>
 8003878:	4603      	mov	r3, r0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b086      	sub	sp, #24
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	460b      	mov	r3, r1
 800388c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d11a      	bne.n	80038e8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038be:	461a      	mov	r2, r3
 80038c0:	2304      	movs	r3, #4
 80038c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	212c      	movs	r1, #44	; 0x2c
 80038ca:	fb01 f303 	mul.w	r3, r1, r3
 80038ce:	4413      	add	r3, r2
 80038d0:	3361      	adds	r3, #97	; 0x61
 80038d2:	2206      	movs	r2, #6
 80038d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	4611      	mov	r1, r2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f003 fa1c 	bl	8006d1e <USB_HC_Halt>
 80038e6:	e0af      	b.n	8003a48 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fe:	d11b      	bne.n	8003938 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4413      	add	r3, r2
 8003908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800390c:	461a      	mov	r2, r3
 800390e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003912:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	212c      	movs	r1, #44	; 0x2c
 800391a:	fb01 f303 	mul.w	r3, r1, r3
 800391e:	4413      	add	r3, r2
 8003920:	3361      	adds	r3, #97	; 0x61
 8003922:	2207      	movs	r2, #7
 8003924:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f003 f9f4 	bl	8006d1e <USB_HC_Halt>
 8003936:	e087      	b.n	8003a48 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b20      	cmp	r3, #32
 800394c:	d109      	bne.n	8003962 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4413      	add	r3, r2
 8003956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395a:	461a      	mov	r2, r3
 800395c:	2320      	movs	r3, #32
 800395e:	6093      	str	r3, [r2, #8]
 8003960:	e072      	b.n	8003a48 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4413      	add	r3, r2
 800396a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b08      	cmp	r3, #8
 8003976:	d11a      	bne.n	80039ae <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4413      	add	r3, r2
 8003980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003984:	461a      	mov	r2, r3
 8003986:	2308      	movs	r3, #8
 8003988:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	212c      	movs	r1, #44	; 0x2c
 8003990:	fb01 f303 	mul.w	r3, r1, r3
 8003994:	4413      	add	r3, r2
 8003996:	3361      	adds	r3, #97	; 0x61
 8003998:	2205      	movs	r2, #5
 800399a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	4611      	mov	r1, r2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f003 f9b9 	bl	8006d1e <USB_HC_Halt>
 80039ac:	e04c      	b.n	8003a48 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c4:	d11b      	bne.n	80039fe <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d2:	461a      	mov	r2, r3
 80039d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	212c      	movs	r1, #44	; 0x2c
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	4413      	add	r3, r2
 80039e6:	3361      	adds	r3, #97	; 0x61
 80039e8:	2208      	movs	r2, #8
 80039ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	4611      	mov	r1, r2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f003 f991 	bl	8006d1e <USB_HC_Halt>
 80039fc:	e024      	b.n	8003a48 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a10:	2b80      	cmp	r3, #128	; 0x80
 8003a12:	d119      	bne.n	8003a48 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a20:	461a      	mov	r2, r3
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	212c      	movs	r1, #44	; 0x2c
 8003a2c:	fb01 f303 	mul.w	r3, r1, r3
 8003a30:	4413      	add	r3, r2
 8003a32:	3361      	adds	r3, #97	; 0x61
 8003a34:	2206      	movs	r2, #6
 8003a36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f003 f96b 	bl	8006d1e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a5e:	d112      	bne.n	8003a86 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	4611      	mov	r1, r2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f003 f957 	bl	8006d1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a82:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003a84:	e24e      	b.n	8003f24 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	f040 80df 	bne.w	8003c5c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d019      	beq.n	8003ada <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	212c      	movs	r1, #44	; 0x2c
 8003aac:	fb01 f303 	mul.w	r3, r1, r3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3348      	adds	r3, #72	; 0x48
 8003ab4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	0159      	lsls	r1, r3, #5
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	440b      	add	r3, r1
 8003abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003ac8:	1ad2      	subs	r2, r2, r3
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	202c      	movs	r0, #44	; 0x2c
 8003ad0:	fb00 f303 	mul.w	r3, r0, r3
 8003ad4:	440b      	add	r3, r1
 8003ad6:	3350      	adds	r3, #80	; 0x50
 8003ad8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	212c      	movs	r1, #44	; 0x2c
 8003ae0:	fb01 f303 	mul.w	r3, r1, r3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3361      	adds	r3, #97	; 0x61
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	212c      	movs	r1, #44	; 0x2c
 8003af2:	fb01 f303 	mul.w	r3, r1, r3
 8003af6:	4413      	add	r3, r2
 8003af8:	335c      	adds	r3, #92	; 0x5c
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	212c      	movs	r1, #44	; 0x2c
 8003b16:	fb01 f303 	mul.w	r3, r1, r3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	333f      	adds	r3, #63	; 0x3f
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d009      	beq.n	8003b38 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	212c      	movs	r1, #44	; 0x2c
 8003b2a:	fb01 f303 	mul.w	r3, r1, r3
 8003b2e:	4413      	add	r3, r2
 8003b30:	333f      	adds	r3, #63	; 0x3f
 8003b32:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d111      	bne.n	8003b5c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	4611      	mov	r1, r2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f003 f8eb 	bl	8006d1e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b54:	461a      	mov	r2, r3
 8003b56:	2310      	movs	r3, #16
 8003b58:	6093      	str	r3, [r2, #8]
 8003b5a:	e03a      	b.n	8003bd2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	212c      	movs	r1, #44	; 0x2c
 8003b62:	fb01 f303 	mul.w	r3, r1, r3
 8003b66:	4413      	add	r3, r2
 8003b68:	333f      	adds	r3, #63	; 0x3f
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d009      	beq.n	8003b84 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	212c      	movs	r1, #44	; 0x2c
 8003b76:	fb01 f303 	mul.w	r3, r1, r3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	333f      	adds	r3, #63	; 0x3f
 8003b7e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d126      	bne.n	8003bd2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	0151      	lsls	r1, r2, #5
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	440a      	add	r2, r1
 8003b9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ba2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	212c      	movs	r1, #44	; 0x2c
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	3360      	adds	r3, #96	; 0x60
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	b2d9      	uxtb	r1, r3
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	202c      	movs	r0, #44	; 0x2c
 8003bc0:	fb00 f303 	mul.w	r3, r0, r3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3360      	adds	r3, #96	; 0x60
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f005 fb49 	bl	8009264 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d12b      	bne.n	8003c32 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	212c      	movs	r1, #44	; 0x2c
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	4413      	add	r3, r2
 8003be6:	3348      	adds	r3, #72	; 0x48
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	202c      	movs	r0, #44	; 0x2c
 8003bf0:	fb00 f202 	mul.w	r2, r0, r2
 8003bf4:	440a      	add	r2, r1
 8003bf6:	3240      	adds	r2, #64	; 0x40
 8003bf8:	8812      	ldrh	r2, [r2, #0]
 8003bfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 818e 	beq.w	8003f24 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	212c      	movs	r1, #44	; 0x2c
 8003c0e:	fb01 f303 	mul.w	r3, r1, r3
 8003c12:	4413      	add	r3, r2
 8003c14:	3354      	adds	r3, #84	; 0x54
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	f083 0301 	eor.w	r3, r3, #1
 8003c1c:	b2d8      	uxtb	r0, r3
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	212c      	movs	r1, #44	; 0x2c
 8003c24:	fb01 f303 	mul.w	r3, r1, r3
 8003c28:	4413      	add	r3, r2
 8003c2a:	3354      	adds	r3, #84	; 0x54
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	701a      	strb	r2, [r3, #0]
}
 8003c30:	e178      	b.n	8003f24 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	212c      	movs	r1, #44	; 0x2c
 8003c38:	fb01 f303 	mul.w	r3, r1, r3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3354      	adds	r3, #84	; 0x54
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	f083 0301 	eor.w	r3, r3, #1
 8003c46:	b2d8      	uxtb	r0, r3
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	212c      	movs	r1, #44	; 0x2c
 8003c4e:	fb01 f303 	mul.w	r3, r1, r3
 8003c52:	4413      	add	r3, r2
 8003c54:	3354      	adds	r3, #84	; 0x54
 8003c56:	4602      	mov	r2, r0
 8003c58:	701a      	strb	r2, [r3, #0]
}
 8003c5a:	e163      	b.n	8003f24 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	f040 80f6 	bne.w	8003e60 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	212c      	movs	r1, #44	; 0x2c
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	3361      	adds	r3, #97	; 0x61
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d109      	bne.n	8003c9c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	212c      	movs	r1, #44	; 0x2c
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	3360      	adds	r3, #96	; 0x60
 8003c96:	2201      	movs	r2, #1
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	e0c9      	b.n	8003e30 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	212c      	movs	r1, #44	; 0x2c
 8003ca2:	fb01 f303 	mul.w	r3, r1, r3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3361      	adds	r3, #97	; 0x61
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b05      	cmp	r3, #5
 8003cae:	d109      	bne.n	8003cc4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	212c      	movs	r1, #44	; 0x2c
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	3360      	adds	r3, #96	; 0x60
 8003cbe:	2205      	movs	r2, #5
 8003cc0:	701a      	strb	r2, [r3, #0]
 8003cc2:	e0b5      	b.n	8003e30 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	212c      	movs	r1, #44	; 0x2c
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	4413      	add	r3, r2
 8003cd0:	3361      	adds	r3, #97	; 0x61
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b06      	cmp	r3, #6
 8003cd6:	d009      	beq.n	8003cec <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	212c      	movs	r1, #44	; 0x2c
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3361      	adds	r3, #97	; 0x61
 8003ce6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d150      	bne.n	8003d8e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	212c      	movs	r1, #44	; 0x2c
 8003cf2:	fb01 f303 	mul.w	r3, r1, r3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	335c      	adds	r3, #92	; 0x5c
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	202c      	movs	r0, #44	; 0x2c
 8003d04:	fb00 f303 	mul.w	r3, r0, r3
 8003d08:	440b      	add	r3, r1
 8003d0a:	335c      	adds	r3, #92	; 0x5c
 8003d0c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	212c      	movs	r1, #44	; 0x2c
 8003d14:	fb01 f303 	mul.w	r3, r1, r3
 8003d18:	4413      	add	r3, r2
 8003d1a:	335c      	adds	r3, #92	; 0x5c
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d912      	bls.n	8003d48 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	212c      	movs	r1, #44	; 0x2c
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	335c      	adds	r3, #92	; 0x5c
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	212c      	movs	r1, #44	; 0x2c
 8003d3a:	fb01 f303 	mul.w	r3, r1, r3
 8003d3e:	4413      	add	r3, r2
 8003d40:	3360      	adds	r3, #96	; 0x60
 8003d42:	2204      	movs	r2, #4
 8003d44:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d46:	e073      	b.n	8003e30 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	212c      	movs	r1, #44	; 0x2c
 8003d4e:	fb01 f303 	mul.w	r3, r1, r3
 8003d52:	4413      	add	r3, r2
 8003d54:	3360      	adds	r3, #96	; 0x60
 8003d56:	2202      	movs	r2, #2
 8003d58:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d70:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d78:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d86:	461a      	mov	r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d8c:	e050      	b.n	8003e30 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	212c      	movs	r1, #44	; 0x2c
 8003d94:	fb01 f303 	mul.w	r3, r1, r3
 8003d98:	4413      	add	r3, r2
 8003d9a:	3361      	adds	r3, #97	; 0x61
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d122      	bne.n	8003de8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	212c      	movs	r1, #44	; 0x2c
 8003da8:	fb01 f303 	mul.w	r3, r1, r3
 8003dac:	4413      	add	r3, r2
 8003dae:	3360      	adds	r3, #96	; 0x60
 8003db0:	2202      	movs	r2, #2
 8003db2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dca:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dd2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de0:	461a      	mov	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	e023      	b.n	8003e30 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	212c      	movs	r1, #44	; 0x2c
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	3361      	adds	r3, #97	; 0x61
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b07      	cmp	r3, #7
 8003dfa:	d119      	bne.n	8003e30 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	212c      	movs	r1, #44	; 0x2c
 8003e02:	fb01 f303 	mul.w	r3, r1, r3
 8003e06:	4413      	add	r3, r2
 8003e08:	335c      	adds	r3, #92	; 0x5c
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	202c      	movs	r0, #44	; 0x2c
 8003e14:	fb00 f303 	mul.w	r3, r0, r3
 8003e18:	440b      	add	r3, r1
 8003e1a:	335c      	adds	r3, #92	; 0x5c
 8003e1c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	212c      	movs	r1, #44	; 0x2c
 8003e24:	fb01 f303 	mul.w	r3, r1, r3
 8003e28:	4413      	add	r3, r2
 8003e2a:	3360      	adds	r3, #96	; 0x60
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	2302      	movs	r3, #2
 8003e40:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	b2d9      	uxtb	r1, r3
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	202c      	movs	r0, #44	; 0x2c
 8003e4c:	fb00 f303 	mul.w	r3, r0, r3
 8003e50:	4413      	add	r3, r2
 8003e52:	3360      	adds	r3, #96	; 0x60
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f005 fa03 	bl	8009264 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003e5e:	e061      	b.n	8003f24 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	2b10      	cmp	r3, #16
 8003e74:	d156      	bne.n	8003f24 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	212c      	movs	r1, #44	; 0x2c
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	4413      	add	r3, r2
 8003e82:	333f      	adds	r3, #63	; 0x3f
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d111      	bne.n	8003eae <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	212c      	movs	r1, #44	; 0x2c
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	4413      	add	r3, r2
 8003e96:	335c      	adds	r3, #92	; 0x5c
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f002 ff39 	bl	8006d1e <USB_HC_Halt>
 8003eac:	e031      	b.n	8003f12 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	212c      	movs	r1, #44	; 0x2c
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	333f      	adds	r3, #63	; 0x3f
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d009      	beq.n	8003ed6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	212c      	movs	r1, #44	; 0x2c
 8003ec8:	fb01 f303 	mul.w	r3, r1, r3
 8003ecc:	4413      	add	r3, r2
 8003ece:	333f      	adds	r3, #63	; 0x3f
 8003ed0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d11d      	bne.n	8003f12 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	212c      	movs	r1, #44	; 0x2c
 8003edc:	fb01 f303 	mul.w	r3, r1, r3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	335c      	adds	r3, #92	; 0x5c
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d110      	bne.n	8003f12 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	212c      	movs	r1, #44	; 0x2c
 8003ef6:	fb01 f303 	mul.w	r3, r1, r3
 8003efa:	4413      	add	r3, r2
 8003efc:	3361      	adds	r3, #97	; 0x61
 8003efe:	2203      	movs	r2, #3
 8003f00:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f002 ff06 	bl	8006d1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1e:	461a      	mov	r2, r3
 8003f20:	2310      	movs	r3, #16
 8003f22:	6093      	str	r3, [r2, #8]
}
 8003f24:	bf00      	nop
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003f42:	78fb      	ldrb	r3, [r7, #3]
 8003f44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d11a      	bne.n	8003f92 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f68:	461a      	mov	r2, r3
 8003f6a:	2304      	movs	r3, #4
 8003f6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	212c      	movs	r1, #44	; 0x2c
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	4413      	add	r3, r2
 8003f7a:	3361      	adds	r3, #97	; 0x61
 8003f7c:	2206      	movs	r2, #6
 8003f7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	4611      	mov	r1, r2
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f002 fec7 	bl	8006d1e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003f90:	e331      	b.n	80045f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 0320 	and.w	r3, r3, #32
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	d12e      	bne.n	8004006 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2320      	movs	r3, #32
 8003fb8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	212c      	movs	r1, #44	; 0x2c
 8003fc0:	fb01 f303 	mul.w	r3, r1, r3
 8003fc4:	4413      	add	r3, r2
 8003fc6:	333d      	adds	r3, #61	; 0x3d
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	f040 8313 	bne.w	80045f6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	212c      	movs	r1, #44	; 0x2c
 8003fd6:	fb01 f303 	mul.w	r3, r1, r3
 8003fda:	4413      	add	r3, r2
 8003fdc:	333d      	adds	r3, #61	; 0x3d
 8003fde:	2200      	movs	r2, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	212c      	movs	r1, #44	; 0x2c
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	4413      	add	r3, r2
 8003fee:	3360      	adds	r3, #96	; 0x60
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f002 fe8d 	bl	8006d1e <USB_HC_Halt>
}
 8004004:	e2f7      	b.n	80045f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	4413      	add	r3, r2
 800400e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800401c:	d112      	bne.n	8004044 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	4413      	add	r3, r2
 8004026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800402a:	461a      	mov	r2, r3
 800402c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004030:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	4611      	mov	r1, r2
 800403c:	4618      	mov	r0, r3
 800403e:	f002 fe6e 	bl	8006d1e <USB_HC_Halt>
}
 8004042:	e2d8      	b.n	80045f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	4413      	add	r3, r2
 800404c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b01      	cmp	r3, #1
 8004058:	d140      	bne.n	80040dc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	212c      	movs	r1, #44	; 0x2c
 8004060:	fb01 f303 	mul.w	r3, r1, r3
 8004064:	4413      	add	r3, r2
 8004066:	335c      	adds	r3, #92	; 0x5c
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	4413      	add	r3, r2
 8004074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407e:	2b40      	cmp	r3, #64	; 0x40
 8004080:	d111      	bne.n	80040a6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	212c      	movs	r1, #44	; 0x2c
 8004088:	fb01 f303 	mul.w	r3, r1, r3
 800408c:	4413      	add	r3, r2
 800408e:	333d      	adds	r3, #61	; 0x3d
 8004090:	2201      	movs	r2, #1
 8004092:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	4413      	add	r3, r2
 800409c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a0:	461a      	mov	r2, r3
 80040a2:	2340      	movs	r3, #64	; 0x40
 80040a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b2:	461a      	mov	r2, r3
 80040b4:	2301      	movs	r3, #1
 80040b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	212c      	movs	r1, #44	; 0x2c
 80040be:	fb01 f303 	mul.w	r3, r1, r3
 80040c2:	4413      	add	r3, r2
 80040c4:	3361      	adds	r3, #97	; 0x61
 80040c6:	2201      	movs	r2, #1
 80040c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	4611      	mov	r1, r2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f002 fe22 	bl	8006d1e <USB_HC_Halt>
}
 80040da:	e28c      	b.n	80045f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ee:	2b40      	cmp	r3, #64	; 0x40
 80040f0:	d12c      	bne.n	800414c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	212c      	movs	r1, #44	; 0x2c
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	4413      	add	r3, r2
 80040fe:	3361      	adds	r3, #97	; 0x61
 8004100:	2204      	movs	r2, #4
 8004102:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	212c      	movs	r1, #44	; 0x2c
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	4413      	add	r3, r2
 8004110:	333d      	adds	r3, #61	; 0x3d
 8004112:	2201      	movs	r2, #1
 8004114:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	212c      	movs	r1, #44	; 0x2c
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	4413      	add	r3, r2
 8004122:	335c      	adds	r3, #92	; 0x5c
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	4611      	mov	r1, r2
 8004132:	4618      	mov	r0, r3
 8004134:	f002 fdf3 	bl	8006d1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	4413      	add	r3, r2
 8004140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004144:	461a      	mov	r2, r3
 8004146:	2340      	movs	r3, #64	; 0x40
 8004148:	6093      	str	r3, [r2, #8]
}
 800414a:	e254      	b.n	80045f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	4413      	add	r3, r2
 8004154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b08      	cmp	r3, #8
 8004160:	d11a      	bne.n	8004198 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	4413      	add	r3, r2
 800416a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416e:	461a      	mov	r2, r3
 8004170:	2308      	movs	r3, #8
 8004172:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	212c      	movs	r1, #44	; 0x2c
 800417a:	fb01 f303 	mul.w	r3, r1, r3
 800417e:	4413      	add	r3, r2
 8004180:	3361      	adds	r3, #97	; 0x61
 8004182:	2205      	movs	r2, #5
 8004184:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	4611      	mov	r1, r2
 8004190:	4618      	mov	r0, r3
 8004192:	f002 fdc4 	bl	8006d1e <USB_HC_Halt>
}
 8004196:	e22e      	b.n	80045f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2b10      	cmp	r3, #16
 80041ac:	d140      	bne.n	8004230 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	212c      	movs	r1, #44	; 0x2c
 80041b4:	fb01 f303 	mul.w	r3, r1, r3
 80041b8:	4413      	add	r3, r2
 80041ba:	335c      	adds	r3, #92	; 0x5c
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	212c      	movs	r1, #44	; 0x2c
 80041c6:	fb01 f303 	mul.w	r3, r1, r3
 80041ca:	4413      	add	r3, r2
 80041cc:	3361      	adds	r3, #97	; 0x61
 80041ce:	2203      	movs	r2, #3
 80041d0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	212c      	movs	r1, #44	; 0x2c
 80041d8:	fb01 f303 	mul.w	r3, r1, r3
 80041dc:	4413      	add	r3, r2
 80041de:	333d      	adds	r3, #61	; 0x3d
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d112      	bne.n	800420c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	212c      	movs	r1, #44	; 0x2c
 80041ec:	fb01 f303 	mul.w	r3, r1, r3
 80041f0:	4413      	add	r3, r2
 80041f2:	333c      	adds	r3, #60	; 0x3c
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d108      	bne.n	800420c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	212c      	movs	r1, #44	; 0x2c
 8004200:	fb01 f303 	mul.w	r3, r1, r3
 8004204:	4413      	add	r3, r2
 8004206:	333d      	adds	r3, #61	; 0x3d
 8004208:	2201      	movs	r2, #1
 800420a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	4611      	mov	r1, r2
 8004216:	4618      	mov	r0, r3
 8004218:	f002 fd81 	bl	8006d1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	4413      	add	r3, r2
 8004224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004228:	461a      	mov	r2, r3
 800422a:	2310      	movs	r3, #16
 800422c:	6093      	str	r3, [r2, #8]
}
 800422e:	e1e2      	b.n	80045f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	4413      	add	r3, r2
 8004238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004242:	2b80      	cmp	r3, #128	; 0x80
 8004244:	d164      	bne.n	8004310 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d111      	bne.n	8004272 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	212c      	movs	r1, #44	; 0x2c
 8004254:	fb01 f303 	mul.w	r3, r1, r3
 8004258:	4413      	add	r3, r2
 800425a:	3361      	adds	r3, #97	; 0x61
 800425c:	2206      	movs	r2, #6
 800425e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	4611      	mov	r1, r2
 800426a:	4618      	mov	r0, r3
 800426c:	f002 fd57 	bl	8006d1e <USB_HC_Halt>
 8004270:	e044      	b.n	80042fc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	212c      	movs	r1, #44	; 0x2c
 8004278:	fb01 f303 	mul.w	r3, r1, r3
 800427c:	4413      	add	r3, r2
 800427e:	335c      	adds	r3, #92	; 0x5c
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	202c      	movs	r0, #44	; 0x2c
 800428a:	fb00 f303 	mul.w	r3, r0, r3
 800428e:	440b      	add	r3, r1
 8004290:	335c      	adds	r3, #92	; 0x5c
 8004292:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	212c      	movs	r1, #44	; 0x2c
 800429a:	fb01 f303 	mul.w	r3, r1, r3
 800429e:	4413      	add	r3, r2
 80042a0:	335c      	adds	r3, #92	; 0x5c
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d920      	bls.n	80042ea <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	212c      	movs	r1, #44	; 0x2c
 80042ae:	fb01 f303 	mul.w	r3, r1, r3
 80042b2:	4413      	add	r3, r2
 80042b4:	335c      	adds	r3, #92	; 0x5c
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	212c      	movs	r1, #44	; 0x2c
 80042c0:	fb01 f303 	mul.w	r3, r1, r3
 80042c4:	4413      	add	r3, r2
 80042c6:	3360      	adds	r3, #96	; 0x60
 80042c8:	2204      	movs	r2, #4
 80042ca:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	b2d9      	uxtb	r1, r3
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	202c      	movs	r0, #44	; 0x2c
 80042d6:	fb00 f303 	mul.w	r3, r0, r3
 80042da:	4413      	add	r3, r2
 80042dc:	3360      	adds	r3, #96	; 0x60
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	461a      	mov	r2, r3
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f004 ffbe 	bl	8009264 <HAL_HCD_HC_NotifyURBChange_Callback>
 80042e8:	e008      	b.n	80042fc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	212c      	movs	r1, #44	; 0x2c
 80042f0:	fb01 f303 	mul.w	r3, r1, r3
 80042f4:	4413      	add	r3, r2
 80042f6:	3360      	adds	r3, #96	; 0x60
 80042f8:	2202      	movs	r2, #2
 80042fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	4413      	add	r3, r2
 8004304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004308:	461a      	mov	r2, r3
 800430a:	2380      	movs	r3, #128	; 0x80
 800430c:	6093      	str	r3, [r2, #8]
}
 800430e:	e172      	b.n	80045f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	4413      	add	r3, r2
 8004318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004326:	d11b      	bne.n	8004360 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	212c      	movs	r1, #44	; 0x2c
 800432e:	fb01 f303 	mul.w	r3, r1, r3
 8004332:	4413      	add	r3, r2
 8004334:	3361      	adds	r3, #97	; 0x61
 8004336:	2208      	movs	r2, #8
 8004338:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	4611      	mov	r1, r2
 8004344:	4618      	mov	r0, r3
 8004346:	f002 fcea 	bl	8006d1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	4413      	add	r3, r2
 8004352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004356:	461a      	mov	r2, r3
 8004358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800435c:	6093      	str	r3, [r2, #8]
}
 800435e:	e14a      	b.n	80045f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	4413      	add	r3, r2
 8004368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b02      	cmp	r3, #2
 8004374:	f040 813f 	bne.w	80045f6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	212c      	movs	r1, #44	; 0x2c
 800437e:	fb01 f303 	mul.w	r3, r1, r3
 8004382:	4413      	add	r3, r2
 8004384:	3361      	adds	r3, #97	; 0x61
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d17d      	bne.n	8004488 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	212c      	movs	r1, #44	; 0x2c
 8004392:	fb01 f303 	mul.w	r3, r1, r3
 8004396:	4413      	add	r3, r2
 8004398:	3360      	adds	r3, #96	; 0x60
 800439a:	2201      	movs	r2, #1
 800439c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	212c      	movs	r1, #44	; 0x2c
 80043a4:	fb01 f303 	mul.w	r3, r1, r3
 80043a8:	4413      	add	r3, r2
 80043aa:	333f      	adds	r3, #63	; 0x3f
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d00a      	beq.n	80043c8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	212c      	movs	r1, #44	; 0x2c
 80043b8:	fb01 f303 	mul.w	r3, r1, r3
 80043bc:	4413      	add	r3, r2
 80043be:	333f      	adds	r3, #63	; 0x3f
 80043c0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	f040 8100 	bne.w	80045c8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d113      	bne.n	80043f8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	212c      	movs	r1, #44	; 0x2c
 80043d6:	fb01 f303 	mul.w	r3, r1, r3
 80043da:	4413      	add	r3, r2
 80043dc:	3355      	adds	r3, #85	; 0x55
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	f083 0301 	eor.w	r3, r3, #1
 80043e4:	b2d8      	uxtb	r0, r3
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	212c      	movs	r1, #44	; 0x2c
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	4413      	add	r3, r2
 80043f2:	3355      	adds	r3, #85	; 0x55
 80043f4:	4602      	mov	r2, r0
 80043f6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	f040 80e3 	bne.w	80045c8 <HCD_HC_OUT_IRQHandler+0x69c>
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	212c      	movs	r1, #44	; 0x2c
 8004408:	fb01 f303 	mul.w	r3, r1, r3
 800440c:	4413      	add	r3, r2
 800440e:	334c      	adds	r3, #76	; 0x4c
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 80d8 	beq.w	80045c8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	212c      	movs	r1, #44	; 0x2c
 800441e:	fb01 f303 	mul.w	r3, r1, r3
 8004422:	4413      	add	r3, r2
 8004424:	334c      	adds	r3, #76	; 0x4c
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	202c      	movs	r0, #44	; 0x2c
 800442e:	fb00 f202 	mul.w	r2, r0, r2
 8004432:	440a      	add	r2, r1
 8004434:	3240      	adds	r2, #64	; 0x40
 8004436:	8812      	ldrh	r2, [r2, #0]
 8004438:	4413      	add	r3, r2
 800443a:	3b01      	subs	r3, #1
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	202c      	movs	r0, #44	; 0x2c
 8004442:	fb00 f202 	mul.w	r2, r0, r2
 8004446:	440a      	add	r2, r1
 8004448:	3240      	adds	r2, #64	; 0x40
 800444a:	8812      	ldrh	r2, [r2, #0]
 800444c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004450:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80b5 	beq.w	80045c8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	212c      	movs	r1, #44	; 0x2c
 8004464:	fb01 f303 	mul.w	r3, r1, r3
 8004468:	4413      	add	r3, r2
 800446a:	3355      	adds	r3, #85	; 0x55
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	f083 0301 	eor.w	r3, r3, #1
 8004472:	b2d8      	uxtb	r0, r3
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	212c      	movs	r1, #44	; 0x2c
 800447a:	fb01 f303 	mul.w	r3, r1, r3
 800447e:	4413      	add	r3, r2
 8004480:	3355      	adds	r3, #85	; 0x55
 8004482:	4602      	mov	r2, r0
 8004484:	701a      	strb	r2, [r3, #0]
 8004486:	e09f      	b.n	80045c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	212c      	movs	r1, #44	; 0x2c
 800448e:	fb01 f303 	mul.w	r3, r1, r3
 8004492:	4413      	add	r3, r2
 8004494:	3361      	adds	r3, #97	; 0x61
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b03      	cmp	r3, #3
 800449a:	d109      	bne.n	80044b0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	212c      	movs	r1, #44	; 0x2c
 80044a2:	fb01 f303 	mul.w	r3, r1, r3
 80044a6:	4413      	add	r3, r2
 80044a8:	3360      	adds	r3, #96	; 0x60
 80044aa:	2202      	movs	r2, #2
 80044ac:	701a      	strb	r2, [r3, #0]
 80044ae:	e08b      	b.n	80045c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	212c      	movs	r1, #44	; 0x2c
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	4413      	add	r3, r2
 80044bc:	3361      	adds	r3, #97	; 0x61
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d109      	bne.n	80044d8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	212c      	movs	r1, #44	; 0x2c
 80044ca:	fb01 f303 	mul.w	r3, r1, r3
 80044ce:	4413      	add	r3, r2
 80044d0:	3360      	adds	r3, #96	; 0x60
 80044d2:	2202      	movs	r2, #2
 80044d4:	701a      	strb	r2, [r3, #0]
 80044d6:	e077      	b.n	80045c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	212c      	movs	r1, #44	; 0x2c
 80044de:	fb01 f303 	mul.w	r3, r1, r3
 80044e2:	4413      	add	r3, r2
 80044e4:	3361      	adds	r3, #97	; 0x61
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b05      	cmp	r3, #5
 80044ea:	d109      	bne.n	8004500 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	212c      	movs	r1, #44	; 0x2c
 80044f2:	fb01 f303 	mul.w	r3, r1, r3
 80044f6:	4413      	add	r3, r2
 80044f8:	3360      	adds	r3, #96	; 0x60
 80044fa:	2205      	movs	r2, #5
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	e063      	b.n	80045c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	212c      	movs	r1, #44	; 0x2c
 8004506:	fb01 f303 	mul.w	r3, r1, r3
 800450a:	4413      	add	r3, r2
 800450c:	3361      	adds	r3, #97	; 0x61
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2b06      	cmp	r3, #6
 8004512:	d009      	beq.n	8004528 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	212c      	movs	r1, #44	; 0x2c
 800451a:	fb01 f303 	mul.w	r3, r1, r3
 800451e:	4413      	add	r3, r2
 8004520:	3361      	adds	r3, #97	; 0x61
 8004522:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004524:	2b08      	cmp	r3, #8
 8004526:	d14f      	bne.n	80045c8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	212c      	movs	r1, #44	; 0x2c
 800452e:	fb01 f303 	mul.w	r3, r1, r3
 8004532:	4413      	add	r3, r2
 8004534:	335c      	adds	r3, #92	; 0x5c
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	202c      	movs	r0, #44	; 0x2c
 8004540:	fb00 f303 	mul.w	r3, r0, r3
 8004544:	440b      	add	r3, r1
 8004546:	335c      	adds	r3, #92	; 0x5c
 8004548:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	212c      	movs	r1, #44	; 0x2c
 8004550:	fb01 f303 	mul.w	r3, r1, r3
 8004554:	4413      	add	r3, r2
 8004556:	335c      	adds	r3, #92	; 0x5c
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d912      	bls.n	8004584 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	212c      	movs	r1, #44	; 0x2c
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	4413      	add	r3, r2
 800456a:	335c      	adds	r3, #92	; 0x5c
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	212c      	movs	r1, #44	; 0x2c
 8004576:	fb01 f303 	mul.w	r3, r1, r3
 800457a:	4413      	add	r3, r2
 800457c:	3360      	adds	r3, #96	; 0x60
 800457e:	2204      	movs	r2, #4
 8004580:	701a      	strb	r2, [r3, #0]
 8004582:	e021      	b.n	80045c8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	212c      	movs	r1, #44	; 0x2c
 800458a:	fb01 f303 	mul.w	r3, r1, r3
 800458e:	4413      	add	r3, r2
 8004590:	3360      	adds	r3, #96	; 0x60
 8004592:	2202      	movs	r2, #2
 8004594:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	4413      	add	r3, r2
 800459e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045ac:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045b4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c2:	461a      	mov	r2, r3
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d4:	461a      	mov	r2, r3
 80045d6:	2302      	movs	r3, #2
 80045d8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	b2d9      	uxtb	r1, r3
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	202c      	movs	r0, #44	; 0x2c
 80045e4:	fb00 f303 	mul.w	r3, r0, r3
 80045e8:	4413      	add	r3, r2
 80045ea:	3360      	adds	r3, #96	; 0x60
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f004 fe37 	bl	8009264 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80045f6:	bf00      	nop
 80045f8:	3720      	adds	r7, #32
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b08a      	sub	sp, #40	; 0x28
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	0c5b      	lsrs	r3, r3, #17
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	091b      	lsrs	r3, r3, #4
 800462e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004632:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d004      	beq.n	8004644 <HCD_RXQLVL_IRQHandler+0x46>
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b05      	cmp	r3, #5
 800463e:	f000 80a9 	beq.w	8004794 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004642:	e0aa      	b.n	800479a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 80a6 	beq.w	8004798 <HCD_RXQLVL_IRQHandler+0x19a>
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	212c      	movs	r1, #44	; 0x2c
 8004652:	fb01 f303 	mul.w	r3, r1, r3
 8004656:	4413      	add	r3, r2
 8004658:	3344      	adds	r3, #68	; 0x44
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 809b 	beq.w	8004798 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	212c      	movs	r1, #44	; 0x2c
 8004668:	fb01 f303 	mul.w	r3, r1, r3
 800466c:	4413      	add	r3, r2
 800466e:	3350      	adds	r3, #80	; 0x50
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	441a      	add	r2, r3
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	202c      	movs	r0, #44	; 0x2c
 800467c:	fb00 f303 	mul.w	r3, r0, r3
 8004680:	440b      	add	r3, r1
 8004682:	334c      	adds	r3, #76	; 0x4c
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d87a      	bhi.n	8004780 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	212c      	movs	r1, #44	; 0x2c
 8004694:	fb01 f303 	mul.w	r3, r1, r3
 8004698:	4413      	add	r3, r2
 800469a:	3344      	adds	r3, #68	; 0x44
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	b292      	uxth	r2, r2
 80046a2:	4619      	mov	r1, r3
 80046a4:	f001 fe92 	bl	80063cc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	212c      	movs	r1, #44	; 0x2c
 80046ae:	fb01 f303 	mul.w	r3, r1, r3
 80046b2:	4413      	add	r3, r2
 80046b4:	3344      	adds	r3, #68	; 0x44
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	441a      	add	r2, r3
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	202c      	movs	r0, #44	; 0x2c
 80046c2:	fb00 f303 	mul.w	r3, r0, r3
 80046c6:	440b      	add	r3, r1
 80046c8:	3344      	adds	r3, #68	; 0x44
 80046ca:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	212c      	movs	r1, #44	; 0x2c
 80046d2:	fb01 f303 	mul.w	r3, r1, r3
 80046d6:	4413      	add	r3, r2
 80046d8:	3350      	adds	r3, #80	; 0x50
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	441a      	add	r2, r3
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	202c      	movs	r0, #44	; 0x2c
 80046e6:	fb00 f303 	mul.w	r3, r0, r3
 80046ea:	440b      	add	r3, r1
 80046ec:	3350      	adds	r3, #80	; 0x50
 80046ee:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	0cdb      	lsrs	r3, r3, #19
 8004700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004704:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	212c      	movs	r1, #44	; 0x2c
 800470c:	fb01 f303 	mul.w	r3, r1, r3
 8004710:	4413      	add	r3, r2
 8004712:	3340      	adds	r3, #64	; 0x40
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	4293      	cmp	r3, r2
 800471c:	d13c      	bne.n	8004798 <HCD_RXQLVL_IRQHandler+0x19a>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d039      	beq.n	8004798 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	4413      	add	r3, r2
 800472c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800473a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004742:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	4413      	add	r3, r2
 800474c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004750:	461a      	mov	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	212c      	movs	r1, #44	; 0x2c
 800475c:	fb01 f303 	mul.w	r3, r1, r3
 8004760:	4413      	add	r3, r2
 8004762:	3354      	adds	r3, #84	; 0x54
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	f083 0301 	eor.w	r3, r3, #1
 800476a:	b2d8      	uxtb	r0, r3
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	212c      	movs	r1, #44	; 0x2c
 8004772:	fb01 f303 	mul.w	r3, r1, r3
 8004776:	4413      	add	r3, r2
 8004778:	3354      	adds	r3, #84	; 0x54
 800477a:	4602      	mov	r2, r0
 800477c:	701a      	strb	r2, [r3, #0]
      break;
 800477e:	e00b      	b.n	8004798 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	212c      	movs	r1, #44	; 0x2c
 8004786:	fb01 f303 	mul.w	r3, r1, r3
 800478a:	4413      	add	r3, r2
 800478c:	3360      	adds	r3, #96	; 0x60
 800478e:	2204      	movs	r2, #4
 8004790:	701a      	strb	r2, [r3, #0]
      break;
 8004792:	e001      	b.n	8004798 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004794:	bf00      	nop
 8004796:	e000      	b.n	800479a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004798:	bf00      	nop
  }
}
 800479a:	bf00      	nop
 800479c:	3728      	adds	r7, #40	; 0x28
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b086      	sub	sp, #24
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80047ce:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d10b      	bne.n	80047f2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d102      	bne.n	80047ea <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f004 fd21 	bl	800922c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	f043 0302 	orr.w	r3, r3, #2
 80047f0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d132      	bne.n	8004862 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f043 0308 	orr.w	r3, r3, #8
 8004802:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 0304 	and.w	r3, r3, #4
 800480a:	2b04      	cmp	r3, #4
 800480c:	d126      	bne.n	800485c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d113      	bne.n	800483e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800481c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004820:	d106      	bne.n	8004830 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2102      	movs	r1, #2
 8004828:	4618      	mov	r0, r3
 800482a:	f001 ff3d 	bl	80066a8 <USB_InitFSLSPClkSel>
 800482e:	e011      	b.n	8004854 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2101      	movs	r1, #1
 8004836:	4618      	mov	r0, r3
 8004838:	f001 ff36 	bl	80066a8 <USB_InitFSLSPClkSel>
 800483c:	e00a      	b.n	8004854 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d106      	bne.n	8004854 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800484c:	461a      	mov	r2, r3
 800484e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004852:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f004 fd13 	bl	8009280 <HAL_HCD_PortEnabled_Callback>
 800485a:	e002      	b.n	8004862 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f004 fd1d 	bl	800929c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b20      	cmp	r3, #32
 800486a:	d103      	bne.n	8004874 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f043 0320 	orr.w	r3, r3, #32
 8004872:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800487a:	461a      	mov	r2, r3
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	6013      	str	r3, [r2, #0]
}
 8004880:	bf00      	nop
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e12b      	b.n	8004af2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fc fdbc 	bl	800142c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2224      	movs	r2, #36	; 0x24
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0201 	bic.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048ec:	f001 fa20 	bl	8005d30 <HAL_RCC_GetPCLK1Freq>
 80048f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	4a81      	ldr	r2, [pc, #516]	; (8004afc <HAL_I2C_Init+0x274>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d807      	bhi.n	800490c <HAL_I2C_Init+0x84>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4a80      	ldr	r2, [pc, #512]	; (8004b00 <HAL_I2C_Init+0x278>)
 8004900:	4293      	cmp	r3, r2
 8004902:	bf94      	ite	ls
 8004904:	2301      	movls	r3, #1
 8004906:	2300      	movhi	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	e006      	b.n	800491a <HAL_I2C_Init+0x92>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4a7d      	ldr	r2, [pc, #500]	; (8004b04 <HAL_I2C_Init+0x27c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	bf94      	ite	ls
 8004914:	2301      	movls	r3, #1
 8004916:	2300      	movhi	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e0e7      	b.n	8004af2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4a78      	ldr	r2, [pc, #480]	; (8004b08 <HAL_I2C_Init+0x280>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	0c9b      	lsrs	r3, r3, #18
 800492c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	4a6a      	ldr	r2, [pc, #424]	; (8004afc <HAL_I2C_Init+0x274>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d802      	bhi.n	800495c <HAL_I2C_Init+0xd4>
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	3301      	adds	r3, #1
 800495a:	e009      	b.n	8004970 <HAL_I2C_Init+0xe8>
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	4a69      	ldr	r2, [pc, #420]	; (8004b0c <HAL_I2C_Init+0x284>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	099b      	lsrs	r3, r3, #6
 800496e:	3301      	adds	r3, #1
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	430b      	orrs	r3, r1
 8004976:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004982:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	495c      	ldr	r1, [pc, #368]	; (8004afc <HAL_I2C_Init+0x274>)
 800498c:	428b      	cmp	r3, r1
 800498e:	d819      	bhi.n	80049c4 <HAL_I2C_Init+0x13c>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	1e59      	subs	r1, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	fbb1 f3f3 	udiv	r3, r1, r3
 800499e:	1c59      	adds	r1, r3, #1
 80049a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80049a4:	400b      	ands	r3, r1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <HAL_I2C_Init+0x138>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	1e59      	subs	r1, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80049b8:	3301      	adds	r3, #1
 80049ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049be:	e051      	b.n	8004a64 <HAL_I2C_Init+0x1dc>
 80049c0:	2304      	movs	r3, #4
 80049c2:	e04f      	b.n	8004a64 <HAL_I2C_Init+0x1dc>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d111      	bne.n	80049f0 <HAL_I2C_Init+0x168>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	1e58      	subs	r0, r3, #1
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6859      	ldr	r1, [r3, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	440b      	add	r3, r1
 80049da:	fbb0 f3f3 	udiv	r3, r0, r3
 80049de:	3301      	adds	r3, #1
 80049e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	bf0c      	ite	eq
 80049e8:	2301      	moveq	r3, #1
 80049ea:	2300      	movne	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	e012      	b.n	8004a16 <HAL_I2C_Init+0x18e>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1e58      	subs	r0, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6859      	ldr	r1, [r3, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	440b      	add	r3, r1
 80049fe:	0099      	lsls	r1, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a06:	3301      	adds	r3, #1
 8004a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bf0c      	ite	eq
 8004a10:	2301      	moveq	r3, #1
 8004a12:	2300      	movne	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <HAL_I2C_Init+0x196>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e022      	b.n	8004a64 <HAL_I2C_Init+0x1dc>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10e      	bne.n	8004a44 <HAL_I2C_Init+0x1bc>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	1e58      	subs	r0, r3, #1
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6859      	ldr	r1, [r3, #4]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	440b      	add	r3, r1
 8004a34:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a38:	3301      	adds	r3, #1
 8004a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a42:	e00f      	b.n	8004a64 <HAL_I2C_Init+0x1dc>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	1e58      	subs	r0, r3, #1
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6859      	ldr	r1, [r3, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	0099      	lsls	r1, r3, #2
 8004a54:	440b      	add	r3, r1
 8004a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	6809      	ldr	r1, [r1, #0]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69da      	ldr	r2, [r3, #28]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6911      	ldr	r1, [r2, #16]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	68d2      	ldr	r2, [r2, #12]
 8004a9e:	4311      	orrs	r1, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6812      	ldr	r2, [r2, #0]
 8004aa4:	430b      	orrs	r3, r1
 8004aa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695a      	ldr	r2, [r3, #20]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	000186a0 	.word	0x000186a0
 8004b00:	001e847f 	.word	0x001e847f
 8004b04:	003d08ff 	.word	0x003d08ff
 8004b08:	431bde83 	.word	0x431bde83
 8004b0c:	10624dd3 	.word	0x10624dd3

08004b10 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e128      	b.n	8004d74 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d109      	bne.n	8004b42 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a90      	ldr	r2, [pc, #576]	; (8004d7c <HAL_I2S_Init+0x26c>)
 8004b3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7fc fcbd 	bl	80014bc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2202      	movs	r2, #2
 8004b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6812      	ldr	r2, [r2, #0]
 8004b54:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004b58:	f023 030f 	bic.w	r3, r3, #15
 8004b5c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2202      	movs	r2, #2
 8004b64:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d060      	beq.n	8004c30 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d102      	bne.n	8004b7c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004b76:	2310      	movs	r3, #16
 8004b78:	617b      	str	r3, [r7, #20]
 8004b7a:	e001      	b.n	8004b80 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004b7c:	2320      	movs	r3, #32
 8004b7e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2b20      	cmp	r3, #32
 8004b86:	d802      	bhi.n	8004b8e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004b8e:	2001      	movs	r0, #1
 8004b90:	f001 f9c4 	bl	8005f1c <HAL_RCCEx_GetPeriphCLKFreq>
 8004b94:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b9e:	d125      	bne.n	8004bec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d010      	beq.n	8004bca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	461a      	mov	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	3305      	adds	r3, #5
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	e01f      	b.n	8004c0a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	461a      	mov	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be6:	3305      	adds	r3, #5
 8004be8:	613b      	str	r3, [r7, #16]
 8004bea:	e00e      	b.n	8004c0a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c06:	3305      	adds	r3, #5
 8004c08:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	4a5c      	ldr	r2, [pc, #368]	; (8004d80 <HAL_I2S_Init+0x270>)
 8004c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c12:	08db      	lsrs	r3, r3, #3
 8004c14:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	085b      	lsrs	r3, r3, #1
 8004c26:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	61bb      	str	r3, [r7, #24]
 8004c2e:	e003      	b.n	8004c38 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004c30:	2302      	movs	r3, #2
 8004c32:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d902      	bls.n	8004c44 <HAL_I2S_Init+0x134>
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	2bff      	cmp	r3, #255	; 0xff
 8004c42:	d907      	bls.n	8004c54 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c48:	f043 0210 	orr.w	r2, r3, #16
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e08f      	b.n	8004d74 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691a      	ldr	r2, [r3, #16]
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	ea42 0103 	orr.w	r1, r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69fa      	ldr	r2, [r7, #28]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c72:	f023 030f 	bic.w	r3, r3, #15
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6851      	ldr	r1, [r2, #4]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6892      	ldr	r2, [r2, #8]
 8004c7e:	4311      	orrs	r1, r2
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	68d2      	ldr	r2, [r2, #12]
 8004c84:	4311      	orrs	r1, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6992      	ldr	r2, [r2, #24]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c96:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d161      	bne.n	8004d64 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a38      	ldr	r2, [pc, #224]	; (8004d84 <HAL_I2S_Init+0x274>)
 8004ca4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a37      	ldr	r2, [pc, #220]	; (8004d88 <HAL_I2S_Init+0x278>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d101      	bne.n	8004cb4 <HAL_I2S_Init+0x1a4>
 8004cb0:	4b36      	ldr	r3, [pc, #216]	; (8004d8c <HAL_I2S_Init+0x27c>)
 8004cb2:	e001      	b.n	8004cb8 <HAL_I2S_Init+0x1a8>
 8004cb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6812      	ldr	r2, [r2, #0]
 8004cbe:	4932      	ldr	r1, [pc, #200]	; (8004d88 <HAL_I2S_Init+0x278>)
 8004cc0:	428a      	cmp	r2, r1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_I2S_Init+0x1b8>
 8004cc4:	4a31      	ldr	r2, [pc, #196]	; (8004d8c <HAL_I2S_Init+0x27c>)
 8004cc6:	e001      	b.n	8004ccc <HAL_I2S_Init+0x1bc>
 8004cc8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004ccc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004cd0:	f023 030f 	bic.w	r3, r3, #15
 8004cd4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a2b      	ldr	r2, [pc, #172]	; (8004d88 <HAL_I2S_Init+0x278>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d101      	bne.n	8004ce4 <HAL_I2S_Init+0x1d4>
 8004ce0:	4b2a      	ldr	r3, [pc, #168]	; (8004d8c <HAL_I2S_Init+0x27c>)
 8004ce2:	e001      	b.n	8004ce8 <HAL_I2S_Init+0x1d8>
 8004ce4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ce8:	2202      	movs	r2, #2
 8004cea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a25      	ldr	r2, [pc, #148]	; (8004d88 <HAL_I2S_Init+0x278>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d101      	bne.n	8004cfa <HAL_I2S_Init+0x1ea>
 8004cf6:	4b25      	ldr	r3, [pc, #148]	; (8004d8c <HAL_I2S_Init+0x27c>)
 8004cf8:	e001      	b.n	8004cfe <HAL_I2S_Init+0x1ee>
 8004cfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d0a:	d003      	beq.n	8004d14 <HAL_I2S_Init+0x204>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d103      	bne.n	8004d1c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004d14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d18:	613b      	str	r3, [r7, #16]
 8004d1a:	e001      	b.n	8004d20 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d34:	4313      	orrs	r3, r2
 8004d36:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	897b      	ldrh	r3, [r7, #10]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d4c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a0d      	ldr	r2, [pc, #52]	; (8004d88 <HAL_I2S_Init+0x278>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d101      	bne.n	8004d5c <HAL_I2S_Init+0x24c>
 8004d58:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <HAL_I2S_Init+0x27c>)
 8004d5a:	e001      	b.n	8004d60 <HAL_I2S_Init+0x250>
 8004d5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d60:	897a      	ldrh	r2, [r7, #10]
 8004d62:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3720      	adds	r7, #32
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	08004e87 	.word	0x08004e87
 8004d80:	cccccccd 	.word	0xcccccccd
 8004d84:	08004f9d 	.word	0x08004f9d
 8004d88:	40003800 	.word	0x40003800
 8004d8c:	40003400 	.word	0x40003400

08004d90 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	881a      	ldrh	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	1c9a      	adds	r2, r3, #2
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10e      	bne.n	8004e20 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e10:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff ffb8 	bl	8004d90 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e20:	bf00      	nop
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3a:	b292      	uxth	r2, r2
 8004e3c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	1c9a      	adds	r2, r3, #2
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10e      	bne.n	8004e7e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e6e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff ff93 	bl	8004da4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e7e:	bf00      	nop
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b086      	sub	sp, #24
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d13a      	bne.n	8004f18 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d109      	bne.n	8004ec0 <I2S_IRQHandler+0x3a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb6:	2b40      	cmp	r3, #64	; 0x40
 8004eb8:	d102      	bne.n	8004ec0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff ffb4 	bl	8004e28 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec6:	2b40      	cmp	r3, #64	; 0x40
 8004ec8:	d126      	bne.n	8004f18 <I2S_IRQHandler+0x92>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	d11f      	bne.n	8004f18 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ee6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004ee8:	2300      	movs	r3, #0
 8004eea:	613b      	str	r3, [r7, #16]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0a:	f043 0202 	orr.w	r2, r3, #2
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff ff50 	bl	8004db8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d136      	bne.n	8004f92 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d109      	bne.n	8004f42 <I2S_IRQHandler+0xbc>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f38:	2b80      	cmp	r3, #128	; 0x80
 8004f3a:	d102      	bne.n	8004f42 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff ff45 	bl	8004dcc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d122      	bne.n	8004f92 <I2S_IRQHandler+0x10c>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	d11b      	bne.n	8004f92 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f68:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f84:	f043 0204 	orr.w	r2, r3, #4
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7ff ff13 	bl	8004db8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f92:	bf00      	nop
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
	...

08004f9c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a92      	ldr	r2, [pc, #584]	; (80051fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d101      	bne.n	8004fba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004fb6:	4b92      	ldr	r3, [pc, #584]	; (8005200 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fb8:	e001      	b.n	8004fbe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004fba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a8b      	ldr	r2, [pc, #556]	; (80051fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d101      	bne.n	8004fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004fd4:	4b8a      	ldr	r3, [pc, #552]	; (8005200 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fd6:	e001      	b.n	8004fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004fd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fe8:	d004      	beq.n	8004ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f040 8099 	bne.w	8005126 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d107      	bne.n	800500e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f925 	bl	8005258 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b01      	cmp	r3, #1
 8005016:	d107      	bne.n	8005028 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f9c8 	bl	80053b8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502e:	2b40      	cmp	r3, #64	; 0x40
 8005030:	d13a      	bne.n	80050a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b00      	cmp	r3, #0
 800503a:	d035      	beq.n	80050a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a6e      	ldr	r2, [pc, #440]	; (80051fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d101      	bne.n	800504a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005046:	4b6e      	ldr	r3, [pc, #440]	; (8005200 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005048:	e001      	b.n	800504e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800504a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4969      	ldr	r1, [pc, #420]	; (80051fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005056:	428b      	cmp	r3, r1
 8005058:	d101      	bne.n	800505e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800505a:	4b69      	ldr	r3, [pc, #420]	; (8005200 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800505c:	e001      	b.n	8005062 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800505e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005062:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005066:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005076:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509a:	f043 0202 	orr.w	r2, r3, #2
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7ff fe88 	bl	8004db8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	f040 80c3 	bne.w	800523a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 80bd 	beq.w	800523a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050ce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a49      	ldr	r2, [pc, #292]	; (80051fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d101      	bne.n	80050de <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80050da:	4b49      	ldr	r3, [pc, #292]	; (8005200 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050dc:	e001      	b.n	80050e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80050de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4944      	ldr	r1, [pc, #272]	; (80051fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050ea:	428b      	cmp	r3, r1
 80050ec:	d101      	bne.n	80050f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80050ee:	4b44      	ldr	r3, [pc, #272]	; (8005200 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050f0:	e001      	b.n	80050f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80050f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050fa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80050fc:	2300      	movs	r3, #0
 80050fe:	60bb      	str	r3, [r7, #8]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	60bb      	str	r3, [r7, #8]
 8005108:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005116:	f043 0204 	orr.w	r2, r3, #4
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7ff fe4a 	bl	8004db8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005124:	e089      	b.n	800523a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b02      	cmp	r3, #2
 800512e:	d107      	bne.n	8005140 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f8be 	bl	80052bc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b01      	cmp	r3, #1
 8005148:	d107      	bne.n	800515a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f8fd 	bl	8005354 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005160:	2b40      	cmp	r3, #64	; 0x40
 8005162:	d12f      	bne.n	80051c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f003 0320 	and.w	r3, r3, #32
 800516a:	2b00      	cmp	r3, #0
 800516c:	d02a      	beq.n	80051c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800517c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1e      	ldr	r2, [pc, #120]	; (80051fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d101      	bne.n	800518c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005188:	4b1d      	ldr	r3, [pc, #116]	; (8005200 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800518a:	e001      	b.n	8005190 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800518c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4919      	ldr	r1, [pc, #100]	; (80051fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005198:	428b      	cmp	r3, r1
 800519a:	d101      	bne.n	80051a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800519c:	4b18      	ldr	r3, [pc, #96]	; (8005200 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800519e:	e001      	b.n	80051a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80051a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b6:	f043 0202 	orr.w	r2, r3, #2
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff fdfa 	bl	8004db8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d136      	bne.n	800523c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d031      	beq.n	800523c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a07      	ldr	r2, [pc, #28]	; (80051fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d101      	bne.n	80051e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80051e2:	4b07      	ldr	r3, [pc, #28]	; (8005200 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80051e4:	e001      	b.n	80051ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80051e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4902      	ldr	r1, [pc, #8]	; (80051fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80051f2:	428b      	cmp	r3, r1
 80051f4:	d106      	bne.n	8005204 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80051f6:	4b02      	ldr	r3, [pc, #8]	; (8005200 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80051f8:	e006      	b.n	8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80051fa:	bf00      	nop
 80051fc:	40003800 	.word	0x40003800
 8005200:	40003400 	.word	0x40003400
 8005204:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005208:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800520c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800521c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	f043 0204 	orr.w	r2, r3, #4
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff fdc0 	bl	8004db8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005238:	e000      	b.n	800523c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800523a:	bf00      	nop
}
 800523c:	bf00      	nop
 800523e:	3720      	adds	r7, #32
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	1c99      	adds	r1, r3, #2
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6251      	str	r1, [r2, #36]	; 0x24
 800526a:	881a      	ldrh	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d113      	bne.n	80052b2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005298:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d106      	bne.n	80052b2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7ff ffc9 	bl	8005244 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052b2:	bf00      	nop
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	1c99      	adds	r1, r3, #2
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6251      	str	r1, [r2, #36]	; 0x24
 80052ce:	8819      	ldrh	r1, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a1d      	ldr	r2, [pc, #116]	; (800534c <I2SEx_TxISR_I2SExt+0x90>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d101      	bne.n	80052de <I2SEx_TxISR_I2SExt+0x22>
 80052da:	4b1d      	ldr	r3, [pc, #116]	; (8005350 <I2SEx_TxISR_I2SExt+0x94>)
 80052dc:	e001      	b.n	80052e2 <I2SEx_TxISR_I2SExt+0x26>
 80052de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052e2:	460a      	mov	r2, r1
 80052e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d121      	bne.n	8005342 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a12      	ldr	r2, [pc, #72]	; (800534c <I2SEx_TxISR_I2SExt+0x90>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d101      	bne.n	800530c <I2SEx_TxISR_I2SExt+0x50>
 8005308:	4b11      	ldr	r3, [pc, #68]	; (8005350 <I2SEx_TxISR_I2SExt+0x94>)
 800530a:	e001      	b.n	8005310 <I2SEx_TxISR_I2SExt+0x54>
 800530c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	490d      	ldr	r1, [pc, #52]	; (800534c <I2SEx_TxISR_I2SExt+0x90>)
 8005318:	428b      	cmp	r3, r1
 800531a:	d101      	bne.n	8005320 <I2SEx_TxISR_I2SExt+0x64>
 800531c:	4b0c      	ldr	r3, [pc, #48]	; (8005350 <I2SEx_TxISR_I2SExt+0x94>)
 800531e:	e001      	b.n	8005324 <I2SEx_TxISR_I2SExt+0x68>
 8005320:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005324:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005328:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800532e:	b29b      	uxth	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d106      	bne.n	8005342 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7ff ff81 	bl	8005244 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005342:	bf00      	nop
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40003800 	.word	0x40003800
 8005350:	40003400 	.word	0x40003400

08005354 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68d8      	ldr	r0, [r3, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	1c99      	adds	r1, r3, #2
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800536c:	b282      	uxth	r2, r0
 800536e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005374:	b29b      	uxth	r3, r3
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005382:	b29b      	uxth	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d113      	bne.n	80053b0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005396:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d106      	bne.n	80053b0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7ff ff4a 	bl	8005244 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a20      	ldr	r2, [pc, #128]	; (8005448 <I2SEx_RxISR_I2SExt+0x90>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d101      	bne.n	80053ce <I2SEx_RxISR_I2SExt+0x16>
 80053ca:	4b20      	ldr	r3, [pc, #128]	; (800544c <I2SEx_RxISR_I2SExt+0x94>)
 80053cc:	e001      	b.n	80053d2 <I2SEx_RxISR_I2SExt+0x1a>
 80053ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053d2:	68d8      	ldr	r0, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	1c99      	adds	r1, r3, #2
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80053de:	b282      	uxth	r2, r0
 80053e0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d121      	bne.n	800543e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a12      	ldr	r2, [pc, #72]	; (8005448 <I2SEx_RxISR_I2SExt+0x90>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d101      	bne.n	8005408 <I2SEx_RxISR_I2SExt+0x50>
 8005404:	4b11      	ldr	r3, [pc, #68]	; (800544c <I2SEx_RxISR_I2SExt+0x94>)
 8005406:	e001      	b.n	800540c <I2SEx_RxISR_I2SExt+0x54>
 8005408:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	490d      	ldr	r1, [pc, #52]	; (8005448 <I2SEx_RxISR_I2SExt+0x90>)
 8005414:	428b      	cmp	r3, r1
 8005416:	d101      	bne.n	800541c <I2SEx_RxISR_I2SExt+0x64>
 8005418:	4b0c      	ldr	r3, [pc, #48]	; (800544c <I2SEx_RxISR_I2SExt+0x94>)
 800541a:	e001      	b.n	8005420 <I2SEx_RxISR_I2SExt+0x68>
 800541c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005420:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005424:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d106      	bne.n	800543e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7ff ff03 	bl	8005244 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800543e:	bf00      	nop
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40003800 	.word	0x40003800
 800544c:	40003400 	.word	0x40003400

08005450 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e267      	b.n	8005932 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d075      	beq.n	800555a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800546e:	4b88      	ldr	r3, [pc, #544]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 030c 	and.w	r3, r3, #12
 8005476:	2b04      	cmp	r3, #4
 8005478:	d00c      	beq.n	8005494 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800547a:	4b85      	ldr	r3, [pc, #532]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005482:	2b08      	cmp	r3, #8
 8005484:	d112      	bne.n	80054ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005486:	4b82      	ldr	r3, [pc, #520]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800548e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005492:	d10b      	bne.n	80054ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005494:	4b7e      	ldr	r3, [pc, #504]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d05b      	beq.n	8005558 <HAL_RCC_OscConfig+0x108>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d157      	bne.n	8005558 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e242      	b.n	8005932 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b4:	d106      	bne.n	80054c4 <HAL_RCC_OscConfig+0x74>
 80054b6:	4b76      	ldr	r3, [pc, #472]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a75      	ldr	r2, [pc, #468]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 80054bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	e01d      	b.n	8005500 <HAL_RCC_OscConfig+0xb0>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054cc:	d10c      	bne.n	80054e8 <HAL_RCC_OscConfig+0x98>
 80054ce:	4b70      	ldr	r3, [pc, #448]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a6f      	ldr	r2, [pc, #444]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 80054d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	4b6d      	ldr	r3, [pc, #436]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a6c      	ldr	r2, [pc, #432]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 80054e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	e00b      	b.n	8005500 <HAL_RCC_OscConfig+0xb0>
 80054e8:	4b69      	ldr	r3, [pc, #420]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a68      	ldr	r2, [pc, #416]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 80054ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054f2:	6013      	str	r3, [r2, #0]
 80054f4:	4b66      	ldr	r3, [pc, #408]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a65      	ldr	r2, [pc, #404]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 80054fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d013      	beq.n	8005530 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005508:	f7fc f9c0 	bl	800188c <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005510:	f7fc f9bc 	bl	800188c <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b64      	cmp	r3, #100	; 0x64
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e207      	b.n	8005932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005522:	4b5b      	ldr	r3, [pc, #364]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0f0      	beq.n	8005510 <HAL_RCC_OscConfig+0xc0>
 800552e:	e014      	b.n	800555a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005530:	f7fc f9ac 	bl	800188c <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005538:	f7fc f9a8 	bl	800188c <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b64      	cmp	r3, #100	; 0x64
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e1f3      	b.n	8005932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800554a:	4b51      	ldr	r3, [pc, #324]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1f0      	bne.n	8005538 <HAL_RCC_OscConfig+0xe8>
 8005556:	e000      	b.n	800555a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d063      	beq.n	800562e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005566:	4b4a      	ldr	r3, [pc, #296]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 030c 	and.w	r3, r3, #12
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00b      	beq.n	800558a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005572:	4b47      	ldr	r3, [pc, #284]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800557a:	2b08      	cmp	r3, #8
 800557c:	d11c      	bne.n	80055b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800557e:	4b44      	ldr	r3, [pc, #272]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d116      	bne.n	80055b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800558a:	4b41      	ldr	r3, [pc, #260]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d005      	beq.n	80055a2 <HAL_RCC_OscConfig+0x152>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d001      	beq.n	80055a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e1c7      	b.n	8005932 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055a2:	4b3b      	ldr	r3, [pc, #236]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	4937      	ldr	r1, [pc, #220]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055b6:	e03a      	b.n	800562e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d020      	beq.n	8005602 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055c0:	4b34      	ldr	r3, [pc, #208]	; (8005694 <HAL_RCC_OscConfig+0x244>)
 80055c2:	2201      	movs	r2, #1
 80055c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c6:	f7fc f961 	bl	800188c <HAL_GetTick>
 80055ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055cc:	e008      	b.n	80055e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ce:	f7fc f95d 	bl	800188c <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d901      	bls.n	80055e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e1a8      	b.n	8005932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055e0:	4b2b      	ldr	r3, [pc, #172]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d0f0      	beq.n	80055ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ec:	4b28      	ldr	r3, [pc, #160]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	4925      	ldr	r1, [pc, #148]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	600b      	str	r3, [r1, #0]
 8005600:	e015      	b.n	800562e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005602:	4b24      	ldr	r3, [pc, #144]	; (8005694 <HAL_RCC_OscConfig+0x244>)
 8005604:	2200      	movs	r2, #0
 8005606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005608:	f7fc f940 	bl	800188c <HAL_GetTick>
 800560c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800560e:	e008      	b.n	8005622 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005610:	f7fc f93c 	bl	800188c <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d901      	bls.n	8005622 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e187      	b.n	8005932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005622:	4b1b      	ldr	r3, [pc, #108]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1f0      	bne.n	8005610 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	2b00      	cmp	r3, #0
 8005638:	d036      	beq.n	80056a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d016      	beq.n	8005670 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005642:	4b15      	ldr	r3, [pc, #84]	; (8005698 <HAL_RCC_OscConfig+0x248>)
 8005644:	2201      	movs	r2, #1
 8005646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005648:	f7fc f920 	bl	800188c <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005650:	f7fc f91c 	bl	800188c <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e167      	b.n	8005932 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005662:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <HAL_RCC_OscConfig+0x240>)
 8005664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0f0      	beq.n	8005650 <HAL_RCC_OscConfig+0x200>
 800566e:	e01b      	b.n	80056a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005670:	4b09      	ldr	r3, [pc, #36]	; (8005698 <HAL_RCC_OscConfig+0x248>)
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005676:	f7fc f909 	bl	800188c <HAL_GetTick>
 800567a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800567c:	e00e      	b.n	800569c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800567e:	f7fc f905 	bl	800188c <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d907      	bls.n	800569c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e150      	b.n	8005932 <HAL_RCC_OscConfig+0x4e2>
 8005690:	40023800 	.word	0x40023800
 8005694:	42470000 	.word	0x42470000
 8005698:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800569c:	4b88      	ldr	r3, [pc, #544]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 800569e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1ea      	bne.n	800567e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 8097 	beq.w	80057e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056b6:	2300      	movs	r3, #0
 80056b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056ba:	4b81      	ldr	r3, [pc, #516]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10f      	bne.n	80056e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056c6:	2300      	movs	r3, #0
 80056c8:	60bb      	str	r3, [r7, #8]
 80056ca:	4b7d      	ldr	r3, [pc, #500]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	4a7c      	ldr	r2, [pc, #496]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 80056d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d4:	6413      	str	r3, [r2, #64]	; 0x40
 80056d6:	4b7a      	ldr	r3, [pc, #488]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056de:	60bb      	str	r3, [r7, #8]
 80056e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056e2:	2301      	movs	r3, #1
 80056e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e6:	4b77      	ldr	r3, [pc, #476]	; (80058c4 <HAL_RCC_OscConfig+0x474>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d118      	bne.n	8005724 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056f2:	4b74      	ldr	r3, [pc, #464]	; (80058c4 <HAL_RCC_OscConfig+0x474>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a73      	ldr	r2, [pc, #460]	; (80058c4 <HAL_RCC_OscConfig+0x474>)
 80056f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056fe:	f7fc f8c5 	bl	800188c <HAL_GetTick>
 8005702:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005706:	f7fc f8c1 	bl	800188c <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e10c      	b.n	8005932 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005718:	4b6a      	ldr	r3, [pc, #424]	; (80058c4 <HAL_RCC_OscConfig+0x474>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0f0      	beq.n	8005706 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d106      	bne.n	800573a <HAL_RCC_OscConfig+0x2ea>
 800572c:	4b64      	ldr	r3, [pc, #400]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 800572e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005730:	4a63      	ldr	r2, [pc, #396]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 8005732:	f043 0301 	orr.w	r3, r3, #1
 8005736:	6713      	str	r3, [r2, #112]	; 0x70
 8005738:	e01c      	b.n	8005774 <HAL_RCC_OscConfig+0x324>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	2b05      	cmp	r3, #5
 8005740:	d10c      	bne.n	800575c <HAL_RCC_OscConfig+0x30c>
 8005742:	4b5f      	ldr	r3, [pc, #380]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 8005744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005746:	4a5e      	ldr	r2, [pc, #376]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 8005748:	f043 0304 	orr.w	r3, r3, #4
 800574c:	6713      	str	r3, [r2, #112]	; 0x70
 800574e:	4b5c      	ldr	r3, [pc, #368]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 8005750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005752:	4a5b      	ldr	r2, [pc, #364]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 8005754:	f043 0301 	orr.w	r3, r3, #1
 8005758:	6713      	str	r3, [r2, #112]	; 0x70
 800575a:	e00b      	b.n	8005774 <HAL_RCC_OscConfig+0x324>
 800575c:	4b58      	ldr	r3, [pc, #352]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 800575e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005760:	4a57      	ldr	r2, [pc, #348]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 8005762:	f023 0301 	bic.w	r3, r3, #1
 8005766:	6713      	str	r3, [r2, #112]	; 0x70
 8005768:	4b55      	ldr	r3, [pc, #340]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 800576a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576c:	4a54      	ldr	r2, [pc, #336]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 800576e:	f023 0304 	bic.w	r3, r3, #4
 8005772:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d015      	beq.n	80057a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577c:	f7fc f886 	bl	800188c <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005782:	e00a      	b.n	800579a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005784:	f7fc f882 	bl	800188c <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005792:	4293      	cmp	r3, r2
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e0cb      	b.n	8005932 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800579a:	4b49      	ldr	r3, [pc, #292]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 800579c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0ee      	beq.n	8005784 <HAL_RCC_OscConfig+0x334>
 80057a6:	e014      	b.n	80057d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057a8:	f7fc f870 	bl	800188c <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ae:	e00a      	b.n	80057c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057b0:	f7fc f86c 	bl	800188c <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80057be:	4293      	cmp	r3, r2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e0b5      	b.n	8005932 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057c6:	4b3e      	ldr	r3, [pc, #248]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 80057c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1ee      	bne.n	80057b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057d2:	7dfb      	ldrb	r3, [r7, #23]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d105      	bne.n	80057e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057d8:	4b39      	ldr	r3, [pc, #228]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 80057da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057dc:	4a38      	ldr	r2, [pc, #224]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 80057de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 80a1 	beq.w	8005930 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057ee:	4b34      	ldr	r3, [pc, #208]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 030c 	and.w	r3, r3, #12
 80057f6:	2b08      	cmp	r3, #8
 80057f8:	d05c      	beq.n	80058b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d141      	bne.n	8005886 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005802:	4b31      	ldr	r3, [pc, #196]	; (80058c8 <HAL_RCC_OscConfig+0x478>)
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005808:	f7fc f840 	bl	800188c <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005810:	f7fc f83c 	bl	800188c <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e087      	b.n	8005932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005822:	4b27      	ldr	r3, [pc, #156]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1f0      	bne.n	8005810 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	69da      	ldr	r2, [r3, #28]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	019b      	lsls	r3, r3, #6
 800583e:	431a      	orrs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005844:	085b      	lsrs	r3, r3, #1
 8005846:	3b01      	subs	r3, #1
 8005848:	041b      	lsls	r3, r3, #16
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005850:	061b      	lsls	r3, r3, #24
 8005852:	491b      	ldr	r1, [pc, #108]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 8005854:	4313      	orrs	r3, r2
 8005856:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005858:	4b1b      	ldr	r3, [pc, #108]	; (80058c8 <HAL_RCC_OscConfig+0x478>)
 800585a:	2201      	movs	r2, #1
 800585c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800585e:	f7fc f815 	bl	800188c <HAL_GetTick>
 8005862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005864:	e008      	b.n	8005878 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005866:	f7fc f811 	bl	800188c <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d901      	bls.n	8005878 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e05c      	b.n	8005932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005878:	4b11      	ldr	r3, [pc, #68]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0f0      	beq.n	8005866 <HAL_RCC_OscConfig+0x416>
 8005884:	e054      	b.n	8005930 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005886:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <HAL_RCC_OscConfig+0x478>)
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800588c:	f7fb fffe 	bl	800188c <HAL_GetTick>
 8005890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005894:	f7fb fffa 	bl	800188c <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e045      	b.n	8005932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a6:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <HAL_RCC_OscConfig+0x470>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1f0      	bne.n	8005894 <HAL_RCC_OscConfig+0x444>
 80058b2:	e03d      	b.n	8005930 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d107      	bne.n	80058cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e038      	b.n	8005932 <HAL_RCC_OscConfig+0x4e2>
 80058c0:	40023800 	.word	0x40023800
 80058c4:	40007000 	.word	0x40007000
 80058c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058cc:	4b1b      	ldr	r3, [pc, #108]	; (800593c <HAL_RCC_OscConfig+0x4ec>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d028      	beq.n	800592c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d121      	bne.n	800592c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d11a      	bne.n	800592c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058fc:	4013      	ands	r3, r2
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005902:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005904:	4293      	cmp	r3, r2
 8005906:	d111      	bne.n	800592c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005912:	085b      	lsrs	r3, r3, #1
 8005914:	3b01      	subs	r3, #1
 8005916:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005918:	429a      	cmp	r2, r3
 800591a:	d107      	bne.n	800592c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005926:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005928:	429a      	cmp	r2, r3
 800592a:	d001      	beq.n	8005930 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e000      	b.n	8005932 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	40023800 	.word	0x40023800

08005940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e0cc      	b.n	8005aee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005954:	4b68      	ldr	r3, [pc, #416]	; (8005af8 <HAL_RCC_ClockConfig+0x1b8>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d90c      	bls.n	800597c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005962:	4b65      	ldr	r3, [pc, #404]	; (8005af8 <HAL_RCC_ClockConfig+0x1b8>)
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800596a:	4b63      	ldr	r3, [pc, #396]	; (8005af8 <HAL_RCC_ClockConfig+0x1b8>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	429a      	cmp	r2, r3
 8005976:	d001      	beq.n	800597c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e0b8      	b.n	8005aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d020      	beq.n	80059ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d005      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005994:	4b59      	ldr	r3, [pc, #356]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	4a58      	ldr	r2, [pc, #352]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 800599a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800599e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d005      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059ac:	4b53      	ldr	r3, [pc, #332]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	4a52      	ldr	r2, [pc, #328]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 80059b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059b8:	4b50      	ldr	r3, [pc, #320]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	494d      	ldr	r1, [pc, #308]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d044      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d107      	bne.n	80059ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059de:	4b47      	ldr	r3, [pc, #284]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d119      	bne.n	8005a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e07f      	b.n	8005aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d003      	beq.n	80059fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d107      	bne.n	8005a0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059fe:	4b3f      	ldr	r3, [pc, #252]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d109      	bne.n	8005a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e06f      	b.n	8005aee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a0e:	4b3b      	ldr	r3, [pc, #236]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e067      	b.n	8005aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a1e:	4b37      	ldr	r3, [pc, #220]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f023 0203 	bic.w	r2, r3, #3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	4934      	ldr	r1, [pc, #208]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a30:	f7fb ff2c 	bl	800188c <HAL_GetTick>
 8005a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a36:	e00a      	b.n	8005a4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a38:	f7fb ff28 	bl	800188c <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e04f      	b.n	8005aee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a4e:	4b2b      	ldr	r3, [pc, #172]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f003 020c 	and.w	r2, r3, #12
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d1eb      	bne.n	8005a38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a60:	4b25      	ldr	r3, [pc, #148]	; (8005af8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0307 	and.w	r3, r3, #7
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d20c      	bcs.n	8005a88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a6e:	4b22      	ldr	r3, [pc, #136]	; (8005af8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a76:	4b20      	ldr	r3, [pc, #128]	; (8005af8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d001      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e032      	b.n	8005aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d008      	beq.n	8005aa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a94:	4b19      	ldr	r3, [pc, #100]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	4916      	ldr	r1, [pc, #88]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d009      	beq.n	8005ac6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ab2:	4b12      	ldr	r3, [pc, #72]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	490e      	ldr	r1, [pc, #56]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ac6:	f000 f821 	bl	8005b0c <HAL_RCC_GetSysClockFreq>
 8005aca:	4602      	mov	r2, r0
 8005acc:	4b0b      	ldr	r3, [pc, #44]	; (8005afc <HAL_RCC_ClockConfig+0x1bc>)
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	091b      	lsrs	r3, r3, #4
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	490a      	ldr	r1, [pc, #40]	; (8005b00 <HAL_RCC_ClockConfig+0x1c0>)
 8005ad8:	5ccb      	ldrb	r3, [r1, r3]
 8005ada:	fa22 f303 	lsr.w	r3, r2, r3
 8005ade:	4a09      	ldr	r2, [pc, #36]	; (8005b04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ae2:	4b09      	ldr	r3, [pc, #36]	; (8005b08 <HAL_RCC_ClockConfig+0x1c8>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fb fe8c 	bl	8001804 <HAL_InitTick>

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	40023c00 	.word	0x40023c00
 8005afc:	40023800 	.word	0x40023800
 8005b00:	0800993c 	.word	0x0800993c
 8005b04:	20000000 	.word	0x20000000
 8005b08:	20000004 	.word	0x20000004

08005b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b10:	b094      	sub	sp, #80	; 0x50
 8005b12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	647b      	str	r3, [r7, #68]	; 0x44
 8005b18:	2300      	movs	r3, #0
 8005b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b24:	4b79      	ldr	r3, [pc, #484]	; (8005d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f003 030c 	and.w	r3, r3, #12
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d00d      	beq.n	8005b4c <HAL_RCC_GetSysClockFreq+0x40>
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	f200 80e1 	bhi.w	8005cf8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d002      	beq.n	8005b40 <HAL_RCC_GetSysClockFreq+0x34>
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	d003      	beq.n	8005b46 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b3e:	e0db      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b40:	4b73      	ldr	r3, [pc, #460]	; (8005d10 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b42:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005b44:	e0db      	b.n	8005cfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b46:	4b73      	ldr	r3, [pc, #460]	; (8005d14 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b4a:	e0d8      	b.n	8005cfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b4c:	4b6f      	ldr	r3, [pc, #444]	; (8005d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b54:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b56:	4b6d      	ldr	r3, [pc, #436]	; (8005d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d063      	beq.n	8005c2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b62:	4b6a      	ldr	r3, [pc, #424]	; (8005d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	099b      	lsrs	r3, r3, #6
 8005b68:	2200      	movs	r2, #0
 8005b6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b74:	633b      	str	r3, [r7, #48]	; 0x30
 8005b76:	2300      	movs	r3, #0
 8005b78:	637b      	str	r3, [r7, #52]	; 0x34
 8005b7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b7e:	4622      	mov	r2, r4
 8005b80:	462b      	mov	r3, r5
 8005b82:	f04f 0000 	mov.w	r0, #0
 8005b86:	f04f 0100 	mov.w	r1, #0
 8005b8a:	0159      	lsls	r1, r3, #5
 8005b8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b90:	0150      	lsls	r0, r2, #5
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	4621      	mov	r1, r4
 8005b98:	1a51      	subs	r1, r2, r1
 8005b9a:	6139      	str	r1, [r7, #16]
 8005b9c:	4629      	mov	r1, r5
 8005b9e:	eb63 0301 	sbc.w	r3, r3, r1
 8005ba2:	617b      	str	r3, [r7, #20]
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	f04f 0300 	mov.w	r3, #0
 8005bac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bb0:	4659      	mov	r1, fp
 8005bb2:	018b      	lsls	r3, r1, #6
 8005bb4:	4651      	mov	r1, sl
 8005bb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bba:	4651      	mov	r1, sl
 8005bbc:	018a      	lsls	r2, r1, #6
 8005bbe:	4651      	mov	r1, sl
 8005bc0:	ebb2 0801 	subs.w	r8, r2, r1
 8005bc4:	4659      	mov	r1, fp
 8005bc6:	eb63 0901 	sbc.w	r9, r3, r1
 8005bca:	f04f 0200 	mov.w	r2, #0
 8005bce:	f04f 0300 	mov.w	r3, #0
 8005bd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bde:	4690      	mov	r8, r2
 8005be0:	4699      	mov	r9, r3
 8005be2:	4623      	mov	r3, r4
 8005be4:	eb18 0303 	adds.w	r3, r8, r3
 8005be8:	60bb      	str	r3, [r7, #8]
 8005bea:	462b      	mov	r3, r5
 8005bec:	eb49 0303 	adc.w	r3, r9, r3
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	f04f 0200 	mov.w	r2, #0
 8005bf6:	f04f 0300 	mov.w	r3, #0
 8005bfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005bfe:	4629      	mov	r1, r5
 8005c00:	024b      	lsls	r3, r1, #9
 8005c02:	4621      	mov	r1, r4
 8005c04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c08:	4621      	mov	r1, r4
 8005c0a:	024a      	lsls	r2, r1, #9
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c12:	2200      	movs	r2, #0
 8005c14:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c1c:	f7fa fea2 	bl	8000964 <__aeabi_uldivmod>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	4613      	mov	r3, r2
 8005c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c28:	e058      	b.n	8005cdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c2a:	4b38      	ldr	r3, [pc, #224]	; (8005d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	099b      	lsrs	r3, r3, #6
 8005c30:	2200      	movs	r2, #0
 8005c32:	4618      	mov	r0, r3
 8005c34:	4611      	mov	r1, r2
 8005c36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c3a:	623b      	str	r3, [r7, #32]
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c44:	4642      	mov	r2, r8
 8005c46:	464b      	mov	r3, r9
 8005c48:	f04f 0000 	mov.w	r0, #0
 8005c4c:	f04f 0100 	mov.w	r1, #0
 8005c50:	0159      	lsls	r1, r3, #5
 8005c52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c56:	0150      	lsls	r0, r2, #5
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4641      	mov	r1, r8
 8005c5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c62:	4649      	mov	r1, r9
 8005c64:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c68:	f04f 0200 	mov.w	r2, #0
 8005c6c:	f04f 0300 	mov.w	r3, #0
 8005c70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c7c:	ebb2 040a 	subs.w	r4, r2, sl
 8005c80:	eb63 050b 	sbc.w	r5, r3, fp
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	f04f 0300 	mov.w	r3, #0
 8005c8c:	00eb      	lsls	r3, r5, #3
 8005c8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c92:	00e2      	lsls	r2, r4, #3
 8005c94:	4614      	mov	r4, r2
 8005c96:	461d      	mov	r5, r3
 8005c98:	4643      	mov	r3, r8
 8005c9a:	18e3      	adds	r3, r4, r3
 8005c9c:	603b      	str	r3, [r7, #0]
 8005c9e:	464b      	mov	r3, r9
 8005ca0:	eb45 0303 	adc.w	r3, r5, r3
 8005ca4:	607b      	str	r3, [r7, #4]
 8005ca6:	f04f 0200 	mov.w	r2, #0
 8005caa:	f04f 0300 	mov.w	r3, #0
 8005cae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cb2:	4629      	mov	r1, r5
 8005cb4:	028b      	lsls	r3, r1, #10
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	028a      	lsls	r2, r1, #10
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	61bb      	str	r3, [r7, #24]
 8005cca:	61fa      	str	r2, [r7, #28]
 8005ccc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cd0:	f7fa fe48 	bl	8000964 <__aeabi_uldivmod>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4613      	mov	r3, r2
 8005cda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cdc:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	0c1b      	lsrs	r3, r3, #16
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	005b      	lsls	r3, r3, #1
 8005cea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005cec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cf6:	e002      	b.n	8005cfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cf8:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <HAL_RCC_GetSysClockFreq+0x204>)
 8005cfa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3750      	adds	r7, #80	; 0x50
 8005d04:	46bd      	mov	sp, r7
 8005d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d0a:	bf00      	nop
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	00f42400 	.word	0x00f42400
 8005d14:	007a1200 	.word	0x007a1200

08005d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d1c:	4b03      	ldr	r3, [pc, #12]	; (8005d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	20000000 	.word	0x20000000

08005d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d34:	f7ff fff0 	bl	8005d18 <HAL_RCC_GetHCLKFreq>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	0a9b      	lsrs	r3, r3, #10
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	4903      	ldr	r1, [pc, #12]	; (8005d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d46:	5ccb      	ldrb	r3, [r1, r3]
 8005d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	40023800 	.word	0x40023800
 8005d54:	0800994c 	.word	0x0800994c

08005d58 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d105      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d035      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d80:	4b62      	ldr	r3, [pc, #392]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d86:	f7fb fd81 	bl	800188c <HAL_GetTick>
 8005d8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d8c:	e008      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d8e:	f7fb fd7d 	bl	800188c <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d901      	bls.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e0b0      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005da0:	4b5b      	ldr	r3, [pc, #364]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1f0      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	019a      	lsls	r2, r3, #6
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	071b      	lsls	r3, r3, #28
 8005db8:	4955      	ldr	r1, [pc, #340]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005dc0:	4b52      	ldr	r3, [pc, #328]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dc6:	f7fb fd61 	bl	800188c <HAL_GetTick>
 8005dca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dcc:	e008      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005dce:	f7fb fd5d 	bl	800188c <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d901      	bls.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e090      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005de0:	4b4b      	ldr	r3, [pc, #300]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d0f0      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 8083 	beq.w	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	4b44      	ldr	r3, [pc, #272]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	4a43      	ldr	r2, [pc, #268]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e08:	6413      	str	r3, [r2, #64]	; 0x40
 8005e0a:	4b41      	ldr	r3, [pc, #260]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005e16:	4b3f      	ldr	r3, [pc, #252]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a3e      	ldr	r2, [pc, #248]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e22:	f7fb fd33 	bl	800188c <HAL_GetTick>
 8005e26:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e28:	e008      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e2a:	f7fb fd2f 	bl	800188c <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d901      	bls.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e062      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e3c:	4b35      	ldr	r3, [pc, #212]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d0f0      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e48:	4b31      	ldr	r3, [pc, #196]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e50:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d02f      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d028      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e66:	4b2a      	ldr	r3, [pc, #168]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e70:	4b29      	ldr	r3, [pc, #164]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005e72:	2201      	movs	r2, #1
 8005e74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e76:	4b28      	ldr	r3, [pc, #160]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e7c:	4a24      	ldr	r2, [pc, #144]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e82:	4b23      	ldr	r3, [pc, #140]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d114      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e8e:	f7fb fcfd 	bl	800188c <HAL_GetTick>
 8005e92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e94:	e00a      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e96:	f7fb fcf9 	bl	800188c <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d901      	bls.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e02a      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eac:	4b18      	ldr	r3, [pc, #96]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d0ee      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ec0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ec4:	d10d      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005ec6:	4b12      	ldr	r3, [pc, #72]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eda:	490d      	ldr	r1, [pc, #52]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	608b      	str	r3, [r1, #8]
 8005ee0:	e005      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005ee2:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	4a0a      	ldr	r2, [pc, #40]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ee8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005eec:	6093      	str	r3, [r2, #8]
 8005eee:	4b08      	ldr	r3, [pc, #32]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ef0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005efa:	4905      	ldr	r1, [pc, #20]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3718      	adds	r7, #24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	42470068 	.word	0x42470068
 8005f10:	40023800 	.word	0x40023800
 8005f14:	40007000 	.word	0x40007000
 8005f18:	42470e40 	.word	0x42470e40

08005f1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d13e      	bne.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005f3a:	4b23      	ldr	r3, [pc, #140]	; (8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d12f      	bne.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005f50:	4b1e      	ldr	r3, [pc, #120]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f52:	617b      	str	r3, [r7, #20]
          break;
 8005f54:	e02f      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005f56:	4b1c      	ldr	r3, [pc, #112]	; (8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f62:	d108      	bne.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f64:	4b18      	ldr	r3, [pc, #96]	; (8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f6c:	4a18      	ldr	r2, [pc, #96]	; (8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f72:	613b      	str	r3, [r7, #16]
 8005f74:	e007      	b.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f76:	4b14      	ldr	r3, [pc, #80]	; (8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f7e:	4a15      	ldr	r2, [pc, #84]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f84:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005f86:	4b10      	ldr	r3, [pc, #64]	; (8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f8c:	099b      	lsrs	r3, r3, #6
 8005f8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	fb02 f303 	mul.w	r3, r2, r3
 8005f98:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005f9a:	4b0b      	ldr	r3, [pc, #44]	; (8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fa0:	0f1b      	lsrs	r3, r3, #28
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fac:	617b      	str	r3, [r7, #20]
          break;
 8005fae:	e002      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	617b      	str	r3, [r7, #20]
          break;
 8005fb4:	bf00      	nop
        }
      }
      break;
 8005fb6:	bf00      	nop
    }
  }
  return frequency;
 8005fb8:	697b      	ldr	r3, [r7, #20]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	371c      	adds	r7, #28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	40023800 	.word	0x40023800
 8005fcc:	00bb8000 	.word	0x00bb8000
 8005fd0:	007a1200 	.word	0x007a1200
 8005fd4:	00f42400 	.word	0x00f42400

08005fd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e07b      	b.n	80060e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d108      	bne.n	8006004 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ffa:	d009      	beq.n	8006010 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	61da      	str	r2, [r3, #28]
 8006002:	e005      	b.n	8006010 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d106      	bne.n	8006030 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7fb fac6 	bl	80015bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006046:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006058:	431a      	orrs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006062:	431a      	orrs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	431a      	orrs	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006080:	431a      	orrs	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800608a:	431a      	orrs	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006094:	ea42 0103 	orr.w	r1, r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	0c1b      	lsrs	r3, r3, #16
 80060ae:	f003 0104 	and.w	r1, r3, #4
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	f003 0210 	and.w	r2, r3, #16
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69da      	ldr	r2, [r3, #28]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060ea:	b084      	sub	sp, #16
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	f107 001c 	add.w	r0, r7, #28
 80060f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d122      	bne.n	8006148 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800612a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800612c:	2b01      	cmp	r3, #1
 800612e:	d105      	bne.n	800613c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f9bf 	bl	80064c0 <USB_CoreReset>
 8006142:	4603      	mov	r3, r0
 8006144:	73fb      	strb	r3, [r7, #15]
 8006146:	e01a      	b.n	800617e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f9b3 	bl	80064c0 <USB_CoreReset>
 800615a:	4603      	mov	r3, r0
 800615c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800615e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006160:	2b00      	cmp	r3, #0
 8006162:	d106      	bne.n	8006172 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	639a      	str	r2, [r3, #56]	; 0x38
 8006170:	e005      	b.n	800617e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800617e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006180:	2b01      	cmp	r3, #1
 8006182:	d10b      	bne.n	800619c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f043 0206 	orr.w	r2, r3, #6
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f043 0220 	orr.w	r2, r3, #32
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800619c:	7bfb      	ldrb	r3, [r7, #15]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061a8:	b004      	add	sp, #16
 80061aa:	4770      	bx	lr

080061ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f043 0201 	orr.w	r2, r3, #1
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f023 0201 	bic.w	r2, r3, #1
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	460b      	mov	r3, r1
 80061fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800620c:	78fb      	ldrb	r3, [r7, #3]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d115      	bne.n	800623e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800621e:	2001      	movs	r0, #1
 8006220:	f7fb fb40 	bl	80018a4 <HAL_Delay>
      ms++;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	3301      	adds	r3, #1
 8006228:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f939 	bl	80064a2 <USB_GetMode>
 8006230:	4603      	mov	r3, r0
 8006232:	2b01      	cmp	r3, #1
 8006234:	d01e      	beq.n	8006274 <USB_SetCurrentMode+0x84>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2b31      	cmp	r3, #49	; 0x31
 800623a:	d9f0      	bls.n	800621e <USB_SetCurrentMode+0x2e>
 800623c:	e01a      	b.n	8006274 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800623e:	78fb      	ldrb	r3, [r7, #3]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d115      	bne.n	8006270 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006250:	2001      	movs	r0, #1
 8006252:	f7fb fb27 	bl	80018a4 <HAL_Delay>
      ms++;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3301      	adds	r3, #1
 800625a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f920 	bl	80064a2 <USB_GetMode>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d005      	beq.n	8006274 <USB_SetCurrentMode+0x84>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b31      	cmp	r3, #49	; 0x31
 800626c:	d9f0      	bls.n	8006250 <USB_SetCurrentMode+0x60>
 800626e:	e001      	b.n	8006274 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e005      	b.n	8006280 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b32      	cmp	r3, #50	; 0x32
 8006278:	d101      	bne.n	800627e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e000      	b.n	8006280 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3301      	adds	r3, #1
 800629a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4a13      	ldr	r2, [pc, #76]	; (80062ec <USB_FlushTxFifo+0x64>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d901      	bls.n	80062a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e01b      	b.n	80062e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	daf2      	bge.n	8006296 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	019b      	lsls	r3, r3, #6
 80062b8:	f043 0220 	orr.w	r2, r3, #32
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	3301      	adds	r3, #1
 80062c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4a08      	ldr	r2, [pc, #32]	; (80062ec <USB_FlushTxFifo+0x64>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d901      	bls.n	80062d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e006      	b.n	80062e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	2b20      	cmp	r3, #32
 80062dc:	d0f0      	beq.n	80062c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	00030d40 	.word	0x00030d40

080062f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	3301      	adds	r3, #1
 8006300:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	4a11      	ldr	r2, [pc, #68]	; (800634c <USB_FlushRxFifo+0x5c>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d901      	bls.n	800630e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e018      	b.n	8006340 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	daf2      	bge.n	80062fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2210      	movs	r2, #16
 800631e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	3301      	adds	r3, #1
 8006324:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4a08      	ldr	r2, [pc, #32]	; (800634c <USB_FlushRxFifo+0x5c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d901      	bls.n	8006332 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e006      	b.n	8006340 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	f003 0310 	and.w	r3, r3, #16
 800633a:	2b10      	cmp	r3, #16
 800633c:	d0f0      	beq.n	8006320 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	00030d40 	.word	0x00030d40

08006350 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006350:	b480      	push	{r7}
 8006352:	b089      	sub	sp, #36	; 0x24
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	4611      	mov	r1, r2
 800635c:	461a      	mov	r2, r3
 800635e:	460b      	mov	r3, r1
 8006360:	71fb      	strb	r3, [r7, #7]
 8006362:	4613      	mov	r3, r2
 8006364:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800636e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006372:	2b00      	cmp	r3, #0
 8006374:	d123      	bne.n	80063be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006376:	88bb      	ldrh	r3, [r7, #4]
 8006378:	3303      	adds	r3, #3
 800637a:	089b      	lsrs	r3, r3, #2
 800637c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800637e:	2300      	movs	r3, #0
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	e018      	b.n	80063b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006384:	79fb      	ldrb	r3, [r7, #7]
 8006386:	031a      	lsls	r2, r3, #12
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	4413      	add	r3, r2
 800638c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006390:	461a      	mov	r2, r3
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	3301      	adds	r3, #1
 800639c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	3301      	adds	r3, #1
 80063a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	3301      	adds	r3, #1
 80063a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	3301      	adds	r3, #1
 80063ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	3301      	adds	r3, #1
 80063b4:	61bb      	str	r3, [r7, #24]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d3e2      	bcc.n	8006384 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3724      	adds	r7, #36	; 0x24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b08b      	sub	sp, #44	; 0x2c
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	4613      	mov	r3, r2
 80063d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80063e2:	88fb      	ldrh	r3, [r7, #6]
 80063e4:	089b      	lsrs	r3, r3, #2
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80063ea:	88fb      	ldrh	r3, [r7, #6]
 80063ec:	f003 0303 	and.w	r3, r3, #3
 80063f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80063f2:	2300      	movs	r3, #0
 80063f4:	623b      	str	r3, [r7, #32]
 80063f6:	e014      	b.n	8006422 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	601a      	str	r2, [r3, #0]
    pDest++;
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	3301      	adds	r3, #1
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	3301      	adds	r3, #1
 800640e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	3301      	adds	r3, #1
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	3301      	adds	r3, #1
 800641a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	3301      	adds	r3, #1
 8006420:	623b      	str	r3, [r7, #32]
 8006422:	6a3a      	ldr	r2, [r7, #32]
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	429a      	cmp	r2, r3
 8006428:	d3e6      	bcc.n	80063f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800642a:	8bfb      	ldrh	r3, [r7, #30]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d01e      	beq.n	800646e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800643a:	461a      	mov	r2, r3
 800643c:	f107 0310 	add.w	r3, r7, #16
 8006440:	6812      	ldr	r2, [r2, #0]
 8006442:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	b2db      	uxtb	r3, r3
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	fa22 f303 	lsr.w	r3, r2, r3
 8006450:	b2da      	uxtb	r2, r3
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	701a      	strb	r2, [r3, #0]
      i++;
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	3301      	adds	r3, #1
 800645a:	623b      	str	r3, [r7, #32]
      pDest++;
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	3301      	adds	r3, #1
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006462:	8bfb      	ldrh	r3, [r7, #30]
 8006464:	3b01      	subs	r3, #1
 8006466:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006468:	8bfb      	ldrh	r3, [r7, #30]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1ea      	bne.n	8006444 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006470:	4618      	mov	r0, r3
 8006472:	372c      	adds	r7, #44	; 0x2c
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4013      	ands	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006494:	68fb      	ldr	r3, [r7, #12]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	f003 0301 	and.w	r3, r3, #1
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
	...

080064c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3301      	adds	r3, #1
 80064d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4a13      	ldr	r2, [pc, #76]	; (8006524 <USB_CoreReset+0x64>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d901      	bls.n	80064de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e01b      	b.n	8006516 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	daf2      	bge.n	80064cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f043 0201 	orr.w	r2, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3301      	adds	r3, #1
 80064fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4a09      	ldr	r2, [pc, #36]	; (8006524 <USB_CoreReset+0x64>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d901      	bls.n	8006508 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e006      	b.n	8006516 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b01      	cmp	r3, #1
 8006512:	d0f0      	beq.n	80064f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	00030d40 	.word	0x00030d40

08006528 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006528:	b084      	sub	sp, #16
 800652a:	b580      	push	{r7, lr}
 800652c:	b086      	sub	sp, #24
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006536:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006548:	461a      	mov	r2, r3
 800654a:	2300      	movs	r3, #0
 800654c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006552:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657a:	2b00      	cmp	r3, #0
 800657c:	d018      	beq.n	80065b0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800657e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006580:	2b01      	cmp	r3, #1
 8006582:	d10a      	bne.n	800659a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006592:	f043 0304 	orr.w	r3, r3, #4
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	e014      	b.n	80065c4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065a8:	f023 0304 	bic.w	r3, r3, #4
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	e009      	b.n	80065c4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065be:	f023 0304 	bic.w	r3, r3, #4
 80065c2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065c4:	2110      	movs	r1, #16
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7ff fe5e 	bl	8006288 <USB_FlushTxFifo>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7ff fe8a 	bl	80062f0 <USB_FlushRxFifo>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80065e6:	2300      	movs	r3, #0
 80065e8:	613b      	str	r3, [r7, #16]
 80065ea:	e015      	b.n	8006618 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f8:	461a      	mov	r2, r3
 80065fa:	f04f 33ff 	mov.w	r3, #4294967295
 80065fe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660c:	461a      	mov	r2, r3
 800660e:	2300      	movs	r3, #0
 8006610:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	3301      	adds	r3, #1
 8006616:	613b      	str	r3, [r7, #16]
 8006618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	429a      	cmp	r2, r3
 800661e:	d3e5      	bcc.n	80065ec <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f04f 32ff 	mov.w	r2, #4294967295
 800662c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00b      	beq.n	8006652 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006640:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a13      	ldr	r2, [pc, #76]	; (8006694 <USB_HostInit+0x16c>)
 8006646:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a13      	ldr	r2, [pc, #76]	; (8006698 <USB_HostInit+0x170>)
 800664c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006650:	e009      	b.n	8006666 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2280      	movs	r2, #128	; 0x80
 8006656:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a10      	ldr	r2, [pc, #64]	; (800669c <USB_HostInit+0x174>)
 800665c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a0f      	ldr	r2, [pc, #60]	; (80066a0 <USB_HostInit+0x178>)
 8006662:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006668:	2b00      	cmp	r3, #0
 800666a:	d105      	bne.n	8006678 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	f043 0210 	orr.w	r2, r3, #16
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	699a      	ldr	r2, [r3, #24]
 800667c:	4b09      	ldr	r3, [pc, #36]	; (80066a4 <USB_HostInit+0x17c>)
 800667e:	4313      	orrs	r3, r2
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006684:	7dfb      	ldrb	r3, [r7, #23]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006690:	b004      	add	sp, #16
 8006692:	4770      	bx	lr
 8006694:	01000200 	.word	0x01000200
 8006698:	00e00300 	.word	0x00e00300
 800669c:	00600080 	.word	0x00600080
 80066a0:	004000e0 	.word	0x004000e0
 80066a4:	a3200008 	.word	0xa3200008

080066a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	460b      	mov	r3, r1
 80066b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066c6:	f023 0303 	bic.w	r3, r3, #3
 80066ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	f003 0303 	and.w	r3, r3, #3
 80066da:	68f9      	ldr	r1, [r7, #12]
 80066dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80066e0:	4313      	orrs	r3, r2
 80066e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80066e4:	78fb      	ldrb	r3, [r7, #3]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d107      	bne.n	80066fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066f0:	461a      	mov	r2, r3
 80066f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80066f6:	6053      	str	r3, [r2, #4]
 80066f8:	e009      	b.n	800670e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80066fa:	78fb      	ldrb	r3, [r7, #3]
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d106      	bne.n	800670e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006706:	461a      	mov	r2, r3
 8006708:	f241 7370 	movw	r3, #6000	; 0x1770
 800670c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800673c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800674a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800674c:	2064      	movs	r0, #100	; 0x64
 800674e:	f7fb f8a9 	bl	80018a4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800675a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800675e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006760:	200a      	movs	r0, #10
 8006762:	f7fb f89f 	bl	80018a4 <HAL_Delay>

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	460b      	mov	r3, r1
 800677a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006794:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d109      	bne.n	80067b4 <USB_DriveVbus+0x44>
 80067a0:	78fb      	ldrb	r3, [r7, #3]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d106      	bne.n	80067b4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80067b2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067be:	d109      	bne.n	80067d4 <USB_DriveVbus+0x64>
 80067c0:	78fb      	ldrb	r3, [r7, #3]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d106      	bne.n	80067d4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067d2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b085      	sub	sp, #20
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	0c5b      	lsrs	r3, r3, #17
 8006800:	f003 0303 	and.w	r3, r3, #3
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	b29b      	uxth	r3, r3
}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
	...

08006834 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b088      	sub	sp, #32
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	4608      	mov	r0, r1
 800683e:	4611      	mov	r1, r2
 8006840:	461a      	mov	r2, r3
 8006842:	4603      	mov	r3, r0
 8006844:	70fb      	strb	r3, [r7, #3]
 8006846:	460b      	mov	r3, r1
 8006848:	70bb      	strb	r3, [r7, #2]
 800684a:	4613      	mov	r3, r2
 800684c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006856:	78fb      	ldrb	r3, [r7, #3]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	4413      	add	r3, r2
 800685e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006862:	461a      	mov	r2, r3
 8006864:	f04f 33ff 	mov.w	r3, #4294967295
 8006868:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800686a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800686e:	2b03      	cmp	r3, #3
 8006870:	d87e      	bhi.n	8006970 <USB_HC_Init+0x13c>
 8006872:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <USB_HC_Init+0x44>)
 8006874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006878:	08006889 	.word	0x08006889
 800687c:	08006933 	.word	0x08006933
 8006880:	08006889 	.word	0x08006889
 8006884:	080068f5 	.word	0x080068f5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006888:	78fb      	ldrb	r3, [r7, #3]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	4413      	add	r3, r2
 8006890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006894:	461a      	mov	r2, r3
 8006896:	f240 439d 	movw	r3, #1181	; 0x49d
 800689a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800689c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	da10      	bge.n	80068c6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	78fa      	ldrb	r2, [r7, #3]
 80068b4:	0151      	lsls	r1, r2, #5
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	440a      	add	r2, r1
 80068ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068c2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80068c4:	e057      	b.n	8006976 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d051      	beq.n	8006976 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80068d2:	78fb      	ldrb	r3, [r7, #3]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	78fa      	ldrb	r2, [r7, #3]
 80068e2:	0151      	lsls	r1, r2, #5
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	440a      	add	r2, r1
 80068e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80068f0:	60d3      	str	r3, [r2, #12]
      break;
 80068f2:	e040      	b.n	8006976 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068f4:	78fb      	ldrb	r3, [r7, #3]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006900:	461a      	mov	r2, r3
 8006902:	f240 639d 	movw	r3, #1693	; 0x69d
 8006906:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006908:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800690c:	2b00      	cmp	r3, #0
 800690e:	da34      	bge.n	800697a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	4413      	add	r3, r2
 8006918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	78fa      	ldrb	r2, [r7, #3]
 8006920:	0151      	lsls	r1, r2, #5
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	440a      	add	r2, r1
 8006926:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800692a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800692e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006930:	e023      	b.n	800697a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006932:	78fb      	ldrb	r3, [r7, #3]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	4413      	add	r3, r2
 800693a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693e:	461a      	mov	r2, r3
 8006940:	f240 2325 	movw	r3, #549	; 0x225
 8006944:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006946:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800694a:	2b00      	cmp	r3, #0
 800694c:	da17      	bge.n	800697e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800694e:	78fb      	ldrb	r3, [r7, #3]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	4413      	add	r3, r2
 8006956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	78fa      	ldrb	r2, [r7, #3]
 800695e:	0151      	lsls	r1, r2, #5
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	440a      	add	r2, r1
 8006964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006968:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800696c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800696e:	e006      	b.n	800697e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	77fb      	strb	r3, [r7, #31]
      break;
 8006974:	e004      	b.n	8006980 <USB_HC_Init+0x14c>
      break;
 8006976:	bf00      	nop
 8006978:	e002      	b.n	8006980 <USB_HC_Init+0x14c>
      break;
 800697a:	bf00      	nop
 800697c:	e000      	b.n	8006980 <USB_HC_Init+0x14c>
      break;
 800697e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	4413      	add	r3, r2
 8006988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	78fa      	ldrb	r2, [r7, #3]
 8006990:	0151      	lsls	r1, r2, #5
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	440a      	add	r2, r1
 8006996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800699a:	f043 0302 	orr.w	r3, r3, #2
 800699e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069a6:	699a      	ldr	r2, [r3, #24]
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	f003 030f 	and.w	r3, r3, #15
 80069ae:	2101      	movs	r1, #1
 80069b0:	fa01 f303 	lsl.w	r3, r1, r3
 80069b4:	6939      	ldr	r1, [r7, #16]
 80069b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80069ba:	4313      	orrs	r3, r2
 80069bc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80069ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	da03      	bge.n	80069da <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80069d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069d6:	61bb      	str	r3, [r7, #24]
 80069d8:	e001      	b.n	80069de <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f7ff feff 	bl	80067e2 <USB_GetHostSpeed>
 80069e4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80069e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d106      	bne.n	80069fc <USB_HC_Init+0x1c8>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d003      	beq.n	80069fc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80069f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069f8:	617b      	str	r3, [r7, #20]
 80069fa:	e001      	b.n	8006a00 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a00:	787b      	ldrb	r3, [r7, #1]
 8006a02:	059b      	lsls	r3, r3, #22
 8006a04:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a08:	78bb      	ldrb	r3, [r7, #2]
 8006a0a:	02db      	lsls	r3, r3, #11
 8006a0c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a10:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a16:	049b      	lsls	r3, r3, #18
 8006a18:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a1c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a1e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006a20:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a24:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a2a:	78fb      	ldrb	r3, [r7, #3]
 8006a2c:	0159      	lsls	r1, r3, #5
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	440b      	add	r3, r1
 8006a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a36:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a3c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006a3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	d003      	beq.n	8006a4e <USB_HC_Init+0x21a>
 8006a46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d10f      	bne.n	8006a6e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006a4e:	78fb      	ldrb	r3, [r7, #3]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	78fa      	ldrb	r2, [r7, #3]
 8006a5e:	0151      	lsls	r1, r2, #5
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	440a      	add	r2, r1
 8006a64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a6c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006a6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3720      	adds	r7, #32
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b08c      	sub	sp, #48	; 0x30
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	4613      	mov	r3, r2
 8006a84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	785b      	ldrb	r3, [r3, #1]
 8006a8e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a94:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d02d      	beq.n	8006afe <USB_HC_StartXfer+0x86>
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	791b      	ldrb	r3, [r3, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d129      	bne.n	8006afe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d117      	bne.n	8006ae0 <USB_HC_StartXfer+0x68>
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	79db      	ldrb	r3, [r3, #7]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d003      	beq.n	8006ac0 <USB_HC_StartXfer+0x48>
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	79db      	ldrb	r3, [r3, #7]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d10f      	bne.n	8006ae0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	69fa      	ldr	r2, [r7, #28]
 8006ad0:	0151      	lsls	r1, r2, #5
 8006ad2:	6a3a      	ldr	r2, [r7, #32]
 8006ad4:	440a      	add	r2, r1
 8006ad6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ade:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006ae0:	79fb      	ldrb	r3, [r7, #7]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10b      	bne.n	8006afe <USB_HC_StartXfer+0x86>
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	795b      	ldrb	r3, [r3, #5]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d107      	bne.n	8006afe <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	785b      	ldrb	r3, [r3, #1]
 8006af2:	4619      	mov	r1, r3
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 fa0f 	bl	8006f18 <USB_DoPing>
      return HAL_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	e0f8      	b.n	8006cf0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d018      	beq.n	8006b38 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	8912      	ldrh	r2, [r2, #8]
 8006b0e:	4413      	add	r3, r2
 8006b10:	3b01      	subs	r3, #1
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	8912      	ldrh	r2, [r2, #8]
 8006b16:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b1a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006b1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b1e:	8b7b      	ldrh	r3, [r7, #26]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d90b      	bls.n	8006b3c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006b24:	8b7b      	ldrh	r3, [r7, #26]
 8006b26:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	8912      	ldrh	r2, [r2, #8]
 8006b2e:	fb03 f202 	mul.w	r2, r3, r2
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	611a      	str	r2, [r3, #16]
 8006b36:	e001      	b.n	8006b3c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	78db      	ldrb	r3, [r3, #3]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d007      	beq.n	8006b54 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	8912      	ldrh	r2, [r2, #8]
 8006b4a:	fb03 f202 	mul.w	r2, r3, r2
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	611a      	str	r2, [r3, #16]
 8006b52:	e003      	b.n	8006b5c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	695a      	ldr	r2, [r3, #20]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b66:	04d9      	lsls	r1, r3, #19
 8006b68:	4b63      	ldr	r3, [pc, #396]	; (8006cf8 <USB_HC_StartXfer+0x280>)
 8006b6a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b6c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	7a9b      	ldrb	r3, [r3, #10]
 8006b72:	075b      	lsls	r3, r3, #29
 8006b74:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b78:	69f9      	ldr	r1, [r7, #28]
 8006b7a:	0148      	lsls	r0, r1, #5
 8006b7c:	6a39      	ldr	r1, [r7, #32]
 8006b7e:	4401      	add	r1, r0
 8006b80:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b84:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b86:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006b88:	79fb      	ldrb	r3, [r7, #7]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d009      	beq.n	8006ba2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	68d9      	ldr	r1, [r3, #12]
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b9e:	460a      	mov	r2, r1
 8006ba0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	bf0c      	ite	eq
 8006bb2:	2301      	moveq	r3, #1
 8006bb4:	2300      	movne	r3, #0
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	69fa      	ldr	r2, [r7, #28]
 8006bca:	0151      	lsls	r1, r2, #5
 8006bcc:	6a3a      	ldr	r2, [r7, #32]
 8006bce:	440a      	add	r2, r1
 8006bd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bd4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bd8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	7e7b      	ldrb	r3, [r7, #25]
 8006bea:	075b      	lsls	r3, r3, #29
 8006bec:	69f9      	ldr	r1, [r7, #28]
 8006bee:	0148      	lsls	r0, r1, #5
 8006bf0:	6a39      	ldr	r1, [r7, #32]
 8006bf2:	4401      	add	r1, r0
 8006bf4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c12:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	78db      	ldrb	r3, [r3, #3]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d004      	beq.n	8006c26 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c22:	613b      	str	r3, [r7, #16]
 8006c24:	e003      	b.n	8006c2e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c2c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c34:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c42:	461a      	mov	r2, r3
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e04e      	b.n	8006cf0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	78db      	ldrb	r3, [r3, #3]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d149      	bne.n	8006cee <USB_HC_StartXfer+0x276>
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d045      	beq.n	8006cee <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	79db      	ldrb	r3, [r3, #7]
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d830      	bhi.n	8006ccc <USB_HC_StartXfer+0x254>
 8006c6a:	a201      	add	r2, pc, #4	; (adr r2, 8006c70 <USB_HC_StartXfer+0x1f8>)
 8006c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c70:	08006c81 	.word	0x08006c81
 8006c74:	08006ca5 	.word	0x08006ca5
 8006c78:	08006c81 	.word	0x08006c81
 8006c7c:	08006ca5 	.word	0x08006ca5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	3303      	adds	r3, #3
 8006c86:	089b      	lsrs	r3, r3, #2
 8006c88:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006c8a:	8afa      	ldrh	r2, [r7, #22]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d91c      	bls.n	8006cd0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	f043 0220 	orr.w	r2, r3, #32
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	619a      	str	r2, [r3, #24]
        }
        break;
 8006ca2:	e015      	b.n	8006cd0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	3303      	adds	r3, #3
 8006caa:	089b      	lsrs	r3, r3, #2
 8006cac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006cae:	8afa      	ldrh	r2, [r7, #22]
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d90a      	bls.n	8006cd4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	619a      	str	r2, [r3, #24]
        }
        break;
 8006cca:	e003      	b.n	8006cd4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006ccc:	bf00      	nop
 8006cce:	e002      	b.n	8006cd6 <USB_HC_StartXfer+0x25e>
        break;
 8006cd0:	bf00      	nop
 8006cd2:	e000      	b.n	8006cd6 <USB_HC_StartXfer+0x25e>
        break;
 8006cd4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	68d9      	ldr	r1, [r3, #12]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	785a      	ldrb	r2, [r3, #1]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	9000      	str	r0, [sp, #0]
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f7ff fb31 	bl	8006350 <USB_WritePacket>
  }

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3728      	adds	r7, #40	; 0x28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	1ff80000 	.word	0x1ff80000

08006cfc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	b29b      	uxth	r3, r3
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b089      	sub	sp, #36	; 0x24
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	460b      	mov	r3, r1
 8006d28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006d2e:	78fb      	ldrb	r3, [r7, #3]
 8006d30:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	0c9b      	lsrs	r3, r3, #18
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	0fdb      	lsrs	r3, r3, #31
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f003 0320 	and.w	r3, r3, #32
 8006d6a:	2b20      	cmp	r3, #32
 8006d6c:	d104      	bne.n	8006d78 <USB_HC_Halt+0x5a>
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	e0c8      	b.n	8006f0a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <USB_HC_Halt+0x66>
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d163      	bne.n	8006e4c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	69ba      	ldr	r2, [r7, #24]
 8006d94:	0151      	lsls	r1, r2, #5
 8006d96:	69fa      	ldr	r2, [r7, #28]
 8006d98:	440a      	add	r2, r1
 8006d9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006da2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f003 0320 	and.w	r3, r3, #32
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f040 80ab 	bne.w	8006f08 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d133      	bne.n	8006e26 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	69ba      	ldr	r2, [r7, #24]
 8006dce:	0151      	lsls	r1, r2, #5
 8006dd0:	69fa      	ldr	r2, [r7, #28]
 8006dd2:	440a      	add	r2, r1
 8006dd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ddc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	0151      	lsls	r1, r2, #5
 8006df0:	69fa      	ldr	r2, [r7, #28]
 8006df2:	440a      	add	r2, r1
 8006df4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006df8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006dfc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3301      	adds	r3, #1
 8006e02:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e0a:	d81d      	bhi.n	8006e48 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e22:	d0ec      	beq.n	8006dfe <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e24:	e070      	b.n	8006f08 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	0151      	lsls	r1, r2, #5
 8006e38:	69fa      	ldr	r2, [r7, #28]
 8006e3a:	440a      	add	r2, r1
 8006e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e44:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e46:	e05f      	b.n	8006f08 <USB_HC_Halt+0x1ea>
            break;
 8006e48:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e4a:	e05d      	b.n	8006f08 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	0151      	lsls	r1, r2, #5
 8006e5e:	69fa      	ldr	r2, [r7, #28]
 8006e60:	440a      	add	r2, r1
 8006e62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e6a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d133      	bne.n	8006ee4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	0151      	lsls	r1, r2, #5
 8006e8e:	69fa      	ldr	r2, [r7, #28]
 8006e90:	440a      	add	r2, r1
 8006e92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e9a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	69ba      	ldr	r2, [r7, #24]
 8006eac:	0151      	lsls	r1, r2, #5
 8006eae:	69fa      	ldr	r2, [r7, #28]
 8006eb0:	440a      	add	r2, r1
 8006eb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006eba:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ec8:	d81d      	bhi.n	8006f06 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006edc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ee0:	d0ec      	beq.n	8006ebc <USB_HC_Halt+0x19e>
 8006ee2:	e011      	b.n	8006f08 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006efe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	e000      	b.n	8006f08 <USB_HC_Halt+0x1ea>
          break;
 8006f06:	bf00      	nop
    }
  }

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3724      	adds	r7, #36	; 0x24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
	...

08006f18 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	460b      	mov	r3, r1
 8006f22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006f28:	78fb      	ldrb	r3, [r7, #3]
 8006f2a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	04da      	lsls	r2, r3, #19
 8006f34:	4b15      	ldr	r3, [pc, #84]	; (8006f8c <USB_DoPing+0x74>)
 8006f36:	4013      	ands	r3, r2
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	0151      	lsls	r1, r2, #5
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	440a      	add	r2, r1
 8006f40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f48:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f60:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f68:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f76:	461a      	mov	r2, r3
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	371c      	adds	r7, #28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	1ff80000 	.word	0x1ff80000

08006f90 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b088      	sub	sp, #32
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7ff f912 	bl	80061ce <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006faa:	2110      	movs	r1, #16
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7ff f96b 	bl	8006288 <USB_FlushTxFifo>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d001      	beq.n	8006fbc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f7ff f997 	bl	80062f0 <USB_FlushRxFifo>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006fcc:	2300      	movs	r3, #0
 8006fce:	61bb      	str	r3, [r7, #24]
 8006fd0:	e01f      	b.n	8007012 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fe8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ff0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ff8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	4413      	add	r3, r2
 8007002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007006:	461a      	mov	r2, r3
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	3301      	adds	r3, #1
 8007010:	61bb      	str	r3, [r7, #24]
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	2b0f      	cmp	r3, #15
 8007016:	d9dc      	bls.n	8006fd2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007018:	2300      	movs	r3, #0
 800701a:	61bb      	str	r3, [r7, #24]
 800701c:	e034      	b.n	8007088 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	4413      	add	r3, r2
 8007026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007034:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800703c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007044:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	015a      	lsls	r2, r3, #5
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	4413      	add	r3, r2
 800704e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007052:	461a      	mov	r2, r3
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3301      	adds	r3, #1
 800705c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007064:	d80c      	bhi.n	8007080 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	4413      	add	r3, r2
 800706e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007078:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800707c:	d0ec      	beq.n	8007058 <USB_StopHost+0xc8>
 800707e:	e000      	b.n	8007082 <USB_StopHost+0xf2>
        break;
 8007080:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	3301      	adds	r3, #1
 8007086:	61bb      	str	r3, [r7, #24]
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	2b0f      	cmp	r3, #15
 800708c:	d9c7      	bls.n	800701e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007094:	461a      	mov	r2, r3
 8007096:	f04f 33ff 	mov.w	r3, #4294967295
 800709a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f04f 32ff 	mov.w	r2, #4294967295
 80070a2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7ff f881 	bl	80061ac <USB_EnableGlobalInt>

  return ret;
 80070aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3720      	adds	r7, #32
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80070b4:	b590      	push	{r4, r7, lr}
 80070b6:	b089      	sub	sp, #36	; 0x24
 80070b8:	af04      	add	r7, sp, #16
 80070ba:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80070bc:	2301      	movs	r3, #1
 80070be:	2202      	movs	r2, #2
 80070c0:	2102      	movs	r1, #2
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fc66 	bl	8007994 <USBH_FindInterface>
 80070c8:	4603      	mov	r3, r0
 80070ca:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
 80070ce:	2bff      	cmp	r3, #255	; 0xff
 80070d0:	d002      	beq.n	80070d8 <USBH_CDC_InterfaceInit+0x24>
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d901      	bls.n	80070dc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80070d8:	2302      	movs	r3, #2
 80070da:	e13d      	b.n	8007358 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fc3b 	bl	800795c <USBH_SelectInterface>
 80070e6:	4603      	mov	r3, r0
 80070e8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80070ea:	7bbb      	ldrb	r3, [r7, #14]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80070f0:	2302      	movs	r3, #2
 80070f2:	e131      	b.n	8007358 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80070fa:	2050      	movs	r0, #80	; 0x50
 80070fc:	f002 fafa 	bl	80096f4 <malloc>
 8007100:	4603      	mov	r3, r0
 8007102:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800710a:	69db      	ldr	r3, [r3, #28]
 800710c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007114:	2302      	movs	r3, #2
 8007116:	e11f      	b.n	8007358 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007118:	2250      	movs	r2, #80	; 0x50
 800711a:	2100      	movs	r1, #0
 800711c:	68b8      	ldr	r0, [r7, #8]
 800711e:	f002 faf9 	bl	8009714 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007122:	7bfb      	ldrb	r3, [r7, #15]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	211a      	movs	r1, #26
 8007128:	fb01 f303 	mul.w	r3, r1, r3
 800712c:	4413      	add	r3, r2
 800712e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	b25b      	sxtb	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	da15      	bge.n	8007166 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	211a      	movs	r1, #26
 8007140:	fb01 f303 	mul.w	r3, r1, r3
 8007144:	4413      	add	r3, r2
 8007146:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800714a:	781a      	ldrb	r2, [r3, #0]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007150:	7bfb      	ldrb	r3, [r7, #15]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	211a      	movs	r1, #26
 8007156:	fb01 f303 	mul.w	r3, r1, r3
 800715a:	4413      	add	r3, r2
 800715c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007160:	881a      	ldrh	r2, [r3, #0]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	785b      	ldrb	r3, [r3, #1]
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f001 ff2c 	bl	8008fca <USBH_AllocPipe>
 8007172:	4603      	mov	r3, r0
 8007174:	461a      	mov	r2, r3
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	7819      	ldrb	r1, [r3, #0]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	7858      	ldrb	r0, [r3, #1]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	8952      	ldrh	r2, [r2, #10]
 8007192:	9202      	str	r2, [sp, #8]
 8007194:	2203      	movs	r2, #3
 8007196:	9201      	str	r2, [sp, #4]
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	4623      	mov	r3, r4
 800719c:	4602      	mov	r2, r0
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f001 fee4 	bl	8008f6c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2200      	movs	r2, #0
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f002 f9f3 	bl	8009598 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80071b2:	2300      	movs	r3, #0
 80071b4:	2200      	movs	r2, #0
 80071b6:	210a      	movs	r1, #10
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fbeb 	bl	8007994 <USBH_FindInterface>
 80071be:	4603      	mov	r3, r0
 80071c0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
 80071c4:	2bff      	cmp	r3, #255	; 0xff
 80071c6:	d002      	beq.n	80071ce <USBH_CDC_InterfaceInit+0x11a>
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d901      	bls.n	80071d2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80071ce:	2302      	movs	r3, #2
 80071d0:	e0c2      	b.n	8007358 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80071d2:	7bfb      	ldrb	r3, [r7, #15]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	211a      	movs	r1, #26
 80071d8:	fb01 f303 	mul.w	r3, r1, r3
 80071dc:	4413      	add	r3, r2
 80071de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	b25b      	sxtb	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	da16      	bge.n	8007218 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	211a      	movs	r1, #26
 80071f0:	fb01 f303 	mul.w	r3, r1, r3
 80071f4:	4413      	add	r3, r2
 80071f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80071fa:	781a      	ldrb	r2, [r3, #0]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007200:	7bfb      	ldrb	r3, [r7, #15]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	211a      	movs	r1, #26
 8007206:	fb01 f303 	mul.w	r3, r1, r3
 800720a:	4413      	add	r3, r2
 800720c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007210:	881a      	ldrh	r2, [r3, #0]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	835a      	strh	r2, [r3, #26]
 8007216:	e015      	b.n	8007244 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	211a      	movs	r1, #26
 800721e:	fb01 f303 	mul.w	r3, r1, r3
 8007222:	4413      	add	r3, r2
 8007224:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007228:	781a      	ldrb	r2, [r3, #0]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800722e:	7bfb      	ldrb	r3, [r7, #15]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	211a      	movs	r1, #26
 8007234:	fb01 f303 	mul.w	r3, r1, r3
 8007238:	4413      	add	r3, r2
 800723a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800723e:	881a      	ldrh	r2, [r3, #0]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	211a      	movs	r1, #26
 800724a:	fb01 f303 	mul.w	r3, r1, r3
 800724e:	4413      	add	r3, r2
 8007250:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	b25b      	sxtb	r3, r3
 8007258:	2b00      	cmp	r3, #0
 800725a:	da16      	bge.n	800728a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800725c:	7bfb      	ldrb	r3, [r7, #15]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	211a      	movs	r1, #26
 8007262:	fb01 f303 	mul.w	r3, r1, r3
 8007266:	4413      	add	r3, r2
 8007268:	f203 3356 	addw	r3, r3, #854	; 0x356
 800726c:	781a      	ldrb	r2, [r3, #0]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007272:	7bfb      	ldrb	r3, [r7, #15]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	211a      	movs	r1, #26
 8007278:	fb01 f303 	mul.w	r3, r1, r3
 800727c:	4413      	add	r3, r2
 800727e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007282:	881a      	ldrh	r2, [r3, #0]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	835a      	strh	r2, [r3, #26]
 8007288:	e015      	b.n	80072b6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800728a:	7bfb      	ldrb	r3, [r7, #15]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	211a      	movs	r1, #26
 8007290:	fb01 f303 	mul.w	r3, r1, r3
 8007294:	4413      	add	r3, r2
 8007296:	f203 3356 	addw	r3, r3, #854	; 0x356
 800729a:	781a      	ldrb	r2, [r3, #0]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	211a      	movs	r1, #26
 80072a6:	fb01 f303 	mul.w	r3, r1, r3
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80072b0:	881a      	ldrh	r2, [r3, #0]
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	7b9b      	ldrb	r3, [r3, #14]
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f001 fe84 	bl	8008fca <USBH_AllocPipe>
 80072c2:	4603      	mov	r3, r0
 80072c4:	461a      	mov	r2, r3
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	7bdb      	ldrb	r3, [r3, #15]
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f001 fe7a 	bl	8008fca <USBH_AllocPipe>
 80072d6:	4603      	mov	r3, r0
 80072d8:	461a      	mov	r2, r3
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	7b59      	ldrb	r1, [r3, #13]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	7b98      	ldrb	r0, [r3, #14]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	8b12      	ldrh	r2, [r2, #24]
 80072f6:	9202      	str	r2, [sp, #8]
 80072f8:	2202      	movs	r2, #2
 80072fa:	9201      	str	r2, [sp, #4]
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	4623      	mov	r3, r4
 8007300:	4602      	mov	r2, r0
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f001 fe32 	bl	8008f6c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	7b19      	ldrb	r1, [r3, #12]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	7bd8      	ldrb	r0, [r3, #15]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	8b52      	ldrh	r2, [r2, #26]
 8007320:	9202      	str	r2, [sp, #8]
 8007322:	2202      	movs	r2, #2
 8007324:	9201      	str	r2, [sp, #4]
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	4623      	mov	r3, r4
 800732a:	4602      	mov	r2, r0
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f001 fe1d 	bl	8008f6c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	7b5b      	ldrb	r3, [r3, #13]
 800733e:	2200      	movs	r2, #0
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f002 f928 	bl	8009598 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	7b1b      	ldrb	r3, [r3, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f002 f921 	bl	8009598 <USBH_LL_SetToggle>

  return USBH_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	bd90      	pop	{r4, r7, pc}

08007360 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00e      	beq.n	8007398 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	4619      	mov	r1, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f001 fe12 	bl	8008faa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	4619      	mov	r1, r3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f001 fe3d 	bl	800900c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	7b1b      	ldrb	r3, [r3, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00e      	beq.n	80073be <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	7b1b      	ldrb	r3, [r3, #12]
 80073a4:	4619      	mov	r1, r3
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f001 fdff 	bl	8008faa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	7b1b      	ldrb	r3, [r3, #12]
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f001 fe2a 	bl	800900c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	7b5b      	ldrb	r3, [r3, #13]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00e      	beq.n	80073e4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	7b5b      	ldrb	r3, [r3, #13]
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 fdec 	bl	8008faa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	7b5b      	ldrb	r3, [r3, #13]
 80073d6:	4619      	mov	r1, r3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f001 fe17 	bl	800900c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073ea:	69db      	ldr	r3, [r3, #28]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00b      	beq.n	8007408 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073f6:	69db      	ldr	r3, [r3, #28]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f002 f983 	bl	8009704 <free>
    phost->pActiveClass->pData = 0U;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007404:	2200      	movs	r2, #0
 8007406:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b084      	sub	sp, #16
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3340      	adds	r3, #64	; 0x40
 8007428:	4619      	mov	r1, r3
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f8b1 	bl	8007592 <GetLineCoding>
 8007430:	4603      	mov	r3, r0
 8007432:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007434:	7afb      	ldrb	r3, [r7, #11]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d105      	bne.n	8007446 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007440:	2102      	movs	r1, #2
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007446:	7afb      	ldrb	r3, [r7, #11]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007458:	2301      	movs	r3, #1
 800745a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007470:	2b04      	cmp	r3, #4
 8007472:	d877      	bhi.n	8007564 <USBH_CDC_Process+0x114>
 8007474:	a201      	add	r2, pc, #4	; (adr r2, 800747c <USBH_CDC_Process+0x2c>)
 8007476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747a:	bf00      	nop
 800747c:	08007491 	.word	0x08007491
 8007480:	08007497 	.word	0x08007497
 8007484:	080074c7 	.word	0x080074c7
 8007488:	0800753b 	.word	0x0800753b
 800748c:	08007549 	.word	0x08007549
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	73fb      	strb	r3, [r7, #15]
      break;
 8007494:	e06d      	b.n	8007572 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800749a:	4619      	mov	r1, r3
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f897 	bl	80075d0 <SetLineCoding>
 80074a2:	4603      	mov	r3, r0
 80074a4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80074a6:	7bbb      	ldrb	r3, [r7, #14]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d104      	bne.n	80074b6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80074b4:	e058      	b.n	8007568 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80074b6:	7bbb      	ldrb	r3, [r7, #14]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d055      	beq.n	8007568 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2204      	movs	r2, #4
 80074c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80074c4:	e050      	b.n	8007568 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	3340      	adds	r3, #64	; 0x40
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f860 	bl	8007592 <GetLineCoding>
 80074d2:	4603      	mov	r3, r0
 80074d4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80074d6:	7bbb      	ldrb	r3, [r7, #14]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d126      	bne.n	800752a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ee:	791b      	ldrb	r3, [r3, #4]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d13b      	bne.n	800756c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074fe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007500:	429a      	cmp	r2, r3
 8007502:	d133      	bne.n	800756c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800750e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007510:	429a      	cmp	r2, r3
 8007512:	d12b      	bne.n	800756c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800751c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800751e:	429a      	cmp	r2, r3
 8007520:	d124      	bne.n	800756c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f958 	bl	80077d8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007528:	e020      	b.n	800756c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d01d      	beq.n	800756c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2204      	movs	r2, #4
 8007534:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007538:	e018      	b.n	800756c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f867 	bl	800760e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f8da 	bl	80076fa <CDC_ProcessReception>
      break;
 8007546:	e014      	b.n	8007572 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007548:	2100      	movs	r1, #0
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 ffef 	bl	800852e <USBH_ClrFeature>
 8007550:	4603      	mov	r3, r0
 8007552:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007554:	7bbb      	ldrb	r3, [r7, #14]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10a      	bne.n	8007570 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007562:	e005      	b.n	8007570 <USBH_CDC_Process+0x120>

    default:
      break;
 8007564:	bf00      	nop
 8007566:	e004      	b.n	8007572 <USBH_CDC_Process+0x122>
      break;
 8007568:	bf00      	nop
 800756a:	e002      	b.n	8007572 <USBH_CDC_Process+0x122>
      break;
 800756c:	bf00      	nop
 800756e:	e000      	b.n	8007572 <USBH_CDC_Process+0x122>
      break;
 8007570:	bf00      	nop

  }

  return status;
 8007572:	7bfb      	ldrb	r3, [r7, #15]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b082      	sub	sp, #8
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	22a1      	movs	r2, #161	; 0xa1
 80075a0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2221      	movs	r2, #33	; 0x21
 80075a6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2207      	movs	r2, #7
 80075b8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2207      	movs	r2, #7
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f001 fa81 	bl	8008ac8 <USBH_CtlReq>
 80075c6:	4603      	mov	r3, r0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2221      	movs	r2, #33	; 0x21
 80075de:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2220      	movs	r2, #32
 80075e4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2207      	movs	r2, #7
 80075f6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	2207      	movs	r2, #7
 80075fc:	4619      	mov	r1, r3
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f001 fa62 	bl	8008ac8 <USBH_CtlReq>
 8007604:	4603      	mov	r3, r0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b086      	sub	sp, #24
 8007612:	af02      	add	r7, sp, #8
 8007614:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007620:	2300      	movs	r3, #0
 8007622:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800762a:	2b01      	cmp	r3, #1
 800762c:	d002      	beq.n	8007634 <CDC_ProcessTransmission+0x26>
 800762e:	2b02      	cmp	r3, #2
 8007630:	d023      	beq.n	800767a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007632:	e05e      	b.n	80076f2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	8b12      	ldrh	r2, [r2, #24]
 800763c:	4293      	cmp	r3, r2
 800763e:	d90b      	bls.n	8007658 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	69d9      	ldr	r1, [r3, #28]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8b1a      	ldrh	r2, [r3, #24]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	7b5b      	ldrb	r3, [r3, #13]
 800764c:	2001      	movs	r0, #1
 800764e:	9000      	str	r0, [sp, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f001 fc48 	bl	8008ee6 <USBH_BulkSendData>
 8007656:	e00b      	b.n	8007670 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007660:	b29a      	uxth	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	7b5b      	ldrb	r3, [r3, #13]
 8007666:	2001      	movs	r0, #1
 8007668:	9000      	str	r0, [sp, #0]
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f001 fc3b 	bl	8008ee6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007678:	e03b      	b.n	80076f2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	7b5b      	ldrb	r3, [r3, #13]
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f001 ff5f 	bl	8009544 <USBH_LL_GetURBState>
 8007686:	4603      	mov	r3, r0
 8007688:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800768a:	7afb      	ldrb	r3, [r7, #11]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d128      	bne.n	80076e2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	8b12      	ldrh	r2, [r2, #24]
 8007698:	4293      	cmp	r3, r2
 800769a:	d90e      	bls.n	80076ba <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	8b12      	ldrh	r2, [r2, #24]
 80076a4:	1a9a      	subs	r2, r3, r2
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	8b12      	ldrh	r2, [r2, #24]
 80076b2:	441a      	add	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	61da      	str	r2, [r3, #28]
 80076b8:	e002      	b.n	80076c0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d004      	beq.n	80076d2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80076d0:	e00e      	b.n	80076f0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f868 	bl	80077b0 <USBH_CDC_TransmitCallback>
      break;
 80076e0:	e006      	b.n	80076f0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80076e2:	7afb      	ldrb	r3, [r7, #11]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d103      	bne.n	80076f0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80076f0:	bf00      	nop
  }
}
 80076f2:	bf00      	nop
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b086      	sub	sp, #24
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007708:	69db      	ldr	r3, [r3, #28]
 800770a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800770c:	2300      	movs	r3, #0
 800770e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007716:	2b03      	cmp	r3, #3
 8007718:	d002      	beq.n	8007720 <CDC_ProcessReception+0x26>
 800771a:	2b04      	cmp	r3, #4
 800771c:	d00e      	beq.n	800773c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800771e:	e043      	b.n	80077a8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	6a19      	ldr	r1, [r3, #32]
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	8b5a      	ldrh	r2, [r3, #26]
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	7b1b      	ldrb	r3, [r3, #12]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 fbff 	bl	8008f30 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2204      	movs	r2, #4
 8007736:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800773a:	e035      	b.n	80077a8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	7b1b      	ldrb	r3, [r3, #12]
 8007740:	4619      	mov	r1, r3
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f001 fefe 	bl	8009544 <USBH_LL_GetURBState>
 8007748:	4603      	mov	r3, r0
 800774a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800774c:	7cfb      	ldrb	r3, [r7, #19]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d129      	bne.n	80077a6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	7b1b      	ldrb	r3, [r3, #12]
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 fe61 	bl	8009420 <USBH_LL_GetLastXferSize>
 800775e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	429a      	cmp	r2, r3
 8007768:	d016      	beq.n	8007798 <CDC_ProcessReception+0x9e>
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	8b5b      	ldrh	r3, [r3, #26]
 800776e:	461a      	mov	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4293      	cmp	r3, r2
 8007774:	d910      	bls.n	8007798 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	1ad2      	subs	r2, r2, r3
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	6a1a      	ldr	r2, [r3, #32]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	441a      	add	r2, r3
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2203      	movs	r2, #3
 8007792:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007796:	e006      	b.n	80077a6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f80f 	bl	80077c4 <USBH_CDC_ReceiveCallback>
      break;
 80077a6:	bf00      	nop
  }
}
 80077a8:	bf00      	nop
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	4613      	mov	r3, r2
 80077f8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007800:	2302      	movs	r3, #2
 8007802:	e029      	b.n	8007858 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	79fa      	ldrb	r2, [r7, #7]
 8007808:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 f81f 	bl	8007860 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d003      	beq.n	8007850 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f001 fd31 	bl	80092b8 <USBH_LL_Init>

  return USBH_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800786c:	2300      	movs	r3, #0
 800786e:	60fb      	str	r3, [r7, #12]
 8007870:	e009      	b.n	8007886 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	33e0      	adds	r3, #224	; 0xe0
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4413      	add	r3, r2
 800787c:	2200      	movs	r2, #0
 800787e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	3301      	adds	r3, #1
 8007884:	60fb      	str	r3, [r7, #12]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b0f      	cmp	r3, #15
 800788a:	d9f2      	bls.n	8007872 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800788c:	2300      	movs	r3, #0
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	e009      	b.n	80078a6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4413      	add	r3, r2
 8007898:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800789c:	2200      	movs	r2, #0
 800789e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3301      	adds	r3, #1
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078ac:	d3f1      	bcc.n	8007892 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2240      	movs	r2, #64	; 0x40
 80078d2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d016      	beq.n	800794a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10e      	bne.n	8007944 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800792c:	1c59      	adds	r1, r3, #1
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	33de      	adds	r3, #222	; 0xde
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	73fb      	strb	r3, [r7, #15]
 8007942:	e004      	b.n	800794e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007944:	2302      	movs	r3, #2
 8007946:	73fb      	strb	r3, [r7, #15]
 8007948:	e001      	b.n	800794e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800794a:	2302      	movs	r3, #2
 800794c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800794e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	460b      	mov	r3, r1
 8007966:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007972:	78fa      	ldrb	r2, [r7, #3]
 8007974:	429a      	cmp	r2, r3
 8007976:	d204      	bcs.n	8007982 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	78fa      	ldrb	r2, [r7, #3]
 800797c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007980:	e001      	b.n	8007986 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007982:	2302      	movs	r3, #2
 8007984:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007986:	7bfb      	ldrb	r3, [r7, #15]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3714      	adds	r7, #20
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007994:	b480      	push	{r7}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	4608      	mov	r0, r1
 800799e:	4611      	mov	r1, r2
 80079a0:	461a      	mov	r2, r3
 80079a2:	4603      	mov	r3, r0
 80079a4:	70fb      	strb	r3, [r7, #3]
 80079a6:	460b      	mov	r3, r1
 80079a8:	70bb      	strb	r3, [r7, #2]
 80079aa:	4613      	mov	r3, r2
 80079ac:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80079ae:	2300      	movs	r3, #0
 80079b0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80079b2:	2300      	movs	r3, #0
 80079b4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80079bc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80079be:	e025      	b.n	8007a0c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80079c0:	7dfb      	ldrb	r3, [r7, #23]
 80079c2:	221a      	movs	r2, #26
 80079c4:	fb02 f303 	mul.w	r3, r2, r3
 80079c8:	3308      	adds	r3, #8
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	4413      	add	r3, r2
 80079ce:	3302      	adds	r3, #2
 80079d0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	795b      	ldrb	r3, [r3, #5]
 80079d6:	78fa      	ldrb	r2, [r7, #3]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d002      	beq.n	80079e2 <USBH_FindInterface+0x4e>
 80079dc:	78fb      	ldrb	r3, [r7, #3]
 80079de:	2bff      	cmp	r3, #255	; 0xff
 80079e0:	d111      	bne.n	8007a06 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80079e6:	78ba      	ldrb	r2, [r7, #2]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d002      	beq.n	80079f2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80079ec:	78bb      	ldrb	r3, [r7, #2]
 80079ee:	2bff      	cmp	r3, #255	; 0xff
 80079f0:	d109      	bne.n	8007a06 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80079f6:	787a      	ldrb	r2, [r7, #1]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d002      	beq.n	8007a02 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80079fc:	787b      	ldrb	r3, [r7, #1]
 80079fe:	2bff      	cmp	r3, #255	; 0xff
 8007a00:	d101      	bne.n	8007a06 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007a02:	7dfb      	ldrb	r3, [r7, #23]
 8007a04:	e006      	b.n	8007a14 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007a06:	7dfb      	ldrb	r3, [r7, #23]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007a0c:	7dfb      	ldrb	r3, [r7, #23]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d9d6      	bls.n	80079c0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007a12:	23ff      	movs	r3, #255	; 0xff
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	371c      	adds	r7, #28
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f001 fc81 	bl	8009330 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007a2e:	2101      	movs	r1, #1
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f001 fd9a 	bl	800956a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b088      	sub	sp, #32
 8007a44:	af04      	add	r7, sp, #16
 8007a46:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007a48:	2302      	movs	r3, #2
 8007a4a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d102      	bne.n	8007a62 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2203      	movs	r2, #3
 8007a60:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	2b0b      	cmp	r3, #11
 8007a6a:	f200 81be 	bhi.w	8007dea <USBH_Process+0x3aa>
 8007a6e:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <USBH_Process+0x34>)
 8007a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a74:	08007aa5 	.word	0x08007aa5
 8007a78:	08007ad7 	.word	0x08007ad7
 8007a7c:	08007b3f 	.word	0x08007b3f
 8007a80:	08007d85 	.word	0x08007d85
 8007a84:	08007deb 	.word	0x08007deb
 8007a88:	08007be3 	.word	0x08007be3
 8007a8c:	08007d2b 	.word	0x08007d2b
 8007a90:	08007c19 	.word	0x08007c19
 8007a94:	08007c39 	.word	0x08007c39
 8007a98:	08007c59 	.word	0x08007c59
 8007a9c:	08007c9d 	.word	0x08007c9d
 8007aa0:	08007d6d 	.word	0x08007d6d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 819e 	beq.w	8007dee <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007ab8:	20c8      	movs	r0, #200	; 0xc8
 8007aba:	f001 fd9d 	bl	80095f8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f001 fc93 	bl	80093ea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ad4:	e18b      	b.n	8007dee <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d107      	bne.n	8007af0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2202      	movs	r2, #2
 8007aec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007aee:	e18d      	b.n	8007e0c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007af6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007afa:	d914      	bls.n	8007b26 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007b02:	3301      	adds	r3, #1
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d903      	bls.n	8007b1e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	220d      	movs	r2, #13
 8007b1a:	701a      	strb	r2, [r3, #0]
      break;
 8007b1c:	e176      	b.n	8007e0c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	701a      	strb	r2, [r3, #0]
      break;
 8007b24:	e172      	b.n	8007e0c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b2c:	f103 020a 	add.w	r2, r3, #10
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007b36:	200a      	movs	r0, #10
 8007b38:	f001 fd5e 	bl	80095f8 <USBH_Delay>
      break;
 8007b3c:	e166      	b.n	8007e0c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d005      	beq.n	8007b54 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b4e:	2104      	movs	r1, #4
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007b54:	2064      	movs	r0, #100	; 0x64
 8007b56:	f001 fd4f 	bl	80095f8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f001 fc1e 	bl	800939c <USBH_LL_GetSpeed>
 8007b60:	4603      	mov	r3, r0
 8007b62:	461a      	mov	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2205      	movs	r2, #5
 8007b6e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007b70:	2100      	movs	r1, #0
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f001 fa29 	bl	8008fca <USBH_AllocPipe>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007b80:	2180      	movs	r1, #128	; 0x80
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f001 fa21 	bl	8008fca <USBH_AllocPipe>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	7919      	ldrb	r1, [r3, #4]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ba4:	b292      	uxth	r2, r2
 8007ba6:	9202      	str	r2, [sp, #8]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	9201      	str	r2, [sp, #4]
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2280      	movs	r2, #128	; 0x80
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f001 f9da 	bl	8008f6c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	7959      	ldrb	r1, [r3, #5]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007bcc:	b292      	uxth	r2, r2
 8007bce:	9202      	str	r2, [sp, #8]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	9201      	str	r2, [sp, #4]
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2200      	movs	r2, #0
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f001 f9c6 	bl	8008f6c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007be0:	e114      	b.n	8007e0c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f918 	bl	8007e18 <USBH_HandleEnum>
 8007be8:	4603      	mov	r3, r0
 8007bea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f040 80fe 	bne.w	8007df2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d103      	bne.n	8007c10 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2208      	movs	r2, #8
 8007c0c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c0e:	e0f0      	b.n	8007df2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2207      	movs	r2, #7
 8007c14:	701a      	strb	r2, [r3, #0]
      break;
 8007c16:	e0ec      	b.n	8007df2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 80e9 	beq.w	8007df6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2208      	movs	r2, #8
 8007c34:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007c36:	e0de      	b.n	8007df6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	4619      	mov	r1, r3
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fc2c 	bl	80084a0 <USBH_SetCfg>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f040 80d5 	bne.w	8007dfa <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2209      	movs	r2, #9
 8007c54:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c56:	e0d0      	b.n	8007dfa <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007c5e:	f003 0320 	and.w	r3, r3, #32
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d016      	beq.n	8007c94 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007c66:	2101      	movs	r1, #1
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fc3c 	bl	80084e6 <USBH_SetFeature>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d103      	bne.n	8007c82 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	220a      	movs	r2, #10
 8007c7e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c80:	e0bd      	b.n	8007dfe <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	f040 80b9 	bne.w	8007dfe <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	220a      	movs	r2, #10
 8007c90:	701a      	strb	r2, [r3, #0]
      break;
 8007c92:	e0b4      	b.n	8007dfe <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	220a      	movs	r2, #10
 8007c98:	701a      	strb	r2, [r3, #0]
      break;
 8007c9a:	e0b0      	b.n	8007dfe <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f000 80ad 	beq.w	8007e02 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	73fb      	strb	r3, [r7, #15]
 8007cb4:	e016      	b.n	8007ce4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007cb6:	7bfa      	ldrb	r2, [r7, #15]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	32de      	adds	r2, #222	; 0xde
 8007cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc0:	791a      	ldrb	r2, [r3, #4]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d108      	bne.n	8007cde <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007ccc:	7bfa      	ldrb	r2, [r7, #15]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	32de      	adds	r2, #222	; 0xde
 8007cd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007cdc:	e005      	b.n	8007cea <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	73fb      	strb	r3, [r7, #15]
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d0e5      	beq.n	8007cb6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d016      	beq.n	8007d22 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	4798      	blx	r3
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d109      	bne.n	8007d1a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2206      	movs	r2, #6
 8007d0a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d12:	2103      	movs	r1, #3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d18:	e073      	b.n	8007e02 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	220d      	movs	r2, #13
 8007d1e:	701a      	strb	r2, [r3, #0]
      break;
 8007d20:	e06f      	b.n	8007e02 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	220d      	movs	r2, #13
 8007d26:	701a      	strb	r2, [r3, #0]
      break;
 8007d28:	e06b      	b.n	8007e02 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d017      	beq.n	8007d64 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	4798      	blx	r3
 8007d40:	4603      	mov	r3, r0
 8007d42:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007d44:	7bbb      	ldrb	r3, [r7, #14]
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d103      	bne.n	8007d54 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	220b      	movs	r2, #11
 8007d50:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d52:	e058      	b.n	8007e06 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007d54:	7bbb      	ldrb	r3, [r7, #14]
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d154      	bne.n	8007e06 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	220d      	movs	r2, #13
 8007d60:	701a      	strb	r2, [r3, #0]
      break;
 8007d62:	e050      	b.n	8007e06 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	220d      	movs	r2, #13
 8007d68:	701a      	strb	r2, [r3, #0]
      break;
 8007d6a:	e04c      	b.n	8007e06 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d049      	beq.n	8007e0a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	4798      	blx	r3
      }
      break;
 8007d82:	e042      	b.n	8007e0a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7ff fd67 	bl	8007860 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d009      	beq.n	8007db0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d005      	beq.n	8007dc6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007dc0:	2105      	movs	r1, #5
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d107      	bne.n	8007de2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7ff fe20 	bl	8007a20 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007de0:	e014      	b.n	8007e0c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f001 faa4 	bl	8009330 <USBH_LL_Start>
      break;
 8007de8:	e010      	b.n	8007e0c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007dea:	bf00      	nop
 8007dec:	e00e      	b.n	8007e0c <USBH_Process+0x3cc>
      break;
 8007dee:	bf00      	nop
 8007df0:	e00c      	b.n	8007e0c <USBH_Process+0x3cc>
      break;
 8007df2:	bf00      	nop
 8007df4:	e00a      	b.n	8007e0c <USBH_Process+0x3cc>
    break;
 8007df6:	bf00      	nop
 8007df8:	e008      	b.n	8007e0c <USBH_Process+0x3cc>
      break;
 8007dfa:	bf00      	nop
 8007dfc:	e006      	b.n	8007e0c <USBH_Process+0x3cc>
      break;
 8007dfe:	bf00      	nop
 8007e00:	e004      	b.n	8007e0c <USBH_Process+0x3cc>
      break;
 8007e02:	bf00      	nop
 8007e04:	e002      	b.n	8007e0c <USBH_Process+0x3cc>
      break;
 8007e06:	bf00      	nop
 8007e08:	e000      	b.n	8007e0c <USBH_Process+0x3cc>
      break;
 8007e0a:	bf00      	nop
  }
  return USBH_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop

08007e18 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af04      	add	r7, sp, #16
 8007e1e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007e20:	2301      	movs	r3, #1
 8007e22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007e24:	2301      	movs	r3, #1
 8007e26:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	785b      	ldrb	r3, [r3, #1]
 8007e2c:	2b07      	cmp	r3, #7
 8007e2e:	f200 81c1 	bhi.w	80081b4 <USBH_HandleEnum+0x39c>
 8007e32:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <USBH_HandleEnum+0x20>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007e59 	.word	0x08007e59
 8007e3c:	08007f17 	.word	0x08007f17
 8007e40:	08007f81 	.word	0x08007f81
 8007e44:	0800800f 	.word	0x0800800f
 8007e48:	08008079 	.word	0x08008079
 8007e4c:	080080e9 	.word	0x080080e9
 8007e50:	0800812f 	.word	0x0800812f
 8007e54:	08008175 	.word	0x08008175
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007e58:	2108      	movs	r1, #8
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fa50 	bl	8008300 <USBH_Get_DevDesc>
 8007e60:	4603      	mov	r3, r0
 8007e62:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e64:	7bbb      	ldrb	r3, [r7, #14]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d130      	bne.n	8007ecc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	7919      	ldrb	r1, [r3, #4]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007e8e:	b292      	uxth	r2, r2
 8007e90:	9202      	str	r2, [sp, #8]
 8007e92:	2200      	movs	r2, #0
 8007e94:	9201      	str	r2, [sp, #4]
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2280      	movs	r2, #128	; 0x80
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f001 f865 	bl	8008f6c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	7959      	ldrb	r1, [r3, #5]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007eb6:	b292      	uxth	r2, r2
 8007eb8:	9202      	str	r2, [sp, #8]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	9201      	str	r2, [sp, #4]
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f001 f851 	bl	8008f6c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007eca:	e175      	b.n	80081b8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ecc:	7bbb      	ldrb	r3, [r7, #14]
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	f040 8172 	bne.w	80081b8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007eda:	3301      	adds	r3, #1
 8007edc:	b2da      	uxtb	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007eea:	2b03      	cmp	r3, #3
 8007eec:	d903      	bls.n	8007ef6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	220d      	movs	r2, #13
 8007ef2:	701a      	strb	r2, [r3, #0]
      break;
 8007ef4:	e160      	b.n	80081b8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	795b      	ldrb	r3, [r3, #5]
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f001 f885 	bl	800900c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	791b      	ldrb	r3, [r3, #4]
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f001 f87f 	bl	800900c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	701a      	strb	r2, [r3, #0]
      break;
 8007f14:	e150      	b.n	80081b8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007f16:	2112      	movs	r1, #18
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f9f1 	bl	8008300 <USBH_Get_DevDesc>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f22:	7bbb      	ldrb	r3, [r7, #14]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d103      	bne.n	8007f30 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f2e:	e145      	b.n	80081bc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	f040 8142 	bne.w	80081bc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f3e:	3301      	adds	r3, #1
 8007f40:	b2da      	uxtb	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f4e:	2b03      	cmp	r3, #3
 8007f50:	d903      	bls.n	8007f5a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	220d      	movs	r2, #13
 8007f56:	701a      	strb	r2, [r3, #0]
      break;
 8007f58:	e130      	b.n	80081bc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	795b      	ldrb	r3, [r3, #5]
 8007f5e:	4619      	mov	r1, r3
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f001 f853 	bl	800900c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	791b      	ldrb	r3, [r3, #4]
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f001 f84d 	bl	800900c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	701a      	strb	r2, [r3, #0]
      break;
 8007f7e:	e11d      	b.n	80081bc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007f80:	2101      	movs	r1, #1
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fa68 	bl	8008458 <USBH_SetAddress>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f8c:	7bbb      	ldrb	r3, [r7, #14]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d132      	bne.n	8007ff8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007f92:	2002      	movs	r0, #2
 8007f94:	f001 fb30 	bl	80095f8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2203      	movs	r2, #3
 8007fa4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	7919      	ldrb	r1, [r3, #4]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007fba:	b292      	uxth	r2, r2
 8007fbc:	9202      	str	r2, [sp, #8]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	9201      	str	r2, [sp, #4]
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2280      	movs	r2, #128	; 0x80
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 ffcf 	bl	8008f6c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	7959      	ldrb	r1, [r3, #5]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007fe2:	b292      	uxth	r2, r2
 8007fe4:	9202      	str	r2, [sp, #8]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	9201      	str	r2, [sp, #4]
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	4603      	mov	r3, r0
 8007fee:	2200      	movs	r2, #0
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 ffbb 	bl	8008f6c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007ff6:	e0e3      	b.n	80081c0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ff8:	7bbb      	ldrb	r3, [r7, #14]
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	f040 80e0 	bne.w	80081c0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	220d      	movs	r2, #13
 8008004:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	705a      	strb	r2, [r3, #1]
      break;
 800800c:	e0d8      	b.n	80081c0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800800e:	2109      	movs	r1, #9
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f99d 	bl	8008350 <USBH_Get_CfgDesc>
 8008016:	4603      	mov	r3, r0
 8008018:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800801a:	7bbb      	ldrb	r3, [r7, #14]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d103      	bne.n	8008028 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2204      	movs	r2, #4
 8008024:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008026:	e0cd      	b.n	80081c4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008028:	7bbb      	ldrb	r3, [r7, #14]
 800802a:	2b03      	cmp	r3, #3
 800802c:	f040 80ca 	bne.w	80081c4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008036:	3301      	adds	r3, #1
 8008038:	b2da      	uxtb	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008046:	2b03      	cmp	r3, #3
 8008048:	d903      	bls.n	8008052 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	220d      	movs	r2, #13
 800804e:	701a      	strb	r2, [r3, #0]
      break;
 8008050:	e0b8      	b.n	80081c4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	795b      	ldrb	r3, [r3, #5]
 8008056:	4619      	mov	r1, r3
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 ffd7 	bl	800900c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	791b      	ldrb	r3, [r3, #4]
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 ffd1 	bl	800900c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	701a      	strb	r2, [r3, #0]
      break;
 8008076:	e0a5      	b.n	80081c4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f965 	bl	8008350 <USBH_Get_CfgDesc>
 8008086:	4603      	mov	r3, r0
 8008088:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800808a:	7bbb      	ldrb	r3, [r7, #14]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d103      	bne.n	8008098 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2205      	movs	r2, #5
 8008094:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008096:	e097      	b.n	80081c8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	2b03      	cmp	r3, #3
 800809c:	f040 8094 	bne.w	80081c8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080a6:	3301      	adds	r3, #1
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080b6:	2b03      	cmp	r3, #3
 80080b8:	d903      	bls.n	80080c2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	220d      	movs	r2, #13
 80080be:	701a      	strb	r2, [r3, #0]
      break;
 80080c0:	e082      	b.n	80081c8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	795b      	ldrb	r3, [r3, #5]
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 ff9f 	bl	800900c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	791b      	ldrb	r3, [r3, #4]
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 ff99 	bl	800900c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	701a      	strb	r2, [r3, #0]
      break;
 80080e6:	e06f      	b.n	80081c8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d019      	beq.n	8008126 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80080fe:	23ff      	movs	r3, #255	; 0xff
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f949 	bl	8008398 <USBH_Get_StringDesc>
 8008106:	4603      	mov	r3, r0
 8008108:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d103      	bne.n	8008118 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2206      	movs	r2, #6
 8008114:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008116:	e059      	b.n	80081cc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008118:	7bbb      	ldrb	r3, [r7, #14]
 800811a:	2b03      	cmp	r3, #3
 800811c:	d156      	bne.n	80081cc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2206      	movs	r2, #6
 8008122:	705a      	strb	r2, [r3, #1]
      break;
 8008124:	e052      	b.n	80081cc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2206      	movs	r2, #6
 800812a:	705a      	strb	r2, [r3, #1]
      break;
 800812c:	e04e      	b.n	80081cc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008134:	2b00      	cmp	r3, #0
 8008136:	d019      	beq.n	800816c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008144:	23ff      	movs	r3, #255	; 0xff
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f926 	bl	8008398 <USBH_Get_StringDesc>
 800814c:	4603      	mov	r3, r0
 800814e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008150:	7bbb      	ldrb	r3, [r7, #14]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d103      	bne.n	800815e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2207      	movs	r2, #7
 800815a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800815c:	e038      	b.n	80081d0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800815e:	7bbb      	ldrb	r3, [r7, #14]
 8008160:	2b03      	cmp	r3, #3
 8008162:	d135      	bne.n	80081d0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2207      	movs	r2, #7
 8008168:	705a      	strb	r2, [r3, #1]
      break;
 800816a:	e031      	b.n	80081d0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2207      	movs	r2, #7
 8008170:	705a      	strb	r2, [r3, #1]
      break;
 8008172:	e02d      	b.n	80081d0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800817a:	2b00      	cmp	r3, #0
 800817c:	d017      	beq.n	80081ae <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800818a:	23ff      	movs	r3, #255	; 0xff
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f903 	bl	8008398 <USBH_Get_StringDesc>
 8008192:	4603      	mov	r3, r0
 8008194:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d102      	bne.n	80081a2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800819c:	2300      	movs	r3, #0
 800819e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80081a0:	e018      	b.n	80081d4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
 80081a4:	2b03      	cmp	r3, #3
 80081a6:	d115      	bne.n	80081d4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	73fb      	strb	r3, [r7, #15]
      break;
 80081ac:	e012      	b.n	80081d4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	73fb      	strb	r3, [r7, #15]
      break;
 80081b2:	e00f      	b.n	80081d4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80081b4:	bf00      	nop
 80081b6:	e00e      	b.n	80081d6 <USBH_HandleEnum+0x3be>
      break;
 80081b8:	bf00      	nop
 80081ba:	e00c      	b.n	80081d6 <USBH_HandleEnum+0x3be>
      break;
 80081bc:	bf00      	nop
 80081be:	e00a      	b.n	80081d6 <USBH_HandleEnum+0x3be>
      break;
 80081c0:	bf00      	nop
 80081c2:	e008      	b.n	80081d6 <USBH_HandleEnum+0x3be>
      break;
 80081c4:	bf00      	nop
 80081c6:	e006      	b.n	80081d6 <USBH_HandleEnum+0x3be>
      break;
 80081c8:	bf00      	nop
 80081ca:	e004      	b.n	80081d6 <USBH_HandleEnum+0x3be>
      break;
 80081cc:	bf00      	nop
 80081ce:	e002      	b.n	80081d6 <USBH_HandleEnum+0x3be>
      break;
 80081d0:	bf00      	nop
 80081d2:	e000      	b.n	80081d6 <USBH_HandleEnum+0x3be>
      break;
 80081d4:	bf00      	nop
  }
  return Status;
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80081f2:	bf00      	nop
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b082      	sub	sp, #8
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800820c:	1c5a      	adds	r2, r3, #1
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f804 	bl	8008222 <USBH_HandleSof>
}
 800821a:	bf00      	nop
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b082      	sub	sp, #8
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2b0b      	cmp	r3, #11
 8008232:	d10a      	bne.n	800824a <USBH_HandleSof+0x28>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800823a:	2b00      	cmp	r3, #0
 800823c:	d005      	beq.n	800824a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	4798      	blx	r3
  }
}
 800824a:	bf00      	nop
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008252:	b480      	push	{r7}
 8008254:	b083      	sub	sp, #12
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008262:	bf00      	nop
}
 8008264:	370c      	adds	r7, #12
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800826e:	b480      	push	{r7}
 8008270:	b083      	sub	sp, #12
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800827e:	bf00      	nop
}
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800828a:	b480      	push	{r7}
 800828c:	b083      	sub	sp, #12
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f001 f844 	bl	8009366 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	791b      	ldrb	r3, [r3, #4]
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fe91 	bl	800900c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	795b      	ldrb	r3, [r3, #5]
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fe8b 	bl	800900c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af02      	add	r7, sp, #8
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	460b      	mov	r3, r1
 800830a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008312:	78fb      	ldrb	r3, [r7, #3]
 8008314:	b29b      	uxth	r3, r3
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	4613      	mov	r3, r2
 800831a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800831e:	2100      	movs	r1, #0
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f864 	bl	80083ee <USBH_GetDescriptor>
 8008326:	4603      	mov	r3, r0
 8008328:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10a      	bne.n	8008346 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800833c:	78fa      	ldrb	r2, [r7, #3]
 800833e:	b292      	uxth	r2, r2
 8008340:	4619      	mov	r1, r3
 8008342:	f000 f918 	bl	8008576 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008346:	7bfb      	ldrb	r3, [r7, #15]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af02      	add	r7, sp, #8
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	331c      	adds	r3, #28
 8008360:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008362:	887b      	ldrh	r3, [r7, #2]
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800836c:	2100      	movs	r1, #0
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f83d 	bl	80083ee <USBH_GetDescriptor>
 8008374:	4603      	mov	r3, r0
 8008376:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008378:	7bfb      	ldrb	r3, [r7, #15]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d107      	bne.n	800838e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800837e:	887b      	ldrh	r3, [r7, #2]
 8008380:	461a      	mov	r2, r3
 8008382:	68b9      	ldr	r1, [r7, #8]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f987 	bl	8008698 <USBH_ParseCfgDesc>
 800838a:	4603      	mov	r3, r0
 800838c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800838e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b088      	sub	sp, #32
 800839c:	af02      	add	r7, sp, #8
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	607a      	str	r2, [r7, #4]
 80083a2:	461a      	mov	r2, r3
 80083a4:	460b      	mov	r3, r1
 80083a6:	72fb      	strb	r3, [r7, #11]
 80083a8:	4613      	mov	r3, r2
 80083aa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80083ac:	7afb      	ldrb	r3, [r7, #11]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80083b4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80083bc:	893b      	ldrh	r3, [r7, #8]
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	460b      	mov	r3, r1
 80083c2:	2100      	movs	r1, #0
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 f812 	bl	80083ee <USBH_GetDescriptor>
 80083ca:	4603      	mov	r3, r0
 80083cc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d107      	bne.n	80083e4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80083da:	893a      	ldrh	r2, [r7, #8]
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 fb24 	bl	8008a2c <USBH_ParseStringDesc>
  }

  return status;
 80083e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3718      	adds	r7, #24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b084      	sub	sp, #16
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	60f8      	str	r0, [r7, #12]
 80083f6:	607b      	str	r3, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	72fb      	strb	r3, [r7, #11]
 80083fc:	4613      	mov	r3, r2
 80083fe:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	789b      	ldrb	r3, [r3, #2]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d11c      	bne.n	8008442 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008408:	7afb      	ldrb	r3, [r7, #11]
 800840a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800840e:	b2da      	uxtb	r2, r3
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2206      	movs	r2, #6
 8008418:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	893a      	ldrh	r2, [r7, #8]
 800841e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008420:	893b      	ldrh	r3, [r7, #8]
 8008422:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800842a:	d104      	bne.n	8008436 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f240 4209 	movw	r2, #1033	; 0x409
 8008432:	829a      	strh	r2, [r3, #20]
 8008434:	e002      	b.n	800843c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	8b3a      	ldrh	r2, [r7, #24]
 8008440:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008442:	8b3b      	ldrh	r3, [r7, #24]
 8008444:	461a      	mov	r2, r3
 8008446:	6879      	ldr	r1, [r7, #4]
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f000 fb3d 	bl	8008ac8 <USBH_CtlReq>
 800844e:	4603      	mov	r3, r0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	460b      	mov	r3, r1
 8008462:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	789b      	ldrb	r3, [r3, #2]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d10f      	bne.n	800848c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2205      	movs	r2, #5
 8008476:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008478:	78fb      	ldrb	r3, [r7, #3]
 800847a:	b29a      	uxth	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800848c:	2200      	movs	r2, #0
 800848e:	2100      	movs	r1, #0
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fb19 	bl	8008ac8 <USBH_CtlReq>
 8008496:	4603      	mov	r3, r0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	460b      	mov	r3, r1
 80084aa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	789b      	ldrb	r3, [r3, #2]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d10e      	bne.n	80084d2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2209      	movs	r2, #9
 80084be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	887a      	ldrh	r2, [r7, #2]
 80084c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80084d2:	2200      	movs	r2, #0
 80084d4:	2100      	movs	r1, #0
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 faf6 	bl	8008ac8 <USBH_CtlReq>
 80084dc:	4603      	mov	r3, r0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	460b      	mov	r3, r1
 80084f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	789b      	ldrb	r3, [r3, #2]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d10f      	bne.n	800851a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2203      	movs	r2, #3
 8008504:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008506:	78fb      	ldrb	r3, [r7, #3]
 8008508:	b29a      	uxth	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800851a:	2200      	movs	r2, #0
 800851c:	2100      	movs	r1, #0
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fad2 	bl	8008ac8 <USBH_CtlReq>
 8008524:	4603      	mov	r3, r0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b082      	sub	sp, #8
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	460b      	mov	r3, r1
 8008538:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	789b      	ldrb	r3, [r3, #2]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d10f      	bne.n	8008562 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2202      	movs	r2, #2
 8008546:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008554:	78fb      	ldrb	r3, [r7, #3]
 8008556:	b29a      	uxth	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008562:	2200      	movs	r2, #0
 8008564:	2100      	movs	r1, #0
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 faae 	bl	8008ac8 <USBH_CtlReq>
 800856c:	4603      	mov	r3, r0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008576:	b480      	push	{r7}
 8008578:	b085      	sub	sp, #20
 800857a:	af00      	add	r7, sp, #0
 800857c:	60f8      	str	r0, [r7, #12]
 800857e:	60b9      	str	r1, [r7, #8]
 8008580:	4613      	mov	r3, r2
 8008582:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	781a      	ldrb	r2, [r3, #0]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	785a      	ldrb	r2, [r3, #1]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	3302      	adds	r3, #2
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	b29a      	uxth	r2, r3
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	3303      	adds	r3, #3
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	021b      	lsls	r3, r3, #8
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	4313      	orrs	r3, r2
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	791a      	ldrb	r2, [r3, #4]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	795a      	ldrb	r2, [r3, #5]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	799a      	ldrb	r2, [r3, #6]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	79da      	ldrb	r2, [r3, #7]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	79db      	ldrb	r3, [r3, #7]
 80085d4:	2b20      	cmp	r3, #32
 80085d6:	dc11      	bgt.n	80085fc <USBH_ParseDevDesc+0x86>
 80085d8:	2b08      	cmp	r3, #8
 80085da:	db16      	blt.n	800860a <USBH_ParseDevDesc+0x94>
 80085dc:	3b08      	subs	r3, #8
 80085de:	2201      	movs	r2, #1
 80085e0:	fa02 f303 	lsl.w	r3, r2, r3
 80085e4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80085e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	bf14      	ite	ne
 80085f0:	2301      	movne	r3, #1
 80085f2:	2300      	moveq	r3, #0
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d102      	bne.n	8008600 <USBH_ParseDevDesc+0x8a>
 80085fa:	e006      	b.n	800860a <USBH_ParseDevDesc+0x94>
 80085fc:	2b40      	cmp	r3, #64	; 0x40
 80085fe:	d104      	bne.n	800860a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	79da      	ldrb	r2, [r3, #7]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	71da      	strb	r2, [r3, #7]
      break;
 8008608:	e003      	b.n	8008612 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2240      	movs	r2, #64	; 0x40
 800860e:	71da      	strb	r2, [r3, #7]
      break;
 8008610:	bf00      	nop
  }

  if (length > 8U)
 8008612:	88fb      	ldrh	r3, [r7, #6]
 8008614:	2b08      	cmp	r3, #8
 8008616:	d939      	bls.n	800868c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	3308      	adds	r3, #8
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	b29a      	uxth	r2, r3
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	3309      	adds	r3, #9
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	b29b      	uxth	r3, r3
 8008628:	021b      	lsls	r3, r3, #8
 800862a:	b29b      	uxth	r3, r3
 800862c:	4313      	orrs	r3, r2
 800862e:	b29a      	uxth	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	330a      	adds	r3, #10
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	b29a      	uxth	r2, r3
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	330b      	adds	r3, #11
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	b29b      	uxth	r3, r3
 8008644:	021b      	lsls	r3, r3, #8
 8008646:	b29b      	uxth	r3, r3
 8008648:	4313      	orrs	r3, r2
 800864a:	b29a      	uxth	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	330c      	adds	r3, #12
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	b29a      	uxth	r2, r3
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	330d      	adds	r3, #13
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	b29b      	uxth	r3, r3
 8008660:	021b      	lsls	r3, r3, #8
 8008662:	b29b      	uxth	r3, r3
 8008664:	4313      	orrs	r3, r2
 8008666:	b29a      	uxth	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	7b9a      	ldrb	r2, [r3, #14]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	7bda      	ldrb	r2, [r3, #15]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	7c1a      	ldrb	r2, [r3, #16]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	7c5a      	ldrb	r2, [r3, #17]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	745a      	strb	r2, [r3, #17]
  }
}
 800868c:	bf00      	nop
 800868e:	3714      	adds	r7, #20
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b08c      	sub	sp, #48	; 0x30
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	4613      	mov	r3, r2
 80086a4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80086ac:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80086b8:	2300      	movs	r3, #0
 80086ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80086be:	2300      	movs	r3, #0
 80086c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	781a      	ldrb	r2, [r3, #0]
 80086cc:	6a3b      	ldr	r3, [r7, #32]
 80086ce:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	785a      	ldrb	r2, [r3, #1]
 80086d4:	6a3b      	ldr	r3, [r7, #32]
 80086d6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	3302      	adds	r3, #2
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	b29a      	uxth	r2, r3
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	3303      	adds	r3, #3
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	021b      	lsls	r3, r3, #8
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	4313      	orrs	r3, r2
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086f4:	bf28      	it	cs
 80086f6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	791a      	ldrb	r2, [r3, #4]
 8008704:	6a3b      	ldr	r3, [r7, #32]
 8008706:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	795a      	ldrb	r2, [r3, #5]
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	799a      	ldrb	r2, [r3, #6]
 8008714:	6a3b      	ldr	r3, [r7, #32]
 8008716:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	79da      	ldrb	r2, [r3, #7]
 800871c:	6a3b      	ldr	r3, [r7, #32]
 800871e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	7a1a      	ldrb	r2, [r3, #8]
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008728:	6a3b      	ldr	r3, [r7, #32]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	2b09      	cmp	r3, #9
 800872e:	d002      	beq.n	8008736 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	2209      	movs	r2, #9
 8008734:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008736:	88fb      	ldrh	r3, [r7, #6]
 8008738:	2b09      	cmp	r3, #9
 800873a:	f240 809d 	bls.w	8008878 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800873e:	2309      	movs	r3, #9
 8008740:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008742:	2300      	movs	r3, #0
 8008744:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008746:	e081      	b.n	800884c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008748:	f107 0316 	add.w	r3, r7, #22
 800874c:	4619      	mov	r1, r3
 800874e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008750:	f000 f99f 	bl	8008a92 <USBH_GetNextDesc>
 8008754:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008758:	785b      	ldrb	r3, [r3, #1]
 800875a:	2b04      	cmp	r3, #4
 800875c:	d176      	bne.n	800884c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800875e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	2b09      	cmp	r3, #9
 8008764:	d002      	beq.n	800876c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008768:	2209      	movs	r2, #9
 800876a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800876c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008770:	221a      	movs	r2, #26
 8008772:	fb02 f303 	mul.w	r3, r2, r3
 8008776:	3308      	adds	r3, #8
 8008778:	6a3a      	ldr	r2, [r7, #32]
 800877a:	4413      	add	r3, r2
 800877c:	3302      	adds	r3, #2
 800877e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008782:	69f8      	ldr	r0, [r7, #28]
 8008784:	f000 f87e 	bl	8008884 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008788:	2300      	movs	r3, #0
 800878a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800878e:	2300      	movs	r3, #0
 8008790:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008792:	e043      	b.n	800881c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008794:	f107 0316 	add.w	r3, r7, #22
 8008798:	4619      	mov	r1, r3
 800879a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800879c:	f000 f979 	bl	8008a92 <USBH_GetNextDesc>
 80087a0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80087a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a4:	785b      	ldrb	r3, [r3, #1]
 80087a6:	2b05      	cmp	r3, #5
 80087a8:	d138      	bne.n	800881c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	795b      	ldrb	r3, [r3, #5]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d10f      	bne.n	80087d2 <USBH_ParseCfgDesc+0x13a>
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	799b      	ldrb	r3, [r3, #6]
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d10b      	bne.n	80087d2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	79db      	ldrb	r3, [r3, #7]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10f      	bne.n	80087e2 <USBH_ParseCfgDesc+0x14a>
 80087c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	2b09      	cmp	r3, #9
 80087c8:	d00b      	beq.n	80087e2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	2209      	movs	r2, #9
 80087ce:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80087d0:	e007      	b.n	80087e2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80087d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	2b07      	cmp	r3, #7
 80087d8:	d004      	beq.n	80087e4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80087da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087dc:	2207      	movs	r2, #7
 80087de:	701a      	strb	r2, [r3, #0]
 80087e0:	e000      	b.n	80087e4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80087e2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80087e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087e8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80087ec:	3201      	adds	r2, #1
 80087ee:	00d2      	lsls	r2, r2, #3
 80087f0:	211a      	movs	r1, #26
 80087f2:	fb01 f303 	mul.w	r3, r1, r3
 80087f6:	4413      	add	r3, r2
 80087f8:	3308      	adds	r3, #8
 80087fa:	6a3a      	ldr	r2, [r7, #32]
 80087fc:	4413      	add	r3, r2
 80087fe:	3304      	adds	r3, #4
 8008800:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008804:	69b9      	ldr	r1, [r7, #24]
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f000 f86b 	bl	80088e2 <USBH_ParseEPDesc>
 800880c:	4603      	mov	r3, r0
 800880e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008812:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008816:	3301      	adds	r3, #1
 8008818:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	791b      	ldrb	r3, [r3, #4]
 8008820:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008824:	429a      	cmp	r2, r3
 8008826:	d204      	bcs.n	8008832 <USBH_ParseCfgDesc+0x19a>
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	885a      	ldrh	r2, [r3, #2]
 800882c:	8afb      	ldrh	r3, [r7, #22]
 800882e:	429a      	cmp	r2, r3
 8008830:	d8b0      	bhi.n	8008794 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	791b      	ldrb	r3, [r3, #4]
 8008836:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800883a:	429a      	cmp	r2, r3
 800883c:	d201      	bcs.n	8008842 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800883e:	2303      	movs	r3, #3
 8008840:	e01c      	b.n	800887c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008846:	3301      	adds	r3, #1
 8008848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800884c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008850:	2b01      	cmp	r3, #1
 8008852:	d805      	bhi.n	8008860 <USBH_ParseCfgDesc+0x1c8>
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	885a      	ldrh	r2, [r3, #2]
 8008858:	8afb      	ldrh	r3, [r7, #22]
 800885a:	429a      	cmp	r2, r3
 800885c:	f63f af74 	bhi.w	8008748 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008860:	6a3b      	ldr	r3, [r7, #32]
 8008862:	791b      	ldrb	r3, [r3, #4]
 8008864:	2b02      	cmp	r3, #2
 8008866:	bf28      	it	cs
 8008868:	2302      	movcs	r3, #2
 800886a:	b2db      	uxtb	r3, r3
 800886c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008870:	429a      	cmp	r2, r3
 8008872:	d201      	bcs.n	8008878 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008874:	2303      	movs	r3, #3
 8008876:	e001      	b.n	800887c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008878:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800887c:	4618      	mov	r0, r3
 800887e:	3730      	adds	r7, #48	; 0x30
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	781a      	ldrb	r2, [r3, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	785a      	ldrb	r2, [r3, #1]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	789a      	ldrb	r2, [r3, #2]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	78da      	ldrb	r2, [r3, #3]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	791a      	ldrb	r2, [r3, #4]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	795a      	ldrb	r2, [r3, #5]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	799a      	ldrb	r2, [r3, #6]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	79da      	ldrb	r2, [r3, #7]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	7a1a      	ldrb	r2, [r3, #8]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	721a      	strb	r2, [r3, #8]
}
 80088d6:	bf00      	nop
 80088d8:	370c      	adds	r7, #12
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr

080088e2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b087      	sub	sp, #28
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	60f8      	str	r0, [r7, #12]
 80088ea:	60b9      	str	r1, [r7, #8]
 80088ec:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	781a      	ldrb	r2, [r3, #0]
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	785a      	ldrb	r2, [r3, #1]
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	789a      	ldrb	r2, [r3, #2]
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	78da      	ldrb	r2, [r3, #3]
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	3304      	adds	r3, #4
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	b29a      	uxth	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	3305      	adds	r3, #5
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	b29b      	uxth	r3, r3
 8008922:	021b      	lsls	r3, r3, #8
 8008924:	b29b      	uxth	r3, r3
 8008926:	4313      	orrs	r3, r2
 8008928:	b29a      	uxth	r2, r3
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	799a      	ldrb	r2, [r3, #6]
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	889b      	ldrh	r3, [r3, #4]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d102      	bne.n	8008944 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800893e:	2303      	movs	r3, #3
 8008940:	75fb      	strb	r3, [r7, #23]
 8008942:	e033      	b.n	80089ac <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	889b      	ldrh	r3, [r3, #4]
 8008948:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800894c:	f023 0307 	bic.w	r3, r3, #7
 8008950:	b29a      	uxth	r2, r3
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	889b      	ldrh	r3, [r3, #4]
 800895a:	b21a      	sxth	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	3304      	adds	r3, #4
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	b299      	uxth	r1, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	3305      	adds	r3, #5
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	b29b      	uxth	r3, r3
 800896c:	021b      	lsls	r3, r3, #8
 800896e:	b29b      	uxth	r3, r3
 8008970:	430b      	orrs	r3, r1
 8008972:	b29b      	uxth	r3, r3
 8008974:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008978:	2b00      	cmp	r3, #0
 800897a:	d110      	bne.n	800899e <USBH_ParseEPDesc+0xbc>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	3304      	adds	r3, #4
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	b299      	uxth	r1, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	3305      	adds	r3, #5
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	b29b      	uxth	r3, r3
 800898c:	021b      	lsls	r3, r3, #8
 800898e:	b29b      	uxth	r3, r3
 8008990:	430b      	orrs	r3, r1
 8008992:	b29b      	uxth	r3, r3
 8008994:	b21b      	sxth	r3, r3
 8008996:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800899a:	b21b      	sxth	r3, r3
 800899c:	e001      	b.n	80089a2 <USBH_ParseEPDesc+0xc0>
 800899e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089a2:	4313      	orrs	r3, r2
 80089a4:	b21b      	sxth	r3, r3
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d116      	bne.n	80089e4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	78db      	ldrb	r3, [r3, #3]
 80089ba:	f003 0303 	and.w	r3, r3, #3
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d005      	beq.n	80089ce <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	78db      	ldrb	r3, [r3, #3]
 80089c6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	d127      	bne.n	8008a1e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	799b      	ldrb	r3, [r3, #6]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <USBH_ParseEPDesc+0xfc>
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	799b      	ldrb	r3, [r3, #6]
 80089da:	2b10      	cmp	r3, #16
 80089dc:	d91f      	bls.n	8008a1e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80089de:	2303      	movs	r3, #3
 80089e0:	75fb      	strb	r3, [r7, #23]
 80089e2:	e01c      	b.n	8008a1e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	78db      	ldrb	r3, [r3, #3]
 80089e8:	f003 0303 	and.w	r3, r3, #3
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d10a      	bne.n	8008a06 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	799b      	ldrb	r3, [r3, #6]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d003      	beq.n	8008a00 <USBH_ParseEPDesc+0x11e>
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	799b      	ldrb	r3, [r3, #6]
 80089fc:	2b10      	cmp	r3, #16
 80089fe:	d90e      	bls.n	8008a1e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008a00:	2303      	movs	r3, #3
 8008a02:	75fb      	strb	r3, [r7, #23]
 8008a04:	e00b      	b.n	8008a1e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	78db      	ldrb	r3, [r3, #3]
 8008a0a:	f003 0303 	and.w	r3, r3, #3
 8008a0e:	2b03      	cmp	r3, #3
 8008a10:	d105      	bne.n	8008a1e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	799b      	ldrb	r3, [r3, #6]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d101      	bne.n	8008a1e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	371c      	adds	r7, #28
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b087      	sub	sp, #28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	4613      	mov	r3, r2
 8008a38:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	d120      	bne.n	8008a86 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	1e9a      	subs	r2, r3, #2
 8008a4a:	88fb      	ldrh	r3, [r7, #6]
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	bf28      	it	cs
 8008a50:	4613      	movcs	r3, r2
 8008a52:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	3302      	adds	r3, #2
 8008a58:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	82fb      	strh	r3, [r7, #22]
 8008a5e:	e00b      	b.n	8008a78 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008a60:	8afb      	ldrh	r3, [r7, #22]
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	4413      	add	r3, r2
 8008a66:	781a      	ldrb	r2, [r3, #0]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008a72:	8afb      	ldrh	r3, [r7, #22]
 8008a74:	3302      	adds	r3, #2
 8008a76:	82fb      	strh	r3, [r7, #22]
 8008a78:	8afa      	ldrh	r2, [r7, #22]
 8008a7a:	8abb      	ldrh	r3, [r7, #20]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d3ef      	bcc.n	8008a60 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	2200      	movs	r2, #0
 8008a84:	701a      	strb	r2, [r3, #0]
  }
}
 8008a86:	bf00      	nop
 8008a88:	371c      	adds	r7, #28
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008a92:	b480      	push	{r7}
 8008a94:	b085      	sub	sp, #20
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	881a      	ldrh	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	4413      	add	r3, r2
 8008aa8:	b29a      	uxth	r2, r3
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008aba:	68fb      	ldr	r3, [r7, #12]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3714      	adds	r7, #20
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b086      	sub	sp, #24
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	789b      	ldrb	r3, [r3, #2]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d002      	beq.n	8008ae8 <USBH_CtlReq+0x20>
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d00f      	beq.n	8008b06 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008ae6:	e027      	b.n	8008b38 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	88fa      	ldrh	r2, [r7, #6]
 8008af2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2201      	movs	r2, #1
 8008af8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2202      	movs	r2, #2
 8008afe:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008b00:	2301      	movs	r3, #1
 8008b02:	75fb      	strb	r3, [r7, #23]
      break;
 8008b04:	e018      	b.n	8008b38 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 f81c 	bl	8008b44 <USBH_HandleControl>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008b10:	7dfb      	ldrb	r3, [r7, #23]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d002      	beq.n	8008b1c <USBH_CtlReq+0x54>
 8008b16:	7dfb      	ldrb	r3, [r7, #23]
 8008b18:	2b03      	cmp	r3, #3
 8008b1a:	d106      	bne.n	8008b2a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2200      	movs	r2, #0
 8008b26:	761a      	strb	r2, [r3, #24]
      break;
 8008b28:	e005      	b.n	8008b36 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008b2a:	7dfb      	ldrb	r3, [r7, #23]
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d102      	bne.n	8008b36 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2201      	movs	r2, #1
 8008b34:	709a      	strb	r2, [r3, #2]
      break;
 8008b36:	bf00      	nop
  }
  return status;
 8008b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3718      	adds	r7, #24
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af02      	add	r7, sp, #8
 8008b4a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008b50:	2300      	movs	r3, #0
 8008b52:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	7e1b      	ldrb	r3, [r3, #24]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	2b0a      	cmp	r3, #10
 8008b5c:	f200 8156 	bhi.w	8008e0c <USBH_HandleControl+0x2c8>
 8008b60:	a201      	add	r2, pc, #4	; (adr r2, 8008b68 <USBH_HandleControl+0x24>)
 8008b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b66:	bf00      	nop
 8008b68:	08008b95 	.word	0x08008b95
 8008b6c:	08008baf 	.word	0x08008baf
 8008b70:	08008c19 	.word	0x08008c19
 8008b74:	08008c3f 	.word	0x08008c3f
 8008b78:	08008c77 	.word	0x08008c77
 8008b7c:	08008ca1 	.word	0x08008ca1
 8008b80:	08008cf3 	.word	0x08008cf3
 8008b84:	08008d15 	.word	0x08008d15
 8008b88:	08008d51 	.word	0x08008d51
 8008b8c:	08008d77 	.word	0x08008d77
 8008b90:	08008db5 	.word	0x08008db5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f103 0110 	add.w	r1, r3, #16
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	795b      	ldrb	r3, [r3, #5]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f943 	bl	8008e2c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2202      	movs	r2, #2
 8008baa:	761a      	strb	r2, [r3, #24]
      break;
 8008bac:	e139      	b.n	8008e22 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	795b      	ldrb	r3, [r3, #5]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fcc5 	bl	8009544 <USBH_LL_GetURBState>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008bbe:	7bbb      	ldrb	r3, [r7, #14]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d11e      	bne.n	8008c02 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	7c1b      	ldrb	r3, [r3, #16]
 8008bc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008bcc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	8adb      	ldrh	r3, [r3, #22]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00a      	beq.n	8008bec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008bd6:	7b7b      	ldrb	r3, [r7, #13]
 8008bd8:	2b80      	cmp	r3, #128	; 0x80
 8008bda:	d103      	bne.n	8008be4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2203      	movs	r2, #3
 8008be0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008be2:	e115      	b.n	8008e10 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2205      	movs	r2, #5
 8008be8:	761a      	strb	r2, [r3, #24]
      break;
 8008bea:	e111      	b.n	8008e10 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008bec:	7b7b      	ldrb	r3, [r7, #13]
 8008bee:	2b80      	cmp	r3, #128	; 0x80
 8008bf0:	d103      	bne.n	8008bfa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2209      	movs	r2, #9
 8008bf6:	761a      	strb	r2, [r3, #24]
      break;
 8008bf8:	e10a      	b.n	8008e10 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2207      	movs	r2, #7
 8008bfe:	761a      	strb	r2, [r3, #24]
      break;
 8008c00:	e106      	b.n	8008e10 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008c02:	7bbb      	ldrb	r3, [r7, #14]
 8008c04:	2b04      	cmp	r3, #4
 8008c06:	d003      	beq.n	8008c10 <USBH_HandleControl+0xcc>
 8008c08:	7bbb      	ldrb	r3, [r7, #14]
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	f040 8100 	bne.w	8008e10 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	220b      	movs	r2, #11
 8008c14:	761a      	strb	r2, [r3, #24]
      break;
 8008c16:	e0fb      	b.n	8008e10 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6899      	ldr	r1, [r3, #8]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	899a      	ldrh	r2, [r3, #12]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	791b      	ldrb	r3, [r3, #4]
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f93a 	bl	8008eaa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2204      	movs	r2, #4
 8008c3a:	761a      	strb	r2, [r3, #24]
      break;
 8008c3c:	e0f1      	b.n	8008e22 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	791b      	ldrb	r3, [r3, #4]
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fc7d 	bl	8009544 <USBH_LL_GetURBState>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d102      	bne.n	8008c5a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2209      	movs	r2, #9
 8008c58:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008c5a:	7bbb      	ldrb	r3, [r7, #14]
 8008c5c:	2b05      	cmp	r3, #5
 8008c5e:	d102      	bne.n	8008c66 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008c60:	2303      	movs	r3, #3
 8008c62:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c64:	e0d6      	b.n	8008e14 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008c66:	7bbb      	ldrb	r3, [r7, #14]
 8008c68:	2b04      	cmp	r3, #4
 8008c6a:	f040 80d3 	bne.w	8008e14 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	220b      	movs	r2, #11
 8008c72:	761a      	strb	r2, [r3, #24]
      break;
 8008c74:	e0ce      	b.n	8008e14 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6899      	ldr	r1, [r3, #8]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	899a      	ldrh	r2, [r3, #12]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	795b      	ldrb	r3, [r3, #5]
 8008c82:	2001      	movs	r0, #1
 8008c84:	9000      	str	r0, [sp, #0]
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f8ea 	bl	8008e60 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2206      	movs	r2, #6
 8008c9c:	761a      	strb	r2, [r3, #24]
      break;
 8008c9e:	e0c0      	b.n	8008e22 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	795b      	ldrb	r3, [r3, #5]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fc4c 	bl	8009544 <USBH_LL_GetURBState>
 8008cac:	4603      	mov	r3, r0
 8008cae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008cb0:	7bbb      	ldrb	r3, [r7, #14]
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d103      	bne.n	8008cbe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2207      	movs	r2, #7
 8008cba:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008cbc:	e0ac      	b.n	8008e18 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008cbe:	7bbb      	ldrb	r3, [r7, #14]
 8008cc0:	2b05      	cmp	r3, #5
 8008cc2:	d105      	bne.n	8008cd0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	220c      	movs	r2, #12
 8008cc8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	73fb      	strb	r3, [r7, #15]
      break;
 8008cce:	e0a3      	b.n	8008e18 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008cd0:	7bbb      	ldrb	r3, [r7, #14]
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d103      	bne.n	8008cde <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2205      	movs	r2, #5
 8008cda:	761a      	strb	r2, [r3, #24]
      break;
 8008cdc:	e09c      	b.n	8008e18 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008cde:	7bbb      	ldrb	r3, [r7, #14]
 8008ce0:	2b04      	cmp	r3, #4
 8008ce2:	f040 8099 	bne.w	8008e18 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	220b      	movs	r2, #11
 8008cea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008cec:	2302      	movs	r3, #2
 8008cee:	73fb      	strb	r3, [r7, #15]
      break;
 8008cf0:	e092      	b.n	8008e18 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	791b      	ldrb	r3, [r3, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f8d5 	bl	8008eaa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2208      	movs	r2, #8
 8008d10:	761a      	strb	r2, [r3, #24]

      break;
 8008d12:	e086      	b.n	8008e22 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	791b      	ldrb	r3, [r3, #4]
 8008d18:	4619      	mov	r1, r3
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fc12 	bl	8009544 <USBH_LL_GetURBState>
 8008d20:	4603      	mov	r3, r0
 8008d22:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008d24:	7bbb      	ldrb	r3, [r7, #14]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d105      	bne.n	8008d36 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	220d      	movs	r2, #13
 8008d2e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d34:	e072      	b.n	8008e1c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008d36:	7bbb      	ldrb	r3, [r7, #14]
 8008d38:	2b04      	cmp	r3, #4
 8008d3a:	d103      	bne.n	8008d44 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	220b      	movs	r2, #11
 8008d40:	761a      	strb	r2, [r3, #24]
      break;
 8008d42:	e06b      	b.n	8008e1c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008d44:	7bbb      	ldrb	r3, [r7, #14]
 8008d46:	2b05      	cmp	r3, #5
 8008d48:	d168      	bne.n	8008e1c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d4e:	e065      	b.n	8008e1c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	795b      	ldrb	r3, [r3, #5]
 8008d54:	2201      	movs	r2, #1
 8008d56:	9200      	str	r2, [sp, #0]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f87f 	bl	8008e60 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	220a      	movs	r2, #10
 8008d72:	761a      	strb	r2, [r3, #24]
      break;
 8008d74:	e055      	b.n	8008e22 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	795b      	ldrb	r3, [r3, #5]
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fbe1 	bl	8009544 <USBH_LL_GetURBState>
 8008d82:	4603      	mov	r3, r0
 8008d84:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008d86:	7bbb      	ldrb	r3, [r7, #14]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d105      	bne.n	8008d98 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	220d      	movs	r2, #13
 8008d94:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d96:	e043      	b.n	8008e20 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008d98:	7bbb      	ldrb	r3, [r7, #14]
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d103      	bne.n	8008da6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2209      	movs	r2, #9
 8008da2:	761a      	strb	r2, [r3, #24]
      break;
 8008da4:	e03c      	b.n	8008e20 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008da6:	7bbb      	ldrb	r3, [r7, #14]
 8008da8:	2b04      	cmp	r3, #4
 8008daa:	d139      	bne.n	8008e20 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	220b      	movs	r2, #11
 8008db0:	761a      	strb	r2, [r3, #24]
      break;
 8008db2:	e035      	b.n	8008e20 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	7e5b      	ldrb	r3, [r3, #25]
 8008db8:	3301      	adds	r3, #1
 8008dba:	b2da      	uxtb	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	765a      	strb	r2, [r3, #25]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	7e5b      	ldrb	r3, [r3, #25]
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d806      	bhi.n	8008dd6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008dd4:	e025      	b.n	8008e22 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ddc:	2106      	movs	r1, #6
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	795b      	ldrb	r3, [r3, #5]
 8008dec:	4619      	mov	r1, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f90c 	bl	800900c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	791b      	ldrb	r3, [r3, #4]
 8008df8:	4619      	mov	r1, r3
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f906 	bl	800900c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008e06:	2302      	movs	r3, #2
 8008e08:	73fb      	strb	r3, [r7, #15]
      break;
 8008e0a:	e00a      	b.n	8008e22 <USBH_HandleControl+0x2de>

    default:
      break;
 8008e0c:	bf00      	nop
 8008e0e:	e008      	b.n	8008e22 <USBH_HandleControl+0x2de>
      break;
 8008e10:	bf00      	nop
 8008e12:	e006      	b.n	8008e22 <USBH_HandleControl+0x2de>
      break;
 8008e14:	bf00      	nop
 8008e16:	e004      	b.n	8008e22 <USBH_HandleControl+0x2de>
      break;
 8008e18:	bf00      	nop
 8008e1a:	e002      	b.n	8008e22 <USBH_HandleControl+0x2de>
      break;
 8008e1c:	bf00      	nop
 8008e1e:	e000      	b.n	8008e22 <USBH_HandleControl+0x2de>
      break;
 8008e20:	bf00      	nop
  }

  return status;
 8008e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b088      	sub	sp, #32
 8008e30:	af04      	add	r7, sp, #16
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	4613      	mov	r3, r2
 8008e38:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e3a:	79f9      	ldrb	r1, [r7, #7]
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	9303      	str	r3, [sp, #12]
 8008e40:	2308      	movs	r3, #8
 8008e42:	9302      	str	r3, [sp, #8]
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	9301      	str	r3, [sp, #4]
 8008e48:	2300      	movs	r3, #0
 8008e4a:	9300      	str	r3, [sp, #0]
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	2200      	movs	r2, #0
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f000 fb46 	bl	80094e2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b088      	sub	sp, #32
 8008e64:	af04      	add	r7, sp, #16
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	460b      	mov	r3, r1
 8008e70:	80fb      	strh	r3, [r7, #6]
 8008e72:	4613      	mov	r3, r2
 8008e74:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008e80:	2300      	movs	r3, #0
 8008e82:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e84:	7979      	ldrb	r1, [r7, #5]
 8008e86:	7e3b      	ldrb	r3, [r7, #24]
 8008e88:	9303      	str	r3, [sp, #12]
 8008e8a:	88fb      	ldrh	r3, [r7, #6]
 8008e8c:	9302      	str	r3, [sp, #8]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	9301      	str	r3, [sp, #4]
 8008e92:	2301      	movs	r3, #1
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	2300      	movs	r3, #0
 8008e98:	2200      	movs	r2, #0
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f000 fb21 	bl	80094e2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b088      	sub	sp, #32
 8008eae:	af04      	add	r7, sp, #16
 8008eb0:	60f8      	str	r0, [r7, #12]
 8008eb2:	60b9      	str	r1, [r7, #8]
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	460b      	mov	r3, r1
 8008eba:	80fb      	strh	r3, [r7, #6]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ec0:	7979      	ldrb	r1, [r7, #5]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	9303      	str	r3, [sp, #12]
 8008ec6:	88fb      	ldrh	r3, [r7, #6]
 8008ec8:	9302      	str	r3, [sp, #8]
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	9301      	str	r3, [sp, #4]
 8008ece:	2301      	movs	r3, #1
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f000 fb03 	bl	80094e2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008edc:	2300      	movs	r3, #0

}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b088      	sub	sp, #32
 8008eea:	af04      	add	r7, sp, #16
 8008eec:	60f8      	str	r0, [r7, #12]
 8008eee:	60b9      	str	r1, [r7, #8]
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	80fb      	strh	r3, [r7, #6]
 8008ef8:	4613      	mov	r3, r2
 8008efa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008f06:	2300      	movs	r3, #0
 8008f08:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f0a:	7979      	ldrb	r1, [r7, #5]
 8008f0c:	7e3b      	ldrb	r3, [r7, #24]
 8008f0e:	9303      	str	r3, [sp, #12]
 8008f10:	88fb      	ldrh	r3, [r7, #6]
 8008f12:	9302      	str	r3, [sp, #8]
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	9301      	str	r3, [sp, #4]
 8008f18:	2301      	movs	r3, #1
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	2200      	movs	r2, #0
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f000 fade 	bl	80094e2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b088      	sub	sp, #32
 8008f34:	af04      	add	r7, sp, #16
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	460b      	mov	r3, r1
 8008f40:	80fb      	strh	r3, [r7, #6]
 8008f42:	4613      	mov	r3, r2
 8008f44:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f46:	7979      	ldrb	r1, [r7, #5]
 8008f48:	2300      	movs	r3, #0
 8008f4a:	9303      	str	r3, [sp, #12]
 8008f4c:	88fb      	ldrh	r3, [r7, #6]
 8008f4e:	9302      	str	r3, [sp, #8]
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	9301      	str	r3, [sp, #4]
 8008f54:	2301      	movs	r3, #1
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	2302      	movs	r3, #2
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f000 fac0 	bl	80094e2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af04      	add	r7, sp, #16
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	4608      	mov	r0, r1
 8008f76:	4611      	mov	r1, r2
 8008f78:	461a      	mov	r2, r3
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	70fb      	strb	r3, [r7, #3]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	70bb      	strb	r3, [r7, #2]
 8008f82:	4613      	mov	r3, r2
 8008f84:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008f86:	7878      	ldrb	r0, [r7, #1]
 8008f88:	78ba      	ldrb	r2, [r7, #2]
 8008f8a:	78f9      	ldrb	r1, [r7, #3]
 8008f8c:	8b3b      	ldrh	r3, [r7, #24]
 8008f8e:	9302      	str	r3, [sp, #8]
 8008f90:	7d3b      	ldrb	r3, [r7, #20]
 8008f92:	9301      	str	r3, [sp, #4]
 8008f94:	7c3b      	ldrb	r3, [r7, #16]
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	4603      	mov	r3, r0
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fa53 	bl	8009446 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b082      	sub	sp, #8
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008fb6:	78fb      	ldrb	r3, [r7, #3]
 8008fb8:	4619      	mov	r1, r3
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fa72 	bl	80094a4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3708      	adds	r7, #8
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b084      	sub	sp, #16
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f836 	bl	8009048 <USBH_GetFreePipe>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008fe0:	89fb      	ldrh	r3, [r7, #14]
 8008fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d00a      	beq.n	8009000 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008fea:	78fa      	ldrb	r2, [r7, #3]
 8008fec:	89fb      	ldrh	r3, [r7, #14]
 8008fee:	f003 030f 	and.w	r3, r3, #15
 8008ff2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ff6:	6879      	ldr	r1, [r7, #4]
 8008ff8:	33e0      	adds	r3, #224	; 0xe0
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	440b      	add	r3, r1
 8008ffe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009000:	89fb      	ldrh	r3, [r7, #14]
 8009002:	b2db      	uxtb	r3, r3
}
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	460b      	mov	r3, r1
 8009016:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009018:	78fb      	ldrb	r3, [r7, #3]
 800901a:	2b0f      	cmp	r3, #15
 800901c:	d80d      	bhi.n	800903a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800901e:	78fb      	ldrb	r3, [r7, #3]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	33e0      	adds	r3, #224	; 0xe0
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	4413      	add	r3, r2
 8009028:	685a      	ldr	r2, [r3, #4]
 800902a:	78fb      	ldrb	r3, [r7, #3]
 800902c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009030:	6879      	ldr	r1, [r7, #4]
 8009032:	33e0      	adds	r3, #224	; 0xe0
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	440b      	add	r3, r1
 8009038:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009050:	2300      	movs	r3, #0
 8009052:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009054:	2300      	movs	r3, #0
 8009056:	73fb      	strb	r3, [r7, #15]
 8009058:	e00f      	b.n	800907a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800905a:	7bfb      	ldrb	r3, [r7, #15]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	33e0      	adds	r3, #224	; 0xe0
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	4413      	add	r3, r2
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d102      	bne.n	8009074 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	b29b      	uxth	r3, r3
 8009072:	e007      	b.n	8009084 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009074:	7bfb      	ldrb	r3, [r7, #15]
 8009076:	3301      	adds	r3, #1
 8009078:	73fb      	strb	r3, [r7, #15]
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	2b0f      	cmp	r3, #15
 800907e:	d9ec      	bls.n	800905a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009080:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009084:	4618      	mov	r0, r3
 8009086:	3714      	adds	r7, #20
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009094:	2201      	movs	r2, #1
 8009096:	490e      	ldr	r1, [pc, #56]	; (80090d0 <MX_USB_HOST_Init+0x40>)
 8009098:	480e      	ldr	r0, [pc, #56]	; (80090d4 <MX_USB_HOST_Init+0x44>)
 800909a:	f7fe fba7 	bl	80077ec <USBH_Init>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80090a4:	f7f8 f938 	bl	8001318 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80090a8:	490b      	ldr	r1, [pc, #44]	; (80090d8 <MX_USB_HOST_Init+0x48>)
 80090aa:	480a      	ldr	r0, [pc, #40]	; (80090d4 <MX_USB_HOST_Init+0x44>)
 80090ac:	f7fe fc2c 	bl	8007908 <USBH_RegisterClass>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d001      	beq.n	80090ba <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80090b6:	f7f8 f92f 	bl	8001318 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80090ba:	4806      	ldr	r0, [pc, #24]	; (80090d4 <MX_USB_HOST_Init+0x44>)
 80090bc:	f7fe fcb0 	bl	8007a20 <USBH_Start>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80090c6:	f7f8 f927 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80090ca:	bf00      	nop
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	080090f1 	.word	0x080090f1
 80090d4:	20000274 	.word	0x20000274
 80090d8:	2000000c 	.word	0x2000000c

080090dc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80090e0:	4802      	ldr	r0, [pc, #8]	; (80090ec <MX_USB_HOST_Process+0x10>)
 80090e2:	f7fe fcad 	bl	8007a40 <USBH_Process>
}
 80090e6:	bf00      	nop
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	20000274 	.word	0x20000274

080090f0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	460b      	mov	r3, r1
 80090fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80090fc:	78fb      	ldrb	r3, [r7, #3]
 80090fe:	3b01      	subs	r3, #1
 8009100:	2b04      	cmp	r3, #4
 8009102:	d819      	bhi.n	8009138 <USBH_UserProcess+0x48>
 8009104:	a201      	add	r2, pc, #4	; (adr r2, 800910c <USBH_UserProcess+0x1c>)
 8009106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910a:	bf00      	nop
 800910c:	08009139 	.word	0x08009139
 8009110:	08009129 	.word	0x08009129
 8009114:	08009139 	.word	0x08009139
 8009118:	08009131 	.word	0x08009131
 800911c:	08009121 	.word	0x08009121
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009120:	4b09      	ldr	r3, [pc, #36]	; (8009148 <USBH_UserProcess+0x58>)
 8009122:	2203      	movs	r2, #3
 8009124:	701a      	strb	r2, [r3, #0]
  break;
 8009126:	e008      	b.n	800913a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009128:	4b07      	ldr	r3, [pc, #28]	; (8009148 <USBH_UserProcess+0x58>)
 800912a:	2202      	movs	r2, #2
 800912c:	701a      	strb	r2, [r3, #0]
  break;
 800912e:	e004      	b.n	800913a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009130:	4b05      	ldr	r3, [pc, #20]	; (8009148 <USBH_UserProcess+0x58>)
 8009132:	2201      	movs	r2, #1
 8009134:	701a      	strb	r2, [r3, #0]
  break;
 8009136:	e000      	b.n	800913a <USBH_UserProcess+0x4a>

  default:
  break;
 8009138:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800913a:	bf00      	nop
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	2000064c 	.word	0x2000064c

0800914c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b08a      	sub	sp, #40	; 0x28
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009154:	f107 0314 	add.w	r3, r7, #20
 8009158:	2200      	movs	r2, #0
 800915a:	601a      	str	r2, [r3, #0]
 800915c:	605a      	str	r2, [r3, #4]
 800915e:	609a      	str	r2, [r3, #8]
 8009160:	60da      	str	r2, [r3, #12]
 8009162:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800916c:	d147      	bne.n	80091fe <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800916e:	2300      	movs	r3, #0
 8009170:	613b      	str	r3, [r7, #16]
 8009172:	4b25      	ldr	r3, [pc, #148]	; (8009208 <HAL_HCD_MspInit+0xbc>)
 8009174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009176:	4a24      	ldr	r2, [pc, #144]	; (8009208 <HAL_HCD_MspInit+0xbc>)
 8009178:	f043 0301 	orr.w	r3, r3, #1
 800917c:	6313      	str	r3, [r2, #48]	; 0x30
 800917e:	4b22      	ldr	r3, [pc, #136]	; (8009208 <HAL_HCD_MspInit+0xbc>)
 8009180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	613b      	str	r3, [r7, #16]
 8009188:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800918a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800918e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009190:	2300      	movs	r3, #0
 8009192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009194:	2300      	movs	r3, #0
 8009196:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009198:	f107 0314 	add.w	r3, r7, #20
 800919c:	4619      	mov	r1, r3
 800919e:	481b      	ldr	r0, [pc, #108]	; (800920c <HAL_HCD_MspInit+0xc0>)
 80091a0:	f7f9 fdb2 	bl	8002d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80091a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80091a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091aa:	2302      	movs	r3, #2
 80091ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091ae:	2300      	movs	r3, #0
 80091b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091b2:	2300      	movs	r3, #0
 80091b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80091b6:	230a      	movs	r3, #10
 80091b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091ba:	f107 0314 	add.w	r3, r7, #20
 80091be:	4619      	mov	r1, r3
 80091c0:	4812      	ldr	r0, [pc, #72]	; (800920c <HAL_HCD_MspInit+0xc0>)
 80091c2:	f7f9 fda1 	bl	8002d08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091c6:	4b10      	ldr	r3, [pc, #64]	; (8009208 <HAL_HCD_MspInit+0xbc>)
 80091c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ca:	4a0f      	ldr	r2, [pc, #60]	; (8009208 <HAL_HCD_MspInit+0xbc>)
 80091cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d0:	6353      	str	r3, [r2, #52]	; 0x34
 80091d2:	2300      	movs	r3, #0
 80091d4:	60fb      	str	r3, [r7, #12]
 80091d6:	4b0c      	ldr	r3, [pc, #48]	; (8009208 <HAL_HCD_MspInit+0xbc>)
 80091d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091da:	4a0b      	ldr	r2, [pc, #44]	; (8009208 <HAL_HCD_MspInit+0xbc>)
 80091dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091e0:	6453      	str	r3, [r2, #68]	; 0x44
 80091e2:	4b09      	ldr	r3, [pc, #36]	; (8009208 <HAL_HCD_MspInit+0xbc>)
 80091e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091ea:	60fb      	str	r3, [r7, #12]
 80091ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80091ee:	2200      	movs	r2, #0
 80091f0:	2100      	movs	r1, #0
 80091f2:	2043      	movs	r0, #67	; 0x43
 80091f4:	f7f9 f9e1 	bl	80025ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80091f8:	2043      	movs	r0, #67	; 0x43
 80091fa:	f7f9 f9fa 	bl	80025f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80091fe:	bf00      	nop
 8009200:	3728      	adds	r7, #40	; 0x28
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	40023800 	.word	0x40023800
 800920c:	40020000 	.word	0x40020000

08009210 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800921e:	4618      	mov	r0, r3
 8009220:	f7fe ffed 	bl	80081fe <USBH_LL_IncTimer>
}
 8009224:	bf00      	nop
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800923a:	4618      	mov	r0, r3
 800923c:	f7ff f825 	bl	800828a <USBH_LL_Connect>
}
 8009240:	bf00      	nop
 8009242:	3708      	adds	r7, #8
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009256:	4618      	mov	r0, r3
 8009258:	f7ff f82e 	bl	80082b8 <USBH_LL_Disconnect>
}
 800925c:	bf00      	nop
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	70fb      	strb	r3, [r7, #3]
 8009270:	4613      	mov	r3, r2
 8009272:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800928e:	4618      	mov	r0, r3
 8009290:	f7fe ffdf 	bl	8008252 <USBH_LL_PortEnabled>
}
 8009294:	bf00      	nop
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fe ffdf 	bl	800826e <USBH_LL_PortDisabled>
}
 80092b0:	bf00      	nop
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d12a      	bne.n	8009320 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80092ca:	4a18      	ldr	r2, [pc, #96]	; (800932c <USBH_LL_Init+0x74>)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a15      	ldr	r2, [pc, #84]	; (800932c <USBH_LL_Init+0x74>)
 80092d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80092da:	4b14      	ldr	r3, [pc, #80]	; (800932c <USBH_LL_Init+0x74>)
 80092dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80092e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80092e2:	4b12      	ldr	r3, [pc, #72]	; (800932c <USBH_LL_Init+0x74>)
 80092e4:	2208      	movs	r2, #8
 80092e6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80092e8:	4b10      	ldr	r3, [pc, #64]	; (800932c <USBH_LL_Init+0x74>)
 80092ea:	2201      	movs	r2, #1
 80092ec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80092ee:	4b0f      	ldr	r3, [pc, #60]	; (800932c <USBH_LL_Init+0x74>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80092f4:	4b0d      	ldr	r3, [pc, #52]	; (800932c <USBH_LL_Init+0x74>)
 80092f6:	2202      	movs	r2, #2
 80092f8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80092fa:	4b0c      	ldr	r3, [pc, #48]	; (800932c <USBH_LL_Init+0x74>)
 80092fc:	2200      	movs	r2, #0
 80092fe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009300:	480a      	ldr	r0, [pc, #40]	; (800932c <USBH_LL_Init+0x74>)
 8009302:	f7f9 feb6 	bl	8003072 <HAL_HCD_Init>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800930c:	f7f8 f804 	bl	8001318 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009310:	4806      	ldr	r0, [pc, #24]	; (800932c <USBH_LL_Init+0x74>)
 8009312:	f7fa fa9a 	bl	800384a <HAL_HCD_GetCurrentFrame>
 8009316:	4603      	mov	r3, r0
 8009318:	4619      	mov	r1, r3
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7fe ff60 	bl	80081e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	20000650 	.word	0x20000650

08009330 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800933c:	2300      	movs	r3, #0
 800933e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009346:	4618      	mov	r0, r3
 8009348:	f7fa fa09 	bl	800375e <HAL_HCD_Start>
 800934c:	4603      	mov	r3, r0
 800934e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009350:	7bfb      	ldrb	r3, [r7, #15]
 8009352:	4618      	mov	r0, r3
 8009354:	f000 f95c 	bl	8009610 <USBH_Get_USB_Status>
 8009358:	4603      	mov	r3, r0
 800935a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800935c:	7bbb      	ldrb	r3, [r7, #14]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b084      	sub	sp, #16
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800936e:	2300      	movs	r3, #0
 8009370:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800937c:	4618      	mov	r0, r3
 800937e:	f7fa fa11 	bl	80037a4 <HAL_HCD_Stop>
 8009382:	4603      	mov	r3, r0
 8009384:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009386:	7bfb      	ldrb	r3, [r7, #15]
 8009388:	4618      	mov	r0, r3
 800938a:	f000 f941 	bl	8009610 <USBH_Get_USB_Status>
 800938e:	4603      	mov	r3, r0
 8009390:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009392:	7bbb      	ldrb	r3, [r7, #14]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80093a4:	2301      	movs	r3, #1
 80093a6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fa fa59 	bl	8003866 <HAL_HCD_GetCurrentSpeed>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d00c      	beq.n	80093d4 <USBH_LL_GetSpeed+0x38>
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d80d      	bhi.n	80093da <USBH_LL_GetSpeed+0x3e>
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d002      	beq.n	80093c8 <USBH_LL_GetSpeed+0x2c>
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d003      	beq.n	80093ce <USBH_LL_GetSpeed+0x32>
 80093c6:	e008      	b.n	80093da <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80093c8:	2300      	movs	r3, #0
 80093ca:	73fb      	strb	r3, [r7, #15]
    break;
 80093cc:	e008      	b.n	80093e0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80093ce:	2301      	movs	r3, #1
 80093d0:	73fb      	strb	r3, [r7, #15]
    break;
 80093d2:	e005      	b.n	80093e0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80093d4:	2302      	movs	r3, #2
 80093d6:	73fb      	strb	r3, [r7, #15]
    break;
 80093d8:	e002      	b.n	80093e0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80093da:	2301      	movs	r3, #1
 80093dc:	73fb      	strb	r3, [r7, #15]
    break;
 80093de:	bf00      	nop
  }
  return  speed;
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b084      	sub	sp, #16
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093f2:	2300      	movs	r3, #0
 80093f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009400:	4618      	mov	r0, r3
 8009402:	f7fa f9ec 	bl	80037de <HAL_HCD_ResetPort>
 8009406:	4603      	mov	r3, r0
 8009408:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800940a:	7bfb      	ldrb	r3, [r7, #15]
 800940c:	4618      	mov	r0, r3
 800940e:	f000 f8ff 	bl	8009610 <USBH_Get_USB_Status>
 8009412:	4603      	mov	r3, r0
 8009414:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009416:	7bbb      	ldrb	r3, [r7, #14]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	460b      	mov	r3, r1
 800942a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009432:	78fa      	ldrb	r2, [r7, #3]
 8009434:	4611      	mov	r1, r2
 8009436:	4618      	mov	r0, r3
 8009438:	f7fa f9f3 	bl	8003822 <HAL_HCD_HC_GetXferCount>
 800943c:	4603      	mov	r3, r0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009446:	b590      	push	{r4, r7, lr}
 8009448:	b089      	sub	sp, #36	; 0x24
 800944a:	af04      	add	r7, sp, #16
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	4608      	mov	r0, r1
 8009450:	4611      	mov	r1, r2
 8009452:	461a      	mov	r2, r3
 8009454:	4603      	mov	r3, r0
 8009456:	70fb      	strb	r3, [r7, #3]
 8009458:	460b      	mov	r3, r1
 800945a:	70bb      	strb	r3, [r7, #2]
 800945c:	4613      	mov	r3, r2
 800945e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009464:	2300      	movs	r3, #0
 8009466:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800946e:	787c      	ldrb	r4, [r7, #1]
 8009470:	78ba      	ldrb	r2, [r7, #2]
 8009472:	78f9      	ldrb	r1, [r7, #3]
 8009474:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009476:	9302      	str	r3, [sp, #8]
 8009478:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800947c:	9301      	str	r3, [sp, #4]
 800947e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	4623      	mov	r3, r4
 8009486:	f7f9 fe56 	bl	8003136 <HAL_HCD_HC_Init>
 800948a:	4603      	mov	r3, r0
 800948c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800948e:	7bfb      	ldrb	r3, [r7, #15]
 8009490:	4618      	mov	r0, r3
 8009492:	f000 f8bd 	bl	8009610 <USBH_Get_USB_Status>
 8009496:	4603      	mov	r3, r0
 8009498:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800949a:	7bbb      	ldrb	r3, [r7, #14]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd90      	pop	{r4, r7, pc}

080094a4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	460b      	mov	r3, r1
 80094ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094b0:	2300      	movs	r3, #0
 80094b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094b4:	2300      	movs	r3, #0
 80094b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094be:	78fa      	ldrb	r2, [r7, #3]
 80094c0:	4611      	mov	r1, r2
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7f9 fec6 	bl	8003254 <HAL_HCD_HC_Halt>
 80094c8:	4603      	mov	r3, r0
 80094ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80094cc:	7bfb      	ldrb	r3, [r7, #15]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 f89e 	bl	8009610 <USBH_Get_USB_Status>
 80094d4:	4603      	mov	r3, r0
 80094d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80094e2:	b590      	push	{r4, r7, lr}
 80094e4:	b089      	sub	sp, #36	; 0x24
 80094e6:	af04      	add	r7, sp, #16
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	4608      	mov	r0, r1
 80094ec:	4611      	mov	r1, r2
 80094ee:	461a      	mov	r2, r3
 80094f0:	4603      	mov	r3, r0
 80094f2:	70fb      	strb	r3, [r7, #3]
 80094f4:	460b      	mov	r3, r1
 80094f6:	70bb      	strb	r3, [r7, #2]
 80094f8:	4613      	mov	r3, r2
 80094fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009500:	2300      	movs	r3, #0
 8009502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800950a:	787c      	ldrb	r4, [r7, #1]
 800950c:	78ba      	ldrb	r2, [r7, #2]
 800950e:	78f9      	ldrb	r1, [r7, #3]
 8009510:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009514:	9303      	str	r3, [sp, #12]
 8009516:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009518:	9302      	str	r3, [sp, #8]
 800951a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951c:	9301      	str	r3, [sp, #4]
 800951e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	4623      	mov	r3, r4
 8009526:	f7f9 feb9 	bl	800329c <HAL_HCD_HC_SubmitRequest>
 800952a:	4603      	mov	r3, r0
 800952c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800952e:	7bfb      	ldrb	r3, [r7, #15]
 8009530:	4618      	mov	r0, r3
 8009532:	f000 f86d 	bl	8009610 <USBH_Get_USB_Status>
 8009536:	4603      	mov	r3, r0
 8009538:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800953a:	7bbb      	ldrb	r3, [r7, #14]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3714      	adds	r7, #20
 8009540:	46bd      	mov	sp, r7
 8009542:	bd90      	pop	{r4, r7, pc}

08009544 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009556:	78fa      	ldrb	r2, [r7, #3]
 8009558:	4611      	mov	r1, r2
 800955a:	4618      	mov	r0, r3
 800955c:	f7fa f94d 	bl	80037fa <HAL_HCD_HC_GetURBState>
 8009560:	4603      	mov	r3, r0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b082      	sub	sp, #8
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
 8009572:	460b      	mov	r3, r1
 8009574:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800957c:	2b01      	cmp	r3, #1
 800957e:	d103      	bne.n	8009588 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009580:	78fb      	ldrb	r3, [r7, #3]
 8009582:	4618      	mov	r0, r3
 8009584:	f000 f870 	bl	8009668 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009588:	20c8      	movs	r0, #200	; 0xc8
 800958a:	f7f8 f98b 	bl	80018a4 <HAL_Delay>
  return USBH_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70fb      	strb	r3, [r7, #3]
 80095a4:	4613      	mov	r3, r2
 80095a6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80095ae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80095b0:	78fb      	ldrb	r3, [r7, #3]
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	212c      	movs	r1, #44	; 0x2c
 80095b6:	fb01 f303 	mul.w	r3, r1, r3
 80095ba:	4413      	add	r3, r2
 80095bc:	333b      	adds	r3, #59	; 0x3b
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d009      	beq.n	80095d8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80095c4:	78fb      	ldrb	r3, [r7, #3]
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	212c      	movs	r1, #44	; 0x2c
 80095ca:	fb01 f303 	mul.w	r3, r1, r3
 80095ce:	4413      	add	r3, r2
 80095d0:	3354      	adds	r3, #84	; 0x54
 80095d2:	78ba      	ldrb	r2, [r7, #2]
 80095d4:	701a      	strb	r2, [r3, #0]
 80095d6:	e008      	b.n	80095ea <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80095d8:	78fb      	ldrb	r3, [r7, #3]
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	212c      	movs	r1, #44	; 0x2c
 80095de:	fb01 f303 	mul.w	r3, r1, r3
 80095e2:	4413      	add	r3, r2
 80095e4:	3355      	adds	r3, #85	; 0x55
 80095e6:	78ba      	ldrb	r2, [r7, #2]
 80095e8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3714      	adds	r7, #20
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7f8 f94f 	bl	80018a4 <HAL_Delay>
}
 8009606:	bf00      	nop
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
	...

08009610 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
 8009616:	4603      	mov	r3, r0
 8009618:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800961a:	2300      	movs	r3, #0
 800961c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800961e:	79fb      	ldrb	r3, [r7, #7]
 8009620:	2b03      	cmp	r3, #3
 8009622:	d817      	bhi.n	8009654 <USBH_Get_USB_Status+0x44>
 8009624:	a201      	add	r2, pc, #4	; (adr r2, 800962c <USBH_Get_USB_Status+0x1c>)
 8009626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800962a:	bf00      	nop
 800962c:	0800963d 	.word	0x0800963d
 8009630:	08009643 	.word	0x08009643
 8009634:	08009649 	.word	0x08009649
 8009638:	0800964f 	.word	0x0800964f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	73fb      	strb	r3, [r7, #15]
    break;
 8009640:	e00b      	b.n	800965a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009642:	2302      	movs	r3, #2
 8009644:	73fb      	strb	r3, [r7, #15]
    break;
 8009646:	e008      	b.n	800965a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009648:	2301      	movs	r3, #1
 800964a:	73fb      	strb	r3, [r7, #15]
    break;
 800964c:	e005      	b.n	800965a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800964e:	2302      	movs	r3, #2
 8009650:	73fb      	strb	r3, [r7, #15]
    break;
 8009652:	e002      	b.n	800965a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009654:	2302      	movs	r3, #2
 8009656:	73fb      	strb	r3, [r7, #15]
    break;
 8009658:	bf00      	nop
  }
  return usb_status;
 800965a:	7bfb      	ldrb	r3, [r7, #15]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3714      	adds	r7, #20
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	4603      	mov	r3, r0
 8009670:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009672:	79fb      	ldrb	r3, [r7, #7]
 8009674:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009676:	79fb      	ldrb	r3, [r7, #7]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d102      	bne.n	8009682 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800967c:	2300      	movs	r3, #0
 800967e:	73fb      	strb	r3, [r7, #15]
 8009680:	e001      	b.n	8009686 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009682:	2301      	movs	r3, #1
 8009684:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009686:	7bfb      	ldrb	r3, [r7, #15]
 8009688:	461a      	mov	r2, r3
 800968a:	2101      	movs	r1, #1
 800968c:	4803      	ldr	r0, [pc, #12]	; (800969c <MX_DriverVbusFS+0x34>)
 800968e:	f7f9 fcd7 	bl	8003040 <HAL_GPIO_WritePin>
}
 8009692:	bf00      	nop
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	40020800 	.word	0x40020800

080096a0 <__errno>:
 80096a0:	4b01      	ldr	r3, [pc, #4]	; (80096a8 <__errno+0x8>)
 80096a2:	6818      	ldr	r0, [r3, #0]
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	2000002c 	.word	0x2000002c

080096ac <__libc_init_array>:
 80096ac:	b570      	push	{r4, r5, r6, lr}
 80096ae:	4d0d      	ldr	r5, [pc, #52]	; (80096e4 <__libc_init_array+0x38>)
 80096b0:	4c0d      	ldr	r4, [pc, #52]	; (80096e8 <__libc_init_array+0x3c>)
 80096b2:	1b64      	subs	r4, r4, r5
 80096b4:	10a4      	asrs	r4, r4, #2
 80096b6:	2600      	movs	r6, #0
 80096b8:	42a6      	cmp	r6, r4
 80096ba:	d109      	bne.n	80096d0 <__libc_init_array+0x24>
 80096bc:	4d0b      	ldr	r5, [pc, #44]	; (80096ec <__libc_init_array+0x40>)
 80096be:	4c0c      	ldr	r4, [pc, #48]	; (80096f0 <__libc_init_array+0x44>)
 80096c0:	f000 f92e 	bl	8009920 <_init>
 80096c4:	1b64      	subs	r4, r4, r5
 80096c6:	10a4      	asrs	r4, r4, #2
 80096c8:	2600      	movs	r6, #0
 80096ca:	42a6      	cmp	r6, r4
 80096cc:	d105      	bne.n	80096da <__libc_init_array+0x2e>
 80096ce:	bd70      	pop	{r4, r5, r6, pc}
 80096d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80096d4:	4798      	blx	r3
 80096d6:	3601      	adds	r6, #1
 80096d8:	e7ee      	b.n	80096b8 <__libc_init_array+0xc>
 80096da:	f855 3b04 	ldr.w	r3, [r5], #4
 80096de:	4798      	blx	r3
 80096e0:	3601      	adds	r6, #1
 80096e2:	e7f2      	b.n	80096ca <__libc_init_array+0x1e>
 80096e4:	08009964 	.word	0x08009964
 80096e8:	08009964 	.word	0x08009964
 80096ec:	08009964 	.word	0x08009964
 80096f0:	08009968 	.word	0x08009968

080096f4 <malloc>:
 80096f4:	4b02      	ldr	r3, [pc, #8]	; (8009700 <malloc+0xc>)
 80096f6:	4601      	mov	r1, r0
 80096f8:	6818      	ldr	r0, [r3, #0]
 80096fa:	f000 b87f 	b.w	80097fc <_malloc_r>
 80096fe:	bf00      	nop
 8009700:	2000002c 	.word	0x2000002c

08009704 <free>:
 8009704:	4b02      	ldr	r3, [pc, #8]	; (8009710 <free+0xc>)
 8009706:	4601      	mov	r1, r0
 8009708:	6818      	ldr	r0, [r3, #0]
 800970a:	f000 b80b 	b.w	8009724 <_free_r>
 800970e:	bf00      	nop
 8009710:	2000002c 	.word	0x2000002c

08009714 <memset>:
 8009714:	4402      	add	r2, r0
 8009716:	4603      	mov	r3, r0
 8009718:	4293      	cmp	r3, r2
 800971a:	d100      	bne.n	800971e <memset+0xa>
 800971c:	4770      	bx	lr
 800971e:	f803 1b01 	strb.w	r1, [r3], #1
 8009722:	e7f9      	b.n	8009718 <memset+0x4>

08009724 <_free_r>:
 8009724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009726:	2900      	cmp	r1, #0
 8009728:	d044      	beq.n	80097b4 <_free_r+0x90>
 800972a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800972e:	9001      	str	r0, [sp, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	f1a1 0404 	sub.w	r4, r1, #4
 8009736:	bfb8      	it	lt
 8009738:	18e4      	addlt	r4, r4, r3
 800973a:	f000 f8e3 	bl	8009904 <__malloc_lock>
 800973e:	4a1e      	ldr	r2, [pc, #120]	; (80097b8 <_free_r+0x94>)
 8009740:	9801      	ldr	r0, [sp, #4]
 8009742:	6813      	ldr	r3, [r2, #0]
 8009744:	b933      	cbnz	r3, 8009754 <_free_r+0x30>
 8009746:	6063      	str	r3, [r4, #4]
 8009748:	6014      	str	r4, [r2, #0]
 800974a:	b003      	add	sp, #12
 800974c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009750:	f000 b8de 	b.w	8009910 <__malloc_unlock>
 8009754:	42a3      	cmp	r3, r4
 8009756:	d908      	bls.n	800976a <_free_r+0x46>
 8009758:	6825      	ldr	r5, [r4, #0]
 800975a:	1961      	adds	r1, r4, r5
 800975c:	428b      	cmp	r3, r1
 800975e:	bf01      	itttt	eq
 8009760:	6819      	ldreq	r1, [r3, #0]
 8009762:	685b      	ldreq	r3, [r3, #4]
 8009764:	1949      	addeq	r1, r1, r5
 8009766:	6021      	streq	r1, [r4, #0]
 8009768:	e7ed      	b.n	8009746 <_free_r+0x22>
 800976a:	461a      	mov	r2, r3
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	b10b      	cbz	r3, 8009774 <_free_r+0x50>
 8009770:	42a3      	cmp	r3, r4
 8009772:	d9fa      	bls.n	800976a <_free_r+0x46>
 8009774:	6811      	ldr	r1, [r2, #0]
 8009776:	1855      	adds	r5, r2, r1
 8009778:	42a5      	cmp	r5, r4
 800977a:	d10b      	bne.n	8009794 <_free_r+0x70>
 800977c:	6824      	ldr	r4, [r4, #0]
 800977e:	4421      	add	r1, r4
 8009780:	1854      	adds	r4, r2, r1
 8009782:	42a3      	cmp	r3, r4
 8009784:	6011      	str	r1, [r2, #0]
 8009786:	d1e0      	bne.n	800974a <_free_r+0x26>
 8009788:	681c      	ldr	r4, [r3, #0]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	6053      	str	r3, [r2, #4]
 800978e:	4421      	add	r1, r4
 8009790:	6011      	str	r1, [r2, #0]
 8009792:	e7da      	b.n	800974a <_free_r+0x26>
 8009794:	d902      	bls.n	800979c <_free_r+0x78>
 8009796:	230c      	movs	r3, #12
 8009798:	6003      	str	r3, [r0, #0]
 800979a:	e7d6      	b.n	800974a <_free_r+0x26>
 800979c:	6825      	ldr	r5, [r4, #0]
 800979e:	1961      	adds	r1, r4, r5
 80097a0:	428b      	cmp	r3, r1
 80097a2:	bf04      	itt	eq
 80097a4:	6819      	ldreq	r1, [r3, #0]
 80097a6:	685b      	ldreq	r3, [r3, #4]
 80097a8:	6063      	str	r3, [r4, #4]
 80097aa:	bf04      	itt	eq
 80097ac:	1949      	addeq	r1, r1, r5
 80097ae:	6021      	streq	r1, [r4, #0]
 80097b0:	6054      	str	r4, [r2, #4]
 80097b2:	e7ca      	b.n	800974a <_free_r+0x26>
 80097b4:	b003      	add	sp, #12
 80097b6:	bd30      	pop	{r4, r5, pc}
 80097b8:	20000954 	.word	0x20000954

080097bc <sbrk_aligned>:
 80097bc:	b570      	push	{r4, r5, r6, lr}
 80097be:	4e0e      	ldr	r6, [pc, #56]	; (80097f8 <sbrk_aligned+0x3c>)
 80097c0:	460c      	mov	r4, r1
 80097c2:	6831      	ldr	r1, [r6, #0]
 80097c4:	4605      	mov	r5, r0
 80097c6:	b911      	cbnz	r1, 80097ce <sbrk_aligned+0x12>
 80097c8:	f000 f88c 	bl	80098e4 <_sbrk_r>
 80097cc:	6030      	str	r0, [r6, #0]
 80097ce:	4621      	mov	r1, r4
 80097d0:	4628      	mov	r0, r5
 80097d2:	f000 f887 	bl	80098e4 <_sbrk_r>
 80097d6:	1c43      	adds	r3, r0, #1
 80097d8:	d00a      	beq.n	80097f0 <sbrk_aligned+0x34>
 80097da:	1cc4      	adds	r4, r0, #3
 80097dc:	f024 0403 	bic.w	r4, r4, #3
 80097e0:	42a0      	cmp	r0, r4
 80097e2:	d007      	beq.n	80097f4 <sbrk_aligned+0x38>
 80097e4:	1a21      	subs	r1, r4, r0
 80097e6:	4628      	mov	r0, r5
 80097e8:	f000 f87c 	bl	80098e4 <_sbrk_r>
 80097ec:	3001      	adds	r0, #1
 80097ee:	d101      	bne.n	80097f4 <sbrk_aligned+0x38>
 80097f0:	f04f 34ff 	mov.w	r4, #4294967295
 80097f4:	4620      	mov	r0, r4
 80097f6:	bd70      	pop	{r4, r5, r6, pc}
 80097f8:	20000958 	.word	0x20000958

080097fc <_malloc_r>:
 80097fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009800:	1ccd      	adds	r5, r1, #3
 8009802:	f025 0503 	bic.w	r5, r5, #3
 8009806:	3508      	adds	r5, #8
 8009808:	2d0c      	cmp	r5, #12
 800980a:	bf38      	it	cc
 800980c:	250c      	movcc	r5, #12
 800980e:	2d00      	cmp	r5, #0
 8009810:	4607      	mov	r7, r0
 8009812:	db01      	blt.n	8009818 <_malloc_r+0x1c>
 8009814:	42a9      	cmp	r1, r5
 8009816:	d905      	bls.n	8009824 <_malloc_r+0x28>
 8009818:	230c      	movs	r3, #12
 800981a:	603b      	str	r3, [r7, #0]
 800981c:	2600      	movs	r6, #0
 800981e:	4630      	mov	r0, r6
 8009820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009824:	4e2e      	ldr	r6, [pc, #184]	; (80098e0 <_malloc_r+0xe4>)
 8009826:	f000 f86d 	bl	8009904 <__malloc_lock>
 800982a:	6833      	ldr	r3, [r6, #0]
 800982c:	461c      	mov	r4, r3
 800982e:	bb34      	cbnz	r4, 800987e <_malloc_r+0x82>
 8009830:	4629      	mov	r1, r5
 8009832:	4638      	mov	r0, r7
 8009834:	f7ff ffc2 	bl	80097bc <sbrk_aligned>
 8009838:	1c43      	adds	r3, r0, #1
 800983a:	4604      	mov	r4, r0
 800983c:	d14d      	bne.n	80098da <_malloc_r+0xde>
 800983e:	6834      	ldr	r4, [r6, #0]
 8009840:	4626      	mov	r6, r4
 8009842:	2e00      	cmp	r6, #0
 8009844:	d140      	bne.n	80098c8 <_malloc_r+0xcc>
 8009846:	6823      	ldr	r3, [r4, #0]
 8009848:	4631      	mov	r1, r6
 800984a:	4638      	mov	r0, r7
 800984c:	eb04 0803 	add.w	r8, r4, r3
 8009850:	f000 f848 	bl	80098e4 <_sbrk_r>
 8009854:	4580      	cmp	r8, r0
 8009856:	d13a      	bne.n	80098ce <_malloc_r+0xd2>
 8009858:	6821      	ldr	r1, [r4, #0]
 800985a:	3503      	adds	r5, #3
 800985c:	1a6d      	subs	r5, r5, r1
 800985e:	f025 0503 	bic.w	r5, r5, #3
 8009862:	3508      	adds	r5, #8
 8009864:	2d0c      	cmp	r5, #12
 8009866:	bf38      	it	cc
 8009868:	250c      	movcc	r5, #12
 800986a:	4629      	mov	r1, r5
 800986c:	4638      	mov	r0, r7
 800986e:	f7ff ffa5 	bl	80097bc <sbrk_aligned>
 8009872:	3001      	adds	r0, #1
 8009874:	d02b      	beq.n	80098ce <_malloc_r+0xd2>
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	442b      	add	r3, r5
 800987a:	6023      	str	r3, [r4, #0]
 800987c:	e00e      	b.n	800989c <_malloc_r+0xa0>
 800987e:	6822      	ldr	r2, [r4, #0]
 8009880:	1b52      	subs	r2, r2, r5
 8009882:	d41e      	bmi.n	80098c2 <_malloc_r+0xc6>
 8009884:	2a0b      	cmp	r2, #11
 8009886:	d916      	bls.n	80098b6 <_malloc_r+0xba>
 8009888:	1961      	adds	r1, r4, r5
 800988a:	42a3      	cmp	r3, r4
 800988c:	6025      	str	r5, [r4, #0]
 800988e:	bf18      	it	ne
 8009890:	6059      	strne	r1, [r3, #4]
 8009892:	6863      	ldr	r3, [r4, #4]
 8009894:	bf08      	it	eq
 8009896:	6031      	streq	r1, [r6, #0]
 8009898:	5162      	str	r2, [r4, r5]
 800989a:	604b      	str	r3, [r1, #4]
 800989c:	4638      	mov	r0, r7
 800989e:	f104 060b 	add.w	r6, r4, #11
 80098a2:	f000 f835 	bl	8009910 <__malloc_unlock>
 80098a6:	f026 0607 	bic.w	r6, r6, #7
 80098aa:	1d23      	adds	r3, r4, #4
 80098ac:	1af2      	subs	r2, r6, r3
 80098ae:	d0b6      	beq.n	800981e <_malloc_r+0x22>
 80098b0:	1b9b      	subs	r3, r3, r6
 80098b2:	50a3      	str	r3, [r4, r2]
 80098b4:	e7b3      	b.n	800981e <_malloc_r+0x22>
 80098b6:	6862      	ldr	r2, [r4, #4]
 80098b8:	42a3      	cmp	r3, r4
 80098ba:	bf0c      	ite	eq
 80098bc:	6032      	streq	r2, [r6, #0]
 80098be:	605a      	strne	r2, [r3, #4]
 80098c0:	e7ec      	b.n	800989c <_malloc_r+0xa0>
 80098c2:	4623      	mov	r3, r4
 80098c4:	6864      	ldr	r4, [r4, #4]
 80098c6:	e7b2      	b.n	800982e <_malloc_r+0x32>
 80098c8:	4634      	mov	r4, r6
 80098ca:	6876      	ldr	r6, [r6, #4]
 80098cc:	e7b9      	b.n	8009842 <_malloc_r+0x46>
 80098ce:	230c      	movs	r3, #12
 80098d0:	603b      	str	r3, [r7, #0]
 80098d2:	4638      	mov	r0, r7
 80098d4:	f000 f81c 	bl	8009910 <__malloc_unlock>
 80098d8:	e7a1      	b.n	800981e <_malloc_r+0x22>
 80098da:	6025      	str	r5, [r4, #0]
 80098dc:	e7de      	b.n	800989c <_malloc_r+0xa0>
 80098de:	bf00      	nop
 80098e0:	20000954 	.word	0x20000954

080098e4 <_sbrk_r>:
 80098e4:	b538      	push	{r3, r4, r5, lr}
 80098e6:	4d06      	ldr	r5, [pc, #24]	; (8009900 <_sbrk_r+0x1c>)
 80098e8:	2300      	movs	r3, #0
 80098ea:	4604      	mov	r4, r0
 80098ec:	4608      	mov	r0, r1
 80098ee:	602b      	str	r3, [r5, #0]
 80098f0:	f7f7 fef4 	bl	80016dc <_sbrk>
 80098f4:	1c43      	adds	r3, r0, #1
 80098f6:	d102      	bne.n	80098fe <_sbrk_r+0x1a>
 80098f8:	682b      	ldr	r3, [r5, #0]
 80098fa:	b103      	cbz	r3, 80098fe <_sbrk_r+0x1a>
 80098fc:	6023      	str	r3, [r4, #0]
 80098fe:	bd38      	pop	{r3, r4, r5, pc}
 8009900:	2000095c 	.word	0x2000095c

08009904 <__malloc_lock>:
 8009904:	4801      	ldr	r0, [pc, #4]	; (800990c <__malloc_lock+0x8>)
 8009906:	f000 b809 	b.w	800991c <__retarget_lock_acquire_recursive>
 800990a:	bf00      	nop
 800990c:	20000960 	.word	0x20000960

08009910 <__malloc_unlock>:
 8009910:	4801      	ldr	r0, [pc, #4]	; (8009918 <__malloc_unlock+0x8>)
 8009912:	f000 b804 	b.w	800991e <__retarget_lock_release_recursive>
 8009916:	bf00      	nop
 8009918:	20000960 	.word	0x20000960

0800991c <__retarget_lock_acquire_recursive>:
 800991c:	4770      	bx	lr

0800991e <__retarget_lock_release_recursive>:
 800991e:	4770      	bx	lr

08009920 <_init>:
 8009920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009922:	bf00      	nop
 8009924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009926:	bc08      	pop	{r3}
 8009928:	469e      	mov	lr, r3
 800992a:	4770      	bx	lr

0800992c <_fini>:
 800992c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992e:	bf00      	nop
 8009930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009932:	bc08      	pop	{r3}
 8009934:	469e      	mov	lr, r3
 8009936:	4770      	bx	lr
