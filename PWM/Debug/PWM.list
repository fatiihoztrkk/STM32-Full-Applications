
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f28  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800a0b0  0800a0b0  0001a0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0d4  0800a0d4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0d4  0800a0d4  0001a0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0dc  0800a0dc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0dc  0800a0dc  0001a0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0e0  0800a0e0  0001a0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a0e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000900  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000990  20000990  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001da40  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004360  00000000  00000000  0003db00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a8  00000000  00000000  00041e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016e8  00000000  00000000  00043708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002617d  00000000  00000000  00044df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020350  00000000  00000000  0006af6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e09d1  00000000  00000000  0008b2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016bc8e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006acc  00000000  00000000  0016bce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a098 	.word	0x0800a098

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800a098 	.word	0x0800a098

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fe36 	bl	8001140 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f846 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 fa2a 	bl	8000930 <MX_GPIO_Init>
  MX_DMA_Init();
 80004dc:	f000 fa08 	bl	80008f0 <MX_DMA_Init>
  MX_I2C1_Init();
 80004e0:	f000 f8fc 	bl	80006dc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e4:	f000 f928 	bl	8000738 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e8:	f000 f956 	bl	8000798 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004ec:	f009 f98c 	bl	8009808 <MX_USB_HOST_Init>
  MX_TIM4_Init();
 80004f0:	f000 f988 	bl	8000804 <MX_TIM4_Init>
  MX_ADC1_Init();
 80004f4:	f000 f8a0 	bl	8000638 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_ADC_Start_DMA(&hadc1, &adc_value, 1);
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80004f8:	210c      	movs	r1, #12
 80004fa:	4815      	ldr	r0, [pc, #84]	; (8000550 <main+0x84>)
 80004fc:	f005 fa84 	bl	8005a08 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000500:	f009 f9a8 	bl	8009854 <MX_USB_HOST_Process>
//    duty_cycle = (adc_value*100) / 4095; // __HAL_TIM_GET_AUTORELOAD(&htim4) -> ARR değerini çekiyor.
//
//     __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,50);


    HAL_ADC_Start(&hadc1);
 8000504:	4813      	ldr	r0, [pc, #76]	; (8000554 <main+0x88>)
 8000506:	f000 fef5 	bl	80012f4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 800050a:	2164      	movs	r1, #100	; 0x64
 800050c:	4811      	ldr	r0, [pc, #68]	; (8000554 <main+0x88>)
 800050e:	f000 fff6 	bl	80014fe <HAL_ADC_PollForConversion>
    adc_value = HAL_ADC_GetValue(&hadc1);
 8000512:	4810      	ldr	r0, [pc, #64]	; (8000554 <main+0x88>)
 8000514:	f001 f98e 	bl	8001834 <HAL_ADC_GetValue>
 8000518:	4603      	mov	r3, r0
 800051a:	4a0f      	ldr	r2, [pc, #60]	; (8000558 <main+0x8c>)
 800051c:	6013      	str	r3, [r2, #0]
    HAL_ADC_Stop(&hadc1);
 800051e:	480d      	ldr	r0, [pc, #52]	; (8000554 <main+0x88>)
 8000520:	f000 ffba 	bl	8001498 <HAL_ADC_Stop>

     duty_cycle = (adc_value*__HAL_TIM_GET_AUTORELOAD(&htim4)) / 4095; // __HAL_TIM_GET_AUTORELOAD(&htim4) -> ARR değerini çekiyor.
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <main+0x84>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800052a:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <main+0x8c>)
 800052c:	6812      	ldr	r2, [r2, #0]
 800052e:	fb03 f202 	mul.w	r2, r3, r2
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <main+0x90>)
 8000534:	fba3 1302 	umull	r1, r3, r3, r2
 8000538:	1ad2      	subs	r2, r2, r3
 800053a:	0852      	lsrs	r2, r2, #1
 800053c:	4413      	add	r3, r2
 800053e:	0adb      	lsrs	r3, r3, #11
 8000540:	4a07      	ldr	r2, [pc, #28]	; (8000560 <main+0x94>)
 8000542:	6013      	str	r3, [r2, #0]

      __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,duty_cycle);
 8000544:	4b02      	ldr	r3, [pc, #8]	; (8000550 <main+0x84>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a05      	ldr	r2, [pc, #20]	; (8000560 <main+0x94>)
 800054a:	6812      	ldr	r2, [r2, #0]
 800054c:	641a      	str	r2, [r3, #64]	; 0x40
    MX_USB_HOST_Process();
 800054e:	e7d7      	b.n	8000500 <main+0x34>
 8000550:	20000250 	.word	0x20000250
 8000554:	200000b4 	.word	0x200000b4
 8000558:	200000ac 	.word	0x200000ac
 800055c:	00100101 	.word	0x00100101
 8000560:	200000b0 	.word	0x200000b0

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f009 fc8a 	bl	8009e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	4a27      	ldr	r2, [pc, #156]	; (8000630 <SystemClock_Config+0xcc>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	; 0x40
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b22      	ldr	r3, [pc, #136]	; (8000634 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a21      	ldr	r2, [pc, #132]	; (8000634 <SystemClock_Config+0xd0>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d4:	2308      	movs	r3, #8
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e2:	2307      	movs	r3, #7
 80005e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	4618      	mov	r0, r3
 80005ec:	f004 fb16 	bl	8004c1c <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005f6:	f000 fa97 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2302      	movs	r3, #2
 8000600:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000606:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800060a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000610:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2105      	movs	r1, #5
 8000618:	4618      	mov	r0, r3
 800061a:	f004 fd77 	bl	800510c <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000624:	f000 fa80 	bl	8000b28 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3750      	adds	r7, #80	; 0x50
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	463b      	mov	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800064a:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <MX_ADC1_Init+0x98>)
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <MX_ADC1_Init+0x9c>)
 800064e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000652:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000656:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <MX_ADC1_Init+0x98>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000660:	2201      	movs	r2, #1
 8000662:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000666:	2201      	movs	r2, #1
 8000668:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066a:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <MX_ADC1_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000672:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000678:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <MX_ADC1_Init+0x98>)
 800067a:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <MX_ADC1_Init+0xa0>)
 800067c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000686:	2201      	movs	r2, #1
 8000688:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_ADC1_Init+0x98>)
 800068c:	2201      	movs	r2, #1
 800068e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000694:	2201      	movs	r2, #1
 8000696:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <MX_ADC1_Init+0x98>)
 800069a:	f000 fde7 	bl	800126c <HAL_ADC_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006a4:	f000 fa40 	bl	8000b28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b4:	463b      	mov	r3, r7
 80006b6:	4619      	mov	r1, r3
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_ADC1_Init+0x98>)
 80006ba:	f001 f8e7 	bl	800188c <HAL_ADC_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006c4:	f000 fa30 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200000b4 	.word	0x200000b4
 80006d4:	40012000 	.word	0x40012000
 80006d8:	0f000001 	.word	0x0f000001

080006dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_I2C1_Init+0x50>)
 80006e2:	4a13      	ldr	r2, [pc, #76]	; (8000730 <MX_I2C1_Init+0x54>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_I2C1_Init+0x50>)
 80006e8:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_I2C1_Init+0x58>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_I2C1_Init+0x50>)
 80006fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_I2C1_Init+0x50>)
 800071a:	f003 fc9b 	bl	8004054 <HAL_I2C_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 fa00 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2000015c 	.word	0x2000015c
 8000730:	40005400 	.word	0x40005400
 8000734:	000186a0 	.word	0x000186a0

08000738 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_I2S3_Init+0x54>)
 800073e:	4a14      	ldr	r2, [pc, #80]	; (8000790 <MX_I2S3_Init+0x58>)
 8000740:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_I2S3_Init+0x54>)
 8000744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000748:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_I2S3_Init+0x54>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_I2S3_Init+0x54>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <MX_I2S3_Init+0x54>)
 8000758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800075c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_I2S3_Init+0x54>)
 8000760:	4a0c      	ldr	r2, [pc, #48]	; (8000794 <MX_I2S3_Init+0x5c>)
 8000762:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_I2S3_Init+0x54>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_I2S3_Init+0x54>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_I2S3_Init+0x54>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_I2S3_Init+0x54>)
 8000778:	f003 fdb0 	bl	80042dc <HAL_I2S_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000782:	f000 f9d1 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200001b0 	.word	0x200001b0
 8000790:	40003c00 	.word	0x40003c00
 8000794:	00017700 	.word	0x00017700

08000798 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_SPI1_Init+0x64>)
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <MX_SPI1_Init+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_SPI1_Init+0x64>)
 80007a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_SPI1_Init+0x64>)
 80007c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_SPI1_Init+0x64>)
 80007e4:	220a      	movs	r2, #10
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_SPI1_Init+0x64>)
 80007ea:	f004 ffdb 	bl	80057a4 <HAL_SPI_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f4:	f000 f998 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200001f8 	.word	0x200001f8
 8000800:	40013000 	.word	0x40013000

08000804 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08e      	sub	sp, #56	; 0x38
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000818:	f107 0320 	add.w	r3, r7, #32
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
 8000830:	615a      	str	r2, [r3, #20]
 8000832:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000834:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <MX_TIM4_Init+0xe4>)
 8000836:	4a2d      	ldr	r2, [pc, #180]	; (80008ec <MX_TIM4_Init+0xe8>)
 8000838:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 800083a:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <MX_TIM4_Init+0xe4>)
 800083c:	2253      	movs	r2, #83	; 0x53
 800083e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <MX_TIM4_Init+0xe4>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000846:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <MX_TIM4_Init+0xe4>)
 8000848:	2263      	movs	r2, #99	; 0x63
 800084a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084c:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <MX_TIM4_Init+0xe4>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000852:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <MX_TIM4_Init+0xe4>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000858:	4823      	ldr	r0, [pc, #140]	; (80008e8 <MX_TIM4_Init+0xe4>)
 800085a:	f005 f82c 	bl	80058b6 <HAL_TIM_Base_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000864:	f000 f960 	bl	8000b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800086e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000872:	4619      	mov	r1, r3
 8000874:	481c      	ldr	r0, [pc, #112]	; (80008e8 <MX_TIM4_Init+0xe4>)
 8000876:	f005 fb59 	bl	8005f2c <HAL_TIM_ConfigClockSource>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000880:	f000 f952 	bl	8000b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000884:	4818      	ldr	r0, [pc, #96]	; (80008e8 <MX_TIM4_Init+0xe4>)
 8000886:	f005 f865 	bl	8005954 <HAL_TIM_PWM_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000890:	f000 f94a 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	4619      	mov	r1, r3
 80008a2:	4811      	ldr	r0, [pc, #68]	; (80008e8 <MX_TIM4_Init+0xe4>)
 80008a4:	f005 ff4c 	bl	8006740 <HAL_TIMEx_MasterConfigSynchronization>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80008ae:	f000 f93b 	bl	8000b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b2:	2360      	movs	r3, #96	; 0x60
 80008b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	220c      	movs	r2, #12
 80008c6:	4619      	mov	r1, r3
 80008c8:	4807      	ldr	r0, [pc, #28]	; (80008e8 <MX_TIM4_Init+0xe4>)
 80008ca:	f005 fa6d 	bl	8005da8 <HAL_TIM_PWM_ConfigChannel>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80008d4:	f000 f928 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80008d8:	4803      	ldr	r0, [pc, #12]	; (80008e8 <MX_TIM4_Init+0xe4>)
 80008da:	f000 fb33 	bl	8000f44 <HAL_TIM_MspPostInit>

}
 80008de:	bf00      	nop
 80008e0:	3738      	adds	r7, #56	; 0x38
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000250 	.word	0x20000250
 80008ec:	40000800 	.word	0x40000800

080008f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_DMA_Init+0x3c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a0b      	ldr	r2, [pc, #44]	; (800092c <MX_DMA_Init+0x3c>)
 8000900:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_DMA_Init+0x3c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	2038      	movs	r0, #56	; 0x38
 8000918:	f001 fabb 	bl	8001e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800091c:	2038      	movs	r0, #56	; 0x38
 800091e:	f001 fad4 	bl	8001eca <HAL_NVIC_EnableIRQ>

}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08c      	sub	sp, #48	; 0x30
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
 800094a:	4b71      	ldr	r3, [pc, #452]	; (8000b10 <MX_GPIO_Init+0x1e0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a70      	ldr	r2, [pc, #448]	; (8000b10 <MX_GPIO_Init+0x1e0>)
 8000950:	f043 0310 	orr.w	r3, r3, #16
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b6e      	ldr	r3, [pc, #440]	; (8000b10 <MX_GPIO_Init+0x1e0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0310 	and.w	r3, r3, #16
 800095e:	61bb      	str	r3, [r7, #24]
 8000960:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	4b6a      	ldr	r3, [pc, #424]	; (8000b10 <MX_GPIO_Init+0x1e0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a69      	ldr	r2, [pc, #420]	; (8000b10 <MX_GPIO_Init+0x1e0>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b67      	ldr	r3, [pc, #412]	; (8000b10 <MX_GPIO_Init+0x1e0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	4b63      	ldr	r3, [pc, #396]	; (8000b10 <MX_GPIO_Init+0x1e0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a62      	ldr	r2, [pc, #392]	; (8000b10 <MX_GPIO_Init+0x1e0>)
 8000988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b60      	ldr	r3, [pc, #384]	; (8000b10 <MX_GPIO_Init+0x1e0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b5c      	ldr	r3, [pc, #368]	; (8000b10 <MX_GPIO_Init+0x1e0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a5b      	ldr	r2, [pc, #364]	; (8000b10 <MX_GPIO_Init+0x1e0>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b59      	ldr	r3, [pc, #356]	; (8000b10 <MX_GPIO_Init+0x1e0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	4b55      	ldr	r3, [pc, #340]	; (8000b10 <MX_GPIO_Init+0x1e0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a54      	ldr	r2, [pc, #336]	; (8000b10 <MX_GPIO_Init+0x1e0>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b52      	ldr	r3, [pc, #328]	; (8000b10 <MX_GPIO_Init+0x1e0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b4e      	ldr	r3, [pc, #312]	; (8000b10 <MX_GPIO_Init+0x1e0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a4d      	ldr	r2, [pc, #308]	; (8000b10 <MX_GPIO_Init+0x1e0>)
 80009dc:	f043 0308 	orr.w	r3, r3, #8
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b4b      	ldr	r3, [pc, #300]	; (8000b10 <MX_GPIO_Init+0x1e0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0308 	and.w	r3, r3, #8
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2108      	movs	r1, #8
 80009f2:	4848      	ldr	r0, [pc, #288]	; (8000b14 <MX_GPIO_Init+0x1e4>)
 80009f4:	f001 ff0a 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2101      	movs	r1, #1
 80009fc:	4846      	ldr	r0, [pc, #280]	; (8000b18 <MX_GPIO_Init+0x1e8>)
 80009fe:	f001 ff05 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2110      	movs	r1, #16
 8000a06:	4845      	ldr	r0, [pc, #276]	; (8000b1c <MX_GPIO_Init+0x1ec>)
 8000a08:	f001 ff00 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	483c      	ldr	r0, [pc, #240]	; (8000b14 <MX_GPIO_Init+0x1e4>)
 8000a24:	f001 fd56 	bl	80024d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4836      	ldr	r0, [pc, #216]	; (8000b18 <MX_GPIO_Init+0x1e8>)
 8000a40:	f001 fd48 	bl	80024d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a44:	2308      	movs	r3, #8
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a54:	2305      	movs	r3, #5
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	482e      	ldr	r0, [pc, #184]	; (8000b18 <MX_GPIO_Init+0x1e8>)
 8000a60:	f001 fd38 	bl	80024d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a68:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4829      	ldr	r0, [pc, #164]	; (8000b20 <MX_GPIO_Init+0x1f0>)
 8000a7a:	f001 fd2b 	bl	80024d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4824      	ldr	r0, [pc, #144]	; (8000b24 <MX_GPIO_Init+0x1f4>)
 8000a92:	f001 fd1f 	bl	80024d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aa8:	2305      	movs	r3, #5
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	481c      	ldr	r0, [pc, #112]	; (8000b24 <MX_GPIO_Init+0x1f4>)
 8000ab4:	f001 fd0e 	bl	80024d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8000ab8:	2310      	movs	r3, #16
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4813      	ldr	r0, [pc, #76]	; (8000b1c <MX_GPIO_Init+0x1ec>)
 8000ad0:	f001 fd00 	bl	80024d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ad4:	2320      	movs	r3, #32
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480d      	ldr	r0, [pc, #52]	; (8000b1c <MX_GPIO_Init+0x1ec>)
 8000ae8:	f001 fcf4 	bl	80024d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000aec:	2302      	movs	r3, #2
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000af0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <MX_GPIO_Init+0x1e4>)
 8000b02:	f001 fce7 	bl	80024d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b06:	bf00      	nop
 8000b08:	3730      	adds	r7, #48	; 0x30
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40020800 	.word	0x40020800
 8000b1c:	40020c00 	.word	0x40020c00
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020400 	.word	0x40020400

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <Error_Handler+0x8>
	...

08000b34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	4a0f      	ldr	r2, [pc, #60]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b72:	2007      	movs	r0, #7
 8000b74:	f001 f982 	bl	8001e7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800

08000b84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a33      	ldr	r2, [pc, #204]	; (8000c70 <HAL_ADC_MspInit+0xec>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d15f      	bne.n	8000c66 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	4b32      	ldr	r3, [pc, #200]	; (8000c74 <HAL_ADC_MspInit+0xf0>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	4a31      	ldr	r2, [pc, #196]	; (8000c74 <HAL_ADC_MspInit+0xf0>)
 8000bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <HAL_ADC_MspInit+0xf0>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <HAL_ADC_MspInit+0xf0>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a2a      	ldr	r2, [pc, #168]	; (8000c74 <HAL_ADC_MspInit+0xf0>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <HAL_ADC_MspInit+0xf0>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bde:	2302      	movs	r3, #2
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be2:	2303      	movs	r3, #3
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4821      	ldr	r0, [pc, #132]	; (8000c78 <HAL_ADC_MspInit+0xf4>)
 8000bf2:	f001 fc6f 	bl	80024d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <HAL_ADC_MspInit+0xf8>)
 8000bf8:	4a21      	ldr	r2, [pc, #132]	; (8000c80 <HAL_ADC_MspInit+0xfc>)
 8000bfa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <HAL_ADC_MspInit+0xf8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c02:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <HAL_ADC_MspInit+0xf8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c08:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <HAL_ADC_MspInit+0xf8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <HAL_ADC_MspInit+0xf8>)
 8000c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c14:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <HAL_ADC_MspInit+0xf8>)
 8000c18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c1c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <HAL_ADC_MspInit+0xf8>)
 8000c20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_ADC_MspInit+0xf8>)
 8000c28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c2c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <HAL_ADC_MspInit+0xf8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <HAL_ADC_MspInit+0xf8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c3a:	4810      	ldr	r0, [pc, #64]	; (8000c7c <HAL_ADC_MspInit+0xf8>)
 8000c3c:	f001 f960 	bl	8001f00 <HAL_DMA_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000c46:	f7ff ff6f 	bl	8000b28 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <HAL_ADC_MspInit+0xf8>)
 8000c4e:	639a      	str	r2, [r3, #56]	; 0x38
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_ADC_MspInit+0xf8>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2012      	movs	r0, #18
 8000c5c:	f001 f919 	bl	8001e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c60:	2012      	movs	r0, #18
 8000c62:	f001 f932 	bl	8001eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40012000 	.word	0x40012000
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	200000fc 	.word	0x200000fc
 8000c80:	40026410 	.word	0x40026410

08000c84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <HAL_I2C_MspInit+0x84>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d12c      	bne.n	8000d00 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_I2C_MspInit+0x88>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <HAL_I2C_MspInit+0x88>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_I2C_MspInit+0x88>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000cc2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc8:	2312      	movs	r3, #18
 8000cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480c      	ldr	r0, [pc, #48]	; (8000d10 <HAL_I2C_MspInit+0x8c>)
 8000ce0:	f001 fbf8 	bl	80024d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_I2C_MspInit+0x88>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <HAL_I2C_MspInit+0x88>)
 8000cee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <HAL_I2C_MspInit+0x88>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	; 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40005400 	.word	0x40005400
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020400 	.word	0x40020400

08000d14 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08e      	sub	sp, #56	; 0x38
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a31      	ldr	r2, [pc, #196]	; (8000e04 <HAL_I2S_MspInit+0xf0>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d15a      	bne.n	8000dfa <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d44:	2301      	movs	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d48:	23c0      	movs	r3, #192	; 0xc0
 8000d4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4618      	mov	r0, r3
 8000d56:	f004 fbe5 	bl	8005524 <HAL_RCCEx_PeriphCLKConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d60:	f7ff fee2 	bl	8000b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	4b27      	ldr	r3, [pc, #156]	; (8000e08 <HAL_I2S_MspInit+0xf4>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	4a26      	ldr	r2, [pc, #152]	; (8000e08 <HAL_I2S_MspInit+0xf4>)
 8000d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d72:	6413      	str	r3, [r2, #64]	; 0x40
 8000d74:	4b24      	ldr	r3, [pc, #144]	; (8000e08 <HAL_I2S_MspInit+0xf4>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <HAL_I2S_MspInit+0xf4>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	4a1f      	ldr	r2, [pc, #124]	; (8000e08 <HAL_I2S_MspInit+0xf4>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d90:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <HAL_I2S_MspInit+0xf4>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <HAL_I2S_MspInit+0xf4>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4a18      	ldr	r2, [pc, #96]	; (8000e08 <HAL_I2S_MspInit+0xf4>)
 8000da6:	f043 0304 	orr.w	r3, r3, #4
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <HAL_I2S_MspInit+0xf4>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000db8:	2310      	movs	r3, #16
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dc8:	2306      	movs	r3, #6
 8000dca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480e      	ldr	r0, [pc, #56]	; (8000e0c <HAL_I2S_MspInit+0xf8>)
 8000dd4:	f001 fb7e 	bl	80024d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000dd8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dea:	2306      	movs	r3, #6
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df2:	4619      	mov	r1, r3
 8000df4:	4806      	ldr	r0, [pc, #24]	; (8000e10 <HAL_I2S_MspInit+0xfc>)
 8000df6:	f001 fb6d 	bl	80024d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3738      	adds	r7, #56	; 0x38
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40003c00 	.word	0x40003c00
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020000 	.word	0x40020000
 8000e10:	40020800 	.word	0x40020800

08000e14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a19      	ldr	r2, [pc, #100]	; (8000e98 <HAL_SPI_MspInit+0x84>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d12b      	bne.n	8000e8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <HAL_SPI_MspInit+0x88>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	4a17      	ldr	r2, [pc, #92]	; (8000e9c <HAL_SPI_MspInit+0x88>)
 8000e40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e44:	6453      	str	r3, [r2, #68]	; 0x44
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <HAL_SPI_MspInit+0x88>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_SPI_MspInit+0x88>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <HAL_SPI_MspInit+0x88>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <HAL_SPI_MspInit+0x88>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e6e:	23e0      	movs	r3, #224	; 0xe0
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e7e:	2305      	movs	r3, #5
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <HAL_SPI_MspInit+0x8c>)
 8000e8a:	f001 fb23 	bl	80024d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	; 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40013000 	.word	0x40013000
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020000 	.word	0x40020000

08000ea4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a1d      	ldr	r2, [pc, #116]	; (8000f38 <HAL_TIM_Base_MspInit+0x94>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d134      	bne.n	8000f30 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <HAL_TIM_Base_MspInit+0x98>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	4a1b      	ldr	r2, [pc, #108]	; (8000f3c <HAL_TIM_Base_MspInit+0x98>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed6:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <HAL_TIM_Base_MspInit+0x98>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_TIM_Base_MspInit+0x98>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <HAL_TIM_Base_MspInit+0x98>)
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_TIM_Base_MspInit+0x98>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000efe:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f10:	2302      	movs	r3, #2
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4809      	ldr	r0, [pc, #36]	; (8000f40 <HAL_TIM_Base_MspInit+0x9c>)
 8000f1c:	f001 fada 	bl	80024d4 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	201e      	movs	r0, #30
 8000f26:	f000 ffb4 	bl	8001e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f2a:	201e      	movs	r0, #30
 8000f2c:	f000 ffcd 	bl	8001eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	; 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40000800 	.word	0x40000800
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020c00 	.word	0x40020c00

08000f44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a12      	ldr	r2, [pc, #72]	; (8000fac <HAL_TIM_MspPostInit+0x68>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d11e      	bne.n	8000fa4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_TIM_MspPostInit+0x6c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <HAL_TIM_MspPostInit+0x6c>)
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_TIM_MspPostInit+0x6c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <HAL_TIM_MspPostInit+0x70>)
 8000fa0:	f001 fa98 	bl	80024d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000fa4:	bf00      	nop
 8000fa6:	3720      	adds	r7, #32
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40000800 	.word	0x40000800
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020c00 	.word	0x40020c00

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001004:	f000 f8ee 	bl	80011e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <ADC_IRQHandler+0x10>)
 8001012:	f000 faff 	bl	8001614 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200000b4 	.word	0x200000b4

08001020 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <TIM4_IRQHandler+0x10>)
 8001026:	f004 fdb7 	bl	8005b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000250 	.word	0x20000250

08001034 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <DMA2_Stream0_IRQHandler+0x10>)
 800103a:	f001 f80f 	bl	800205c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200000fc 	.word	0x200000fc

08001048 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <OTG_FS_IRQHandler+0x10>)
 800104e:	f001 fe61 	bl	8002d14 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000067c 	.word	0x2000067c

0800105c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001064:	4a14      	ldr	r2, [pc, #80]	; (80010b8 <_sbrk+0x5c>)
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <_sbrk+0x60>)
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <_sbrk+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <_sbrk+0x64>)
 800107a:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <_sbrk+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	429a      	cmp	r2, r3
 800108a:	d207      	bcs.n	800109c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800108c:	f008 fec4 	bl	8009e18 <__errno>
 8001090:	4603      	mov	r3, r0
 8001092:	220c      	movs	r2, #12
 8001094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	e009      	b.n	80010b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <_sbrk+0x64>)
 80010ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20020000 	.word	0x20020000
 80010bc:	00000400 	.word	0x00000400
 80010c0:	20000298 	.word	0x20000298
 80010c4:	20000990 	.word	0x20000990

080010c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <SystemInit+0x20>)
 80010ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <SystemInit+0x20>)
 80010d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001124 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010f2:	490e      	ldr	r1, [pc, #56]	; (800112c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010f4:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f8:	e002      	b.n	8001100 <LoopCopyDataInit>

080010fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fe:	3304      	adds	r3, #4

08001100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001104:	d3f9      	bcc.n	80010fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001106:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001108:	4c0b      	ldr	r4, [pc, #44]	; (8001138 <LoopFillZerobss+0x26>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800110c:	e001      	b.n	8001112 <LoopFillZerobss>

0800110e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001110:	3204      	adds	r2, #4

08001112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001114:	d3fb      	bcc.n	800110e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001116:	f7ff ffd7 	bl	80010c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800111a:	f008 fe83 	bl	8009e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111e:	f7ff f9d5 	bl	80004cc <main>
  bx  lr    
 8001122:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001124:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800112c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001130:	0800a0e4 	.word	0x0800a0e4
  ldr r2, =_sbss
 8001134:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001138:	20000990 	.word	0x20000990

0800113c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800113c:	e7fe      	b.n	800113c <CAN1_RX0_IRQHandler>
	...

08001140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <HAL_Init+0x40>)
 800114a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800114e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_Init+0x40>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <HAL_Init+0x40>)
 8001156:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800115a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a07      	ldr	r2, [pc, #28]	; (8001180 <HAL_Init+0x40>)
 8001162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001166:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001168:	2003      	movs	r0, #3
 800116a:	f000 fe87 	bl	8001e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116e:	2000      	movs	r0, #0
 8001170:	f000 f808 	bl	8001184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001174:	f7ff fcde 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023c00 	.word	0x40023c00

08001184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_InitTick+0x54>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_InitTick+0x58>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4619      	mov	r1, r3
 8001196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119a:	fbb3 f3f1 	udiv	r3, r3, r1
 800119e:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 fe9f 	bl	8001ee6 <HAL_SYSTICK_Config>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00e      	b.n	80011d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b0f      	cmp	r3, #15
 80011b6:	d80a      	bhi.n	80011ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b8:	2200      	movs	r2, #0
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f000 fe67 	bl	8001e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c4:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <HAL_InitTick+0x5c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e000      	b.n	80011d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20000004 	.word	0x20000004

080011e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x20>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_IncTick+0x24>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <HAL_IncTick+0x24>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000008 	.word	0x20000008
 8001208:	2000029c 	.word	0x2000029c

0800120c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <HAL_GetTick+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	2000029c 	.word	0x2000029c

08001224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800122c:	f7ff ffee 	bl	800120c <HAL_GetTick>
 8001230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800123c:	d005      	beq.n	800124a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <HAL_Delay+0x44>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4413      	add	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800124a:	bf00      	nop
 800124c:	f7ff ffde 	bl	800120c <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	429a      	cmp	r2, r3
 800125a:	d8f7      	bhi.n	800124c <HAL_Delay+0x28>
  {
  }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000008 	.word	0x20000008

0800126c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e033      	b.n	80012ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	2b00      	cmp	r3, #0
 8001288:	d109      	bne.n	800129e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff fc7a 	bl	8000b84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f003 0310 	and.w	r3, r3, #16
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d118      	bne.n	80012dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012b2:	f023 0302 	bic.w	r3, r3, #2
 80012b6:	f043 0202 	orr.w	r2, r3, #2
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 fc06 	bl	8001ad0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f023 0303 	bic.w	r3, r3, #3
 80012d2:	f043 0201 	orr.w	r2, r3, #1
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	641a      	str	r2, [r3, #64]	; 0x40
 80012da:	e001      	b.n	80012e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <HAL_ADC_Start+0x1a>
 800130a:	2302      	movs	r3, #2
 800130c:	e0b2      	b.n	8001474 <HAL_ADC_Start+0x180>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b01      	cmp	r3, #1
 8001322:	d018      	beq.n	8001356 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0201 	orr.w	r2, r2, #1
 8001332:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001334:	4b52      	ldr	r3, [pc, #328]	; (8001480 <HAL_ADC_Start+0x18c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a52      	ldr	r2, [pc, #328]	; (8001484 <HAL_ADC_Start+0x190>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	0c9a      	lsrs	r2, r3, #18
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001348:	e002      	b.n	8001350 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	3b01      	subs	r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f9      	bne.n	800134a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b01      	cmp	r3, #1
 8001362:	d17a      	bne.n	800145a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001382:	2b00      	cmp	r3, #0
 8001384:	d007      	beq.n	8001396 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800138e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800139e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013a2:	d106      	bne.n	80013b2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a8:	f023 0206 	bic.w	r2, r3, #6
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	645a      	str	r2, [r3, #68]	; 0x44
 80013b0:	e002      	b.n	80013b8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013c0:	4b31      	ldr	r3, [pc, #196]	; (8001488 <HAL_ADC_Start+0x194>)
 80013c2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013cc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 031f 	and.w	r3, r3, #31
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d12a      	bne.n	8001430 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a2b      	ldr	r2, [pc, #172]	; (800148c <HAL_ADC_Start+0x198>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d015      	beq.n	8001410 <HAL_ADC_Start+0x11c>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a29      	ldr	r2, [pc, #164]	; (8001490 <HAL_ADC_Start+0x19c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d105      	bne.n	80013fa <HAL_ADC_Start+0x106>
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <HAL_ADC_Start+0x194>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 031f 	and.w	r3, r3, #31
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00a      	beq.n	8001410 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a25      	ldr	r2, [pc, #148]	; (8001494 <HAL_ADC_Start+0x1a0>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d136      	bne.n	8001472 <HAL_ADC_Start+0x17e>
 8001404:	4b20      	ldr	r3, [pc, #128]	; (8001488 <HAL_ADC_Start+0x194>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0310 	and.w	r3, r3, #16
 800140c:	2b00      	cmp	r3, #0
 800140e:	d130      	bne.n	8001472 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d129      	bne.n	8001472 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	e020      	b.n	8001472 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a15      	ldr	r2, [pc, #84]	; (800148c <HAL_ADC_Start+0x198>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d11b      	bne.n	8001472 <HAL_ADC_Start+0x17e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d114      	bne.n	8001472 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	e00b      	b.n	8001472 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f043 0210 	orr.w	r2, r3, #16
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f043 0201 	orr.w	r2, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	20000000 	.word	0x20000000
 8001484:	431bde83 	.word	0x431bde83
 8001488:	40012300 	.word	0x40012300
 800148c:	40012000 	.word	0x40012000
 8001490:	40012100 	.word	0x40012100
 8001494:	40012200 	.word	0x40012200

08001498 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d101      	bne.n	80014ae <HAL_ADC_Stop+0x16>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e021      	b.n	80014f2 <HAL_ADC_Stop+0x5a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0201 	bic.w	r2, r2, #1
 80014c4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d109      	bne.n	80014e8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	f043 0201 	orr.w	r2, r3, #1
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800151a:	d113      	bne.n	8001544 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800152a:	d10b      	bne.n	8001544 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f043 0220 	orr.w	r2, r3, #32
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e063      	b.n	800160c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001544:	f7ff fe62 	bl	800120c <HAL_GetTick>
 8001548:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800154a:	e021      	b.n	8001590 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001552:	d01d      	beq.n	8001590 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d007      	beq.n	800156a <HAL_ADC_PollForConversion+0x6c>
 800155a:	f7ff fe57 	bl	800120c <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	429a      	cmp	r2, r3
 8001568:	d212      	bcs.n	8001590 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b02      	cmp	r3, #2
 8001576:	d00b      	beq.n	8001590 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	f043 0204 	orr.w	r2, r3, #4
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e03d      	b.n	800160c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b02      	cmp	r3, #2
 800159c:	d1d6      	bne.n	800154c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f06f 0212 	mvn.w	r2, #18
 80015a6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d123      	bne.n	800160a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d11f      	bne.n	800160a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d006      	beq.n	80015e6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d111      	bne.n	800160a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d105      	bne.n	800160a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f043 0201 	orr.w	r2, r3, #1
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	f003 0320 	and.w	r3, r3, #32
 8001642:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d049      	beq.n	80016de <HAL_ADC_IRQHandler+0xca>
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d046      	beq.n	80016de <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	f003 0310 	and.w	r3, r3, #16
 8001658:	2b00      	cmp	r3, #0
 800165a:	d105      	bne.n	8001668 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d12b      	bne.n	80016ce <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800167a:	2b00      	cmp	r3, #0
 800167c:	d127      	bne.n	80016ce <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001688:	2b00      	cmp	r3, #0
 800168a:	d006      	beq.n	800169a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001696:	2b00      	cmp	r3, #0
 8001698:	d119      	bne.n	80016ce <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0220 	bic.w	r2, r2, #32
 80016a8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d105      	bne.n	80016ce <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f043 0201 	orr.w	r2, r3, #1
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f8bd 	bl	800184e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f06f 0212 	mvn.w	r2, #18
 80016dc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ec:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d057      	beq.n	80017a4 <HAL_ADC_IRQHandler+0x190>
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d054      	beq.n	80017a4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	2b00      	cmp	r3, #0
 8001704:	d105      	bne.n	8001712 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d139      	bne.n	8001794 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001726:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800172a:	2b00      	cmp	r3, #0
 800172c:	d006      	beq.n	800173c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001738:	2b00      	cmp	r3, #0
 800173a:	d12b      	bne.n	8001794 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001746:	2b00      	cmp	r3, #0
 8001748:	d124      	bne.n	8001794 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001754:	2b00      	cmp	r3, #0
 8001756:	d11d      	bne.n	8001794 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800175c:	2b00      	cmp	r3, #0
 800175e:	d119      	bne.n	8001794 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800176e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001784:	2b00      	cmp	r3, #0
 8001786:	d105      	bne.n	8001794 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f043 0201 	orr.w	r2, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 fa97 	bl	8001cc8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f06f 020c 	mvn.w	r2, #12
 80017a2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017b2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d017      	beq.n	80017ea <HAL_ADC_IRQHandler+0x1d6>
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d014      	beq.n	80017ea <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d10d      	bne.n	80017ea <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f841 	bl	8001862 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f06f 0201 	mvn.w	r2, #1
 80017e8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f003 0320 	and.w	r3, r3, #32
 80017f0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017f8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d015      	beq.n	800182c <HAL_ADC_IRQHandler+0x218>
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d012      	beq.n	800182c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f043 0202 	orr.w	r2, r3, #2
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f06f 0220 	mvn.w	r2, #32
 800181a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f82a 	bl	8001876 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f06f 0220 	mvn.w	r2, #32
 800182a:	601a      	str	r2, [r3, #0]
  }
}
 800182c:	bf00      	nop
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d101      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x1c>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e105      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x228>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b09      	cmp	r3, #9
 80018b6:	d925      	bls.n	8001904 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68d9      	ldr	r1, [r3, #12]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	4613      	mov	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4413      	add	r3, r2
 80018cc:	3b1e      	subs	r3, #30
 80018ce:	2207      	movs	r2, #7
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43da      	mvns	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	400a      	ands	r2, r1
 80018dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68d9      	ldr	r1, [r3, #12]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	4603      	mov	r3, r0
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4403      	add	r3, r0
 80018f6:	3b1e      	subs	r3, #30
 80018f8:	409a      	lsls	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	e022      	b.n	800194a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6919      	ldr	r1, [r3, #16]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	b29b      	uxth	r3, r3
 8001910:	461a      	mov	r2, r3
 8001912:	4613      	mov	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4413      	add	r3, r2
 8001918:	2207      	movs	r2, #7
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	400a      	ands	r2, r1
 8001926:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6919      	ldr	r1, [r3, #16]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	b29b      	uxth	r3, r3
 8001938:	4618      	mov	r0, r3
 800193a:	4603      	mov	r3, r0
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4403      	add	r3, r0
 8001940:	409a      	lsls	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b06      	cmp	r3, #6
 8001950:	d824      	bhi.n	800199c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	3b05      	subs	r3, #5
 8001964:	221f      	movs	r2, #31
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	400a      	ands	r2, r1
 8001972:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	b29b      	uxth	r3, r3
 8001980:	4618      	mov	r0, r3
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	3b05      	subs	r3, #5
 800198e:	fa00 f203 	lsl.w	r2, r0, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	635a      	str	r2, [r3, #52]	; 0x34
 800199a:	e04c      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b0c      	cmp	r3, #12
 80019a2:	d824      	bhi.n	80019ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	3b23      	subs	r3, #35	; 0x23
 80019b6:	221f      	movs	r2, #31
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43da      	mvns	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	400a      	ands	r2, r1
 80019c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	3b23      	subs	r3, #35	; 0x23
 80019e0:	fa00 f203 	lsl.w	r2, r0, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	631a      	str	r2, [r3, #48]	; 0x30
 80019ec:	e023      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	3b41      	subs	r3, #65	; 0x41
 8001a00:	221f      	movs	r2, #31
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43da      	mvns	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	400a      	ands	r2, r1
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	3b41      	subs	r3, #65	; 0x41
 8001a2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a36:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <HAL_ADC_ConfigChannel+0x234>)
 8001a38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a21      	ldr	r2, [pc, #132]	; (8001ac4 <HAL_ADC_ConfigChannel+0x238>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d109      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x1cc>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b12      	cmp	r3, #18
 8001a4a:	d105      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a19      	ldr	r2, [pc, #100]	; (8001ac4 <HAL_ADC_ConfigChannel+0x238>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d123      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x21e>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b10      	cmp	r3, #16
 8001a68:	d003      	beq.n	8001a72 <HAL_ADC_ConfigChannel+0x1e6>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b11      	cmp	r3, #17
 8001a70:	d11b      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b10      	cmp	r3, #16
 8001a84:	d111      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <HAL_ADC_ConfigChannel+0x23c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a10      	ldr	r2, [pc, #64]	; (8001acc <HAL_ADC_ConfigChannel+0x240>)
 8001a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a90:	0c9a      	lsrs	r2, r3, #18
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a9c:	e002      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f9      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	40012300 	.word	0x40012300
 8001ac4:	40012000 	.word	0x40012000
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	431bde83 	.word	0x431bde83

08001ad0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ad8:	4b79      	ldr	r3, [pc, #484]	; (8001cc0 <ADC_Init+0x1f0>)
 8001ada:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6859      	ldr	r1, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	021a      	lsls	r2, r3, #8
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6859      	ldr	r1, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6899      	ldr	r1, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b62:	4a58      	ldr	r2, [pc, #352]	; (8001cc4 <ADC_Init+0x1f4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d022      	beq.n	8001bae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6899      	ldr	r1, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6899      	ldr	r1, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	e00f      	b.n	8001bce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0202 	bic.w	r2, r2, #2
 8001bdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6899      	ldr	r1, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	7e1b      	ldrb	r3, [r3, #24]
 8001be8:	005a      	lsls	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01b      	beq.n	8001c34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6859      	ldr	r1, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	3b01      	subs	r3, #1
 8001c28:	035a      	lsls	r2, r3, #13
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	e007      	b.n	8001c44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	051a      	lsls	r2, r3, #20
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6899      	ldr	r1, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c86:	025a      	lsls	r2, r3, #9
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6899      	ldr	r1, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	029a      	lsls	r2, r3, #10
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	609a      	str	r2, [r3, #8]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	40012300 	.word	0x40012300
 8001cc4:	0f000001 	.word	0x0f000001

08001cc8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0e:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	60d3      	str	r3, [r2, #12]
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <__NVIC_GetPriorityGrouping+0x18>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	0a1b      	lsrs	r3, r3, #8
 8001d2e:	f003 0307 	and.w	r3, r3, #7
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	db0b      	blt.n	8001d6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	f003 021f 	and.w	r2, r3, #31
 8001d58:	4907      	ldr	r1, [pc, #28]	; (8001d78 <__NVIC_EnableIRQ+0x38>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	2001      	movs	r0, #1
 8001d62:	fa00 f202 	lsl.w	r2, r0, r2
 8001d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000e100 	.word	0xe000e100

08001d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	db0a      	blt.n	8001da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	490c      	ldr	r1, [pc, #48]	; (8001dc8 <__NVIC_SetPriority+0x4c>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	0112      	lsls	r2, r2, #4
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da4:	e00a      	b.n	8001dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4908      	ldr	r1, [pc, #32]	; (8001dcc <__NVIC_SetPriority+0x50>)
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	3b04      	subs	r3, #4
 8001db4:	0112      	lsls	r2, r2, #4
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	440b      	add	r3, r1
 8001dba:	761a      	strb	r2, [r3, #24]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000e100 	.word	0xe000e100
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f1c3 0307 	rsb	r3, r3, #7
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	bf28      	it	cs
 8001dee:	2304      	movcs	r3, #4
 8001df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3304      	adds	r3, #4
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	d902      	bls.n	8001e00 <NVIC_EncodePriority+0x30>
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3b03      	subs	r3, #3
 8001dfe:	e000      	b.n	8001e02 <NVIC_EncodePriority+0x32>
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	f04f 32ff 	mov.w	r2, #4294967295
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	401a      	ands	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e18:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e22:	43d9      	mvns	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	4313      	orrs	r3, r2
         );
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3724      	adds	r7, #36	; 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e48:	d301      	bcc.n	8001e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e00f      	b.n	8001e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <SysTick_Config+0x40>)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e56:	210f      	movs	r1, #15
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295
 8001e5c:	f7ff ff8e 	bl	8001d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <SysTick_Config+0x40>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e66:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <SysTick_Config+0x40>)
 8001e68:	2207      	movs	r2, #7
 8001e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	e000e010 	.word	0xe000e010

08001e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ff29 	bl	8001cdc <__NVIC_SetPriorityGrouping>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea4:	f7ff ff3e 	bl	8001d24 <__NVIC_GetPriorityGrouping>
 8001ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	6978      	ldr	r0, [r7, #20]
 8001eb0:	f7ff ff8e 	bl	8001dd0 <NVIC_EncodePriority>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff5d 	bl	8001d7c <__NVIC_SetPriority>
}
 8001ec2:	bf00      	nop
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff31 	bl	8001d40 <__NVIC_EnableIRQ>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ffa2 	bl	8001e38 <SysTick_Config>
 8001ef4:	4603      	mov	r3, r0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f0c:	f7ff f97e 	bl	800120c <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e099      	b.n	8002050 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0201 	bic.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f3c:	e00f      	b.n	8001f5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f3e:	f7ff f965 	bl	800120c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	d908      	bls.n	8001f5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2203      	movs	r2, #3
 8001f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e078      	b.n	8002050 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1e8      	bne.n	8001f3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	4b38      	ldr	r3, [pc, #224]	; (8002058 <HAL_DMA_Init+0x158>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d107      	bne.n	8001fc8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f023 0307 	bic.w	r3, r3, #7
 8001fde:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d117      	bne.n	8002022 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00e      	beq.n	8002022 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f9e9 	bl	80023dc <DMA_CheckFifoParam>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2240      	movs	r2, #64	; 0x40
 8002014:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800201e:	2301      	movs	r3, #1
 8002020:	e016      	b.n	8002050 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f9a0 	bl	8002370 <DMA_CalcBaseAndBitshift>
 8002030:	4603      	mov	r3, r0
 8002032:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002038:	223f      	movs	r2, #63	; 0x3f
 800203a:	409a      	lsls	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	f010803f 	.word	0xf010803f

0800205c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002068:	4b8e      	ldr	r3, [pc, #568]	; (80022a4 <HAL_DMA_IRQHandler+0x248>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a8e      	ldr	r2, [pc, #568]	; (80022a8 <HAL_DMA_IRQHandler+0x24c>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	0a9b      	lsrs	r3, r3, #10
 8002074:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002086:	2208      	movs	r2, #8
 8002088:	409a      	lsls	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4013      	ands	r3, r2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d01a      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d013      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0204 	bic.w	r2, r2, #4
 80020ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b4:	2208      	movs	r2, #8
 80020b6:	409a      	lsls	r2, r3
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c0:	f043 0201 	orr.w	r2, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020cc:	2201      	movs	r2, #1
 80020ce:	409a      	lsls	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d012      	beq.n	80020fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00b      	beq.n	80020fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ea:	2201      	movs	r2, #1
 80020ec:	409a      	lsls	r2, r3
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f6:	f043 0202 	orr.w	r2, r3, #2
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002102:	2204      	movs	r2, #4
 8002104:	409a      	lsls	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d012      	beq.n	8002134 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00b      	beq.n	8002134 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	2204      	movs	r2, #4
 8002122:	409a      	lsls	r2, r3
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212c:	f043 0204 	orr.w	r2, r3, #4
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002138:	2210      	movs	r2, #16
 800213a:	409a      	lsls	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d043      	beq.n	80021cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d03c      	beq.n	80021cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002156:	2210      	movs	r2, #16
 8002158:	409a      	lsls	r2, r3
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d018      	beq.n	800219e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d108      	bne.n	800218c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d024      	beq.n	80021cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	4798      	blx	r3
 800218a:	e01f      	b.n	80021cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002190:	2b00      	cmp	r3, #0
 8002192:	d01b      	beq.n	80021cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4798      	blx	r3
 800219c:	e016      	b.n	80021cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d107      	bne.n	80021bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0208 	bic.w	r2, r2, #8
 80021ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d0:	2220      	movs	r2, #32
 80021d2:	409a      	lsls	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 808f 	beq.w	80022fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 8087 	beq.w	80022fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f2:	2220      	movs	r2, #32
 80021f4:	409a      	lsls	r2, r3
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b05      	cmp	r3, #5
 8002204:	d136      	bne.n	8002274 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0216 	bic.w	r2, r2, #22
 8002214:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	695a      	ldr	r2, [r3, #20]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002224:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	2b00      	cmp	r3, #0
 800222c:	d103      	bne.n	8002236 <HAL_DMA_IRQHandler+0x1da>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002232:	2b00      	cmp	r3, #0
 8002234:	d007      	beq.n	8002246 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0208 	bic.w	r2, r2, #8
 8002244:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224a:	223f      	movs	r2, #63	; 0x3f
 800224c:	409a      	lsls	r2, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002266:	2b00      	cmp	r3, #0
 8002268:	d07e      	beq.n	8002368 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	4798      	blx	r3
        }
        return;
 8002272:	e079      	b.n	8002368 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d01d      	beq.n	80022be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10d      	bne.n	80022ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002294:	2b00      	cmp	r3, #0
 8002296:	d031      	beq.n	80022fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	4798      	blx	r3
 80022a0:	e02c      	b.n	80022fc <HAL_DMA_IRQHandler+0x2a0>
 80022a2:	bf00      	nop
 80022a4:	20000000 	.word	0x20000000
 80022a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d023      	beq.n	80022fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	4798      	blx	r3
 80022bc:	e01e      	b.n	80022fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10f      	bne.n	80022ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0210 	bic.w	r2, r2, #16
 80022da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002300:	2b00      	cmp	r3, #0
 8002302:	d032      	beq.n	800236a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d022      	beq.n	8002356 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2205      	movs	r2, #5
 8002314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0201 	bic.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	3301      	adds	r3, #1
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	429a      	cmp	r2, r3
 8002332:	d307      	bcc.n	8002344 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f2      	bne.n	8002328 <HAL_DMA_IRQHandler+0x2cc>
 8002342:	e000      	b.n	8002346 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002344:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	4798      	blx	r3
 8002366:	e000      	b.n	800236a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002368:	bf00      	nop
    }
  }
}
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	3b10      	subs	r3, #16
 8002380:	4a14      	ldr	r2, [pc, #80]	; (80023d4 <DMA_CalcBaseAndBitshift+0x64>)
 8002382:	fba2 2303 	umull	r2, r3, r2, r3
 8002386:	091b      	lsrs	r3, r3, #4
 8002388:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800238a:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <DMA_CalcBaseAndBitshift+0x68>)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d909      	bls.n	80023b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023a6:	f023 0303 	bic.w	r3, r3, #3
 80023aa:	1d1a      	adds	r2, r3, #4
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	659a      	str	r2, [r3, #88]	; 0x58
 80023b0:	e007      	b.n	80023c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ba:	f023 0303 	bic.w	r3, r3, #3
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	aaaaaaab 	.word	0xaaaaaaab
 80023d8:	0800a0cc 	.word	0x0800a0cc

080023dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d11f      	bne.n	8002436 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d856      	bhi.n	80024aa <DMA_CheckFifoParam+0xce>
 80023fc:	a201      	add	r2, pc, #4	; (adr r2, 8002404 <DMA_CheckFifoParam+0x28>)
 80023fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002402:	bf00      	nop
 8002404:	08002415 	.word	0x08002415
 8002408:	08002427 	.word	0x08002427
 800240c:	08002415 	.word	0x08002415
 8002410:	080024ab 	.word	0x080024ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d046      	beq.n	80024ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002424:	e043      	b.n	80024ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800242e:	d140      	bne.n	80024b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002434:	e03d      	b.n	80024b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800243e:	d121      	bne.n	8002484 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b03      	cmp	r3, #3
 8002444:	d837      	bhi.n	80024b6 <DMA_CheckFifoParam+0xda>
 8002446:	a201      	add	r2, pc, #4	; (adr r2, 800244c <DMA_CheckFifoParam+0x70>)
 8002448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244c:	0800245d 	.word	0x0800245d
 8002450:	08002463 	.word	0x08002463
 8002454:	0800245d 	.word	0x0800245d
 8002458:	08002475 	.word	0x08002475
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
      break;
 8002460:	e030      	b.n	80024c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d025      	beq.n	80024ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002472:	e022      	b.n	80024ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800247c:	d11f      	bne.n	80024be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002482:	e01c      	b.n	80024be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d903      	bls.n	8002492 <DMA_CheckFifoParam+0xb6>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d003      	beq.n	8002498 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002490:	e018      	b.n	80024c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
      break;
 8002496:	e015      	b.n	80024c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00e      	beq.n	80024c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
      break;
 80024a8:	e00b      	b.n	80024c2 <DMA_CheckFifoParam+0xe6>
      break;
 80024aa:	bf00      	nop
 80024ac:	e00a      	b.n	80024c4 <DMA_CheckFifoParam+0xe8>
      break;
 80024ae:	bf00      	nop
 80024b0:	e008      	b.n	80024c4 <DMA_CheckFifoParam+0xe8>
      break;
 80024b2:	bf00      	nop
 80024b4:	e006      	b.n	80024c4 <DMA_CheckFifoParam+0xe8>
      break;
 80024b6:	bf00      	nop
 80024b8:	e004      	b.n	80024c4 <DMA_CheckFifoParam+0xe8>
      break;
 80024ba:	bf00      	nop
 80024bc:	e002      	b.n	80024c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80024be:	bf00      	nop
 80024c0:	e000      	b.n	80024c4 <DMA_CheckFifoParam+0xe8>
      break;
 80024c2:	bf00      	nop
    }
  } 
  
  return status; 
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop

080024d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b089      	sub	sp, #36	; 0x24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	e16b      	b.n	80027c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024f0:	2201      	movs	r2, #1
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4013      	ands	r3, r2
 8002502:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	429a      	cmp	r2, r3
 800250a:	f040 815a 	bne.w	80027c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b01      	cmp	r3, #1
 8002518:	d005      	beq.n	8002526 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002522:	2b02      	cmp	r3, #2
 8002524:	d130      	bne.n	8002588 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	2203      	movs	r2, #3
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800255c:	2201      	movs	r2, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	f003 0201 	and.w	r2, r3, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	2b03      	cmp	r3, #3
 8002592:	d017      	beq.n	80025c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	2203      	movs	r2, #3
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d123      	bne.n	8002618 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	08da      	lsrs	r2, r3, #3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3208      	adds	r2, #8
 80025d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	220f      	movs	r2, #15
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	08da      	lsrs	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3208      	adds	r2, #8
 8002612:	69b9      	ldr	r1, [r7, #24]
 8002614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	2203      	movs	r2, #3
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0203 	and.w	r2, r3, #3
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80b4 	beq.w	80027c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	4b60      	ldr	r3, [pc, #384]	; (80027e0 <HAL_GPIO_Init+0x30c>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	4a5f      	ldr	r2, [pc, #380]	; (80027e0 <HAL_GPIO_Init+0x30c>)
 8002664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002668:	6453      	str	r3, [r2, #68]	; 0x44
 800266a:	4b5d      	ldr	r3, [pc, #372]	; (80027e0 <HAL_GPIO_Init+0x30c>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002676:	4a5b      	ldr	r2, [pc, #364]	; (80027e4 <HAL_GPIO_Init+0x310>)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	089b      	lsrs	r3, r3, #2
 800267c:	3302      	adds	r3, #2
 800267e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	220f      	movs	r2, #15
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a52      	ldr	r2, [pc, #328]	; (80027e8 <HAL_GPIO_Init+0x314>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d02b      	beq.n	80026fa <HAL_GPIO_Init+0x226>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a51      	ldr	r2, [pc, #324]	; (80027ec <HAL_GPIO_Init+0x318>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d025      	beq.n	80026f6 <HAL_GPIO_Init+0x222>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a50      	ldr	r2, [pc, #320]	; (80027f0 <HAL_GPIO_Init+0x31c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01f      	beq.n	80026f2 <HAL_GPIO_Init+0x21e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a4f      	ldr	r2, [pc, #316]	; (80027f4 <HAL_GPIO_Init+0x320>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d019      	beq.n	80026ee <HAL_GPIO_Init+0x21a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a4e      	ldr	r2, [pc, #312]	; (80027f8 <HAL_GPIO_Init+0x324>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_GPIO_Init+0x216>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a4d      	ldr	r2, [pc, #308]	; (80027fc <HAL_GPIO_Init+0x328>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_GPIO_Init+0x212>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a4c      	ldr	r2, [pc, #304]	; (8002800 <HAL_GPIO_Init+0x32c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_Init+0x20e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4b      	ldr	r2, [pc, #300]	; (8002804 <HAL_GPIO_Init+0x330>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_GPIO_Init+0x20a>
 80026da:	2307      	movs	r3, #7
 80026dc:	e00e      	b.n	80026fc <HAL_GPIO_Init+0x228>
 80026de:	2308      	movs	r3, #8
 80026e0:	e00c      	b.n	80026fc <HAL_GPIO_Init+0x228>
 80026e2:	2306      	movs	r3, #6
 80026e4:	e00a      	b.n	80026fc <HAL_GPIO_Init+0x228>
 80026e6:	2305      	movs	r3, #5
 80026e8:	e008      	b.n	80026fc <HAL_GPIO_Init+0x228>
 80026ea:	2304      	movs	r3, #4
 80026ec:	e006      	b.n	80026fc <HAL_GPIO_Init+0x228>
 80026ee:	2303      	movs	r3, #3
 80026f0:	e004      	b.n	80026fc <HAL_GPIO_Init+0x228>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e002      	b.n	80026fc <HAL_GPIO_Init+0x228>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_GPIO_Init+0x228>
 80026fa:	2300      	movs	r3, #0
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	f002 0203 	and.w	r2, r2, #3
 8002702:	0092      	lsls	r2, r2, #2
 8002704:	4093      	lsls	r3, r2
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800270c:	4935      	ldr	r1, [pc, #212]	; (80027e4 <HAL_GPIO_Init+0x310>)
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	089b      	lsrs	r3, r3, #2
 8002712:	3302      	adds	r3, #2
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800271a:	4b3b      	ldr	r3, [pc, #236]	; (8002808 <HAL_GPIO_Init+0x334>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800273e:	4a32      	ldr	r2, [pc, #200]	; (8002808 <HAL_GPIO_Init+0x334>)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002744:	4b30      	ldr	r3, [pc, #192]	; (8002808 <HAL_GPIO_Init+0x334>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002768:	4a27      	ldr	r2, [pc, #156]	; (8002808 <HAL_GPIO_Init+0x334>)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800276e:	4b26      	ldr	r3, [pc, #152]	; (8002808 <HAL_GPIO_Init+0x334>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002792:	4a1d      	ldr	r2, [pc, #116]	; (8002808 <HAL_GPIO_Init+0x334>)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002798:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <HAL_GPIO_Init+0x334>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027bc:	4a12      	ldr	r2, [pc, #72]	; (8002808 <HAL_GPIO_Init+0x334>)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3301      	adds	r3, #1
 80027c6:	61fb      	str	r3, [r7, #28]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b0f      	cmp	r3, #15
 80027cc:	f67f ae90 	bls.w	80024f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3724      	adds	r7, #36	; 0x24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40013800 	.word	0x40013800
 80027e8:	40020000 	.word	0x40020000
 80027ec:	40020400 	.word	0x40020400
 80027f0:	40020800 	.word	0x40020800
 80027f4:	40020c00 	.word	0x40020c00
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40021400 	.word	0x40021400
 8002800:	40021800 	.word	0x40021800
 8002804:	40021c00 	.word	0x40021c00
 8002808:	40013c00 	.word	0x40013c00

0800280c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	807b      	strh	r3, [r7, #2]
 8002818:	4613      	mov	r3, r2
 800281a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800281c:	787b      	ldrb	r3, [r7, #1]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002822:	887a      	ldrh	r2, [r7, #2]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002828:	e003      	b.n	8002832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800282a:	887b      	ldrh	r3, [r7, #2]
 800282c:	041a      	lsls	r2, r3, #16
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	619a      	str	r2, [r3, #24]
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800283e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002840:	b08f      	sub	sp, #60	; 0x3c
 8002842:	af0a      	add	r7, sp, #40	; 0x28
 8002844:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e054      	b.n	80028fa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f007 f82a 	bl	80098c4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2203      	movs	r2, #3
 8002874:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f004 f858 	bl	8006944 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	603b      	str	r3, [r7, #0]
 800289a:	687e      	ldr	r6, [r7, #4]
 800289c:	466d      	mov	r5, sp
 800289e:	f106 0410 	add.w	r4, r6, #16
 80028a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80028b2:	1d33      	adds	r3, r6, #4
 80028b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028b6:	6838      	ldr	r0, [r7, #0]
 80028b8:	f003 ffd2 	bl	8006860 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2101      	movs	r1, #1
 80028c2:	4618      	mov	r0, r3
 80028c4:	f004 f84f 	bl	8006966 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	687e      	ldr	r6, [r7, #4]
 80028d0:	466d      	mov	r5, sp
 80028d2:	f106 0410 	add.w	r4, r6, #16
 80028d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80028e6:	1d33      	adds	r3, r6, #4
 80028e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ea:	6838      	ldr	r0, [r7, #0]
 80028ec:	f004 f9d8 	bl	8006ca0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002902 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002902:	b590      	push	{r4, r7, lr}
 8002904:	b089      	sub	sp, #36	; 0x24
 8002906:	af04      	add	r7, sp, #16
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	4608      	mov	r0, r1
 800290c:	4611      	mov	r1, r2
 800290e:	461a      	mov	r2, r3
 8002910:	4603      	mov	r3, r0
 8002912:	70fb      	strb	r3, [r7, #3]
 8002914:	460b      	mov	r3, r1
 8002916:	70bb      	strb	r3, [r7, #2]
 8002918:	4613      	mov	r3, r2
 800291a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_HCD_HC_Init+0x28>
 8002926:	2302      	movs	r3, #2
 8002928:	e076      	b.n	8002a18 <HAL_HCD_HC_Init+0x116>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002932:	78fb      	ldrb	r3, [r7, #3]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	212c      	movs	r1, #44	; 0x2c
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	333d      	adds	r3, #61	; 0x3d
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	212c      	movs	r1, #44	; 0x2c
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	4413      	add	r3, r2
 8002950:	3338      	adds	r3, #56	; 0x38
 8002952:	787a      	ldrb	r2, [r7, #1]
 8002954:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002956:	78fb      	ldrb	r3, [r7, #3]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	212c      	movs	r1, #44	; 0x2c
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	3340      	adds	r3, #64	; 0x40
 8002964:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002966:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	3339      	adds	r3, #57	; 0x39
 8002976:	78fa      	ldrb	r2, [r7, #3]
 8002978:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	212c      	movs	r1, #44	; 0x2c
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	4413      	add	r3, r2
 8002986:	333f      	adds	r3, #63	; 0x3f
 8002988:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800298c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	78ba      	ldrb	r2, [r7, #2]
 8002992:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002996:	b2d0      	uxtb	r0, r2
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	333a      	adds	r3, #58	; 0x3a
 80029a4:	4602      	mov	r2, r0
 80029a6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80029a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	da09      	bge.n	80029c4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	333b      	adds	r3, #59	; 0x3b
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	e008      	b.n	80029d6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80029c4:	78fb      	ldrb	r3, [r7, #3]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	333b      	adds	r3, #59	; 0x3b
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	333c      	adds	r3, #60	; 0x3c
 80029e4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80029e8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	787c      	ldrb	r4, [r7, #1]
 80029f0:	78ba      	ldrb	r2, [r7, #2]
 80029f2:	78f9      	ldrb	r1, [r7, #3]
 80029f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80029f6:	9302      	str	r3, [sp, #8]
 80029f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	4623      	mov	r3, r4
 8002a06:	f004 fad1 	bl	8006fac <USB_HC_Init>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd90      	pop	{r4, r7, pc}

08002a20 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_HCD_HC_Halt+0x1e>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e00f      	b.n	8002a5e <HAL_HCD_HC_Halt+0x3e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f004 fd21 	bl	8007496 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	4608      	mov	r0, r1
 8002a72:	4611      	mov	r1, r2
 8002a74:	461a      	mov	r2, r3
 8002a76:	4603      	mov	r3, r0
 8002a78:	70fb      	strb	r3, [r7, #3]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	70bb      	strb	r3, [r7, #2]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	212c      	movs	r1, #44	; 0x2c
 8002a88:	fb01 f303 	mul.w	r3, r1, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	333b      	adds	r3, #59	; 0x3b
 8002a90:	78ba      	ldrb	r2, [r7, #2]
 8002a92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	333f      	adds	r3, #63	; 0x3f
 8002aa2:	787a      	ldrb	r2, [r7, #1]
 8002aa4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002aa6:	7c3b      	ldrb	r3, [r7, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d112      	bne.n	8002ad2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3342      	adds	r3, #66	; 0x42
 8002aba:	2203      	movs	r2, #3
 8002abc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	333d      	adds	r3, #61	; 0x3d
 8002acc:	7f3a      	ldrb	r2, [r7, #28]
 8002ace:	701a      	strb	r2, [r3, #0]
 8002ad0:	e008      	b.n	8002ae4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	3342      	adds	r3, #66	; 0x42
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002ae4:	787b      	ldrb	r3, [r7, #1]
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	f200 80c6 	bhi.w	8002c78 <HAL_HCD_HC_SubmitRequest+0x210>
 8002aec:	a201      	add	r2, pc, #4	; (adr r2, 8002af4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af2:	bf00      	nop
 8002af4:	08002b05 	.word	0x08002b05
 8002af8:	08002c65 	.word	0x08002c65
 8002afc:	08002b69 	.word	0x08002b69
 8002b00:	08002be7 	.word	0x08002be7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002b04:	7c3b      	ldrb	r3, [r7, #16]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	f040 80b8 	bne.w	8002c7c <HAL_HCD_HC_SubmitRequest+0x214>
 8002b0c:	78bb      	ldrb	r3, [r7, #2]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 80b4 	bne.w	8002c7c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002b14:	8b3b      	ldrh	r3, [r7, #24]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d108      	bne.n	8002b2c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	3355      	adds	r3, #85	; 0x55
 8002b28:	2201      	movs	r2, #1
 8002b2a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	212c      	movs	r1, #44	; 0x2c
 8002b32:	fb01 f303 	mul.w	r3, r1, r3
 8002b36:	4413      	add	r3, r2
 8002b38:	3355      	adds	r3, #85	; 0x55
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d109      	bne.n	8002b54 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	212c      	movs	r1, #44	; 0x2c
 8002b46:	fb01 f303 	mul.w	r3, r1, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3342      	adds	r3, #66	; 0x42
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002b52:	e093      	b.n	8002c7c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	212c      	movs	r1, #44	; 0x2c
 8002b5a:	fb01 f303 	mul.w	r3, r1, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	3342      	adds	r3, #66	; 0x42
 8002b62:	2202      	movs	r2, #2
 8002b64:	701a      	strb	r2, [r3, #0]
      break;
 8002b66:	e089      	b.n	8002c7c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002b68:	78bb      	ldrb	r3, [r7, #2]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d11d      	bne.n	8002baa <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b6e:	78fb      	ldrb	r3, [r7, #3]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	212c      	movs	r1, #44	; 0x2c
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	3355      	adds	r3, #85	; 0x55
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d109      	bne.n	8002b96 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3342      	adds	r3, #66	; 0x42
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002b94:	e073      	b.n	8002c7e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	212c      	movs	r1, #44	; 0x2c
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3342      	adds	r3, #66	; 0x42
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	701a      	strb	r2, [r3, #0]
      break;
 8002ba8:	e069      	b.n	8002c7e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3354      	adds	r3, #84	; 0x54
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d109      	bne.n	8002bd2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bbe:	78fb      	ldrb	r3, [r7, #3]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3342      	adds	r3, #66	; 0x42
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
      break;
 8002bd0:	e055      	b.n	8002c7e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	212c      	movs	r1, #44	; 0x2c
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	3342      	adds	r3, #66	; 0x42
 8002be0:	2202      	movs	r2, #2
 8002be2:	701a      	strb	r2, [r3, #0]
      break;
 8002be4:	e04b      	b.n	8002c7e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002be6:	78bb      	ldrb	r3, [r7, #2]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d11d      	bne.n	8002c28 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	212c      	movs	r1, #44	; 0x2c
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3355      	adds	r3, #85	; 0x55
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d109      	bne.n	8002c14 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c00:	78fb      	ldrb	r3, [r7, #3]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	212c      	movs	r1, #44	; 0x2c
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3342      	adds	r3, #66	; 0x42
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c12:	e034      	b.n	8002c7e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	212c      	movs	r1, #44	; 0x2c
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	3342      	adds	r3, #66	; 0x42
 8002c22:	2202      	movs	r2, #2
 8002c24:	701a      	strb	r2, [r3, #0]
      break;
 8002c26:	e02a      	b.n	8002c7e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	212c      	movs	r1, #44	; 0x2c
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	3354      	adds	r3, #84	; 0x54
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d109      	bne.n	8002c50 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	212c      	movs	r1, #44	; 0x2c
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	3342      	adds	r3, #66	; 0x42
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
      break;
 8002c4e:	e016      	b.n	8002c7e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	212c      	movs	r1, #44	; 0x2c
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3342      	adds	r3, #66	; 0x42
 8002c5e:	2202      	movs	r2, #2
 8002c60:	701a      	strb	r2, [r3, #0]
      break;
 8002c62:	e00c      	b.n	8002c7e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	3342      	adds	r3, #66	; 0x42
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]
      break;
 8002c76:	e002      	b.n	8002c7e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002c78:	bf00      	nop
 8002c7a:	e000      	b.n	8002c7e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002c7c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002c7e:	78fb      	ldrb	r3, [r7, #3]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	212c      	movs	r1, #44	; 0x2c
 8002c84:	fb01 f303 	mul.w	r3, r1, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	3344      	adds	r3, #68	; 0x44
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	8b3a      	ldrh	r2, [r7, #24]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	202c      	movs	r0, #44	; 0x2c
 8002c98:	fb00 f303 	mul.w	r3, r0, r3
 8002c9c:	440b      	add	r3, r1
 8002c9e:	334c      	adds	r3, #76	; 0x4c
 8002ca0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	212c      	movs	r1, #44	; 0x2c
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	4413      	add	r3, r2
 8002cae:	3360      	adds	r3, #96	; 0x60
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	212c      	movs	r1, #44	; 0x2c
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3350      	adds	r3, #80	; 0x50
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3339      	adds	r3, #57	; 0x39
 8002cd4:	78fa      	ldrb	r2, [r7, #3]
 8002cd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	212c      	movs	r1, #44	; 0x2c
 8002cde:	fb01 f303 	mul.w	r3, r1, r3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3361      	adds	r3, #97	; 0x61
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	222c      	movs	r2, #44	; 0x2c
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
 8002cf6:	3338      	adds	r3, #56	; 0x38
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	18d1      	adds	r1, r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	461a      	mov	r2, r3
 8002d04:	f004 fa74 	bl	80071f0 <USB_HC_StartXfer>
 8002d08:	4603      	mov	r3, r0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop

08002d14 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f003 ff75 	bl	8006c1a <USB_GetMode>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	f040 80f6 	bne.w	8002f24 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 ff59 	bl	8006bf4 <USB_ReadInterrupts>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80ec 	beq.w	8002f22 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 ff50 	bl	8006bf4 <USB_ReadInterrupts>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d5e:	d104      	bne.n	8002d6a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002d68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f003 ff40 	bl	8006bf4 <USB_ReadInterrupts>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d7e:	d104      	bne.n	8002d8a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f003 ff30 	bl	8006bf4 <USB_ReadInterrupts>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d9e:	d104      	bne.n	8002daa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002da8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f003 ff20 	bl	8006bf4 <USB_ReadInterrupts>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d103      	bne.n	8002dc6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f003 ff12 	bl	8006bf4 <USB_ReadInterrupts>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dda:	d11c      	bne.n	8002e16 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002de4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10f      	bne.n	8002e16 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002df6:	2110      	movs	r1, #16
 8002df8:	6938      	ldr	r0, [r7, #16]
 8002dfa:	f003 fe01 	bl	8006a00 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002dfe:	6938      	ldr	r0, [r7, #16]
 8002e00:	f003 fe32 	bl	8006a68 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2101      	movs	r1, #1
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f004 f808 	bl	8006e20 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f006 fdd5 	bl	80099c0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 feea 	bl	8006bf4 <USB_ReadInterrupts>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e2a:	d102      	bne.n	8002e32 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f001 f89e 	bl	8003f6e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f003 fedc 	bl	8006bf4 <USB_ReadInterrupts>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d106      	bne.n	8002e54 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f006 fd9e 	bl	8009988 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2208      	movs	r2, #8
 8002e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f003 fecb 	bl	8006bf4 <USB_ReadInterrupts>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d101      	bne.n	8002e6c <HAL_HCD_IRQHandler+0x158>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <HAL_HCD_IRQHandler+0x15a>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d012      	beq.n	8002e98 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699a      	ldr	r2, [r3, #24]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0210 	bic.w	r2, r2, #16
 8002e80:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 ffa1 	bl	8003dca <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0210 	orr.w	r2, r2, #16
 8002e96:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f003 fea9 	bl	8006bf4 <USB_ReadInterrupts>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eac:	d13a      	bne.n	8002f24 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f004 fade 	bl	8007474 <USB_HC_ReadInterrupt>
 8002eb8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	e025      	b.n	8002f0c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d018      	beq.n	8002f06 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eea:	d106      	bne.n	8002efa <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f8ab 	bl	800304e <HCD_HC_IN_IRQHandler>
 8002ef8:	e005      	b.n	8002f06 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	4619      	mov	r1, r3
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fbf9 	bl	80036f8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d3d4      	bcc.n	8002ec0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f1e:	615a      	str	r2, [r3, #20]
 8002f20:	e000      	b.n	8002f24 <HAL_HCD_IRQHandler+0x210>
      return;
 8002f22:	bf00      	nop
    }
  }
}
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_HCD_Start+0x16>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e013      	b.n	8002f68 <HAL_HCD_Start+0x3e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f003 ffca 	bl	8006ee8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f003 fce2 	bl	8006922 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_HCD_Stop+0x16>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e00d      	b.n	8002fa2 <HAL_HCD_Stop+0x32>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f004 fbb8 	bl	8007708 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f003 ff6c 	bl	8006e94 <USB_ResetPort>
 8002fbc:	4603      	mov	r3, r0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	212c      	movs	r1, #44	; 0x2c
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	3360      	adds	r3, #96	; 0x60
 8002fe0:	781b      	ldrb	r3, [r3, #0]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	3350      	adds	r3, #80	; 0x50
 8003008:	681b      	ldr	r3, [r3, #0]
}
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f003 ffb0 	bl	8006f88 <USB_GetCurrentFrame>
 8003028:	4603      	mov	r3, r0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f003 ff8b 	bl	8006f5a <USB_GetHostSpeed>
 8003044:	4603      	mov	r3, r0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b086      	sub	sp, #24
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	460b      	mov	r3, r1
 8003058:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b04      	cmp	r3, #4
 800307c:	d11a      	bne.n	80030b4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4413      	add	r3, r2
 8003086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308a:	461a      	mov	r2, r3
 800308c:	2304      	movs	r3, #4
 800308e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	212c      	movs	r1, #44	; 0x2c
 8003096:	fb01 f303 	mul.w	r3, r1, r3
 800309a:	4413      	add	r3, r2
 800309c:	3361      	adds	r3, #97	; 0x61
 800309e:	2206      	movs	r2, #6
 80030a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f004 f9f2 	bl	8007496 <USB_HC_Halt>
 80030b2:	e0af      	b.n	8003214 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ca:	d11b      	bne.n	8003104 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d8:	461a      	mov	r2, r3
 80030da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	212c      	movs	r1, #44	; 0x2c
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	3361      	adds	r3, #97	; 0x61
 80030ee:	2207      	movs	r2, #7
 80030f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f004 f9ca 	bl	8007496 <USB_HC_Halt>
 8003102:	e087      	b.n	8003214 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4413      	add	r3, r2
 800310c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b20      	cmp	r3, #32
 8003118:	d109      	bne.n	800312e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4413      	add	r3, r2
 8003122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003126:	461a      	mov	r2, r3
 8003128:	2320      	movs	r3, #32
 800312a:	6093      	str	r3, [r2, #8]
 800312c:	e072      	b.n	8003214 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4413      	add	r3, r2
 8003136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b08      	cmp	r3, #8
 8003142:	d11a      	bne.n	800317a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4413      	add	r3, r2
 800314c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003150:	461a      	mov	r2, r3
 8003152:	2308      	movs	r3, #8
 8003154:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	212c      	movs	r1, #44	; 0x2c
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	3361      	adds	r3, #97	; 0x61
 8003164:	2205      	movs	r2, #5
 8003166:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f004 f98f 	bl	8007496 <USB_HC_Halt>
 8003178:	e04c      	b.n	8003214 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4413      	add	r3, r2
 8003182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003190:	d11b      	bne.n	80031ca <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4413      	add	r3, r2
 800319a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319e:	461a      	mov	r2, r3
 80031a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	212c      	movs	r1, #44	; 0x2c
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	4413      	add	r3, r2
 80031b2:	3361      	adds	r3, #97	; 0x61
 80031b4:	2208      	movs	r2, #8
 80031b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	4611      	mov	r1, r2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f004 f967 	bl	8007496 <USB_HC_Halt>
 80031c8:	e024      	b.n	8003214 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031dc:	2b80      	cmp	r3, #128	; 0x80
 80031de:	d119      	bne.n	8003214 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ec:	461a      	mov	r2, r3
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	3361      	adds	r3, #97	; 0x61
 8003200:	2206      	movs	r2, #6
 8003202:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	4611      	mov	r1, r2
 800320e:	4618      	mov	r0, r3
 8003210:	f004 f941 	bl	8007496 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4413      	add	r3, r2
 800321c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800322a:	d112      	bne.n	8003252 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	4611      	mov	r1, r2
 8003236:	4618      	mov	r0, r3
 8003238:	f004 f92d 	bl	8007496 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4413      	add	r3, r2
 8003244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003248:	461a      	mov	r2, r3
 800324a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800324e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003250:	e24e      	b.n	80036f0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4413      	add	r3, r2
 800325a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b01      	cmp	r3, #1
 8003266:	f040 80df 	bne.w	8003428 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d019      	beq.n	80032a6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	212c      	movs	r1, #44	; 0x2c
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	4413      	add	r3, r2
 800327e:	3348      	adds	r3, #72	; 0x48
 8003280:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	0159      	lsls	r1, r3, #5
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	440b      	add	r3, r1
 800328a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003294:	1ad2      	subs	r2, r2, r3
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	202c      	movs	r0, #44	; 0x2c
 800329c:	fb00 f303 	mul.w	r3, r0, r3
 80032a0:	440b      	add	r3, r1
 80032a2:	3350      	adds	r3, #80	; 0x50
 80032a4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	212c      	movs	r1, #44	; 0x2c
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	4413      	add	r3, r2
 80032b2:	3361      	adds	r3, #97	; 0x61
 80032b4:	2201      	movs	r2, #1
 80032b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	212c      	movs	r1, #44	; 0x2c
 80032be:	fb01 f303 	mul.w	r3, r1, r3
 80032c2:	4413      	add	r3, r2
 80032c4:	335c      	adds	r3, #92	; 0x5c
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d6:	461a      	mov	r2, r3
 80032d8:	2301      	movs	r3, #1
 80032da:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	212c      	movs	r1, #44	; 0x2c
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	333f      	adds	r3, #63	; 0x3f
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d009      	beq.n	8003304 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	212c      	movs	r1, #44	; 0x2c
 80032f6:	fb01 f303 	mul.w	r3, r1, r3
 80032fa:	4413      	add	r3, r2
 80032fc:	333f      	adds	r3, #63	; 0x3f
 80032fe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003300:	2b02      	cmp	r3, #2
 8003302:	d111      	bne.n	8003328 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	4611      	mov	r1, r2
 800330e:	4618      	mov	r0, r3
 8003310:	f004 f8c1 	bl	8007496 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4413      	add	r3, r2
 800331c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003320:	461a      	mov	r2, r3
 8003322:	2310      	movs	r3, #16
 8003324:	6093      	str	r3, [r2, #8]
 8003326:	e03a      	b.n	800339e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	212c      	movs	r1, #44	; 0x2c
 800332e:	fb01 f303 	mul.w	r3, r1, r3
 8003332:	4413      	add	r3, r2
 8003334:	333f      	adds	r3, #63	; 0x3f
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d009      	beq.n	8003350 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	212c      	movs	r1, #44	; 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	333f      	adds	r3, #63	; 0x3f
 800334a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800334c:	2b01      	cmp	r3, #1
 800334e:	d126      	bne.n	800339e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	0151      	lsls	r1, r2, #5
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	440a      	add	r2, r1
 8003366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800336a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800336e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	212c      	movs	r1, #44	; 0x2c
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	4413      	add	r3, r2
 800337c:	3360      	adds	r3, #96	; 0x60
 800337e:	2201      	movs	r2, #1
 8003380:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	b2d9      	uxtb	r1, r3
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	202c      	movs	r0, #44	; 0x2c
 800338c:	fb00 f303 	mul.w	r3, r0, r3
 8003390:	4413      	add	r3, r2
 8003392:	3360      	adds	r3, #96	; 0x60
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f006 fb1f 	bl	80099dc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d12b      	bne.n	80033fe <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	212c      	movs	r1, #44	; 0x2c
 80033ac:	fb01 f303 	mul.w	r3, r1, r3
 80033b0:	4413      	add	r3, r2
 80033b2:	3348      	adds	r3, #72	; 0x48
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	202c      	movs	r0, #44	; 0x2c
 80033bc:	fb00 f202 	mul.w	r2, r0, r2
 80033c0:	440a      	add	r2, r1
 80033c2:	3240      	adds	r2, #64	; 0x40
 80033c4:	8812      	ldrh	r2, [r2, #0]
 80033c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 818e 	beq.w	80036f0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	3354      	adds	r3, #84	; 0x54
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	f083 0301 	eor.w	r3, r3, #1
 80033e8:	b2d8      	uxtb	r0, r3
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	212c      	movs	r1, #44	; 0x2c
 80033f0:	fb01 f303 	mul.w	r3, r1, r3
 80033f4:	4413      	add	r3, r2
 80033f6:	3354      	adds	r3, #84	; 0x54
 80033f8:	4602      	mov	r2, r0
 80033fa:	701a      	strb	r2, [r3, #0]
}
 80033fc:	e178      	b.n	80036f0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	212c      	movs	r1, #44	; 0x2c
 8003404:	fb01 f303 	mul.w	r3, r1, r3
 8003408:	4413      	add	r3, r2
 800340a:	3354      	adds	r3, #84	; 0x54
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	f083 0301 	eor.w	r3, r3, #1
 8003412:	b2d8      	uxtb	r0, r3
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	212c      	movs	r1, #44	; 0x2c
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	3354      	adds	r3, #84	; 0x54
 8003422:	4602      	mov	r2, r0
 8003424:	701a      	strb	r2, [r3, #0]
}
 8003426:	e163      	b.n	80036f0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4413      	add	r3, r2
 8003430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b02      	cmp	r3, #2
 800343c:	f040 80f6 	bne.w	800362c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	212c      	movs	r1, #44	; 0x2c
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	4413      	add	r3, r2
 800344c:	3361      	adds	r3, #97	; 0x61
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d109      	bne.n	8003468 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	212c      	movs	r1, #44	; 0x2c
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	4413      	add	r3, r2
 8003460:	3360      	adds	r3, #96	; 0x60
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
 8003466:	e0c9      	b.n	80035fc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	212c      	movs	r1, #44	; 0x2c
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	4413      	add	r3, r2
 8003474:	3361      	adds	r3, #97	; 0x61
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b05      	cmp	r3, #5
 800347a:	d109      	bne.n	8003490 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	212c      	movs	r1, #44	; 0x2c
 8003482:	fb01 f303 	mul.w	r3, r1, r3
 8003486:	4413      	add	r3, r2
 8003488:	3360      	adds	r3, #96	; 0x60
 800348a:	2205      	movs	r2, #5
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	e0b5      	b.n	80035fc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	212c      	movs	r1, #44	; 0x2c
 8003496:	fb01 f303 	mul.w	r3, r1, r3
 800349a:	4413      	add	r3, r2
 800349c:	3361      	adds	r3, #97	; 0x61
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b06      	cmp	r3, #6
 80034a2:	d009      	beq.n	80034b8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	212c      	movs	r1, #44	; 0x2c
 80034aa:	fb01 f303 	mul.w	r3, r1, r3
 80034ae:	4413      	add	r3, r2
 80034b0:	3361      	adds	r3, #97	; 0x61
 80034b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d150      	bne.n	800355a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	212c      	movs	r1, #44	; 0x2c
 80034be:	fb01 f303 	mul.w	r3, r1, r3
 80034c2:	4413      	add	r3, r2
 80034c4:	335c      	adds	r3, #92	; 0x5c
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	202c      	movs	r0, #44	; 0x2c
 80034d0:	fb00 f303 	mul.w	r3, r0, r3
 80034d4:	440b      	add	r3, r1
 80034d6:	335c      	adds	r3, #92	; 0x5c
 80034d8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	212c      	movs	r1, #44	; 0x2c
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	4413      	add	r3, r2
 80034e6:	335c      	adds	r3, #92	; 0x5c
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d912      	bls.n	8003514 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	212c      	movs	r1, #44	; 0x2c
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	4413      	add	r3, r2
 80034fa:	335c      	adds	r3, #92	; 0x5c
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	212c      	movs	r1, #44	; 0x2c
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	4413      	add	r3, r2
 800350c:	3360      	adds	r3, #96	; 0x60
 800350e:	2204      	movs	r2, #4
 8003510:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003512:	e073      	b.n	80035fc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	212c      	movs	r1, #44	; 0x2c
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4413      	add	r3, r2
 8003520:	3360      	adds	r3, #96	; 0x60
 8003522:	2202      	movs	r2, #2
 8003524:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4413      	add	r3, r2
 800352e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800353c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003544:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4413      	add	r3, r2
 800354e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003552:	461a      	mov	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003558:	e050      	b.n	80035fc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	212c      	movs	r1, #44	; 0x2c
 8003560:	fb01 f303 	mul.w	r3, r1, r3
 8003564:	4413      	add	r3, r2
 8003566:	3361      	adds	r3, #97	; 0x61
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b03      	cmp	r3, #3
 800356c:	d122      	bne.n	80035b4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	212c      	movs	r1, #44	; 0x2c
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	3360      	adds	r3, #96	; 0x60
 800357c:	2202      	movs	r2, #2
 800357e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4413      	add	r3, r2
 8003588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003596:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800359e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ac:	461a      	mov	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	e023      	b.n	80035fc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	212c      	movs	r1, #44	; 0x2c
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	4413      	add	r3, r2
 80035c0:	3361      	adds	r3, #97	; 0x61
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b07      	cmp	r3, #7
 80035c6:	d119      	bne.n	80035fc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	212c      	movs	r1, #44	; 0x2c
 80035ce:	fb01 f303 	mul.w	r3, r1, r3
 80035d2:	4413      	add	r3, r2
 80035d4:	335c      	adds	r3, #92	; 0x5c
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	202c      	movs	r0, #44	; 0x2c
 80035e0:	fb00 f303 	mul.w	r3, r0, r3
 80035e4:	440b      	add	r3, r1
 80035e6:	335c      	adds	r3, #92	; 0x5c
 80035e8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	212c      	movs	r1, #44	; 0x2c
 80035f0:	fb01 f303 	mul.w	r3, r1, r3
 80035f4:	4413      	add	r3, r2
 80035f6:	3360      	adds	r3, #96	; 0x60
 80035f8:	2204      	movs	r2, #4
 80035fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4413      	add	r3, r2
 8003604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003608:	461a      	mov	r2, r3
 800360a:	2302      	movs	r3, #2
 800360c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	b2d9      	uxtb	r1, r3
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	202c      	movs	r0, #44	; 0x2c
 8003618:	fb00 f303 	mul.w	r3, r0, r3
 800361c:	4413      	add	r3, r2
 800361e:	3360      	adds	r3, #96	; 0x60
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f006 f9d9 	bl	80099dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800362a:	e061      	b.n	80036f0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4413      	add	r3, r2
 8003634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	2b10      	cmp	r3, #16
 8003640:	d156      	bne.n	80036f0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	212c      	movs	r1, #44	; 0x2c
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	4413      	add	r3, r2
 800364e:	333f      	adds	r3, #63	; 0x3f
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	2b03      	cmp	r3, #3
 8003654:	d111      	bne.n	800367a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	212c      	movs	r1, #44	; 0x2c
 800365c:	fb01 f303 	mul.w	r3, r1, r3
 8003660:	4413      	add	r3, r2
 8003662:	335c      	adds	r3, #92	; 0x5c
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	4611      	mov	r1, r2
 8003672:	4618      	mov	r0, r3
 8003674:	f003 ff0f 	bl	8007496 <USB_HC_Halt>
 8003678:	e031      	b.n	80036de <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	212c      	movs	r1, #44	; 0x2c
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	4413      	add	r3, r2
 8003686:	333f      	adds	r3, #63	; 0x3f
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d009      	beq.n	80036a2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	212c      	movs	r1, #44	; 0x2c
 8003694:	fb01 f303 	mul.w	r3, r1, r3
 8003698:	4413      	add	r3, r2
 800369a:	333f      	adds	r3, #63	; 0x3f
 800369c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d11d      	bne.n	80036de <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	212c      	movs	r1, #44	; 0x2c
 80036a8:	fb01 f303 	mul.w	r3, r1, r3
 80036ac:	4413      	add	r3, r2
 80036ae:	335c      	adds	r3, #92	; 0x5c
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d110      	bne.n	80036de <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	212c      	movs	r1, #44	; 0x2c
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	3361      	adds	r3, #97	; 0x61
 80036ca:	2203      	movs	r2, #3
 80036cc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	4611      	mov	r1, r2
 80036d8:	4618      	mov	r0, r3
 80036da:	f003 fedc 	bl	8007496 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	015a      	lsls	r2, r3, #5
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ea:	461a      	mov	r2, r3
 80036ec:	2310      	movs	r3, #16
 80036ee:	6093      	str	r3, [r2, #8]
}
 80036f0:	bf00      	nop
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800370e:	78fb      	ldrb	r3, [r7, #3]
 8003710:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	4413      	add	r3, r2
 800371a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b04      	cmp	r3, #4
 8003726:	d11a      	bne.n	800375e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	4413      	add	r3, r2
 8003730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003734:	461a      	mov	r2, r3
 8003736:	2304      	movs	r3, #4
 8003738:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	212c      	movs	r1, #44	; 0x2c
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	4413      	add	r3, r2
 8003746:	3361      	adds	r3, #97	; 0x61
 8003748:	2206      	movs	r2, #6
 800374a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	4611      	mov	r1, r2
 8003756:	4618      	mov	r0, r3
 8003758:	f003 fe9d 	bl	8007496 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800375c:	e331      	b.n	8003dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	4413      	add	r3, r2
 8003766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b20      	cmp	r3, #32
 8003772:	d12e      	bne.n	80037d2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	4413      	add	r3, r2
 800377c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003780:	461a      	mov	r2, r3
 8003782:	2320      	movs	r3, #32
 8003784:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	212c      	movs	r1, #44	; 0x2c
 800378c:	fb01 f303 	mul.w	r3, r1, r3
 8003790:	4413      	add	r3, r2
 8003792:	333d      	adds	r3, #61	; 0x3d
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b01      	cmp	r3, #1
 8003798:	f040 8313 	bne.w	8003dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	212c      	movs	r1, #44	; 0x2c
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	4413      	add	r3, r2
 80037a8:	333d      	adds	r3, #61	; 0x3d
 80037aa:	2200      	movs	r2, #0
 80037ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	212c      	movs	r1, #44	; 0x2c
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	4413      	add	r3, r2
 80037ba:	3360      	adds	r3, #96	; 0x60
 80037bc:	2202      	movs	r2, #2
 80037be:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	4611      	mov	r1, r2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f003 fe63 	bl	8007496 <USB_HC_Halt>
}
 80037d0:	e2f7      	b.n	8003dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e8:	d112      	bne.n	8003810 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f6:	461a      	mov	r2, r3
 80037f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037fc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	4611      	mov	r1, r2
 8003808:	4618      	mov	r0, r3
 800380a:	f003 fe44 	bl	8007496 <USB_HC_Halt>
}
 800380e:	e2d8      	b.n	8003dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	4413      	add	r3, r2
 8003818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b01      	cmp	r3, #1
 8003824:	d140      	bne.n	80038a8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	212c      	movs	r1, #44	; 0x2c
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	4413      	add	r3, r2
 8003832:	335c      	adds	r3, #92	; 0x5c
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	4413      	add	r3, r2
 8003840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384a:	2b40      	cmp	r3, #64	; 0x40
 800384c:	d111      	bne.n	8003872 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	212c      	movs	r1, #44	; 0x2c
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	4413      	add	r3, r2
 800385a:	333d      	adds	r3, #61	; 0x3d
 800385c:	2201      	movs	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	4413      	add	r3, r2
 8003868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800386c:	461a      	mov	r2, r3
 800386e:	2340      	movs	r3, #64	; 0x40
 8003870:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	4413      	add	r3, r2
 800387a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387e:	461a      	mov	r2, r3
 8003880:	2301      	movs	r3, #1
 8003882:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	212c      	movs	r1, #44	; 0x2c
 800388a:	fb01 f303 	mul.w	r3, r1, r3
 800388e:	4413      	add	r3, r2
 8003890:	3361      	adds	r3, #97	; 0x61
 8003892:	2201      	movs	r2, #1
 8003894:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	4611      	mov	r1, r2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f003 fdf8 	bl	8007496 <USB_HC_Halt>
}
 80038a6:	e28c      	b.n	8003dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b40      	cmp	r3, #64	; 0x40
 80038bc:	d12c      	bne.n	8003918 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	212c      	movs	r1, #44	; 0x2c
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	3361      	adds	r3, #97	; 0x61
 80038cc:	2204      	movs	r2, #4
 80038ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	212c      	movs	r1, #44	; 0x2c
 80038d6:	fb01 f303 	mul.w	r3, r1, r3
 80038da:	4413      	add	r3, r2
 80038dc:	333d      	adds	r3, #61	; 0x3d
 80038de:	2201      	movs	r2, #1
 80038e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	212c      	movs	r1, #44	; 0x2c
 80038e8:	fb01 f303 	mul.w	r3, r1, r3
 80038ec:	4413      	add	r3, r2
 80038ee:	335c      	adds	r3, #92	; 0x5c
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	4611      	mov	r1, r2
 80038fe:	4618      	mov	r0, r3
 8003900:	f003 fdc9 	bl	8007496 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	4413      	add	r3, r2
 800390c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003910:	461a      	mov	r2, r3
 8003912:	2340      	movs	r3, #64	; 0x40
 8003914:	6093      	str	r3, [r2, #8]
}
 8003916:	e254      	b.n	8003dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	4413      	add	r3, r2
 8003920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b08      	cmp	r3, #8
 800392c:	d11a      	bne.n	8003964 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	4413      	add	r3, r2
 8003936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800393a:	461a      	mov	r2, r3
 800393c:	2308      	movs	r3, #8
 800393e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	212c      	movs	r1, #44	; 0x2c
 8003946:	fb01 f303 	mul.w	r3, r1, r3
 800394a:	4413      	add	r3, r2
 800394c:	3361      	adds	r3, #97	; 0x61
 800394e:	2205      	movs	r2, #5
 8003950:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	4611      	mov	r1, r2
 800395c:	4618      	mov	r0, r3
 800395e:	f003 fd9a 	bl	8007496 <USB_HC_Halt>
}
 8003962:	e22e      	b.n	8003dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	4413      	add	r3, r2
 800396c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 0310 	and.w	r3, r3, #16
 8003976:	2b10      	cmp	r3, #16
 8003978:	d140      	bne.n	80039fc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	212c      	movs	r1, #44	; 0x2c
 8003980:	fb01 f303 	mul.w	r3, r1, r3
 8003984:	4413      	add	r3, r2
 8003986:	335c      	adds	r3, #92	; 0x5c
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	212c      	movs	r1, #44	; 0x2c
 8003992:	fb01 f303 	mul.w	r3, r1, r3
 8003996:	4413      	add	r3, r2
 8003998:	3361      	adds	r3, #97	; 0x61
 800399a:	2203      	movs	r2, #3
 800399c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	212c      	movs	r1, #44	; 0x2c
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	4413      	add	r3, r2
 80039aa:	333d      	adds	r3, #61	; 0x3d
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d112      	bne.n	80039d8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	212c      	movs	r1, #44	; 0x2c
 80039b8:	fb01 f303 	mul.w	r3, r1, r3
 80039bc:	4413      	add	r3, r2
 80039be:	333c      	adds	r3, #60	; 0x3c
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d108      	bne.n	80039d8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	212c      	movs	r1, #44	; 0x2c
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	4413      	add	r3, r2
 80039d2:	333d      	adds	r3, #61	; 0x3d
 80039d4:	2201      	movs	r2, #1
 80039d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	4611      	mov	r1, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f003 fd57 	bl	8007496 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f4:	461a      	mov	r2, r3
 80039f6:	2310      	movs	r3, #16
 80039f8:	6093      	str	r3, [r2, #8]
}
 80039fa:	e1e2      	b.n	8003dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0e:	2b80      	cmp	r3, #128	; 0x80
 8003a10:	d164      	bne.n	8003adc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d111      	bne.n	8003a3e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	212c      	movs	r1, #44	; 0x2c
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	4413      	add	r3, r2
 8003a26:	3361      	adds	r3, #97	; 0x61
 8003a28:	2206      	movs	r2, #6
 8003a2a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f003 fd2d 	bl	8007496 <USB_HC_Halt>
 8003a3c:	e044      	b.n	8003ac8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	212c      	movs	r1, #44	; 0x2c
 8003a44:	fb01 f303 	mul.w	r3, r1, r3
 8003a48:	4413      	add	r3, r2
 8003a4a:	335c      	adds	r3, #92	; 0x5c
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	202c      	movs	r0, #44	; 0x2c
 8003a56:	fb00 f303 	mul.w	r3, r0, r3
 8003a5a:	440b      	add	r3, r1
 8003a5c:	335c      	adds	r3, #92	; 0x5c
 8003a5e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	212c      	movs	r1, #44	; 0x2c
 8003a66:	fb01 f303 	mul.w	r3, r1, r3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	335c      	adds	r3, #92	; 0x5c
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d920      	bls.n	8003ab6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	212c      	movs	r1, #44	; 0x2c
 8003a7a:	fb01 f303 	mul.w	r3, r1, r3
 8003a7e:	4413      	add	r3, r2
 8003a80:	335c      	adds	r3, #92	; 0x5c
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	212c      	movs	r1, #44	; 0x2c
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	3360      	adds	r3, #96	; 0x60
 8003a94:	2204      	movs	r2, #4
 8003a96:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	b2d9      	uxtb	r1, r3
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	202c      	movs	r0, #44	; 0x2c
 8003aa2:	fb00 f303 	mul.w	r3, r0, r3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	3360      	adds	r3, #96	; 0x60
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	461a      	mov	r2, r3
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f005 ff94 	bl	80099dc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ab4:	e008      	b.n	8003ac8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	212c      	movs	r1, #44	; 0x2c
 8003abc:	fb01 f303 	mul.w	r3, r1, r3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3360      	adds	r3, #96	; 0x60
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	6093      	str	r3, [r2, #8]
}
 8003ada:	e172      	b.n	8003dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af2:	d11b      	bne.n	8003b2c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	212c      	movs	r1, #44	; 0x2c
 8003afa:	fb01 f303 	mul.w	r3, r1, r3
 8003afe:	4413      	add	r3, r2
 8003b00:	3361      	adds	r3, #97	; 0x61
 8003b02:	2208      	movs	r2, #8
 8003b04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	4611      	mov	r1, r2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f003 fcc0 	bl	8007496 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b22:	461a      	mov	r2, r3
 8003b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b28:	6093      	str	r3, [r2, #8]
}
 8003b2a:	e14a      	b.n	8003dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	f040 813f 	bne.w	8003dc2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	212c      	movs	r1, #44	; 0x2c
 8003b4a:	fb01 f303 	mul.w	r3, r1, r3
 8003b4e:	4413      	add	r3, r2
 8003b50:	3361      	adds	r3, #97	; 0x61
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d17d      	bne.n	8003c54 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	212c      	movs	r1, #44	; 0x2c
 8003b5e:	fb01 f303 	mul.w	r3, r1, r3
 8003b62:	4413      	add	r3, r2
 8003b64:	3360      	adds	r3, #96	; 0x60
 8003b66:	2201      	movs	r2, #1
 8003b68:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	212c      	movs	r1, #44	; 0x2c
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	4413      	add	r3, r2
 8003b76:	333f      	adds	r3, #63	; 0x3f
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d00a      	beq.n	8003b94 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	212c      	movs	r1, #44	; 0x2c
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
 8003b88:	4413      	add	r3, r2
 8003b8a:	333f      	adds	r3, #63	; 0x3f
 8003b8c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	f040 8100 	bne.w	8003d94 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d113      	bne.n	8003bc4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	212c      	movs	r1, #44	; 0x2c
 8003ba2:	fb01 f303 	mul.w	r3, r1, r3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3355      	adds	r3, #85	; 0x55
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	f083 0301 	eor.w	r3, r3, #1
 8003bb0:	b2d8      	uxtb	r0, r3
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	212c      	movs	r1, #44	; 0x2c
 8003bb8:	fb01 f303 	mul.w	r3, r1, r3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3355      	adds	r3, #85	; 0x55
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	f040 80e3 	bne.w	8003d94 <HCD_HC_OUT_IRQHandler+0x69c>
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	212c      	movs	r1, #44	; 0x2c
 8003bd4:	fb01 f303 	mul.w	r3, r1, r3
 8003bd8:	4413      	add	r3, r2
 8003bda:	334c      	adds	r3, #76	; 0x4c
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 80d8 	beq.w	8003d94 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	212c      	movs	r1, #44	; 0x2c
 8003bea:	fb01 f303 	mul.w	r3, r1, r3
 8003bee:	4413      	add	r3, r2
 8003bf0:	334c      	adds	r3, #76	; 0x4c
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	202c      	movs	r0, #44	; 0x2c
 8003bfa:	fb00 f202 	mul.w	r2, r0, r2
 8003bfe:	440a      	add	r2, r1
 8003c00:	3240      	adds	r2, #64	; 0x40
 8003c02:	8812      	ldrh	r2, [r2, #0]
 8003c04:	4413      	add	r3, r2
 8003c06:	3b01      	subs	r3, #1
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	202c      	movs	r0, #44	; 0x2c
 8003c0e:	fb00 f202 	mul.w	r2, r0, r2
 8003c12:	440a      	add	r2, r1
 8003c14:	3240      	adds	r2, #64	; 0x40
 8003c16:	8812      	ldrh	r2, [r2, #0]
 8003c18:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80b5 	beq.w	8003d94 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	212c      	movs	r1, #44	; 0x2c
 8003c30:	fb01 f303 	mul.w	r3, r1, r3
 8003c34:	4413      	add	r3, r2
 8003c36:	3355      	adds	r3, #85	; 0x55
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	f083 0301 	eor.w	r3, r3, #1
 8003c3e:	b2d8      	uxtb	r0, r3
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	212c      	movs	r1, #44	; 0x2c
 8003c46:	fb01 f303 	mul.w	r3, r1, r3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	3355      	adds	r3, #85	; 0x55
 8003c4e:	4602      	mov	r2, r0
 8003c50:	701a      	strb	r2, [r3, #0]
 8003c52:	e09f      	b.n	8003d94 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	212c      	movs	r1, #44	; 0x2c
 8003c5a:	fb01 f303 	mul.w	r3, r1, r3
 8003c5e:	4413      	add	r3, r2
 8003c60:	3361      	adds	r3, #97	; 0x61
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d109      	bne.n	8003c7c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	212c      	movs	r1, #44	; 0x2c
 8003c6e:	fb01 f303 	mul.w	r3, r1, r3
 8003c72:	4413      	add	r3, r2
 8003c74:	3360      	adds	r3, #96	; 0x60
 8003c76:	2202      	movs	r2, #2
 8003c78:	701a      	strb	r2, [r3, #0]
 8003c7a:	e08b      	b.n	8003d94 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	212c      	movs	r1, #44	; 0x2c
 8003c82:	fb01 f303 	mul.w	r3, r1, r3
 8003c86:	4413      	add	r3, r2
 8003c88:	3361      	adds	r3, #97	; 0x61
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d109      	bne.n	8003ca4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	212c      	movs	r1, #44	; 0x2c
 8003c96:	fb01 f303 	mul.w	r3, r1, r3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3360      	adds	r3, #96	; 0x60
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	701a      	strb	r2, [r3, #0]
 8003ca2:	e077      	b.n	8003d94 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	212c      	movs	r1, #44	; 0x2c
 8003caa:	fb01 f303 	mul.w	r3, r1, r3
 8003cae:	4413      	add	r3, r2
 8003cb0:	3361      	adds	r3, #97	; 0x61
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b05      	cmp	r3, #5
 8003cb6:	d109      	bne.n	8003ccc <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	212c      	movs	r1, #44	; 0x2c
 8003cbe:	fb01 f303 	mul.w	r3, r1, r3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3360      	adds	r3, #96	; 0x60
 8003cc6:	2205      	movs	r2, #5
 8003cc8:	701a      	strb	r2, [r3, #0]
 8003cca:	e063      	b.n	8003d94 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	212c      	movs	r1, #44	; 0x2c
 8003cd2:	fb01 f303 	mul.w	r3, r1, r3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3361      	adds	r3, #97	; 0x61
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	2b06      	cmp	r3, #6
 8003cde:	d009      	beq.n	8003cf4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	212c      	movs	r1, #44	; 0x2c
 8003ce6:	fb01 f303 	mul.w	r3, r1, r3
 8003cea:	4413      	add	r3, r2
 8003cec:	3361      	adds	r3, #97	; 0x61
 8003cee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d14f      	bne.n	8003d94 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	212c      	movs	r1, #44	; 0x2c
 8003cfa:	fb01 f303 	mul.w	r3, r1, r3
 8003cfe:	4413      	add	r3, r2
 8003d00:	335c      	adds	r3, #92	; 0x5c
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	202c      	movs	r0, #44	; 0x2c
 8003d0c:	fb00 f303 	mul.w	r3, r0, r3
 8003d10:	440b      	add	r3, r1
 8003d12:	335c      	adds	r3, #92	; 0x5c
 8003d14:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	212c      	movs	r1, #44	; 0x2c
 8003d1c:	fb01 f303 	mul.w	r3, r1, r3
 8003d20:	4413      	add	r3, r2
 8003d22:	335c      	adds	r3, #92	; 0x5c
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d912      	bls.n	8003d50 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	212c      	movs	r1, #44	; 0x2c
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	4413      	add	r3, r2
 8003d36:	335c      	adds	r3, #92	; 0x5c
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	212c      	movs	r1, #44	; 0x2c
 8003d42:	fb01 f303 	mul.w	r3, r1, r3
 8003d46:	4413      	add	r3, r2
 8003d48:	3360      	adds	r3, #96	; 0x60
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	e021      	b.n	8003d94 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	212c      	movs	r1, #44	; 0x2c
 8003d56:	fb01 f303 	mul.w	r3, r1, r3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	3360      	adds	r3, #96	; 0x60
 8003d5e:	2202      	movs	r2, #2
 8003d60:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d78:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d80:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8e:	461a      	mov	r2, r3
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da0:	461a      	mov	r2, r3
 8003da2:	2302      	movs	r3, #2
 8003da4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	b2d9      	uxtb	r1, r3
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	202c      	movs	r0, #44	; 0x2c
 8003db0:	fb00 f303 	mul.w	r3, r0, r3
 8003db4:	4413      	add	r3, r2
 8003db6:	3360      	adds	r3, #96	; 0x60
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f005 fe0d 	bl	80099dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003dc2:	bf00      	nop
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b08a      	sub	sp, #40	; 0x28
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	0c5b      	lsrs	r3, r3, #17
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dfe:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d004      	beq.n	8003e10 <HCD_RXQLVL_IRQHandler+0x46>
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b05      	cmp	r3, #5
 8003e0a:	f000 80a9 	beq.w	8003f60 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003e0e:	e0aa      	b.n	8003f66 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 80a6 	beq.w	8003f64 <HCD_RXQLVL_IRQHandler+0x19a>
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	212c      	movs	r1, #44	; 0x2c
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	4413      	add	r3, r2
 8003e24:	3344      	adds	r3, #68	; 0x44
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 809b 	beq.w	8003f64 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	212c      	movs	r1, #44	; 0x2c
 8003e34:	fb01 f303 	mul.w	r3, r1, r3
 8003e38:	4413      	add	r3, r2
 8003e3a:	3350      	adds	r3, #80	; 0x50
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	441a      	add	r2, r3
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	202c      	movs	r0, #44	; 0x2c
 8003e48:	fb00 f303 	mul.w	r3, r0, r3
 8003e4c:	440b      	add	r3, r1
 8003e4e:	334c      	adds	r3, #76	; 0x4c
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d87a      	bhi.n	8003f4c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	212c      	movs	r1, #44	; 0x2c
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	4413      	add	r3, r2
 8003e66:	3344      	adds	r3, #68	; 0x44
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	b292      	uxth	r2, r2
 8003e6e:	4619      	mov	r1, r3
 8003e70:	f002 fe68 	bl	8006b44 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	212c      	movs	r1, #44	; 0x2c
 8003e7a:	fb01 f303 	mul.w	r3, r1, r3
 8003e7e:	4413      	add	r3, r2
 8003e80:	3344      	adds	r3, #68	; 0x44
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	441a      	add	r2, r3
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	202c      	movs	r0, #44	; 0x2c
 8003e8e:	fb00 f303 	mul.w	r3, r0, r3
 8003e92:	440b      	add	r3, r1
 8003e94:	3344      	adds	r3, #68	; 0x44
 8003e96:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	212c      	movs	r1, #44	; 0x2c
 8003e9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3350      	adds	r3, #80	; 0x50
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	441a      	add	r2, r3
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	202c      	movs	r0, #44	; 0x2c
 8003eb2:	fb00 f303 	mul.w	r3, r0, r3
 8003eb6:	440b      	add	r3, r1
 8003eb8:	3350      	adds	r3, #80	; 0x50
 8003eba:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	0cdb      	lsrs	r3, r3, #19
 8003ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ed0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	212c      	movs	r1, #44	; 0x2c
 8003ed8:	fb01 f303 	mul.w	r3, r1, r3
 8003edc:	4413      	add	r3, r2
 8003ede:	3340      	adds	r3, #64	; 0x40
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d13c      	bne.n	8003f64 <HCD_RXQLVL_IRQHandler+0x19a>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d039      	beq.n	8003f64 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f06:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f0e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	212c      	movs	r1, #44	; 0x2c
 8003f28:	fb01 f303 	mul.w	r3, r1, r3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	3354      	adds	r3, #84	; 0x54
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	f083 0301 	eor.w	r3, r3, #1
 8003f36:	b2d8      	uxtb	r0, r3
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	212c      	movs	r1, #44	; 0x2c
 8003f3e:	fb01 f303 	mul.w	r3, r1, r3
 8003f42:	4413      	add	r3, r2
 8003f44:	3354      	adds	r3, #84	; 0x54
 8003f46:	4602      	mov	r2, r0
 8003f48:	701a      	strb	r2, [r3, #0]
      break;
 8003f4a:	e00b      	b.n	8003f64 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	212c      	movs	r1, #44	; 0x2c
 8003f52:	fb01 f303 	mul.w	r3, r1, r3
 8003f56:	4413      	add	r3, r2
 8003f58:	3360      	adds	r3, #96	; 0x60
 8003f5a:	2204      	movs	r2, #4
 8003f5c:	701a      	strb	r2, [r3, #0]
      break;
 8003f5e:	e001      	b.n	8003f64 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003f60:	bf00      	nop
 8003f62:	e000      	b.n	8003f66 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003f64:	bf00      	nop
  }
}
 8003f66:	bf00      	nop
 8003f68:	3728      	adds	r7, #40	; 0x28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b086      	sub	sp, #24
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f9a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d10b      	bne.n	8003fbe <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d102      	bne.n	8003fb6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f005 fcf7 	bl	80099a4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f043 0302 	orr.w	r3, r3, #2
 8003fbc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d132      	bne.n	800402e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f043 0308 	orr.w	r3, r3, #8
 8003fce:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d126      	bne.n	8004028 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d113      	bne.n	800400a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003fe8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fec:	d106      	bne.n	8003ffc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2102      	movs	r1, #2
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f002 ff13 	bl	8006e20 <USB_InitFSLSPClkSel>
 8003ffa:	e011      	b.n	8004020 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2101      	movs	r1, #1
 8004002:	4618      	mov	r0, r3
 8004004:	f002 ff0c 	bl	8006e20 <USB_InitFSLSPClkSel>
 8004008:	e00a      	b.n	8004020 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d106      	bne.n	8004020 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004018:	461a      	mov	r2, r3
 800401a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800401e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f005 fce9 	bl	80099f8 <HAL_HCD_PortEnabled_Callback>
 8004026:	e002      	b.n	800402e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f005 fcf3 	bl	8009a14 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b20      	cmp	r3, #32
 8004036:	d103      	bne.n	8004040 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f043 0320 	orr.w	r3, r3, #32
 800403e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004046:	461a      	mov	r2, r3
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	6013      	str	r3, [r2, #0]
}
 800404c:	bf00      	nop
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e12b      	b.n	80042be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fc fe02 	bl	8000c84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2224      	movs	r2, #36	; 0x24
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0201 	bic.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040b8:	f001 fa20 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 80040bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	4a81      	ldr	r2, [pc, #516]	; (80042c8 <HAL_I2C_Init+0x274>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d807      	bhi.n	80040d8 <HAL_I2C_Init+0x84>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4a80      	ldr	r2, [pc, #512]	; (80042cc <HAL_I2C_Init+0x278>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	bf94      	ite	ls
 80040d0:	2301      	movls	r3, #1
 80040d2:	2300      	movhi	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	e006      	b.n	80040e6 <HAL_I2C_Init+0x92>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4a7d      	ldr	r2, [pc, #500]	; (80042d0 <HAL_I2C_Init+0x27c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	bf94      	ite	ls
 80040e0:	2301      	movls	r3, #1
 80040e2:	2300      	movhi	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e0e7      	b.n	80042be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4a78      	ldr	r2, [pc, #480]	; (80042d4 <HAL_I2C_Init+0x280>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	0c9b      	lsrs	r3, r3, #18
 80040f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	430a      	orrs	r2, r1
 800410c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4a6a      	ldr	r2, [pc, #424]	; (80042c8 <HAL_I2C_Init+0x274>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d802      	bhi.n	8004128 <HAL_I2C_Init+0xd4>
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	3301      	adds	r3, #1
 8004126:	e009      	b.n	800413c <HAL_I2C_Init+0xe8>
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800412e:	fb02 f303 	mul.w	r3, r2, r3
 8004132:	4a69      	ldr	r2, [pc, #420]	; (80042d8 <HAL_I2C_Init+0x284>)
 8004134:	fba2 2303 	umull	r2, r3, r2, r3
 8004138:	099b      	lsrs	r3, r3, #6
 800413a:	3301      	adds	r3, #1
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6812      	ldr	r2, [r2, #0]
 8004140:	430b      	orrs	r3, r1
 8004142:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800414e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	495c      	ldr	r1, [pc, #368]	; (80042c8 <HAL_I2C_Init+0x274>)
 8004158:	428b      	cmp	r3, r1
 800415a:	d819      	bhi.n	8004190 <HAL_I2C_Init+0x13c>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	1e59      	subs	r1, r3, #1
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	fbb1 f3f3 	udiv	r3, r1, r3
 800416a:	1c59      	adds	r1, r3, #1
 800416c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004170:	400b      	ands	r3, r1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <HAL_I2C_Init+0x138>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	1e59      	subs	r1, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	fbb1 f3f3 	udiv	r3, r1, r3
 8004184:	3301      	adds	r3, #1
 8004186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800418a:	e051      	b.n	8004230 <HAL_I2C_Init+0x1dc>
 800418c:	2304      	movs	r3, #4
 800418e:	e04f      	b.n	8004230 <HAL_I2C_Init+0x1dc>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d111      	bne.n	80041bc <HAL_I2C_Init+0x168>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	1e58      	subs	r0, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6859      	ldr	r1, [r3, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	440b      	add	r3, r1
 80041a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041aa:	3301      	adds	r3, #1
 80041ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bf0c      	ite	eq
 80041b4:	2301      	moveq	r3, #1
 80041b6:	2300      	movne	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	e012      	b.n	80041e2 <HAL_I2C_Init+0x18e>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	1e58      	subs	r0, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6859      	ldr	r1, [r3, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	0099      	lsls	r1, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80041d2:	3301      	adds	r3, #1
 80041d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf0c      	ite	eq
 80041dc:	2301      	moveq	r3, #1
 80041de:	2300      	movne	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_I2C_Init+0x196>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e022      	b.n	8004230 <HAL_I2C_Init+0x1dc>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10e      	bne.n	8004210 <HAL_I2C_Init+0x1bc>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1e58      	subs	r0, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6859      	ldr	r1, [r3, #4]
 80041fa:	460b      	mov	r3, r1
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	440b      	add	r3, r1
 8004200:	fbb0 f3f3 	udiv	r3, r0, r3
 8004204:	3301      	adds	r3, #1
 8004206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800420a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800420e:	e00f      	b.n	8004230 <HAL_I2C_Init+0x1dc>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	1e58      	subs	r0, r3, #1
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6859      	ldr	r1, [r3, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	0099      	lsls	r1, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	fbb0 f3f3 	udiv	r3, r0, r3
 8004226:	3301      	adds	r3, #1
 8004228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800422c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	6809      	ldr	r1, [r1, #0]
 8004234:	4313      	orrs	r3, r2
 8004236:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69da      	ldr	r2, [r3, #28]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800425e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6911      	ldr	r1, [r2, #16]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	68d2      	ldr	r2, [r2, #12]
 800426a:	4311      	orrs	r1, r2
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6812      	ldr	r2, [r2, #0]
 8004270:	430b      	orrs	r3, r1
 8004272:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695a      	ldr	r2, [r3, #20]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	000186a0 	.word	0x000186a0
 80042cc:	001e847f 	.word	0x001e847f
 80042d0:	003d08ff 	.word	0x003d08ff
 80042d4:	431bde83 	.word	0x431bde83
 80042d8:	10624dd3 	.word	0x10624dd3

080042dc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e128      	b.n	8004540 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a90      	ldr	r2, [pc, #576]	; (8004548 <HAL_I2S_Init+0x26c>)
 8004306:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7fc fd03 	bl	8000d14 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2202      	movs	r2, #2
 8004312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6812      	ldr	r2, [r2, #0]
 8004320:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004324:	f023 030f 	bic.w	r3, r3, #15
 8004328:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2202      	movs	r2, #2
 8004330:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d060      	beq.n	80043fc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d102      	bne.n	8004348 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004342:	2310      	movs	r3, #16
 8004344:	617b      	str	r3, [r7, #20]
 8004346:	e001      	b.n	800434c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004348:	2320      	movs	r3, #32
 800434a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2b20      	cmp	r3, #32
 8004352:	d802      	bhi.n	800435a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800435a:	2001      	movs	r0, #1
 800435c:	f001 f9c4 	bl	80056e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004360:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800436a:	d125      	bne.n	80043b8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d010      	beq.n	8004396 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	fbb2 f2f3 	udiv	r2, r2, r3
 800437e:	4613      	mov	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	461a      	mov	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	3305      	adds	r3, #5
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	e01f      	b.n	80043d6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	fbb2 f2f3 	udiv	r2, r2, r3
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	461a      	mov	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b2:	3305      	adds	r3, #5
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	e00e      	b.n	80043d6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	461a      	mov	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d2:	3305      	adds	r3, #5
 80043d4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	4a5c      	ldr	r2, [pc, #368]	; (800454c <HAL_I2S_Init+0x270>)
 80043da:	fba2 2303 	umull	r2, r3, r2, r3
 80043de:	08db      	lsrs	r3, r3, #3
 80043e0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	085b      	lsrs	r3, r3, #1
 80043f2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	021b      	lsls	r3, r3, #8
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	e003      	b.n	8004404 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80043fc:	2302      	movs	r3, #2
 80043fe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d902      	bls.n	8004410 <HAL_I2S_Init+0x134>
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	2bff      	cmp	r3, #255	; 0xff
 800440e:	d907      	bls.n	8004420 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004414:	f043 0210 	orr.w	r2, r3, #16
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e08f      	b.n	8004540 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	ea42 0103 	orr.w	r1, r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69fa      	ldr	r2, [r7, #28]
 8004430:	430a      	orrs	r2, r1
 8004432:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800443e:	f023 030f 	bic.w	r3, r3, #15
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6851      	ldr	r1, [r2, #4]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6892      	ldr	r2, [r2, #8]
 800444a:	4311      	orrs	r1, r2
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	68d2      	ldr	r2, [r2, #12]
 8004450:	4311      	orrs	r1, r2
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6992      	ldr	r2, [r2, #24]
 8004456:	430a      	orrs	r2, r1
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004462:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d161      	bne.n	8004530 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a38      	ldr	r2, [pc, #224]	; (8004550 <HAL_I2S_Init+0x274>)
 8004470:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a37      	ldr	r2, [pc, #220]	; (8004554 <HAL_I2S_Init+0x278>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d101      	bne.n	8004480 <HAL_I2S_Init+0x1a4>
 800447c:	4b36      	ldr	r3, [pc, #216]	; (8004558 <HAL_I2S_Init+0x27c>)
 800447e:	e001      	b.n	8004484 <HAL_I2S_Init+0x1a8>
 8004480:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6812      	ldr	r2, [r2, #0]
 800448a:	4932      	ldr	r1, [pc, #200]	; (8004554 <HAL_I2S_Init+0x278>)
 800448c:	428a      	cmp	r2, r1
 800448e:	d101      	bne.n	8004494 <HAL_I2S_Init+0x1b8>
 8004490:	4a31      	ldr	r2, [pc, #196]	; (8004558 <HAL_I2S_Init+0x27c>)
 8004492:	e001      	b.n	8004498 <HAL_I2S_Init+0x1bc>
 8004494:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004498:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800449c:	f023 030f 	bic.w	r3, r3, #15
 80044a0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a2b      	ldr	r2, [pc, #172]	; (8004554 <HAL_I2S_Init+0x278>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d101      	bne.n	80044b0 <HAL_I2S_Init+0x1d4>
 80044ac:	4b2a      	ldr	r3, [pc, #168]	; (8004558 <HAL_I2S_Init+0x27c>)
 80044ae:	e001      	b.n	80044b4 <HAL_I2S_Init+0x1d8>
 80044b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044b4:	2202      	movs	r2, #2
 80044b6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a25      	ldr	r2, [pc, #148]	; (8004554 <HAL_I2S_Init+0x278>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d101      	bne.n	80044c6 <HAL_I2S_Init+0x1ea>
 80044c2:	4b25      	ldr	r3, [pc, #148]	; (8004558 <HAL_I2S_Init+0x27c>)
 80044c4:	e001      	b.n	80044ca <HAL_I2S_Init+0x1ee>
 80044c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d6:	d003      	beq.n	80044e0 <HAL_I2S_Init+0x204>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d103      	bne.n	80044e8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80044e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	e001      	b.n	80044ec <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80044e8:	2300      	movs	r3, #0
 80044ea:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80044f6:	4313      	orrs	r3, r2
 80044f8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004500:	4313      	orrs	r3, r2
 8004502:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800450a:	4313      	orrs	r3, r2
 800450c:	b29a      	uxth	r2, r3
 800450e:	897b      	ldrh	r3, [r7, #10]
 8004510:	4313      	orrs	r3, r2
 8004512:	b29b      	uxth	r3, r3
 8004514:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004518:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a0d      	ldr	r2, [pc, #52]	; (8004554 <HAL_I2S_Init+0x278>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d101      	bne.n	8004528 <HAL_I2S_Init+0x24c>
 8004524:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <HAL_I2S_Init+0x27c>)
 8004526:	e001      	b.n	800452c <HAL_I2S_Init+0x250>
 8004528:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800452c:	897a      	ldrh	r2, [r7, #10]
 800452e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3720      	adds	r7, #32
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	08004653 	.word	0x08004653
 800454c:	cccccccd 	.word	0xcccccccd
 8004550:	08004769 	.word	0x08004769
 8004554:	40003800 	.word	0x40003800
 8004558:	40003400 	.word	0x40003400

0800455c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	881a      	ldrh	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	1c9a      	adds	r2, r3, #2
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10e      	bne.n	80045ec <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045dc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff ffb8 	bl	800455c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	b292      	uxth	r2, r2
 8004608:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	1c9a      	adds	r2, r3, #2
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10e      	bne.n	800464a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800463a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff ff93 	bl	8004570 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800464a:	bf00      	nop
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b086      	sub	sp, #24
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b04      	cmp	r3, #4
 800466c:	d13a      	bne.n	80046e4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b01      	cmp	r3, #1
 8004676:	d109      	bne.n	800468c <I2S_IRQHandler+0x3a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004682:	2b40      	cmp	r3, #64	; 0x40
 8004684:	d102      	bne.n	800468c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff ffb4 	bl	80045f4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004692:	2b40      	cmp	r3, #64	; 0x40
 8004694:	d126      	bne.n	80046e4 <I2S_IRQHandler+0x92>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f003 0320 	and.w	r3, r3, #32
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d11f      	bne.n	80046e4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046b4:	2300      	movs	r3, #0
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	613b      	str	r3, [r7, #16]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	613b      	str	r3, [r7, #16]
 80046c8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d6:	f043 0202 	orr.w	r2, r3, #2
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff ff50 	bl	8004584 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d136      	bne.n	800475e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d109      	bne.n	800470e <I2S_IRQHandler+0xbc>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004704:	2b80      	cmp	r3, #128	; 0x80
 8004706:	d102      	bne.n	800470e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7ff ff45 	bl	8004598 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b08      	cmp	r3, #8
 8004716:	d122      	bne.n	800475e <I2S_IRQHandler+0x10c>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	2b20      	cmp	r3, #32
 8004724:	d11b      	bne.n	800475e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004734:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004750:	f043 0204 	orr.w	r2, r3, #4
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff ff13 	bl	8004584 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800475e:	bf00      	nop
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a92      	ldr	r2, [pc, #584]	; (80049c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d101      	bne.n	8004786 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004782:	4b92      	ldr	r3, [pc, #584]	; (80049cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004784:	e001      	b.n	800478a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004786:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a8b      	ldr	r2, [pc, #556]	; (80049c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d101      	bne.n	80047a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80047a0:	4b8a      	ldr	r3, [pc, #552]	; (80049cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047a2:	e001      	b.n	80047a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80047a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047b4:	d004      	beq.n	80047c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f040 8099 	bne.w	80048f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d107      	bne.n	80047da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f925 	bl	8004a24 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d107      	bne.n	80047f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f9c8 	bl	8004b84 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fa:	2b40      	cmp	r3, #64	; 0x40
 80047fc:	d13a      	bne.n	8004874 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b00      	cmp	r3, #0
 8004806:	d035      	beq.n	8004874 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a6e      	ldr	r2, [pc, #440]	; (80049c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d101      	bne.n	8004816 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004812:	4b6e      	ldr	r3, [pc, #440]	; (80049cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004814:	e001      	b.n	800481a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004816:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4969      	ldr	r1, [pc, #420]	; (80049c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004822:	428b      	cmp	r3, r1
 8004824:	d101      	bne.n	800482a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004826:	4b69      	ldr	r3, [pc, #420]	; (80049cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004828:	e001      	b.n	800482e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800482a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800482e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004832:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004842:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004866:	f043 0202 	orr.w	r2, r3, #2
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7ff fe88 	bl	8004584 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b08      	cmp	r3, #8
 800487c:	f040 80c3 	bne.w	8004a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f003 0320 	and.w	r3, r3, #32
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 80bd 	beq.w	8004a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800489a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a49      	ldr	r2, [pc, #292]	; (80049c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d101      	bne.n	80048aa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80048a6:	4b49      	ldr	r3, [pc, #292]	; (80049cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048a8:	e001      	b.n	80048ae <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80048aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4944      	ldr	r1, [pc, #272]	; (80049c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048b6:	428b      	cmp	r3, r1
 80048b8:	d101      	bne.n	80048be <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80048ba:	4b44      	ldr	r3, [pc, #272]	; (80049cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048bc:	e001      	b.n	80048c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80048be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048c6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80048c8:	2300      	movs	r3, #0
 80048ca:	60bb      	str	r3, [r7, #8]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	60bb      	str	r3, [r7, #8]
 80048d4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e2:	f043 0204 	orr.w	r2, r3, #4
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7ff fe4a 	bl	8004584 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80048f0:	e089      	b.n	8004a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d107      	bne.n	800490c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f8be 	bl	8004a88 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b01      	cmp	r3, #1
 8004914:	d107      	bne.n	8004926 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f8fd 	bl	8004b20 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492c:	2b40      	cmp	r3, #64	; 0x40
 800492e:	d12f      	bne.n	8004990 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b00      	cmp	r3, #0
 8004938:	d02a      	beq.n	8004990 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004948:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1e      	ldr	r2, [pc, #120]	; (80049c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d101      	bne.n	8004958 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004954:	4b1d      	ldr	r3, [pc, #116]	; (80049cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004956:	e001      	b.n	800495c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004958:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4919      	ldr	r1, [pc, #100]	; (80049c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004964:	428b      	cmp	r3, r1
 8004966:	d101      	bne.n	800496c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004968:	4b18      	ldr	r3, [pc, #96]	; (80049cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800496a:	e001      	b.n	8004970 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800496c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004970:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004974:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004982:	f043 0202 	orr.w	r2, r3, #2
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff fdfa 	bl	8004584 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b08      	cmp	r3, #8
 8004998:	d136      	bne.n	8004a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f003 0320 	and.w	r3, r3, #32
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d031      	beq.n	8004a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a07      	ldr	r2, [pc, #28]	; (80049c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d101      	bne.n	80049b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80049ae:	4b07      	ldr	r3, [pc, #28]	; (80049cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049b0:	e001      	b.n	80049b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80049b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4902      	ldr	r1, [pc, #8]	; (80049c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049be:	428b      	cmp	r3, r1
 80049c0:	d106      	bne.n	80049d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80049c2:	4b02      	ldr	r3, [pc, #8]	; (80049cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049c4:	e006      	b.n	80049d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80049c6:	bf00      	nop
 80049c8:	40003800 	.word	0x40003800
 80049cc:	40003400 	.word	0x40003400
 80049d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049d8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f6:	f043 0204 	orr.w	r2, r3, #4
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff fdc0 	bl	8004584 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a04:	e000      	b.n	8004a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a06:	bf00      	nop
}
 8004a08:	bf00      	nop
 8004a0a:	3720      	adds	r7, #32
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	1c99      	adds	r1, r3, #2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6251      	str	r1, [r2, #36]	; 0x24
 8004a36:	881a      	ldrh	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d113      	bne.n	8004a7e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a64:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d106      	bne.n	8004a7e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff ffc9 	bl	8004a10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	1c99      	adds	r1, r3, #2
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6251      	str	r1, [r2, #36]	; 0x24
 8004a9a:	8819      	ldrh	r1, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a1d      	ldr	r2, [pc, #116]	; (8004b18 <I2SEx_TxISR_I2SExt+0x90>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d101      	bne.n	8004aaa <I2SEx_TxISR_I2SExt+0x22>
 8004aa6:	4b1d      	ldr	r3, [pc, #116]	; (8004b1c <I2SEx_TxISR_I2SExt+0x94>)
 8004aa8:	e001      	b.n	8004aae <I2SEx_TxISR_I2SExt+0x26>
 8004aaa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004aae:	460a      	mov	r2, r1
 8004ab0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d121      	bne.n	8004b0e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a12      	ldr	r2, [pc, #72]	; (8004b18 <I2SEx_TxISR_I2SExt+0x90>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d101      	bne.n	8004ad8 <I2SEx_TxISR_I2SExt+0x50>
 8004ad4:	4b11      	ldr	r3, [pc, #68]	; (8004b1c <I2SEx_TxISR_I2SExt+0x94>)
 8004ad6:	e001      	b.n	8004adc <I2SEx_TxISR_I2SExt+0x54>
 8004ad8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	490d      	ldr	r1, [pc, #52]	; (8004b18 <I2SEx_TxISR_I2SExt+0x90>)
 8004ae4:	428b      	cmp	r3, r1
 8004ae6:	d101      	bne.n	8004aec <I2SEx_TxISR_I2SExt+0x64>
 8004ae8:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <I2SEx_TxISR_I2SExt+0x94>)
 8004aea:	e001      	b.n	8004af0 <I2SEx_TxISR_I2SExt+0x68>
 8004aec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004af0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004af4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d106      	bne.n	8004b0e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff ff81 	bl	8004a10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b0e:	bf00      	nop
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	40003800 	.word	0x40003800
 8004b1c:	40003400 	.word	0x40003400

08004b20 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68d8      	ldr	r0, [r3, #12]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	1c99      	adds	r1, r3, #2
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004b38:	b282      	uxth	r2, r0
 8004b3a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d113      	bne.n	8004b7c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b62:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff ff4a 	bl	8004a10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a20      	ldr	r2, [pc, #128]	; (8004c14 <I2SEx_RxISR_I2SExt+0x90>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d101      	bne.n	8004b9a <I2SEx_RxISR_I2SExt+0x16>
 8004b96:	4b20      	ldr	r3, [pc, #128]	; (8004c18 <I2SEx_RxISR_I2SExt+0x94>)
 8004b98:	e001      	b.n	8004b9e <I2SEx_RxISR_I2SExt+0x1a>
 8004b9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b9e:	68d8      	ldr	r0, [r3, #12]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	1c99      	adds	r1, r3, #2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004baa:	b282      	uxth	r2, r0
 8004bac:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d121      	bne.n	8004c0a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a12      	ldr	r2, [pc, #72]	; (8004c14 <I2SEx_RxISR_I2SExt+0x90>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d101      	bne.n	8004bd4 <I2SEx_RxISR_I2SExt+0x50>
 8004bd0:	4b11      	ldr	r3, [pc, #68]	; (8004c18 <I2SEx_RxISR_I2SExt+0x94>)
 8004bd2:	e001      	b.n	8004bd8 <I2SEx_RxISR_I2SExt+0x54>
 8004bd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	490d      	ldr	r1, [pc, #52]	; (8004c14 <I2SEx_RxISR_I2SExt+0x90>)
 8004be0:	428b      	cmp	r3, r1
 8004be2:	d101      	bne.n	8004be8 <I2SEx_RxISR_I2SExt+0x64>
 8004be4:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <I2SEx_RxISR_I2SExt+0x94>)
 8004be6:	e001      	b.n	8004bec <I2SEx_RxISR_I2SExt+0x68>
 8004be8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bf0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d106      	bne.n	8004c0a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7ff ff03 	bl	8004a10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c0a:	bf00      	nop
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40003800 	.word	0x40003800
 8004c18:	40003400 	.word	0x40003400

08004c1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e267      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d075      	beq.n	8004d26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c3a:	4b88      	ldr	r3, [pc, #544]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 030c 	and.w	r3, r3, #12
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d00c      	beq.n	8004c60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c46:	4b85      	ldr	r3, [pc, #532]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d112      	bne.n	8004c78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c52:	4b82      	ldr	r3, [pc, #520]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c5e:	d10b      	bne.n	8004c78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c60:	4b7e      	ldr	r3, [pc, #504]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d05b      	beq.n	8004d24 <HAL_RCC_OscConfig+0x108>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d157      	bne.n	8004d24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e242      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c80:	d106      	bne.n	8004c90 <HAL_RCC_OscConfig+0x74>
 8004c82:	4b76      	ldr	r3, [pc, #472]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a75      	ldr	r2, [pc, #468]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	e01d      	b.n	8004ccc <HAL_RCC_OscConfig+0xb0>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c98:	d10c      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x98>
 8004c9a:	4b70      	ldr	r3, [pc, #448]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a6f      	ldr	r2, [pc, #444]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	4b6d      	ldr	r3, [pc, #436]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a6c      	ldr	r2, [pc, #432]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	e00b      	b.n	8004ccc <HAL_RCC_OscConfig+0xb0>
 8004cb4:	4b69      	ldr	r3, [pc, #420]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a68      	ldr	r2, [pc, #416]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cbe:	6013      	str	r3, [r2, #0]
 8004cc0:	4b66      	ldr	r3, [pc, #408]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a65      	ldr	r2, [pc, #404]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d013      	beq.n	8004cfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd4:	f7fc fa9a 	bl	800120c <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cdc:	f7fc fa96 	bl	800120c <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b64      	cmp	r3, #100	; 0x64
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e207      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cee:	4b5b      	ldr	r3, [pc, #364]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0xc0>
 8004cfa:	e014      	b.n	8004d26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfc:	f7fc fa86 	bl	800120c <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d04:	f7fc fa82 	bl	800120c <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b64      	cmp	r3, #100	; 0x64
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e1f3      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d16:	4b51      	ldr	r3, [pc, #324]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f0      	bne.n	8004d04 <HAL_RCC_OscConfig+0xe8>
 8004d22:	e000      	b.n	8004d26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d063      	beq.n	8004dfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d32:	4b4a      	ldr	r3, [pc, #296]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 030c 	and.w	r3, r3, #12
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00b      	beq.n	8004d56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d3e:	4b47      	ldr	r3, [pc, #284]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d46:	2b08      	cmp	r3, #8
 8004d48:	d11c      	bne.n	8004d84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d4a:	4b44      	ldr	r3, [pc, #272]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d116      	bne.n	8004d84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d56:	4b41      	ldr	r3, [pc, #260]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d005      	beq.n	8004d6e <HAL_RCC_OscConfig+0x152>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d001      	beq.n	8004d6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e1c7      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d6e:	4b3b      	ldr	r3, [pc, #236]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	4937      	ldr	r1, [pc, #220]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d82:	e03a      	b.n	8004dfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d020      	beq.n	8004dce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d8c:	4b34      	ldr	r3, [pc, #208]	; (8004e60 <HAL_RCC_OscConfig+0x244>)
 8004d8e:	2201      	movs	r2, #1
 8004d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d92:	f7fc fa3b 	bl	800120c <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d9a:	f7fc fa37 	bl	800120c <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e1a8      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dac:	4b2b      	ldr	r3, [pc, #172]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f0      	beq.n	8004d9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db8:	4b28      	ldr	r3, [pc, #160]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	4925      	ldr	r1, [pc, #148]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	600b      	str	r3, [r1, #0]
 8004dcc:	e015      	b.n	8004dfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dce:	4b24      	ldr	r3, [pc, #144]	; (8004e60 <HAL_RCC_OscConfig+0x244>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd4:	f7fc fa1a 	bl	800120c <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ddc:	f7fc fa16 	bl	800120c <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e187      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dee:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f0      	bne.n	8004ddc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d036      	beq.n	8004e74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d016      	beq.n	8004e3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e0e:	4b15      	ldr	r3, [pc, #84]	; (8004e64 <HAL_RCC_OscConfig+0x248>)
 8004e10:	2201      	movs	r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e14:	f7fc f9fa 	bl	800120c <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e1c:	f7fc f9f6 	bl	800120c <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e167      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e2e:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <HAL_RCC_OscConfig+0x240>)
 8004e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0x200>
 8004e3a:	e01b      	b.n	8004e74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e3c:	4b09      	ldr	r3, [pc, #36]	; (8004e64 <HAL_RCC_OscConfig+0x248>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e42:	f7fc f9e3 	bl	800120c <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e48:	e00e      	b.n	8004e68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e4a:	f7fc f9df 	bl	800120c <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d907      	bls.n	8004e68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e150      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	42470000 	.word	0x42470000
 8004e64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e68:	4b88      	ldr	r3, [pc, #544]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8004e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1ea      	bne.n	8004e4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 8097 	beq.w	8004fb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e82:	2300      	movs	r3, #0
 8004e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e86:	4b81      	ldr	r3, [pc, #516]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10f      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e92:	2300      	movs	r3, #0
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	4b7d      	ldr	r3, [pc, #500]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	4a7c      	ldr	r2, [pc, #496]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8004e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ea2:	4b7a      	ldr	r3, [pc, #488]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	60bb      	str	r3, [r7, #8]
 8004eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb2:	4b77      	ldr	r3, [pc, #476]	; (8005090 <HAL_RCC_OscConfig+0x474>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d118      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ebe:	4b74      	ldr	r3, [pc, #464]	; (8005090 <HAL_RCC_OscConfig+0x474>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a73      	ldr	r2, [pc, #460]	; (8005090 <HAL_RCC_OscConfig+0x474>)
 8004ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eca:	f7fc f99f 	bl	800120c <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed2:	f7fc f99b 	bl	800120c <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e10c      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee4:	4b6a      	ldr	r3, [pc, #424]	; (8005090 <HAL_RCC_OscConfig+0x474>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0f0      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d106      	bne.n	8004f06 <HAL_RCC_OscConfig+0x2ea>
 8004ef8:	4b64      	ldr	r3, [pc, #400]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efc:	4a63      	ldr	r2, [pc, #396]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8004efe:	f043 0301 	orr.w	r3, r3, #1
 8004f02:	6713      	str	r3, [r2, #112]	; 0x70
 8004f04:	e01c      	b.n	8004f40 <HAL_RCC_OscConfig+0x324>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b05      	cmp	r3, #5
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCC_OscConfig+0x30c>
 8004f0e:	4b5f      	ldr	r3, [pc, #380]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	4a5e      	ldr	r2, [pc, #376]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8004f14:	f043 0304 	orr.w	r3, r3, #4
 8004f18:	6713      	str	r3, [r2, #112]	; 0x70
 8004f1a:	4b5c      	ldr	r3, [pc, #368]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8004f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1e:	4a5b      	ldr	r2, [pc, #364]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8004f20:	f043 0301 	orr.w	r3, r3, #1
 8004f24:	6713      	str	r3, [r2, #112]	; 0x70
 8004f26:	e00b      	b.n	8004f40 <HAL_RCC_OscConfig+0x324>
 8004f28:	4b58      	ldr	r3, [pc, #352]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8004f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2c:	4a57      	ldr	r2, [pc, #348]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8004f2e:	f023 0301 	bic.w	r3, r3, #1
 8004f32:	6713      	str	r3, [r2, #112]	; 0x70
 8004f34:	4b55      	ldr	r3, [pc, #340]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8004f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f38:	4a54      	ldr	r2, [pc, #336]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8004f3a:	f023 0304 	bic.w	r3, r3, #4
 8004f3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d015      	beq.n	8004f74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f48:	f7fc f960 	bl	800120c <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f4e:	e00a      	b.n	8004f66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f50:	f7fc f95c 	bl	800120c <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e0cb      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f66:	4b49      	ldr	r3, [pc, #292]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8004f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0ee      	beq.n	8004f50 <HAL_RCC_OscConfig+0x334>
 8004f72:	e014      	b.n	8004f9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f74:	f7fc f94a 	bl	800120c <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f7a:	e00a      	b.n	8004f92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f7c:	f7fc f946 	bl	800120c <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e0b5      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f92:	4b3e      	ldr	r3, [pc, #248]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8004f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1ee      	bne.n	8004f7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f9e:	7dfb      	ldrb	r3, [r7, #23]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d105      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fa4:	4b39      	ldr	r3, [pc, #228]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	4a38      	ldr	r2, [pc, #224]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8004faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 80a1 	beq.w	80050fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fba:	4b34      	ldr	r3, [pc, #208]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 030c 	and.w	r3, r3, #12
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d05c      	beq.n	8005080 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d141      	bne.n	8005052 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fce:	4b31      	ldr	r3, [pc, #196]	; (8005094 <HAL_RCC_OscConfig+0x478>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd4:	f7fc f91a 	bl	800120c <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fdc:	f7fc f916 	bl	800120c <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e087      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fee:	4b27      	ldr	r3, [pc, #156]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f0      	bne.n	8004fdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69da      	ldr	r2, [r3, #28]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	019b      	lsls	r3, r3, #6
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005010:	085b      	lsrs	r3, r3, #1
 8005012:	3b01      	subs	r3, #1
 8005014:	041b      	lsls	r3, r3, #16
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	061b      	lsls	r3, r3, #24
 800501e:	491b      	ldr	r1, [pc, #108]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8005020:	4313      	orrs	r3, r2
 8005022:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005024:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <HAL_RCC_OscConfig+0x478>)
 8005026:	2201      	movs	r2, #1
 8005028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800502a:	f7fc f8ef 	bl	800120c <HAL_GetTick>
 800502e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005030:	e008      	b.n	8005044 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005032:	f7fc f8eb 	bl	800120c <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e05c      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005044:	4b11      	ldr	r3, [pc, #68]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0f0      	beq.n	8005032 <HAL_RCC_OscConfig+0x416>
 8005050:	e054      	b.n	80050fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005052:	4b10      	ldr	r3, [pc, #64]	; (8005094 <HAL_RCC_OscConfig+0x478>)
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005058:	f7fc f8d8 	bl	800120c <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005060:	f7fc f8d4 	bl	800120c <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e045      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005072:	4b06      	ldr	r3, [pc, #24]	; (800508c <HAL_RCC_OscConfig+0x470>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f0      	bne.n	8005060 <HAL_RCC_OscConfig+0x444>
 800507e:	e03d      	b.n	80050fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d107      	bne.n	8005098 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e038      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
 800508c:	40023800 	.word	0x40023800
 8005090:	40007000 	.word	0x40007000
 8005094:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005098:	4b1b      	ldr	r3, [pc, #108]	; (8005108 <HAL_RCC_OscConfig+0x4ec>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d028      	beq.n	80050f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d121      	bne.n	80050f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050be:	429a      	cmp	r2, r3
 80050c0:	d11a      	bne.n	80050f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050c8:	4013      	ands	r3, r2
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d111      	bne.n	80050f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050de:	085b      	lsrs	r3, r3, #1
 80050e0:	3b01      	subs	r3, #1
 80050e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d107      	bne.n	80050f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d001      	beq.n	80050fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e000      	b.n	80050fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40023800 	.word	0x40023800

0800510c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0cc      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005120:	4b68      	ldr	r3, [pc, #416]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d90c      	bls.n	8005148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512e:	4b65      	ldr	r3, [pc, #404]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005136:	4b63      	ldr	r3, [pc, #396]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d001      	beq.n	8005148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e0b8      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d020      	beq.n	8005196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005160:	4b59      	ldr	r3, [pc, #356]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	4a58      	ldr	r2, [pc, #352]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800516a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b00      	cmp	r3, #0
 8005176:	d005      	beq.n	8005184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005178:	4b53      	ldr	r3, [pc, #332]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	4a52      	ldr	r2, [pc, #328]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005184:	4b50      	ldr	r3, [pc, #320]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	494d      	ldr	r1, [pc, #308]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005192:	4313      	orrs	r3, r2
 8005194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d044      	beq.n	800522c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d107      	bne.n	80051ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051aa:	4b47      	ldr	r3, [pc, #284]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d119      	bne.n	80051ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e07f      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d003      	beq.n	80051ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d107      	bne.n	80051da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ca:	4b3f      	ldr	r3, [pc, #252]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d109      	bne.n	80051ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e06f      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051da:	4b3b      	ldr	r3, [pc, #236]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e067      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051ea:	4b37      	ldr	r3, [pc, #220]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f023 0203 	bic.w	r2, r3, #3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	4934      	ldr	r1, [pc, #208]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051fc:	f7fc f806 	bl	800120c <HAL_GetTick>
 8005200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005202:	e00a      	b.n	800521a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005204:	f7fc f802 	bl	800120c <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005212:	4293      	cmp	r3, r2
 8005214:	d901      	bls.n	800521a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e04f      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800521a:	4b2b      	ldr	r3, [pc, #172]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 020c 	and.w	r2, r3, #12
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	429a      	cmp	r2, r3
 800522a:	d1eb      	bne.n	8005204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800522c:	4b25      	ldr	r3, [pc, #148]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d20c      	bcs.n	8005254 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800523a:	4b22      	ldr	r3, [pc, #136]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005242:	4b20      	ldr	r3, [pc, #128]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d001      	beq.n	8005254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e032      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	d008      	beq.n	8005272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005260:	4b19      	ldr	r3, [pc, #100]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4916      	ldr	r1, [pc, #88]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	4313      	orrs	r3, r2
 8005270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d009      	beq.n	8005292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800527e:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	490e      	ldr	r1, [pc, #56]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 800528e:	4313      	orrs	r3, r2
 8005290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005292:	f000 f821 	bl	80052d8 <HAL_RCC_GetSysClockFreq>
 8005296:	4602      	mov	r2, r0
 8005298:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	490a      	ldr	r1, [pc, #40]	; (80052cc <HAL_RCC_ClockConfig+0x1c0>)
 80052a4:	5ccb      	ldrb	r3, [r1, r3]
 80052a6:	fa22 f303 	lsr.w	r3, r2, r3
 80052aa:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <HAL_RCC_ClockConfig+0x1c4>)
 80052ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052ae:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <HAL_RCC_ClockConfig+0x1c8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fb ff66 	bl	8001184 <HAL_InitTick>

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40023c00 	.word	0x40023c00
 80052c8:	40023800 	.word	0x40023800
 80052cc:	0800a0b4 	.word	0x0800a0b4
 80052d0:	20000000 	.word	0x20000000
 80052d4:	20000004 	.word	0x20000004

080052d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052dc:	b094      	sub	sp, #80	; 0x50
 80052de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	647b      	str	r3, [r7, #68]	; 0x44
 80052e4:	2300      	movs	r3, #0
 80052e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052e8:	2300      	movs	r3, #0
 80052ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052f0:	4b79      	ldr	r3, [pc, #484]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 030c 	and.w	r3, r3, #12
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d00d      	beq.n	8005318 <HAL_RCC_GetSysClockFreq+0x40>
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	f200 80e1 	bhi.w	80054c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <HAL_RCC_GetSysClockFreq+0x34>
 8005306:	2b04      	cmp	r3, #4
 8005308:	d003      	beq.n	8005312 <HAL_RCC_GetSysClockFreq+0x3a>
 800530a:	e0db      	b.n	80054c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800530c:	4b73      	ldr	r3, [pc, #460]	; (80054dc <HAL_RCC_GetSysClockFreq+0x204>)
 800530e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005310:	e0db      	b.n	80054ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005312:	4b73      	ldr	r3, [pc, #460]	; (80054e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005314:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005316:	e0d8      	b.n	80054ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005318:	4b6f      	ldr	r3, [pc, #444]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005320:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005322:	4b6d      	ldr	r3, [pc, #436]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d063      	beq.n	80053f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800532e:	4b6a      	ldr	r3, [pc, #424]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	099b      	lsrs	r3, r3, #6
 8005334:	2200      	movs	r2, #0
 8005336:	63bb      	str	r3, [r7, #56]	; 0x38
 8005338:	63fa      	str	r2, [r7, #60]	; 0x3c
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005340:	633b      	str	r3, [r7, #48]	; 0x30
 8005342:	2300      	movs	r3, #0
 8005344:	637b      	str	r3, [r7, #52]	; 0x34
 8005346:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800534a:	4622      	mov	r2, r4
 800534c:	462b      	mov	r3, r5
 800534e:	f04f 0000 	mov.w	r0, #0
 8005352:	f04f 0100 	mov.w	r1, #0
 8005356:	0159      	lsls	r1, r3, #5
 8005358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800535c:	0150      	lsls	r0, r2, #5
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	4621      	mov	r1, r4
 8005364:	1a51      	subs	r1, r2, r1
 8005366:	6139      	str	r1, [r7, #16]
 8005368:	4629      	mov	r1, r5
 800536a:	eb63 0301 	sbc.w	r3, r3, r1
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800537c:	4659      	mov	r1, fp
 800537e:	018b      	lsls	r3, r1, #6
 8005380:	4651      	mov	r1, sl
 8005382:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005386:	4651      	mov	r1, sl
 8005388:	018a      	lsls	r2, r1, #6
 800538a:	4651      	mov	r1, sl
 800538c:	ebb2 0801 	subs.w	r8, r2, r1
 8005390:	4659      	mov	r1, fp
 8005392:	eb63 0901 	sbc.w	r9, r3, r1
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	f04f 0300 	mov.w	r3, #0
 800539e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053aa:	4690      	mov	r8, r2
 80053ac:	4699      	mov	r9, r3
 80053ae:	4623      	mov	r3, r4
 80053b0:	eb18 0303 	adds.w	r3, r8, r3
 80053b4:	60bb      	str	r3, [r7, #8]
 80053b6:	462b      	mov	r3, r5
 80053b8:	eb49 0303 	adc.w	r3, r9, r3
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	f04f 0200 	mov.w	r2, #0
 80053c2:	f04f 0300 	mov.w	r3, #0
 80053c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053ca:	4629      	mov	r1, r5
 80053cc:	024b      	lsls	r3, r1, #9
 80053ce:	4621      	mov	r1, r4
 80053d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053d4:	4621      	mov	r1, r4
 80053d6:	024a      	lsls	r2, r1, #9
 80053d8:	4610      	mov	r0, r2
 80053da:	4619      	mov	r1, r3
 80053dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053de:	2200      	movs	r2, #0
 80053e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80053e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053e8:	f7fa feee 	bl	80001c8 <__aeabi_uldivmod>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4613      	mov	r3, r2
 80053f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053f4:	e058      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053f6:	4b38      	ldr	r3, [pc, #224]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	099b      	lsrs	r3, r3, #6
 80053fc:	2200      	movs	r2, #0
 80053fe:	4618      	mov	r0, r3
 8005400:	4611      	mov	r1, r2
 8005402:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005406:	623b      	str	r3, [r7, #32]
 8005408:	2300      	movs	r3, #0
 800540a:	627b      	str	r3, [r7, #36]	; 0x24
 800540c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005410:	4642      	mov	r2, r8
 8005412:	464b      	mov	r3, r9
 8005414:	f04f 0000 	mov.w	r0, #0
 8005418:	f04f 0100 	mov.w	r1, #0
 800541c:	0159      	lsls	r1, r3, #5
 800541e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005422:	0150      	lsls	r0, r2, #5
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4641      	mov	r1, r8
 800542a:	ebb2 0a01 	subs.w	sl, r2, r1
 800542e:	4649      	mov	r1, r9
 8005430:	eb63 0b01 	sbc.w	fp, r3, r1
 8005434:	f04f 0200 	mov.w	r2, #0
 8005438:	f04f 0300 	mov.w	r3, #0
 800543c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005440:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005444:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005448:	ebb2 040a 	subs.w	r4, r2, sl
 800544c:	eb63 050b 	sbc.w	r5, r3, fp
 8005450:	f04f 0200 	mov.w	r2, #0
 8005454:	f04f 0300 	mov.w	r3, #0
 8005458:	00eb      	lsls	r3, r5, #3
 800545a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800545e:	00e2      	lsls	r2, r4, #3
 8005460:	4614      	mov	r4, r2
 8005462:	461d      	mov	r5, r3
 8005464:	4643      	mov	r3, r8
 8005466:	18e3      	adds	r3, r4, r3
 8005468:	603b      	str	r3, [r7, #0]
 800546a:	464b      	mov	r3, r9
 800546c:	eb45 0303 	adc.w	r3, r5, r3
 8005470:	607b      	str	r3, [r7, #4]
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	f04f 0300 	mov.w	r3, #0
 800547a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800547e:	4629      	mov	r1, r5
 8005480:	028b      	lsls	r3, r1, #10
 8005482:	4621      	mov	r1, r4
 8005484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005488:	4621      	mov	r1, r4
 800548a:	028a      	lsls	r2, r1, #10
 800548c:	4610      	mov	r0, r2
 800548e:	4619      	mov	r1, r3
 8005490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005492:	2200      	movs	r2, #0
 8005494:	61bb      	str	r3, [r7, #24]
 8005496:	61fa      	str	r2, [r7, #28]
 8005498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800549c:	f7fa fe94 	bl	80001c8 <__aeabi_uldivmod>
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4613      	mov	r3, r2
 80054a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054a8:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	0c1b      	lsrs	r3, r3, #16
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	3301      	adds	r3, #1
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80054b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054c2:	e002      	b.n	80054ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054c4:	4b05      	ldr	r3, [pc, #20]	; (80054dc <HAL_RCC_GetSysClockFreq+0x204>)
 80054c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3750      	adds	r7, #80	; 0x50
 80054d0:	46bd      	mov	sp, r7
 80054d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054d6:	bf00      	nop
 80054d8:	40023800 	.word	0x40023800
 80054dc:	00f42400 	.word	0x00f42400
 80054e0:	007a1200 	.word	0x007a1200

080054e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054e8:	4b03      	ldr	r3, [pc, #12]	; (80054f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054ea:	681b      	ldr	r3, [r3, #0]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	20000000 	.word	0x20000000

080054fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005500:	f7ff fff0 	bl	80054e4 <HAL_RCC_GetHCLKFreq>
 8005504:	4602      	mov	r2, r0
 8005506:	4b05      	ldr	r3, [pc, #20]	; (800551c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	0a9b      	lsrs	r3, r3, #10
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	4903      	ldr	r1, [pc, #12]	; (8005520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005512:	5ccb      	ldrb	r3, [r1, r3]
 8005514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005518:	4618      	mov	r0, r3
 800551a:	bd80      	pop	{r7, pc}
 800551c:	40023800 	.word	0x40023800
 8005520:	0800a0c4 	.word	0x0800a0c4

08005524 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800552c:	2300      	movs	r3, #0
 800552e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d105      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005548:	2b00      	cmp	r3, #0
 800554a:	d035      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800554c:	4b62      	ldr	r3, [pc, #392]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005552:	f7fb fe5b 	bl	800120c <HAL_GetTick>
 8005556:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005558:	e008      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800555a:	f7fb fe57 	bl	800120c <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e0b0      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800556c:	4b5b      	ldr	r3, [pc, #364]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1f0      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	019a      	lsls	r2, r3, #6
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	071b      	lsls	r3, r3, #28
 8005584:	4955      	ldr	r1, [pc, #340]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005586:	4313      	orrs	r3, r2
 8005588:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800558c:	4b52      	ldr	r3, [pc, #328]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800558e:	2201      	movs	r2, #1
 8005590:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005592:	f7fb fe3b 	bl	800120c <HAL_GetTick>
 8005596:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005598:	e008      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800559a:	f7fb fe37 	bl	800120c <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d901      	bls.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e090      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055ac:	4b4b      	ldr	r3, [pc, #300]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0f0      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 8083 	beq.w	80056cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	4b44      	ldr	r3, [pc, #272]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	4a43      	ldr	r2, [pc, #268]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d4:	6413      	str	r3, [r2, #64]	; 0x40
 80055d6:	4b41      	ldr	r3, [pc, #260]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80055e2:	4b3f      	ldr	r3, [pc, #252]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a3e      	ldr	r2, [pc, #248]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055ee:	f7fb fe0d 	bl	800120c <HAL_GetTick>
 80055f2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80055f4:	e008      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80055f6:	f7fb fe09 	bl	800120c <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d901      	bls.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e062      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005608:	4b35      	ldr	r3, [pc, #212]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0f0      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005614:	4b31      	ldr	r3, [pc, #196]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800561c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d02f      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	429a      	cmp	r2, r3
 8005630:	d028      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005632:	4b2a      	ldr	r3, [pc, #168]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800563a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800563c:	4b29      	ldr	r3, [pc, #164]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800563e:	2201      	movs	r2, #1
 8005640:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005642:	4b28      	ldr	r3, [pc, #160]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005648:	4a24      	ldr	r2, [pc, #144]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800564e:	4b23      	ldr	r3, [pc, #140]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b01      	cmp	r3, #1
 8005658:	d114      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800565a:	f7fb fdd7 	bl	800120c <HAL_GetTick>
 800565e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005660:	e00a      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005662:	f7fb fdd3 	bl	800120c <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005670:	4293      	cmp	r3, r2
 8005672:	d901      	bls.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e02a      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005678:	4b18      	ldr	r3, [pc, #96]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800567a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0ee      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800568c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005690:	d10d      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005692:	4b12      	ldr	r3, [pc, #72]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80056a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a6:	490d      	ldr	r1, [pc, #52]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	608b      	str	r3, [r1, #8]
 80056ac:	e005      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 80056ae:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056b4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80056b8:	6093      	str	r3, [r2, #8]
 80056ba:	4b08      	ldr	r3, [pc, #32]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056c6:	4905      	ldr	r1, [pc, #20]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	42470068 	.word	0x42470068
 80056dc:	40023800 	.word	0x40023800
 80056e0:	40007000 	.word	0x40007000
 80056e4:	42470e40 	.word	0x42470e40

080056e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d13e      	bne.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005706:	4b23      	ldr	r3, [pc, #140]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d12f      	bne.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800571c:	4b1e      	ldr	r3, [pc, #120]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800571e:	617b      	str	r3, [r7, #20]
          break;
 8005720:	e02f      	b.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005722:	4b1c      	ldr	r3, [pc, #112]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800572a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800572e:	d108      	bne.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005730:	4b18      	ldr	r3, [pc, #96]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005738:	4a18      	ldr	r2, [pc, #96]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800573a:	fbb2 f3f3 	udiv	r3, r2, r3
 800573e:	613b      	str	r3, [r7, #16]
 8005740:	e007      	b.n	8005752 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005742:	4b14      	ldr	r3, [pc, #80]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800574a:	4a15      	ldr	r2, [pc, #84]	; (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800574c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005750:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005752:	4b10      	ldr	r3, [pc, #64]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005758:	099b      	lsrs	r3, r3, #6
 800575a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	fb02 f303 	mul.w	r3, r2, r3
 8005764:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005766:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800576c:	0f1b      	lsrs	r3, r3, #28
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	fbb2 f3f3 	udiv	r3, r2, r3
 8005778:	617b      	str	r3, [r7, #20]
          break;
 800577a:	e002      	b.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	617b      	str	r3, [r7, #20]
          break;
 8005780:	bf00      	nop
        }
      }
      break;
 8005782:	bf00      	nop
    }
  }
  return frequency;
 8005784:	697b      	ldr	r3, [r7, #20]
}
 8005786:	4618      	mov	r0, r3
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40023800 	.word	0x40023800
 8005798:	00bb8000 	.word	0x00bb8000
 800579c:	007a1200 	.word	0x007a1200
 80057a0:	00f42400 	.word	0x00f42400

080057a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e07b      	b.n	80058ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d108      	bne.n	80057d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057c6:	d009      	beq.n	80057dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	61da      	str	r2, [r3, #28]
 80057ce:	e005      	b.n	80057dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d106      	bne.n	80057fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7fb fb0c 	bl	8000e14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005812:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	431a      	orrs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800584c:	431a      	orrs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005860:	ea42 0103 	orr.w	r1, r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005868:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	0c1b      	lsrs	r3, r3, #16
 800587a:	f003 0104 	and.w	r1, r3, #4
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	f003 0210 	and.w	r2, r3, #16
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69da      	ldr	r2, [r3, #28]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800589c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b082      	sub	sp, #8
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e041      	b.n	800594c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d106      	bne.n	80058e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7fb fae1 	bl	8000ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2202      	movs	r2, #2
 80058e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3304      	adds	r3, #4
 80058f2:	4619      	mov	r1, r3
 80058f4:	4610      	mov	r0, r2
 80058f6:	f000 fc13 	bl	8006120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e041      	b.n	80059ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f839 	bl	80059f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3304      	adds	r3, #4
 8005990:	4619      	mov	r1, r3
 8005992:	4610      	mov	r0, r2
 8005994:	f000 fbc4 	bl	8006120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
	...

08005a08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d109      	bne.n	8005a2c <HAL_TIM_PWM_Start+0x24>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	bf14      	ite	ne
 8005a24:	2301      	movne	r3, #1
 8005a26:	2300      	moveq	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	e022      	b.n	8005a72 <HAL_TIM_PWM_Start+0x6a>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d109      	bne.n	8005a46 <HAL_TIM_PWM_Start+0x3e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	bf14      	ite	ne
 8005a3e:	2301      	movne	r3, #1
 8005a40:	2300      	moveq	r3, #0
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	e015      	b.n	8005a72 <HAL_TIM_PWM_Start+0x6a>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d109      	bne.n	8005a60 <HAL_TIM_PWM_Start+0x58>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	bf14      	ite	ne
 8005a58:	2301      	movne	r3, #1
 8005a5a:	2300      	moveq	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	e008      	b.n	8005a72 <HAL_TIM_PWM_Start+0x6a>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	bf14      	ite	ne
 8005a6c:	2301      	movne	r3, #1
 8005a6e:	2300      	moveq	r3, #0
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e07c      	b.n	8005b74 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d104      	bne.n	8005a8a <HAL_TIM_PWM_Start+0x82>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a88:	e013      	b.n	8005ab2 <HAL_TIM_PWM_Start+0xaa>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b04      	cmp	r3, #4
 8005a8e:	d104      	bne.n	8005a9a <HAL_TIM_PWM_Start+0x92>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a98:	e00b      	b.n	8005ab2 <HAL_TIM_PWM_Start+0xaa>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d104      	bne.n	8005aaa <HAL_TIM_PWM_Start+0xa2>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005aa8:	e003      	b.n	8005ab2 <HAL_TIM_PWM_Start+0xaa>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2202      	movs	r2, #2
 8005aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	6839      	ldr	r1, [r7, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fe1a 	bl	80066f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a2d      	ldr	r2, [pc, #180]	; (8005b7c <HAL_TIM_PWM_Start+0x174>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d004      	beq.n	8005ad4 <HAL_TIM_PWM_Start+0xcc>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a2c      	ldr	r2, [pc, #176]	; (8005b80 <HAL_TIM_PWM_Start+0x178>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d101      	bne.n	8005ad8 <HAL_TIM_PWM_Start+0xd0>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e000      	b.n	8005ada <HAL_TIM_PWM_Start+0xd2>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005aec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a22      	ldr	r2, [pc, #136]	; (8005b7c <HAL_TIM_PWM_Start+0x174>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d022      	beq.n	8005b3e <HAL_TIM_PWM_Start+0x136>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b00:	d01d      	beq.n	8005b3e <HAL_TIM_PWM_Start+0x136>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a1f      	ldr	r2, [pc, #124]	; (8005b84 <HAL_TIM_PWM_Start+0x17c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d018      	beq.n	8005b3e <HAL_TIM_PWM_Start+0x136>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a1d      	ldr	r2, [pc, #116]	; (8005b88 <HAL_TIM_PWM_Start+0x180>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d013      	beq.n	8005b3e <HAL_TIM_PWM_Start+0x136>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a1c      	ldr	r2, [pc, #112]	; (8005b8c <HAL_TIM_PWM_Start+0x184>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00e      	beq.n	8005b3e <HAL_TIM_PWM_Start+0x136>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a16      	ldr	r2, [pc, #88]	; (8005b80 <HAL_TIM_PWM_Start+0x178>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d009      	beq.n	8005b3e <HAL_TIM_PWM_Start+0x136>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a18      	ldr	r2, [pc, #96]	; (8005b90 <HAL_TIM_PWM_Start+0x188>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d004      	beq.n	8005b3e <HAL_TIM_PWM_Start+0x136>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a16      	ldr	r2, [pc, #88]	; (8005b94 <HAL_TIM_PWM_Start+0x18c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d111      	bne.n	8005b62 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2b06      	cmp	r3, #6
 8005b4e:	d010      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0201 	orr.w	r2, r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b60:	e007      	b.n	8005b72 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f042 0201 	orr.w	r2, r2, #1
 8005b70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	40010000 	.word	0x40010000
 8005b80:	40010400 	.word	0x40010400
 8005b84:	40000400 	.word	0x40000400
 8005b88:	40000800 	.word	0x40000800
 8005b8c:	40000c00 	.word	0x40000c00
 8005b90:	40014000 	.word	0x40014000
 8005b94:	40001800 	.word	0x40001800

08005b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d122      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d11b      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0202 	mvn.w	r2, #2
 8005bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fa81 	bl	80060e2 <HAL_TIM_IC_CaptureCallback>
 8005be0:	e005      	b.n	8005bee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fa73 	bl	80060ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fa84 	bl	80060f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d122      	bne.n	8005c48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d11b      	bne.n	8005c48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f06f 0204 	mvn.w	r2, #4
 8005c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fa57 	bl	80060e2 <HAL_TIM_IC_CaptureCallback>
 8005c34:	e005      	b.n	8005c42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fa49 	bl	80060ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fa5a 	bl	80060f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0308 	and.w	r3, r3, #8
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d122      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f003 0308 	and.w	r3, r3, #8
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d11b      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0208 	mvn.w	r2, #8
 8005c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2204      	movs	r2, #4
 8005c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f003 0303 	and.w	r3, r3, #3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fa2d 	bl	80060e2 <HAL_TIM_IC_CaptureCallback>
 8005c88:	e005      	b.n	8005c96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fa1f 	bl	80060ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fa30 	bl	80060f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0310 	and.w	r3, r3, #16
 8005ca6:	2b10      	cmp	r3, #16
 8005ca8:	d122      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0310 	and.w	r3, r3, #16
 8005cb4:	2b10      	cmp	r3, #16
 8005cb6:	d11b      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0210 	mvn.w	r2, #16
 8005cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fa03 	bl	80060e2 <HAL_TIM_IC_CaptureCallback>
 8005cdc:	e005      	b.n	8005cea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f9f5 	bl	80060ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fa06 	bl	80060f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d10e      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d107      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0201 	mvn.w	r2, #1
 8005d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f9cf 	bl	80060ba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d26:	2b80      	cmp	r3, #128	; 0x80
 8005d28:	d10e      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d34:	2b80      	cmp	r3, #128	; 0x80
 8005d36:	d107      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fd82 	bl	800684c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d52:	2b40      	cmp	r3, #64	; 0x40
 8005d54:	d10e      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d60:	2b40      	cmp	r3, #64	; 0x40
 8005d62:	d107      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f9cb 	bl	800610a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d10e      	bne.n	8005da0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f003 0320 	and.w	r3, r3, #32
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d107      	bne.n	8005da0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f06f 0220 	mvn.w	r2, #32
 8005d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fd4c 	bl	8006838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005da0:	bf00      	nop
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d101      	bne.n	8005dc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e0ae      	b.n	8005f24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b0c      	cmp	r3, #12
 8005dd2:	f200 809f 	bhi.w	8005f14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005dd6:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ddc:	08005e11 	.word	0x08005e11
 8005de0:	08005f15 	.word	0x08005f15
 8005de4:	08005f15 	.word	0x08005f15
 8005de8:	08005f15 	.word	0x08005f15
 8005dec:	08005e51 	.word	0x08005e51
 8005df0:	08005f15 	.word	0x08005f15
 8005df4:	08005f15 	.word	0x08005f15
 8005df8:	08005f15 	.word	0x08005f15
 8005dfc:	08005e93 	.word	0x08005e93
 8005e00:	08005f15 	.word	0x08005f15
 8005e04:	08005f15 	.word	0x08005f15
 8005e08:	08005f15 	.word	0x08005f15
 8005e0c:	08005ed3 	.word	0x08005ed3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68b9      	ldr	r1, [r7, #8]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fa22 	bl	8006260 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699a      	ldr	r2, [r3, #24]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f042 0208 	orr.w	r2, r2, #8
 8005e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699a      	ldr	r2, [r3, #24]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0204 	bic.w	r2, r2, #4
 8005e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6999      	ldr	r1, [r3, #24]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	691a      	ldr	r2, [r3, #16]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	619a      	str	r2, [r3, #24]
      break;
 8005e4e:	e064      	b.n	8005f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68b9      	ldr	r1, [r7, #8]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 fa72 	bl	8006340 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	699a      	ldr	r2, [r3, #24]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699a      	ldr	r2, [r3, #24]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6999      	ldr	r1, [r3, #24]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	021a      	lsls	r2, r3, #8
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	619a      	str	r2, [r3, #24]
      break;
 8005e90:	e043      	b.n	8005f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68b9      	ldr	r1, [r7, #8]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fac7 	bl	800642c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	69da      	ldr	r2, [r3, #28]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f042 0208 	orr.w	r2, r2, #8
 8005eac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69da      	ldr	r2, [r3, #28]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0204 	bic.w	r2, r2, #4
 8005ebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69d9      	ldr	r1, [r3, #28]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	61da      	str	r2, [r3, #28]
      break;
 8005ed0:	e023      	b.n	8005f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68b9      	ldr	r1, [r7, #8]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 fb1b 	bl	8006514 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69da      	ldr	r2, [r3, #28]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69da      	ldr	r2, [r3, #28]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69d9      	ldr	r1, [r3, #28]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	021a      	lsls	r2, r3, #8
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	61da      	str	r2, [r3, #28]
      break;
 8005f12:	e002      	b.n	8005f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	75fb      	strb	r3, [r7, #23]
      break;
 8005f18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3718      	adds	r7, #24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_TIM_ConfigClockSource+0x1c>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e0b4      	b.n	80060b2 <HAL_TIM_ConfigClockSource+0x186>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f80:	d03e      	beq.n	8006000 <HAL_TIM_ConfigClockSource+0xd4>
 8005f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f86:	f200 8087 	bhi.w	8006098 <HAL_TIM_ConfigClockSource+0x16c>
 8005f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f8e:	f000 8086 	beq.w	800609e <HAL_TIM_ConfigClockSource+0x172>
 8005f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f96:	d87f      	bhi.n	8006098 <HAL_TIM_ConfigClockSource+0x16c>
 8005f98:	2b70      	cmp	r3, #112	; 0x70
 8005f9a:	d01a      	beq.n	8005fd2 <HAL_TIM_ConfigClockSource+0xa6>
 8005f9c:	2b70      	cmp	r3, #112	; 0x70
 8005f9e:	d87b      	bhi.n	8006098 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa0:	2b60      	cmp	r3, #96	; 0x60
 8005fa2:	d050      	beq.n	8006046 <HAL_TIM_ConfigClockSource+0x11a>
 8005fa4:	2b60      	cmp	r3, #96	; 0x60
 8005fa6:	d877      	bhi.n	8006098 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa8:	2b50      	cmp	r3, #80	; 0x50
 8005faa:	d03c      	beq.n	8006026 <HAL_TIM_ConfigClockSource+0xfa>
 8005fac:	2b50      	cmp	r3, #80	; 0x50
 8005fae:	d873      	bhi.n	8006098 <HAL_TIM_ConfigClockSource+0x16c>
 8005fb0:	2b40      	cmp	r3, #64	; 0x40
 8005fb2:	d058      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x13a>
 8005fb4:	2b40      	cmp	r3, #64	; 0x40
 8005fb6:	d86f      	bhi.n	8006098 <HAL_TIM_ConfigClockSource+0x16c>
 8005fb8:	2b30      	cmp	r3, #48	; 0x30
 8005fba:	d064      	beq.n	8006086 <HAL_TIM_ConfigClockSource+0x15a>
 8005fbc:	2b30      	cmp	r3, #48	; 0x30
 8005fbe:	d86b      	bhi.n	8006098 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	d060      	beq.n	8006086 <HAL_TIM_ConfigClockSource+0x15a>
 8005fc4:	2b20      	cmp	r3, #32
 8005fc6:	d867      	bhi.n	8006098 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d05c      	beq.n	8006086 <HAL_TIM_ConfigClockSource+0x15a>
 8005fcc:	2b10      	cmp	r3, #16
 8005fce:	d05a      	beq.n	8006086 <HAL_TIM_ConfigClockSource+0x15a>
 8005fd0:	e062      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6818      	ldr	r0, [r3, #0]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	6899      	ldr	r1, [r3, #8]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f000 fb67 	bl	80066b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ff4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	609a      	str	r2, [r3, #8]
      break;
 8005ffe:	e04f      	b.n	80060a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	6899      	ldr	r1, [r3, #8]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f000 fb50 	bl	80066b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006022:	609a      	str	r2, [r3, #8]
      break;
 8006024:	e03c      	b.n	80060a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	6859      	ldr	r1, [r3, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	461a      	mov	r2, r3
 8006034:	f000 fac4 	bl	80065c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2150      	movs	r1, #80	; 0x50
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fb1d 	bl	800667e <TIM_ITRx_SetConfig>
      break;
 8006044:	e02c      	b.n	80060a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6818      	ldr	r0, [r3, #0]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	6859      	ldr	r1, [r3, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	461a      	mov	r2, r3
 8006054:	f000 fae3 	bl	800661e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2160      	movs	r1, #96	; 0x60
 800605e:	4618      	mov	r0, r3
 8006060:	f000 fb0d 	bl	800667e <TIM_ITRx_SetConfig>
      break;
 8006064:	e01c      	b.n	80060a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6818      	ldr	r0, [r3, #0]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	6859      	ldr	r1, [r3, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	461a      	mov	r2, r3
 8006074:	f000 faa4 	bl	80065c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2140      	movs	r1, #64	; 0x40
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fafd 	bl	800667e <TIM_ITRx_SetConfig>
      break;
 8006084:	e00c      	b.n	80060a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4619      	mov	r1, r3
 8006090:	4610      	mov	r0, r2
 8006092:	f000 faf4 	bl	800667e <TIM_ITRx_SetConfig>
      break;
 8006096:	e003      	b.n	80060a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	73fb      	strb	r3, [r7, #15]
      break;
 800609c:	e000      	b.n	80060a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800609e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b083      	sub	sp, #12
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060d6:	bf00      	nop
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b083      	sub	sp, #12
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
	...

08006120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a40      	ldr	r2, [pc, #256]	; (8006234 <TIM_Base_SetConfig+0x114>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d013      	beq.n	8006160 <TIM_Base_SetConfig+0x40>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800613e:	d00f      	beq.n	8006160 <TIM_Base_SetConfig+0x40>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a3d      	ldr	r2, [pc, #244]	; (8006238 <TIM_Base_SetConfig+0x118>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d00b      	beq.n	8006160 <TIM_Base_SetConfig+0x40>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a3c      	ldr	r2, [pc, #240]	; (800623c <TIM_Base_SetConfig+0x11c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d007      	beq.n	8006160 <TIM_Base_SetConfig+0x40>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a3b      	ldr	r2, [pc, #236]	; (8006240 <TIM_Base_SetConfig+0x120>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d003      	beq.n	8006160 <TIM_Base_SetConfig+0x40>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a3a      	ldr	r2, [pc, #232]	; (8006244 <TIM_Base_SetConfig+0x124>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d108      	bne.n	8006172 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a2f      	ldr	r2, [pc, #188]	; (8006234 <TIM_Base_SetConfig+0x114>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d02b      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006180:	d027      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a2c      	ldr	r2, [pc, #176]	; (8006238 <TIM_Base_SetConfig+0x118>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d023      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a2b      	ldr	r2, [pc, #172]	; (800623c <TIM_Base_SetConfig+0x11c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d01f      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a2a      	ldr	r2, [pc, #168]	; (8006240 <TIM_Base_SetConfig+0x120>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d01b      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a29      	ldr	r2, [pc, #164]	; (8006244 <TIM_Base_SetConfig+0x124>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d017      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a28      	ldr	r2, [pc, #160]	; (8006248 <TIM_Base_SetConfig+0x128>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d013      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a27      	ldr	r2, [pc, #156]	; (800624c <TIM_Base_SetConfig+0x12c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d00f      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a26      	ldr	r2, [pc, #152]	; (8006250 <TIM_Base_SetConfig+0x130>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d00b      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a25      	ldr	r2, [pc, #148]	; (8006254 <TIM_Base_SetConfig+0x134>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d007      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a24      	ldr	r2, [pc, #144]	; (8006258 <TIM_Base_SetConfig+0x138>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d003      	beq.n	80061d2 <TIM_Base_SetConfig+0xb2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a23      	ldr	r2, [pc, #140]	; (800625c <TIM_Base_SetConfig+0x13c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d108      	bne.n	80061e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a0a      	ldr	r2, [pc, #40]	; (8006234 <TIM_Base_SetConfig+0x114>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d003      	beq.n	8006218 <TIM_Base_SetConfig+0xf8>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a0c      	ldr	r2, [pc, #48]	; (8006244 <TIM_Base_SetConfig+0x124>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d103      	bne.n	8006220 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	691a      	ldr	r2, [r3, #16]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	615a      	str	r2, [r3, #20]
}
 8006226:	bf00      	nop
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	40010000 	.word	0x40010000
 8006238:	40000400 	.word	0x40000400
 800623c:	40000800 	.word	0x40000800
 8006240:	40000c00 	.word	0x40000c00
 8006244:	40010400 	.word	0x40010400
 8006248:	40014000 	.word	0x40014000
 800624c:	40014400 	.word	0x40014400
 8006250:	40014800 	.word	0x40014800
 8006254:	40001800 	.word	0x40001800
 8006258:	40001c00 	.word	0x40001c00
 800625c:	40002000 	.word	0x40002000

08006260 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	f023 0201 	bic.w	r2, r3, #1
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 0303 	bic.w	r3, r3, #3
 8006296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f023 0302 	bic.w	r3, r3, #2
 80062a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a20      	ldr	r2, [pc, #128]	; (8006338 <TIM_OC1_SetConfig+0xd8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d003      	beq.n	80062c4 <TIM_OC1_SetConfig+0x64>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a1f      	ldr	r2, [pc, #124]	; (800633c <TIM_OC1_SetConfig+0xdc>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d10c      	bne.n	80062de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f023 0308 	bic.w	r3, r3, #8
 80062ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f023 0304 	bic.w	r3, r3, #4
 80062dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a15      	ldr	r2, [pc, #84]	; (8006338 <TIM_OC1_SetConfig+0xd8>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d003      	beq.n	80062ee <TIM_OC1_SetConfig+0x8e>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a14      	ldr	r2, [pc, #80]	; (800633c <TIM_OC1_SetConfig+0xdc>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d111      	bne.n	8006312 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	4313      	orrs	r3, r2
 8006306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	621a      	str	r2, [r3, #32]
}
 800632c:	bf00      	nop
 800632e:	371c      	adds	r7, #28
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	40010000 	.word	0x40010000
 800633c:	40010400 	.word	0x40010400

08006340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	f023 0210 	bic.w	r2, r3, #16
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800636e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	021b      	lsls	r3, r3, #8
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4313      	orrs	r3, r2
 8006382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f023 0320 	bic.w	r3, r3, #32
 800638a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a22      	ldr	r2, [pc, #136]	; (8006424 <TIM_OC2_SetConfig+0xe4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d003      	beq.n	80063a8 <TIM_OC2_SetConfig+0x68>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a21      	ldr	r2, [pc, #132]	; (8006428 <TIM_OC2_SetConfig+0xe8>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d10d      	bne.n	80063c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	011b      	lsls	r3, r3, #4
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a17      	ldr	r2, [pc, #92]	; (8006424 <TIM_OC2_SetConfig+0xe4>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d003      	beq.n	80063d4 <TIM_OC2_SetConfig+0x94>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a16      	ldr	r2, [pc, #88]	; (8006428 <TIM_OC2_SetConfig+0xe8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d113      	bne.n	80063fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	621a      	str	r2, [r3, #32]
}
 8006416:	bf00      	nop
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	40010000 	.word	0x40010000
 8006428:	40010400 	.word	0x40010400

0800642c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800642c:	b480      	push	{r7}
 800642e:	b087      	sub	sp, #28
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0303 	bic.w	r3, r3, #3
 8006462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	021b      	lsls	r3, r3, #8
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	4313      	orrs	r3, r2
 8006480:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a21      	ldr	r2, [pc, #132]	; (800650c <TIM_OC3_SetConfig+0xe0>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d003      	beq.n	8006492 <TIM_OC3_SetConfig+0x66>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a20      	ldr	r2, [pc, #128]	; (8006510 <TIM_OC3_SetConfig+0xe4>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d10d      	bne.n	80064ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	021b      	lsls	r3, r3, #8
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a16      	ldr	r2, [pc, #88]	; (800650c <TIM_OC3_SetConfig+0xe0>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d003      	beq.n	80064be <TIM_OC3_SetConfig+0x92>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a15      	ldr	r2, [pc, #84]	; (8006510 <TIM_OC3_SetConfig+0xe4>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d113      	bne.n	80064e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	011b      	lsls	r3, r3, #4
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	011b      	lsls	r3, r3, #4
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	621a      	str	r2, [r3, #32]
}
 8006500:	bf00      	nop
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	40010000 	.word	0x40010000
 8006510:	40010400 	.word	0x40010400

08006514 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800654a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	021b      	lsls	r3, r3, #8
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	4313      	orrs	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800655e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	031b      	lsls	r3, r3, #12
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	4313      	orrs	r3, r2
 800656a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a12      	ldr	r2, [pc, #72]	; (80065b8 <TIM_OC4_SetConfig+0xa4>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d003      	beq.n	800657c <TIM_OC4_SetConfig+0x68>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a11      	ldr	r2, [pc, #68]	; (80065bc <TIM_OC4_SetConfig+0xa8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d109      	bne.n	8006590 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006582:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	019b      	lsls	r3, r3, #6
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	621a      	str	r2, [r3, #32]
}
 80065aa:	bf00      	nop
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40010000 	.word	0x40010000
 80065bc:	40010400 	.word	0x40010400

080065c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	f023 0201 	bic.w	r2, r3, #1
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	011b      	lsls	r3, r3, #4
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f023 030a 	bic.w	r3, r3, #10
 80065fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	4313      	orrs	r3, r2
 8006604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	621a      	str	r2, [r3, #32]
}
 8006612:	bf00      	nop
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800661e:	b480      	push	{r7}
 8006620:	b087      	sub	sp, #28
 8006622:	af00      	add	r7, sp, #0
 8006624:	60f8      	str	r0, [r7, #12]
 8006626:	60b9      	str	r1, [r7, #8]
 8006628:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	f023 0210 	bic.w	r2, r3, #16
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006648:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	031b      	lsls	r3, r3, #12
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	4313      	orrs	r3, r2
 8006652:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800665a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	011b      	lsls	r3, r3, #4
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	4313      	orrs	r3, r2
 8006664:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	621a      	str	r2, [r3, #32]
}
 8006672:	bf00      	nop
 8006674:	371c      	adds	r7, #28
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800667e:	b480      	push	{r7}
 8006680:	b085      	sub	sp, #20
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006694:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4313      	orrs	r3, r2
 800669c:	f043 0307 	orr.w	r3, r3, #7
 80066a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	609a      	str	r2, [r3, #8]
}
 80066a8:	bf00      	nop
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
 80066c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	021a      	lsls	r2, r3, #8
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	431a      	orrs	r2, r3
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	4313      	orrs	r3, r2
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	4313      	orrs	r3, r2
 80066e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	609a      	str	r2, [r3, #8]
}
 80066e8:	bf00      	nop
 80066ea:	371c      	adds	r7, #28
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f003 031f 	and.w	r3, r3, #31
 8006706:	2201      	movs	r2, #1
 8006708:	fa02 f303 	lsl.w	r3, r2, r3
 800670c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6a1a      	ldr	r2, [r3, #32]
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	43db      	mvns	r3, r3
 8006716:	401a      	ands	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6a1a      	ldr	r2, [r3, #32]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f003 031f 	and.w	r3, r3, #31
 8006726:	6879      	ldr	r1, [r7, #4]
 8006728:	fa01 f303 	lsl.w	r3, r1, r3
 800672c:	431a      	orrs	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	621a      	str	r2, [r3, #32]
}
 8006732:	bf00      	nop
 8006734:	371c      	adds	r7, #28
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
	...

08006740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006750:	2b01      	cmp	r3, #1
 8006752:	d101      	bne.n	8006758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006754:	2302      	movs	r3, #2
 8006756:	e05a      	b.n	800680e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a21      	ldr	r2, [pc, #132]	; (800681c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d022      	beq.n	80067e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a4:	d01d      	beq.n	80067e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1d      	ldr	r2, [pc, #116]	; (8006820 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d018      	beq.n	80067e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a1b      	ldr	r2, [pc, #108]	; (8006824 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d013      	beq.n	80067e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1a      	ldr	r2, [pc, #104]	; (8006828 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00e      	beq.n	80067e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a18      	ldr	r2, [pc, #96]	; (800682c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d009      	beq.n	80067e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a17      	ldr	r2, [pc, #92]	; (8006830 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d004      	beq.n	80067e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a15      	ldr	r2, [pc, #84]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d10c      	bne.n	80067fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40010000 	.word	0x40010000
 8006820:	40000400 	.word	0x40000400
 8006824:	40000800 	.word	0x40000800
 8006828:	40000c00 	.word	0x40000c00
 800682c:	40010400 	.word	0x40010400
 8006830:	40014000 	.word	0x40014000
 8006834:	40001800 	.word	0x40001800

08006838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006860:	b084      	sub	sp, #16
 8006862:	b580      	push	{r7, lr}
 8006864:	b084      	sub	sp, #16
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	f107 001c 	add.w	r0, r7, #28
 800686e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	2b01      	cmp	r3, #1
 8006876:	d122      	bne.n	80068be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800688c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d105      	bne.n	80068b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f9c0 	bl	8006c38 <USB_CoreReset>
 80068b8:	4603      	mov	r3, r0
 80068ba:	73fb      	strb	r3, [r7, #15]
 80068bc:	e01a      	b.n	80068f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f9b4 	bl	8006c38 <USB_CoreReset>
 80068d0:	4603      	mov	r3, r0
 80068d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80068d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d106      	bne.n	80068e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	639a      	str	r2, [r3, #56]	; 0x38
 80068e6:	e005      	b.n	80068f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80068f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d10b      	bne.n	8006912 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f043 0206 	orr.w	r2, r3, #6
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f043 0220 	orr.w	r2, r3, #32
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006912:	7bfb      	ldrb	r3, [r7, #15]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800691e:	b004      	add	sp, #16
 8006920:	4770      	bx	lr

08006922 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f043 0201 	orr.w	r2, r3, #1
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f023 0201 	bic.w	r2, r3, #1
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	460b      	mov	r3, r1
 8006970:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006982:	78fb      	ldrb	r3, [r7, #3]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d115      	bne.n	80069b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006994:	2001      	movs	r0, #1
 8006996:	f7fa fc45 	bl	8001224 <HAL_Delay>
      ms++;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	3301      	adds	r3, #1
 800699e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f93a 	bl	8006c1a <USB_GetMode>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d01e      	beq.n	80069ea <USB_SetCurrentMode+0x84>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2b31      	cmp	r3, #49	; 0x31
 80069b0:	d9f0      	bls.n	8006994 <USB_SetCurrentMode+0x2e>
 80069b2:	e01a      	b.n	80069ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80069b4:	78fb      	ldrb	r3, [r7, #3]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d115      	bne.n	80069e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80069c6:	2001      	movs	r0, #1
 80069c8:	f7fa fc2c 	bl	8001224 <HAL_Delay>
      ms++;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3301      	adds	r3, #1
 80069d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f921 	bl	8006c1a <USB_GetMode>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d005      	beq.n	80069ea <USB_SetCurrentMode+0x84>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b31      	cmp	r3, #49	; 0x31
 80069e2:	d9f0      	bls.n	80069c6 <USB_SetCurrentMode+0x60>
 80069e4:	e001      	b.n	80069ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e005      	b.n	80069f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2b32      	cmp	r3, #50	; 0x32
 80069ee:	d101      	bne.n	80069f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e000      	b.n	80069f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
	...

08006a00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3301      	adds	r3, #1
 8006a12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4a13      	ldr	r2, [pc, #76]	; (8006a64 <USB_FlushTxFifo+0x64>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d901      	bls.n	8006a20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e01b      	b.n	8006a58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	daf2      	bge.n	8006a0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	019b      	lsls	r3, r3, #6
 8006a30:	f043 0220 	orr.w	r2, r3, #32
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4a08      	ldr	r2, [pc, #32]	; (8006a64 <USB_FlushTxFifo+0x64>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d901      	bls.n	8006a4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e006      	b.n	8006a58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b20      	cmp	r3, #32
 8006a54:	d0f0      	beq.n	8006a38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3714      	adds	r7, #20
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	00030d40 	.word	0x00030d40

08006a68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	3301      	adds	r3, #1
 8006a78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	4a11      	ldr	r2, [pc, #68]	; (8006ac4 <USB_FlushRxFifo+0x5c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d901      	bls.n	8006a86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e018      	b.n	8006ab8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	daf2      	bge.n	8006a74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2210      	movs	r2, #16
 8006a96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4a08      	ldr	r2, [pc, #32]	; (8006ac4 <USB_FlushRxFifo+0x5c>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d901      	bls.n	8006aaa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e006      	b.n	8006ab8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	f003 0310 	and.w	r3, r3, #16
 8006ab2:	2b10      	cmp	r3, #16
 8006ab4:	d0f0      	beq.n	8006a98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	00030d40 	.word	0x00030d40

08006ac8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b089      	sub	sp, #36	; 0x24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	71fb      	strb	r3, [r7, #7]
 8006ada:	4613      	mov	r3, r2
 8006adc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006ae6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d123      	bne.n	8006b36 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006aee:	88bb      	ldrh	r3, [r7, #4]
 8006af0:	3303      	adds	r3, #3
 8006af2:	089b      	lsrs	r3, r3, #2
 8006af4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006af6:	2300      	movs	r3, #0
 8006af8:	61bb      	str	r3, [r7, #24]
 8006afa:	e018      	b.n	8006b2e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006afc:	79fb      	ldrb	r3, [r7, #7]
 8006afe:	031a      	lsls	r2, r3, #12
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b08:	461a      	mov	r2, r3
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	3301      	adds	r3, #1
 8006b14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	3301      	adds	r3, #1
 8006b26:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	61bb      	str	r3, [r7, #24]
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d3e2      	bcc.n	8006afc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3724      	adds	r7, #36	; 0x24
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b08b      	sub	sp, #44	; 0x2c
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006b5a:	88fb      	ldrh	r3, [r7, #6]
 8006b5c:	089b      	lsrs	r3, r3, #2
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006b62:	88fb      	ldrh	r3, [r7, #6]
 8006b64:	f003 0303 	and.w	r3, r3, #3
 8006b68:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	623b      	str	r3, [r7, #32]
 8006b6e:	e014      	b.n	8006b9a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	3301      	adds	r3, #1
 8006b80:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	3301      	adds	r3, #1
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	3301      	adds	r3, #1
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	3301      	adds	r3, #1
 8006b98:	623b      	str	r3, [r7, #32]
 8006b9a:	6a3a      	ldr	r2, [r7, #32]
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d3e6      	bcc.n	8006b70 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ba2:	8bfb      	ldrh	r3, [r7, #30]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d01e      	beq.n	8006be6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	f107 0310 	add.w	r3, r7, #16
 8006bb8:	6812      	ldr	r2, [r2, #0]
 8006bba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	00db      	lsls	r3, r3, #3
 8006bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	701a      	strb	r2, [r3, #0]
      i++;
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	623b      	str	r3, [r7, #32]
      pDest++;
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006bda:	8bfb      	ldrh	r3, [r7, #30]
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006be0:	8bfb      	ldrh	r3, [r7, #30]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1ea      	bne.n	8006bbc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	372c      	adds	r7, #44	; 0x2c
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b083      	sub	sp, #12
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	f003 0301 	and.w	r3, r3, #1
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
	...

08006c38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	3301      	adds	r3, #1
 8006c48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4a13      	ldr	r2, [pc, #76]	; (8006c9c <USB_CoreReset+0x64>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d901      	bls.n	8006c56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e01b      	b.n	8006c8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	daf2      	bge.n	8006c44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	f043 0201 	orr.w	r2, r3, #1
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3301      	adds	r3, #1
 8006c72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4a09      	ldr	r2, [pc, #36]	; (8006c9c <USB_CoreReset+0x64>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d901      	bls.n	8006c80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e006      	b.n	8006c8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d0f0      	beq.n	8006c6e <USB_CoreReset+0x36>

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	00030d40 	.word	0x00030d40

08006ca0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b086      	sub	sp, #24
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006cae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d018      	beq.n	8006d28 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d10a      	bne.n	8006d12 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d0a:	f043 0304 	orr.w	r3, r3, #4
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	e014      	b.n	8006d3c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d20:	f023 0304 	bic.w	r3, r3, #4
 8006d24:	6013      	str	r3, [r2, #0]
 8006d26:	e009      	b.n	8006d3c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d36:	f023 0304 	bic.w	r3, r3, #4
 8006d3a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d3c:	2110      	movs	r1, #16
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7ff fe5e 	bl	8006a00 <USB_FlushTxFifo>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7ff fe8a 	bl	8006a68 <USB_FlushRxFifo>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d5e:	2300      	movs	r3, #0
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	e015      	b.n	8006d90 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d70:	461a      	mov	r2, r3
 8006d72:	f04f 33ff 	mov.w	r3, #4294967295
 8006d76:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d84:	461a      	mov	r2, r3
 8006d86:	2300      	movs	r3, #0
 8006d88:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	613b      	str	r3, [r7, #16]
 8006d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d3e5      	bcc.n	8006d64 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f04f 32ff 	mov.w	r2, #4294967295
 8006da4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00b      	beq.n	8006dca <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006db8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a13      	ldr	r2, [pc, #76]	; (8006e0c <USB_HostInit+0x16c>)
 8006dbe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a13      	ldr	r2, [pc, #76]	; (8006e10 <USB_HostInit+0x170>)
 8006dc4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006dc8:	e009      	b.n	8006dde <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2280      	movs	r2, #128	; 0x80
 8006dce:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a10      	ldr	r2, [pc, #64]	; (8006e14 <USB_HostInit+0x174>)
 8006dd4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a0f      	ldr	r2, [pc, #60]	; (8006e18 <USB_HostInit+0x178>)
 8006dda:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d105      	bne.n	8006df0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	f043 0210 	orr.w	r2, r3, #16
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	699a      	ldr	r2, [r3, #24]
 8006df4:	4b09      	ldr	r3, [pc, #36]	; (8006e1c <USB_HostInit+0x17c>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3718      	adds	r7, #24
 8006e02:	46bd      	mov	sp, r7
 8006e04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e08:	b004      	add	sp, #16
 8006e0a:	4770      	bx	lr
 8006e0c:	01000200 	.word	0x01000200
 8006e10:	00e00300 	.word	0x00e00300
 8006e14:	00600080 	.word	0x00600080
 8006e18:	004000e0 	.word	0x004000e0
 8006e1c:	a3200008 	.word	0xa3200008

08006e20 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e3e:	f023 0303 	bic.w	r3, r3, #3
 8006e42:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	78fb      	ldrb	r3, [r7, #3]
 8006e4e:	f003 0303 	and.w	r3, r3, #3
 8006e52:	68f9      	ldr	r1, [r7, #12]
 8006e54:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006e5c:	78fb      	ldrb	r3, [r7, #3]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d107      	bne.n	8006e72 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e68:	461a      	mov	r2, r3
 8006e6a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006e6e:	6053      	str	r3, [r2, #4]
 8006e70:	e009      	b.n	8006e86 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006e72:	78fb      	ldrb	r3, [r7, #3]
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d106      	bne.n	8006e86 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f241 7370 	movw	r3, #6000	; 0x1770
 8006e84:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006eb4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ec2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006ec4:	2064      	movs	r0, #100	; 0x64
 8006ec6:	f7fa f9ad 	bl	8001224 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ed2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ed6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006ed8:	200a      	movs	r0, #10
 8006eda:	f7fa f9a3 	bl	8001224 <HAL_Delay>

  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006f0c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d109      	bne.n	8006f2c <USB_DriveVbus+0x44>
 8006f18:	78fb      	ldrb	r3, [r7, #3]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d106      	bne.n	8006f2c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006f26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f2a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f36:	d109      	bne.n	8006f4c <USB_DriveVbus+0x64>
 8006f38:	78fb      	ldrb	r3, [r7, #3]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d106      	bne.n	8006f4c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f4a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b085      	sub	sp, #20
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	0c5b      	lsrs	r3, r3, #17
 8006f78:	f003 0303 	and.w	r3, r3, #3
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	b29b      	uxth	r3, r3
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
	...

08006fac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	4608      	mov	r0, r1
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	461a      	mov	r2, r3
 8006fba:	4603      	mov	r3, r0
 8006fbc:	70fb      	strb	r3, [r7, #3]
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	70bb      	strb	r3, [r7, #2]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006fce:	78fb      	ldrb	r3, [r7, #3]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8006fe0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006fe2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d87e      	bhi.n	80070e8 <USB_HC_Init+0x13c>
 8006fea:	a201      	add	r2, pc, #4	; (adr r2, 8006ff0 <USB_HC_Init+0x44>)
 8006fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff0:	08007001 	.word	0x08007001
 8006ff4:	080070ab 	.word	0x080070ab
 8006ff8:	08007001 	.word	0x08007001
 8006ffc:	0800706d 	.word	0x0800706d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007000:	78fb      	ldrb	r3, [r7, #3]
 8007002:	015a      	lsls	r2, r3, #5
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	4413      	add	r3, r2
 8007008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800700c:	461a      	mov	r2, r3
 800700e:	f240 439d 	movw	r3, #1181	; 0x49d
 8007012:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007014:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007018:	2b00      	cmp	r3, #0
 800701a:	da10      	bge.n	800703e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	4413      	add	r3, r2
 8007024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	78fa      	ldrb	r2, [r7, #3]
 800702c:	0151      	lsls	r1, r2, #5
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	440a      	add	r2, r1
 8007032:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800703a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800703c:	e057      	b.n	80070ee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007046:	2b00      	cmp	r3, #0
 8007048:	d051      	beq.n	80070ee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800704a:	78fb      	ldrb	r3, [r7, #3]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	4413      	add	r3, r2
 8007052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	78fa      	ldrb	r2, [r7, #3]
 800705a:	0151      	lsls	r1, r2, #5
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	440a      	add	r2, r1
 8007060:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007064:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007068:	60d3      	str	r3, [r2, #12]
      break;
 800706a:	e040      	b.n	80070ee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800706c:	78fb      	ldrb	r3, [r7, #3]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	4413      	add	r3, r2
 8007074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007078:	461a      	mov	r2, r3
 800707a:	f240 639d 	movw	r3, #1693	; 0x69d
 800707e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007080:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007084:	2b00      	cmp	r3, #0
 8007086:	da34      	bge.n	80070f2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007088:	78fb      	ldrb	r3, [r7, #3]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	4413      	add	r3, r2
 8007090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	78fa      	ldrb	r2, [r7, #3]
 8007098:	0151      	lsls	r1, r2, #5
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	440a      	add	r2, r1
 800709e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070a6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80070a8:	e023      	b.n	80070f2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80070aa:	78fb      	ldrb	r3, [r7, #3]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b6:	461a      	mov	r2, r3
 80070b8:	f240 2325 	movw	r3, #549	; 0x225
 80070bc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80070be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	da17      	bge.n	80070f6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80070c6:	78fb      	ldrb	r3, [r7, #3]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	78fa      	ldrb	r2, [r7, #3]
 80070d6:	0151      	lsls	r1, r2, #5
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	440a      	add	r2, r1
 80070dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070e0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80070e4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80070e6:	e006      	b.n	80070f6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	77fb      	strb	r3, [r7, #31]
      break;
 80070ec:	e004      	b.n	80070f8 <USB_HC_Init+0x14c>
      break;
 80070ee:	bf00      	nop
 80070f0:	e002      	b.n	80070f8 <USB_HC_Init+0x14c>
      break;
 80070f2:	bf00      	nop
 80070f4:	e000      	b.n	80070f8 <USB_HC_Init+0x14c>
      break;
 80070f6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	78fa      	ldrb	r2, [r7, #3]
 8007108:	0151      	lsls	r1, r2, #5
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	440a      	add	r2, r1
 800710e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007112:	f043 0302 	orr.w	r3, r3, #2
 8007116:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800711e:	699a      	ldr	r2, [r3, #24]
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	2101      	movs	r1, #1
 8007128:	fa01 f303 	lsl.w	r3, r1, r3
 800712c:	6939      	ldr	r1, [r7, #16]
 800712e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007132:	4313      	orrs	r3, r2
 8007134:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007142:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007146:	2b00      	cmp	r3, #0
 8007148:	da03      	bge.n	8007152 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800714a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800714e:	61bb      	str	r3, [r7, #24]
 8007150:	e001      	b.n	8007156 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007152:	2300      	movs	r3, #0
 8007154:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff feff 	bl	8006f5a <USB_GetHostSpeed>
 800715c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800715e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007162:	2b02      	cmp	r3, #2
 8007164:	d106      	bne.n	8007174 <USB_HC_Init+0x1c8>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2b02      	cmp	r3, #2
 800716a:	d003      	beq.n	8007174 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800716c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007170:	617b      	str	r3, [r7, #20]
 8007172:	e001      	b.n	8007178 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007178:	787b      	ldrb	r3, [r7, #1]
 800717a:	059b      	lsls	r3, r3, #22
 800717c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007180:	78bb      	ldrb	r3, [r7, #2]
 8007182:	02db      	lsls	r3, r3, #11
 8007184:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007188:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800718a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800718e:	049b      	lsls	r3, r3, #18
 8007190:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007194:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007196:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007198:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800719c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80071a2:	78fb      	ldrb	r3, [r7, #3]
 80071a4:	0159      	lsls	r1, r3, #5
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	440b      	add	r3, r1
 80071aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ae:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80071b4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80071b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d003      	beq.n	80071c6 <USB_HC_Init+0x21a>
 80071be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d10f      	bne.n	80071e6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80071c6:	78fb      	ldrb	r3, [r7, #3]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	78fa      	ldrb	r2, [r7, #3]
 80071d6:	0151      	lsls	r1, r2, #5
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	440a      	add	r2, r1
 80071dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071e4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80071e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3720      	adds	r7, #32
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b08c      	sub	sp, #48	; 0x30
 80071f4:	af02      	add	r7, sp, #8
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	4613      	mov	r3, r2
 80071fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	785b      	ldrb	r3, [r3, #1]
 8007206:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007208:	f44f 7380 	mov.w	r3, #256	; 0x100
 800720c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007216:	2b00      	cmp	r3, #0
 8007218:	d02d      	beq.n	8007276 <USB_HC_StartXfer+0x86>
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	791b      	ldrb	r3, [r3, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d129      	bne.n	8007276 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007222:	79fb      	ldrb	r3, [r7, #7]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d117      	bne.n	8007258 <USB_HC_StartXfer+0x68>
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	79db      	ldrb	r3, [r3, #7]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <USB_HC_StartXfer+0x48>
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	79db      	ldrb	r3, [r3, #7]
 8007234:	2b02      	cmp	r3, #2
 8007236:	d10f      	bne.n	8007258 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	4413      	add	r3, r2
 8007240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	69fa      	ldr	r2, [r7, #28]
 8007248:	0151      	lsls	r1, r2, #5
 800724a:	6a3a      	ldr	r2, [r7, #32]
 800724c:	440a      	add	r2, r1
 800724e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007256:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007258:	79fb      	ldrb	r3, [r7, #7]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10b      	bne.n	8007276 <USB_HC_StartXfer+0x86>
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	795b      	ldrb	r3, [r3, #5]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d107      	bne.n	8007276 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	785b      	ldrb	r3, [r3, #1]
 800726a:	4619      	mov	r1, r3
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 fa0f 	bl	8007690 <USB_DoPing>
      return HAL_OK;
 8007272:	2300      	movs	r3, #0
 8007274:	e0f8      	b.n	8007468 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d018      	beq.n	80072b0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	8912      	ldrh	r2, [r2, #8]
 8007286:	4413      	add	r3, r2
 8007288:	3b01      	subs	r3, #1
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	8912      	ldrh	r2, [r2, #8]
 800728e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007292:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007294:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007296:	8b7b      	ldrh	r3, [r7, #26]
 8007298:	429a      	cmp	r2, r3
 800729a:	d90b      	bls.n	80072b4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800729c:	8b7b      	ldrh	r3, [r7, #26]
 800729e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80072a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	8912      	ldrh	r2, [r2, #8]
 80072a6:	fb03 f202 	mul.w	r2, r3, r2
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	611a      	str	r2, [r3, #16]
 80072ae:	e001      	b.n	80072b4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80072b0:	2301      	movs	r3, #1
 80072b2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	78db      	ldrb	r3, [r3, #3]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d007      	beq.n	80072cc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80072bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	8912      	ldrh	r2, [r2, #8]
 80072c2:	fb03 f202 	mul.w	r2, r3, r2
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	611a      	str	r2, [r3, #16]
 80072ca:	e003      	b.n	80072d4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	695a      	ldr	r2, [r3, #20]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80072dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072de:	04d9      	lsls	r1, r3, #19
 80072e0:	4b63      	ldr	r3, [pc, #396]	; (8007470 <USB_HC_StartXfer+0x280>)
 80072e2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80072e4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	7a9b      	ldrb	r3, [r3, #10]
 80072ea:	075b      	lsls	r3, r3, #29
 80072ec:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80072f0:	69f9      	ldr	r1, [r7, #28]
 80072f2:	0148      	lsls	r0, r1, #5
 80072f4:	6a39      	ldr	r1, [r7, #32]
 80072f6:	4401      	add	r1, r0
 80072f8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80072fc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80072fe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007300:	79fb      	ldrb	r3, [r7, #7]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d009      	beq.n	800731a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	68d9      	ldr	r1, [r3, #12]
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	4413      	add	r3, r2
 8007312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007316:	460a      	mov	r2, r1
 8007318:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	bf0c      	ite	eq
 800732a:	2301      	moveq	r3, #1
 800732c:	2300      	movne	r3, #0
 800732e:	b2db      	uxtb	r3, r3
 8007330:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	4413      	add	r3, r2
 800733a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	69fa      	ldr	r2, [r7, #28]
 8007342:	0151      	lsls	r1, r2, #5
 8007344:	6a3a      	ldr	r2, [r7, #32]
 8007346:	440a      	add	r2, r1
 8007348:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800734c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007350:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	4413      	add	r3, r2
 800735a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	7e7b      	ldrb	r3, [r7, #25]
 8007362:	075b      	lsls	r3, r3, #29
 8007364:	69f9      	ldr	r1, [r7, #28]
 8007366:	0148      	lsls	r0, r1, #5
 8007368:	6a39      	ldr	r1, [r7, #32]
 800736a:	4401      	add	r1, r0
 800736c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007370:	4313      	orrs	r3, r2
 8007372:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	4413      	add	r3, r2
 800737c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800738a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	78db      	ldrb	r3, [r3, #3]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d004      	beq.n	800739e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800739a:	613b      	str	r3, [r7, #16]
 800739c:	e003      	b.n	80073a6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073a4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073ac:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ba:	461a      	mov	r2, r3
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80073c0:	79fb      	ldrb	r3, [r7, #7]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80073c6:	2300      	movs	r3, #0
 80073c8:	e04e      	b.n	8007468 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	78db      	ldrb	r3, [r3, #3]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d149      	bne.n	8007466 <USB_HC_StartXfer+0x276>
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d045      	beq.n	8007466 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	79db      	ldrb	r3, [r3, #7]
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d830      	bhi.n	8007444 <USB_HC_StartXfer+0x254>
 80073e2:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <USB_HC_StartXfer+0x1f8>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	080073f9 	.word	0x080073f9
 80073ec:	0800741d 	.word	0x0800741d
 80073f0:	080073f9 	.word	0x080073f9
 80073f4:	0800741d 	.word	0x0800741d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	3303      	adds	r3, #3
 80073fe:	089b      	lsrs	r3, r3, #2
 8007400:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007402:	8afa      	ldrh	r2, [r7, #22]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007408:	b29b      	uxth	r3, r3
 800740a:	429a      	cmp	r2, r3
 800740c:	d91c      	bls.n	8007448 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	f043 0220 	orr.w	r2, r3, #32
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	619a      	str	r2, [r3, #24]
        }
        break;
 800741a:	e015      	b.n	8007448 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	695b      	ldr	r3, [r3, #20]
 8007420:	3303      	adds	r3, #3
 8007422:	089b      	lsrs	r3, r3, #2
 8007424:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007426:	8afa      	ldrh	r2, [r7, #22]
 8007428:	6a3b      	ldr	r3, [r7, #32]
 800742a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	b29b      	uxth	r3, r3
 8007432:	429a      	cmp	r2, r3
 8007434:	d90a      	bls.n	800744c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	619a      	str	r2, [r3, #24]
        }
        break;
 8007442:	e003      	b.n	800744c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007444:	bf00      	nop
 8007446:	e002      	b.n	800744e <USB_HC_StartXfer+0x25e>
        break;
 8007448:	bf00      	nop
 800744a:	e000      	b.n	800744e <USB_HC_StartXfer+0x25e>
        break;
 800744c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	68d9      	ldr	r1, [r3, #12]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	785a      	ldrb	r2, [r3, #1]
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	b29b      	uxth	r3, r3
 800745c:	2000      	movs	r0, #0
 800745e:	9000      	str	r0, [sp, #0]
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f7ff fb31 	bl	8006ac8 <USB_WritePacket>
  }

  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3728      	adds	r7, #40	; 0x28
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	1ff80000 	.word	0x1ff80000

08007474 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	b29b      	uxth	r3, r3
}
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007496:	b480      	push	{r7}
 8007498:	b089      	sub	sp, #36	; 0x24
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	460b      	mov	r3, r1
 80074a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80074a6:	78fb      	ldrb	r3, [r7, #3]
 80074a8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	0c9b      	lsrs	r3, r3, #18
 80074be:	f003 0303 	and.w	r3, r3, #3
 80074c2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	0fdb      	lsrs	r3, r3, #31
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f003 0320 	and.w	r3, r3, #32
 80074e2:	2b20      	cmp	r3, #32
 80074e4:	d104      	bne.n	80074f0 <USB_HC_Halt+0x5a>
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d101      	bne.n	80074f0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	e0c8      	b.n	8007682 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d002      	beq.n	80074fc <USB_HC_Halt+0x66>
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d163      	bne.n	80075c4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	015a      	lsls	r2, r3, #5
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	4413      	add	r3, r2
 8007504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	0151      	lsls	r1, r2, #5
 800750e:	69fa      	ldr	r2, [r7, #28]
 8007510:	440a      	add	r2, r1
 8007512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007516:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800751a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f003 0320 	and.w	r3, r3, #32
 8007524:	2b00      	cmp	r3, #0
 8007526:	f040 80ab 	bne.w	8007680 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d133      	bne.n	800759e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	015a      	lsls	r2, r3, #5
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	4413      	add	r3, r2
 800753e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	0151      	lsls	r1, r2, #5
 8007548:	69fa      	ldr	r2, [r7, #28]
 800754a:	440a      	add	r2, r1
 800754c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007554:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	4413      	add	r3, r2
 800755e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	0151      	lsls	r1, r2, #5
 8007568:	69fa      	ldr	r2, [r7, #28]
 800756a:	440a      	add	r2, r1
 800756c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007570:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007574:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3301      	adds	r3, #1
 800757a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007582:	d81d      	bhi.n	80075c0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	4413      	add	r3, r2
 800758c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007596:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800759a:	d0ec      	beq.n	8007576 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800759c:	e070      	b.n	8007680 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	0151      	lsls	r1, r2, #5
 80075b0:	69fa      	ldr	r2, [r7, #28]
 80075b2:	440a      	add	r2, r1
 80075b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075bc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80075be:	e05f      	b.n	8007680 <USB_HC_Halt+0x1ea>
            break;
 80075c0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80075c2:	e05d      	b.n	8007680 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	015a      	lsls	r2, r3, #5
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	0151      	lsls	r1, r2, #5
 80075d6:	69fa      	ldr	r2, [r7, #28]
 80075d8:	440a      	add	r2, r1
 80075da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075e2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d133      	bne.n	800765c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	0151      	lsls	r1, r2, #5
 8007606:	69fa      	ldr	r2, [r7, #28]
 8007608:	440a      	add	r2, r1
 800760a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800760e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007612:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	4413      	add	r3, r2
 800761c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	0151      	lsls	r1, r2, #5
 8007626:	69fa      	ldr	r2, [r7, #28]
 8007628:	440a      	add	r2, r1
 800762a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800762e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007632:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3301      	adds	r3, #1
 8007638:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007640:	d81d      	bhi.n	800767e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	015a      	lsls	r2, r3, #5
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	4413      	add	r3, r2
 800764a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007654:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007658:	d0ec      	beq.n	8007634 <USB_HC_Halt+0x19e>
 800765a:	e011      	b.n	8007680 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	4413      	add	r3, r2
 8007664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	0151      	lsls	r1, r2, #5
 800766e:	69fa      	ldr	r2, [r7, #28]
 8007670:	440a      	add	r2, r1
 8007672:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007676:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800767a:	6013      	str	r3, [r2, #0]
 800767c:	e000      	b.n	8007680 <USB_HC_Halt+0x1ea>
          break;
 800767e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3724      	adds	r7, #36	; 0x24
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
	...

08007690 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007690:	b480      	push	{r7}
 8007692:	b087      	sub	sp, #28
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	460b      	mov	r3, r1
 800769a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80076a0:	78fb      	ldrb	r3, [r7, #3]
 80076a2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80076a4:	2301      	movs	r3, #1
 80076a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	04da      	lsls	r2, r3, #19
 80076ac:	4b15      	ldr	r3, [pc, #84]	; (8007704 <USB_DoPing+0x74>)
 80076ae:	4013      	ands	r3, r2
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	0151      	lsls	r1, r2, #5
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	440a      	add	r2, r1
 80076b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076c0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	015a      	lsls	r2, r3, #5
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076d8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076e0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ee:	461a      	mov	r2, r3
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	371c      	adds	r7, #28
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	1ff80000 	.word	0x1ff80000

08007708 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007710:	2300      	movs	r3, #0
 8007712:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7ff f911 	bl	8006944 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007722:	2110      	movs	r1, #16
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7ff f96b 	bl	8006a00 <USB_FlushTxFifo>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d001      	beq.n	8007734 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7ff f997 	bl	8006a68 <USB_FlushRxFifo>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007744:	2300      	movs	r3, #0
 8007746:	61bb      	str	r3, [r7, #24]
 8007748:	e01f      	b.n	800778a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	4413      	add	r3, r2
 8007752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007760:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007768:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007770:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	4413      	add	r3, r2
 800777a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800777e:	461a      	mov	r2, r3
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	3301      	adds	r3, #1
 8007788:	61bb      	str	r3, [r7, #24]
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	2b0f      	cmp	r3, #15
 800778e:	d9dc      	bls.n	800774a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007790:	2300      	movs	r3, #0
 8007792:	61bb      	str	r3, [r7, #24]
 8007794:	e034      	b.n	8007800 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	015a      	lsls	r2, r3, #5
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	4413      	add	r3, r2
 800779e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077ac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80077bc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ca:	461a      	mov	r2, r3
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3301      	adds	r3, #1
 80077d4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077dc:	d80c      	bhi.n	80077f8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	015a      	lsls	r2, r3, #5
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077f4:	d0ec      	beq.n	80077d0 <USB_StopHost+0xc8>
 80077f6:	e000      	b.n	80077fa <USB_StopHost+0xf2>
        break;
 80077f8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	3301      	adds	r3, #1
 80077fe:	61bb      	str	r3, [r7, #24]
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	2b0f      	cmp	r3, #15
 8007804:	d9c7      	bls.n	8007796 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800780c:	461a      	mov	r2, r3
 800780e:	f04f 33ff 	mov.w	r3, #4294967295
 8007812:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f04f 32ff 	mov.w	r2, #4294967295
 800781a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f7ff f880 	bl	8006922 <USB_EnableGlobalInt>

  return ret;
 8007822:	7ffb      	ldrb	r3, [r7, #31]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3720      	adds	r7, #32
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800782c:	b590      	push	{r4, r7, lr}
 800782e:	b089      	sub	sp, #36	; 0x24
 8007830:	af04      	add	r7, sp, #16
 8007832:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007834:	2301      	movs	r3, #1
 8007836:	2202      	movs	r2, #2
 8007838:	2102      	movs	r1, #2
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fc66 	bl	800810c <USBH_FindInterface>
 8007840:	4603      	mov	r3, r0
 8007842:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007844:	7bfb      	ldrb	r3, [r7, #15]
 8007846:	2bff      	cmp	r3, #255	; 0xff
 8007848:	d002      	beq.n	8007850 <USBH_CDC_InterfaceInit+0x24>
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d901      	bls.n	8007854 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007850:	2302      	movs	r3, #2
 8007852:	e13d      	b.n	8007ad0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 fc3b 	bl	80080d4 <USBH_SelectInterface>
 800785e:	4603      	mov	r3, r0
 8007860:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007868:	2302      	movs	r3, #2
 800786a:	e131      	b.n	8007ad0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007872:	2050      	movs	r0, #80	; 0x50
 8007874:	f002 fafa 	bl	8009e6c <malloc>
 8007878:	4603      	mov	r3, r0
 800787a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007882:	69db      	ldr	r3, [r3, #28]
 8007884:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800788c:	2302      	movs	r3, #2
 800788e:	e11f      	b.n	8007ad0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007890:	2250      	movs	r2, #80	; 0x50
 8007892:	2100      	movs	r1, #0
 8007894:	68b8      	ldr	r0, [r7, #8]
 8007896:	f002 faf9 	bl	8009e8c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	211a      	movs	r1, #26
 80078a0:	fb01 f303 	mul.w	r3, r1, r3
 80078a4:	4413      	add	r3, r2
 80078a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	b25b      	sxtb	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	da15      	bge.n	80078de <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	211a      	movs	r1, #26
 80078b8:	fb01 f303 	mul.w	r3, r1, r3
 80078bc:	4413      	add	r3, r2
 80078be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80078c2:	781a      	ldrb	r2, [r3, #0]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	211a      	movs	r1, #26
 80078ce:	fb01 f303 	mul.w	r3, r1, r3
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80078d8:	881a      	ldrh	r2, [r3, #0]
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	785b      	ldrb	r3, [r3, #1]
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f001 ff2c 	bl	8009742 <USBH_AllocPipe>
 80078ea:	4603      	mov	r3, r0
 80078ec:	461a      	mov	r2, r3
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	7819      	ldrb	r1, [r3, #0]
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	7858      	ldrb	r0, [r3, #1]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	8952      	ldrh	r2, [r2, #10]
 800790a:	9202      	str	r2, [sp, #8]
 800790c:	2203      	movs	r2, #3
 800790e:	9201      	str	r2, [sp, #4]
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	4623      	mov	r3, r4
 8007914:	4602      	mov	r2, r0
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f001 fee4 	bl	80096e4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	2200      	movs	r2, #0
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f002 f9f3 	bl	8009d10 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800792a:	2300      	movs	r3, #0
 800792c:	2200      	movs	r2, #0
 800792e:	210a      	movs	r1, #10
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fbeb 	bl	800810c <USBH_FindInterface>
 8007936:	4603      	mov	r3, r0
 8007938:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	2bff      	cmp	r3, #255	; 0xff
 800793e:	d002      	beq.n	8007946 <USBH_CDC_InterfaceInit+0x11a>
 8007940:	7bfb      	ldrb	r3, [r7, #15]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d901      	bls.n	800794a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007946:	2302      	movs	r3, #2
 8007948:	e0c2      	b.n	8007ad0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800794a:	7bfb      	ldrb	r3, [r7, #15]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	211a      	movs	r1, #26
 8007950:	fb01 f303 	mul.w	r3, r1, r3
 8007954:	4413      	add	r3, r2
 8007956:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	b25b      	sxtb	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	da16      	bge.n	8007990 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007962:	7bfb      	ldrb	r3, [r7, #15]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	211a      	movs	r1, #26
 8007968:	fb01 f303 	mul.w	r3, r1, r3
 800796c:	4413      	add	r3, r2
 800796e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007972:	781a      	ldrb	r2, [r3, #0]
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007978:	7bfb      	ldrb	r3, [r7, #15]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	211a      	movs	r1, #26
 800797e:	fb01 f303 	mul.w	r3, r1, r3
 8007982:	4413      	add	r3, r2
 8007984:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007988:	881a      	ldrh	r2, [r3, #0]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	835a      	strh	r2, [r3, #26]
 800798e:	e015      	b.n	80079bc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007990:	7bfb      	ldrb	r3, [r7, #15]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	211a      	movs	r1, #26
 8007996:	fb01 f303 	mul.w	r3, r1, r3
 800799a:	4413      	add	r3, r2
 800799c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80079a0:	781a      	ldrb	r2, [r3, #0]
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	211a      	movs	r1, #26
 80079ac:	fb01 f303 	mul.w	r3, r1, r3
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80079b6:	881a      	ldrh	r2, [r3, #0]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	211a      	movs	r1, #26
 80079c2:	fb01 f303 	mul.w	r3, r1, r3
 80079c6:	4413      	add	r3, r2
 80079c8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	b25b      	sxtb	r3, r3
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	da16      	bge.n	8007a02 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	211a      	movs	r1, #26
 80079da:	fb01 f303 	mul.w	r3, r1, r3
 80079de:	4413      	add	r3, r2
 80079e0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80079e4:	781a      	ldrb	r2, [r3, #0]
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	211a      	movs	r1, #26
 80079f0:	fb01 f303 	mul.w	r3, r1, r3
 80079f4:	4413      	add	r3, r2
 80079f6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80079fa:	881a      	ldrh	r2, [r3, #0]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	835a      	strh	r2, [r3, #26]
 8007a00:	e015      	b.n	8007a2e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	211a      	movs	r1, #26
 8007a08:	fb01 f303 	mul.w	r3, r1, r3
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007a12:	781a      	ldrb	r2, [r3, #0]
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	211a      	movs	r1, #26
 8007a1e:	fb01 f303 	mul.w	r3, r1, r3
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007a28:	881a      	ldrh	r2, [r3, #0]
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	7b9b      	ldrb	r3, [r3, #14]
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f001 fe84 	bl	8009742 <USBH_AllocPipe>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	7bdb      	ldrb	r3, [r3, #15]
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 fe7a 	bl	8009742 <USBH_AllocPipe>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	461a      	mov	r2, r3
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	7b59      	ldrb	r1, [r3, #13]
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	7b98      	ldrb	r0, [r3, #14]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	8b12      	ldrh	r2, [r2, #24]
 8007a6e:	9202      	str	r2, [sp, #8]
 8007a70:	2202      	movs	r2, #2
 8007a72:	9201      	str	r2, [sp, #4]
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	4623      	mov	r3, r4
 8007a78:	4602      	mov	r2, r0
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f001 fe32 	bl	80096e4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	7b19      	ldrb	r1, [r3, #12]
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	7bd8      	ldrb	r0, [r3, #15]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	8b52      	ldrh	r2, [r2, #26]
 8007a98:	9202      	str	r2, [sp, #8]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	9201      	str	r2, [sp, #4]
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	4623      	mov	r3, r4
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f001 fe1d 	bl	80096e4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	7b5b      	ldrb	r3, [r3, #13]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f002 f928 	bl	8009d10 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	7b1b      	ldrb	r3, [r3, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f002 f921 	bl	8009d10 <USBH_LL_SetToggle>

  return USBH_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd90      	pop	{r4, r7, pc}

08007ad8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00e      	beq.n	8007b10 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 fe12 	bl	8009722 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f001 fe3d 	bl	8009784 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	7b1b      	ldrb	r3, [r3, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00e      	beq.n	8007b36 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	7b1b      	ldrb	r3, [r3, #12]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f001 fdff 	bl	8009722 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	7b1b      	ldrb	r3, [r3, #12]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f001 fe2a 	bl	8009784 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	7b5b      	ldrb	r3, [r3, #13]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00e      	beq.n	8007b5c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	7b5b      	ldrb	r3, [r3, #13]
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 fdec 	bl	8009722 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	7b5b      	ldrb	r3, [r3, #13]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 fe17 	bl	8009784 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b62:	69db      	ldr	r3, [r3, #28]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00b      	beq.n	8007b80 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b6e:	69db      	ldr	r3, [r3, #28]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f002 f983 	bl	8009e7c <free>
    phost->pActiveClass->pData = 0U;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b084      	sub	sp, #16
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	3340      	adds	r3, #64	; 0x40
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f8b1 	bl	8007d0a <GetLineCoding>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007bac:	7afb      	ldrb	r3, [r7, #11]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d105      	bne.n	8007bbe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bb8:	2102      	movs	r1, #2
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007bbe:	7afb      	ldrb	r3, [r7, #11]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007be8:	2b04      	cmp	r3, #4
 8007bea:	d877      	bhi.n	8007cdc <USBH_CDC_Process+0x114>
 8007bec:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <USBH_CDC_Process+0x2c>)
 8007bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf2:	bf00      	nop
 8007bf4:	08007c09 	.word	0x08007c09
 8007bf8:	08007c0f 	.word	0x08007c0f
 8007bfc:	08007c3f 	.word	0x08007c3f
 8007c00:	08007cb3 	.word	0x08007cb3
 8007c04:	08007cc1 	.word	0x08007cc1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c0c:	e06d      	b.n	8007cea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c12:	4619      	mov	r1, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f897 	bl	8007d48 <SetLineCoding>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007c1e:	7bbb      	ldrb	r3, [r7, #14]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d104      	bne.n	8007c2e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	2202      	movs	r2, #2
 8007c28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007c2c:	e058      	b.n	8007ce0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d055      	beq.n	8007ce0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2204      	movs	r2, #4
 8007c38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007c3c:	e050      	b.n	8007ce0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	3340      	adds	r3, #64	; 0x40
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f860 	bl	8007d0a <GetLineCoding>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007c4e:	7bbb      	ldrb	r3, [r7, #14]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d126      	bne.n	8007ca2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c66:	791b      	ldrb	r3, [r3, #4]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d13b      	bne.n	8007ce4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c76:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d133      	bne.n	8007ce4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c86:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d12b      	bne.n	8007ce4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c94:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d124      	bne.n	8007ce4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f958 	bl	8007f50 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007ca0:	e020      	b.n	8007ce4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007ca2:	7bbb      	ldrb	r3, [r7, #14]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d01d      	beq.n	8007ce4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	2204      	movs	r2, #4
 8007cac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007cb0:	e018      	b.n	8007ce4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f867 	bl	8007d86 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f8da 	bl	8007e72 <CDC_ProcessReception>
      break;
 8007cbe:	e014      	b.n	8007cea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 ffef 	bl	8008ca6 <USBH_ClrFeature>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10a      	bne.n	8007ce8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007cda:	e005      	b.n	8007ce8 <USBH_CDC_Process+0x120>

    default:
      break;
 8007cdc:	bf00      	nop
 8007cde:	e004      	b.n	8007cea <USBH_CDC_Process+0x122>
      break;
 8007ce0:	bf00      	nop
 8007ce2:	e002      	b.n	8007cea <USBH_CDC_Process+0x122>
      break;
 8007ce4:	bf00      	nop
 8007ce6:	e000      	b.n	8007cea <USBH_CDC_Process+0x122>
      break;
 8007ce8:	bf00      	nop

  }

  return status;
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	370c      	adds	r7, #12
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b082      	sub	sp, #8
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	22a1      	movs	r2, #161	; 0xa1
 8007d18:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2221      	movs	r2, #33	; 0x21
 8007d1e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2207      	movs	r2, #7
 8007d30:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2207      	movs	r2, #7
 8007d36:	4619      	mov	r1, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f001 fa81 	bl	8009240 <USBH_CtlReq>
 8007d3e:	4603      	mov	r3, r0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2221      	movs	r2, #33	; 0x21
 8007d56:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2207      	movs	r2, #7
 8007d6e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	2207      	movs	r2, #7
 8007d74:	4619      	mov	r1, r3
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f001 fa62 	bl	8009240 <USBH_CtlReq>
 8007d7c:	4603      	mov	r3, r0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b086      	sub	sp, #24
 8007d8a:	af02      	add	r7, sp, #8
 8007d8c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d94:	69db      	ldr	r3, [r3, #28]
 8007d96:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d002      	beq.n	8007dac <CDC_ProcessTransmission+0x26>
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d023      	beq.n	8007df2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007daa:	e05e      	b.n	8007e6a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	8b12      	ldrh	r2, [r2, #24]
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d90b      	bls.n	8007dd0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	69d9      	ldr	r1, [r3, #28]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	8b1a      	ldrh	r2, [r3, #24]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	7b5b      	ldrb	r3, [r3, #13]
 8007dc4:	2001      	movs	r0, #1
 8007dc6:	9000      	str	r0, [sp, #0]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f001 fc48 	bl	800965e <USBH_BulkSendData>
 8007dce:	e00b      	b.n	8007de8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	7b5b      	ldrb	r3, [r3, #13]
 8007dde:	2001      	movs	r0, #1
 8007de0:	9000      	str	r0, [sp, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f001 fc3b 	bl	800965e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007df0:	e03b      	b.n	8007e6a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	7b5b      	ldrb	r3, [r3, #13]
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f001 ff5f 	bl	8009cbc <USBH_LL_GetURBState>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007e02:	7afb      	ldrb	r3, [r7, #11]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d128      	bne.n	8007e5a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	8b12      	ldrh	r2, [r2, #24]
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d90e      	bls.n	8007e32 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	8b12      	ldrh	r2, [r2, #24]
 8007e1c:	1a9a      	subs	r2, r3, r2
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	8b12      	ldrh	r2, [r2, #24]
 8007e2a:	441a      	add	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	61da      	str	r2, [r3, #28]
 8007e30:	e002      	b.n	8007e38 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d004      	beq.n	8007e4a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007e48:	e00e      	b.n	8007e68 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f868 	bl	8007f28 <USBH_CDC_TransmitCallback>
      break;
 8007e58:	e006      	b.n	8007e68 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007e5a:	7afb      	ldrb	r3, [r7, #11]
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d103      	bne.n	8007e68 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007e68:	bf00      	nop
  }
}
 8007e6a:	bf00      	nop
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b086      	sub	sp, #24
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e80:	69db      	ldr	r3, [r3, #28]
 8007e82:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e84:	2300      	movs	r3, #0
 8007e86:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	d002      	beq.n	8007e98 <CDC_ProcessReception+0x26>
 8007e92:	2b04      	cmp	r3, #4
 8007e94:	d00e      	beq.n	8007eb4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007e96:	e043      	b.n	8007f20 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	6a19      	ldr	r1, [r3, #32]
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	8b5a      	ldrh	r2, [r3, #26]
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	7b1b      	ldrb	r3, [r3, #12]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f001 fbff 	bl	80096a8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2204      	movs	r2, #4
 8007eae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007eb2:	e035      	b.n	8007f20 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	7b1b      	ldrb	r3, [r3, #12]
 8007eb8:	4619      	mov	r1, r3
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f001 fefe 	bl	8009cbc <USBH_LL_GetURBState>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007ec4:	7cfb      	ldrb	r3, [r7, #19]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d129      	bne.n	8007f1e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	7b1b      	ldrb	r3, [r3, #12]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f001 fe61 	bl	8009b98 <USBH_LL_GetLastXferSize>
 8007ed6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d016      	beq.n	8007f10 <CDC_ProcessReception+0x9e>
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	8b5b      	ldrh	r3, [r3, #26]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d910      	bls.n	8007f10 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	1ad2      	subs	r2, r2, r3
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	6a1a      	ldr	r2, [r3, #32]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	441a      	add	r2, r3
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2203      	movs	r2, #3
 8007f0a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007f0e:	e006      	b.n	8007f1e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f80f 	bl	8007f3c <USBH_CDC_ReceiveCallback>
      break;
 8007f1e:	bf00      	nop
  }
}
 8007f20:	bf00      	nop
 8007f22:	3718      	adds	r7, #24
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007f78:	2302      	movs	r3, #2
 8007f7a:	e029      	b.n	8007fd0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	79fa      	ldrb	r2, [r7, #7]
 8007f80:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f000 f81f 	bl	8007fd8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d003      	beq.n	8007fc8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f001 fd31 	bl	8009a30 <USBH_LL_Init>

  return USBH_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	60fb      	str	r3, [r7, #12]
 8007fe8:	e009      	b.n	8007ffe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	33e0      	adds	r3, #224	; 0xe0
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	60fb      	str	r3, [r7, #12]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2b0f      	cmp	r3, #15
 8008002:	d9f2      	bls.n	8007fea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008004:	2300      	movs	r3, #0
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	e009      	b.n	800801e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4413      	add	r3, r2
 8008010:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008014:	2200      	movs	r2, #0
 8008016:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	3301      	adds	r3, #1
 800801c:	60fb      	str	r3, [r7, #12]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008024:	d3f1      	bcc.n	800800a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2240      	movs	r2, #64	; 0x40
 800804a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800808a:	2300      	movs	r3, #0
 800808c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d016      	beq.n	80080c2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10e      	bne.n	80080bc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080a4:	1c59      	adds	r1, r3, #1
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	33de      	adds	r3, #222	; 0xde
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	73fb      	strb	r3, [r7, #15]
 80080ba:	e004      	b.n	80080c6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80080bc:	2302      	movs	r3, #2
 80080be:	73fb      	strb	r3, [r7, #15]
 80080c0:	e001      	b.n	80080c6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80080c2:	2302      	movs	r3, #2
 80080c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	460b      	mov	r3, r1
 80080de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80080ea:	78fa      	ldrb	r2, [r7, #3]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d204      	bcs.n	80080fa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	78fa      	ldrb	r2, [r7, #3]
 80080f4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80080f8:	e001      	b.n	80080fe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80080fa:	2302      	movs	r3, #2
 80080fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800810c:	b480      	push	{r7}
 800810e:	b087      	sub	sp, #28
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	4608      	mov	r0, r1
 8008116:	4611      	mov	r1, r2
 8008118:	461a      	mov	r2, r3
 800811a:	4603      	mov	r3, r0
 800811c:	70fb      	strb	r3, [r7, #3]
 800811e:	460b      	mov	r3, r1
 8008120:	70bb      	strb	r3, [r7, #2]
 8008122:	4613      	mov	r3, r2
 8008124:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008126:	2300      	movs	r3, #0
 8008128:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800812a:	2300      	movs	r3, #0
 800812c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008134:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008136:	e025      	b.n	8008184 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008138:	7dfb      	ldrb	r3, [r7, #23]
 800813a:	221a      	movs	r2, #26
 800813c:	fb02 f303 	mul.w	r3, r2, r3
 8008140:	3308      	adds	r3, #8
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	4413      	add	r3, r2
 8008146:	3302      	adds	r3, #2
 8008148:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	795b      	ldrb	r3, [r3, #5]
 800814e:	78fa      	ldrb	r2, [r7, #3]
 8008150:	429a      	cmp	r2, r3
 8008152:	d002      	beq.n	800815a <USBH_FindInterface+0x4e>
 8008154:	78fb      	ldrb	r3, [r7, #3]
 8008156:	2bff      	cmp	r3, #255	; 0xff
 8008158:	d111      	bne.n	800817e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800815e:	78ba      	ldrb	r2, [r7, #2]
 8008160:	429a      	cmp	r2, r3
 8008162:	d002      	beq.n	800816a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008164:	78bb      	ldrb	r3, [r7, #2]
 8008166:	2bff      	cmp	r3, #255	; 0xff
 8008168:	d109      	bne.n	800817e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800816e:	787a      	ldrb	r2, [r7, #1]
 8008170:	429a      	cmp	r2, r3
 8008172:	d002      	beq.n	800817a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008174:	787b      	ldrb	r3, [r7, #1]
 8008176:	2bff      	cmp	r3, #255	; 0xff
 8008178:	d101      	bne.n	800817e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800817a:	7dfb      	ldrb	r3, [r7, #23]
 800817c:	e006      	b.n	800818c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800817e:	7dfb      	ldrb	r3, [r7, #23]
 8008180:	3301      	adds	r3, #1
 8008182:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008184:	7dfb      	ldrb	r3, [r7, #23]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d9d6      	bls.n	8008138 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800818a:	23ff      	movs	r3, #255	; 0xff
}
 800818c:	4618      	mov	r0, r3
 800818e:	371c      	adds	r7, #28
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 fc81 	bl	8009aa8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80081a6:	2101      	movs	r1, #1
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f001 fd9a 	bl	8009ce2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b088      	sub	sp, #32
 80081bc:	af04      	add	r7, sp, #16
 80081be:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80081c0:	2302      	movs	r3, #2
 80081c2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80081c4:	2300      	movs	r3, #0
 80081c6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d102      	bne.n	80081da <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2203      	movs	r2, #3
 80081d8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b0b      	cmp	r3, #11
 80081e2:	f200 81be 	bhi.w	8008562 <USBH_Process+0x3aa>
 80081e6:	a201      	add	r2, pc, #4	; (adr r2, 80081ec <USBH_Process+0x34>)
 80081e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ec:	0800821d 	.word	0x0800821d
 80081f0:	0800824f 	.word	0x0800824f
 80081f4:	080082b7 	.word	0x080082b7
 80081f8:	080084fd 	.word	0x080084fd
 80081fc:	08008563 	.word	0x08008563
 8008200:	0800835b 	.word	0x0800835b
 8008204:	080084a3 	.word	0x080084a3
 8008208:	08008391 	.word	0x08008391
 800820c:	080083b1 	.word	0x080083b1
 8008210:	080083d1 	.word	0x080083d1
 8008214:	08008415 	.word	0x08008415
 8008218:	080084e5 	.word	0x080084e5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008222:	b2db      	uxtb	r3, r3
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 819e 	beq.w	8008566 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008230:	20c8      	movs	r0, #200	; 0xc8
 8008232:	f001 fd9d 	bl	8009d70 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f001 fc93 	bl	8009b62 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800824c:	e18b      	b.n	8008566 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008254:	2b01      	cmp	r3, #1
 8008256:	d107      	bne.n	8008268 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2202      	movs	r2, #2
 8008264:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008266:	e18d      	b.n	8008584 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800826e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008272:	d914      	bls.n	800829e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800827a:	3301      	adds	r3, #1
 800827c:	b2da      	uxtb	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800828a:	2b03      	cmp	r3, #3
 800828c:	d903      	bls.n	8008296 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	220d      	movs	r2, #13
 8008292:	701a      	strb	r2, [r3, #0]
      break;
 8008294:	e176      	b.n	8008584 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	701a      	strb	r2, [r3, #0]
      break;
 800829c:	e172      	b.n	8008584 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80082a4:	f103 020a 	add.w	r2, r3, #10
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80082ae:	200a      	movs	r0, #10
 80082b0:	f001 fd5e 	bl	8009d70 <USBH_Delay>
      break;
 80082b4:	e166      	b.n	8008584 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d005      	beq.n	80082cc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082c6:	2104      	movs	r1, #4
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80082cc:	2064      	movs	r0, #100	; 0x64
 80082ce:	f001 fd4f 	bl	8009d70 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 fc1e 	bl	8009b14 <USBH_LL_GetSpeed>
 80082d8:	4603      	mov	r3, r0
 80082da:	461a      	mov	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2205      	movs	r2, #5
 80082e6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80082e8:	2100      	movs	r1, #0
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f001 fa29 	bl	8009742 <USBH_AllocPipe>
 80082f0:	4603      	mov	r3, r0
 80082f2:	461a      	mov	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80082f8:	2180      	movs	r1, #128	; 0x80
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f001 fa21 	bl	8009742 <USBH_AllocPipe>
 8008300:	4603      	mov	r3, r0
 8008302:	461a      	mov	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	7919      	ldrb	r1, [r3, #4]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800831c:	b292      	uxth	r2, r2
 800831e:	9202      	str	r2, [sp, #8]
 8008320:	2200      	movs	r2, #0
 8008322:	9201      	str	r2, [sp, #4]
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	4603      	mov	r3, r0
 8008328:	2280      	movs	r2, #128	; 0x80
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f001 f9da 	bl	80096e4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	7959      	ldrb	r1, [r3, #5]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008344:	b292      	uxth	r2, r2
 8008346:	9202      	str	r2, [sp, #8]
 8008348:	2200      	movs	r2, #0
 800834a:	9201      	str	r2, [sp, #4]
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	4603      	mov	r3, r0
 8008350:	2200      	movs	r2, #0
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f001 f9c6 	bl	80096e4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008358:	e114      	b.n	8008584 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f918 	bl	8008590 <USBH_HandleEnum>
 8008360:	4603      	mov	r3, r0
 8008362:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008364:	7bbb      	ldrb	r3, [r7, #14]
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b00      	cmp	r3, #0
 800836a:	f040 80fe 	bne.w	800856a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800837c:	2b01      	cmp	r3, #1
 800837e:	d103      	bne.n	8008388 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2208      	movs	r2, #8
 8008384:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008386:	e0f0      	b.n	800856a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2207      	movs	r2, #7
 800838c:	701a      	strb	r2, [r3, #0]
      break;
 800838e:	e0ec      	b.n	800856a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008396:	2b00      	cmp	r3, #0
 8008398:	f000 80e9 	beq.w	800856e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80083a2:	2101      	movs	r1, #1
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2208      	movs	r2, #8
 80083ac:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80083ae:	e0de      	b.n	800856e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fc2c 	bl	8008c18 <USBH_SetCfg>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	f040 80d5 	bne.w	8008572 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2209      	movs	r2, #9
 80083cc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80083ce:	e0d0      	b.n	8008572 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80083d6:	f003 0320 	and.w	r3, r3, #32
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d016      	beq.n	800840c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80083de:	2101      	movs	r1, #1
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fc3c 	bl	8008c5e <USBH_SetFeature>
 80083e6:	4603      	mov	r3, r0
 80083e8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80083ea:	7bbb      	ldrb	r3, [r7, #14]
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d103      	bne.n	80083fa <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	220a      	movs	r2, #10
 80083f6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80083f8:	e0bd      	b.n	8008576 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80083fa:	7bbb      	ldrb	r3, [r7, #14]
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b03      	cmp	r3, #3
 8008400:	f040 80b9 	bne.w	8008576 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	220a      	movs	r2, #10
 8008408:	701a      	strb	r2, [r3, #0]
      break;
 800840a:	e0b4      	b.n	8008576 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	220a      	movs	r2, #10
 8008410:	701a      	strb	r2, [r3, #0]
      break;
 8008412:	e0b0      	b.n	8008576 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 80ad 	beq.w	800857a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008428:	2300      	movs	r3, #0
 800842a:	73fb      	strb	r3, [r7, #15]
 800842c:	e016      	b.n	800845c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800842e:	7bfa      	ldrb	r2, [r7, #15]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	32de      	adds	r2, #222	; 0xde
 8008434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008438:	791a      	ldrb	r2, [r3, #4]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008440:	429a      	cmp	r2, r3
 8008442:	d108      	bne.n	8008456 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008444:	7bfa      	ldrb	r2, [r7, #15]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	32de      	adds	r2, #222	; 0xde
 800844a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008454:	e005      	b.n	8008462 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008456:	7bfb      	ldrb	r3, [r7, #15]
 8008458:	3301      	adds	r3, #1
 800845a:	73fb      	strb	r3, [r7, #15]
 800845c:	7bfb      	ldrb	r3, [r7, #15]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d0e5      	beq.n	800842e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008468:	2b00      	cmp	r3, #0
 800846a:	d016      	beq.n	800849a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	4798      	blx	r3
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d109      	bne.n	8008492 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2206      	movs	r2, #6
 8008482:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800848a:	2103      	movs	r1, #3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008490:	e073      	b.n	800857a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	220d      	movs	r2, #13
 8008496:	701a      	strb	r2, [r3, #0]
      break;
 8008498:	e06f      	b.n	800857a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	220d      	movs	r2, #13
 800849e:	701a      	strb	r2, [r3, #0]
      break;
 80084a0:	e06b      	b.n	800857a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d017      	beq.n	80084dc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	4798      	blx	r3
 80084b8:	4603      	mov	r3, r0
 80084ba:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80084bc:	7bbb      	ldrb	r3, [r7, #14]
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d103      	bne.n	80084cc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	220b      	movs	r2, #11
 80084c8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80084ca:	e058      	b.n	800857e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80084cc:	7bbb      	ldrb	r3, [r7, #14]
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d154      	bne.n	800857e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	220d      	movs	r2, #13
 80084d8:	701a      	strb	r2, [r3, #0]
      break;
 80084da:	e050      	b.n	800857e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	220d      	movs	r2, #13
 80084e0:	701a      	strb	r2, [r3, #0]
      break;
 80084e2:	e04c      	b.n	800857e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d049      	beq.n	8008582 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084f4:	695b      	ldr	r3, [r3, #20]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	4798      	blx	r3
      }
      break;
 80084fa:	e042      	b.n	8008582 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7ff fd67 	bl	8007fd8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008510:	2b00      	cmp	r3, #0
 8008512:	d009      	beq.n	8008528 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800852e:	2b00      	cmp	r3, #0
 8008530:	d005      	beq.n	800853e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008538:	2105      	movs	r1, #5
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b01      	cmp	r3, #1
 8008548:	d107      	bne.n	800855a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7ff fe20 	bl	8008198 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008558:	e014      	b.n	8008584 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f001 faa4 	bl	8009aa8 <USBH_LL_Start>
      break;
 8008560:	e010      	b.n	8008584 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008562:	bf00      	nop
 8008564:	e00e      	b.n	8008584 <USBH_Process+0x3cc>
      break;
 8008566:	bf00      	nop
 8008568:	e00c      	b.n	8008584 <USBH_Process+0x3cc>
      break;
 800856a:	bf00      	nop
 800856c:	e00a      	b.n	8008584 <USBH_Process+0x3cc>
    break;
 800856e:	bf00      	nop
 8008570:	e008      	b.n	8008584 <USBH_Process+0x3cc>
      break;
 8008572:	bf00      	nop
 8008574:	e006      	b.n	8008584 <USBH_Process+0x3cc>
      break;
 8008576:	bf00      	nop
 8008578:	e004      	b.n	8008584 <USBH_Process+0x3cc>
      break;
 800857a:	bf00      	nop
 800857c:	e002      	b.n	8008584 <USBH_Process+0x3cc>
      break;
 800857e:	bf00      	nop
 8008580:	e000      	b.n	8008584 <USBH_Process+0x3cc>
      break;
 8008582:	bf00      	nop
  }
  return USBH_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop

08008590 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b088      	sub	sp, #32
 8008594:	af04      	add	r7, sp, #16
 8008596:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008598:	2301      	movs	r3, #1
 800859a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800859c:	2301      	movs	r3, #1
 800859e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	785b      	ldrb	r3, [r3, #1]
 80085a4:	2b07      	cmp	r3, #7
 80085a6:	f200 81c1 	bhi.w	800892c <USBH_HandleEnum+0x39c>
 80085aa:	a201      	add	r2, pc, #4	; (adr r2, 80085b0 <USBH_HandleEnum+0x20>)
 80085ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b0:	080085d1 	.word	0x080085d1
 80085b4:	0800868f 	.word	0x0800868f
 80085b8:	080086f9 	.word	0x080086f9
 80085bc:	08008787 	.word	0x08008787
 80085c0:	080087f1 	.word	0x080087f1
 80085c4:	08008861 	.word	0x08008861
 80085c8:	080088a7 	.word	0x080088a7
 80085cc:	080088ed 	.word	0x080088ed
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80085d0:	2108      	movs	r1, #8
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fa50 	bl	8008a78 <USBH_Get_DevDesc>
 80085d8:	4603      	mov	r3, r0
 80085da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d130      	bne.n	8008644 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	7919      	ldrb	r1, [r3, #4]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008606:	b292      	uxth	r2, r2
 8008608:	9202      	str	r2, [sp, #8]
 800860a:	2200      	movs	r2, #0
 800860c:	9201      	str	r2, [sp, #4]
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	4603      	mov	r3, r0
 8008612:	2280      	movs	r2, #128	; 0x80
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f001 f865 	bl	80096e4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	7959      	ldrb	r1, [r3, #5]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800862e:	b292      	uxth	r2, r2
 8008630:	9202      	str	r2, [sp, #8]
 8008632:	2200      	movs	r2, #0
 8008634:	9201      	str	r2, [sp, #4]
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	4603      	mov	r3, r0
 800863a:	2200      	movs	r2, #0
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f001 f851 	bl	80096e4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008642:	e175      	b.n	8008930 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008644:	7bbb      	ldrb	r3, [r7, #14]
 8008646:	2b03      	cmp	r3, #3
 8008648:	f040 8172 	bne.w	8008930 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008652:	3301      	adds	r3, #1
 8008654:	b2da      	uxtb	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008662:	2b03      	cmp	r3, #3
 8008664:	d903      	bls.n	800866e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	220d      	movs	r2, #13
 800866a:	701a      	strb	r2, [r3, #0]
      break;
 800866c:	e160      	b.n	8008930 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	795b      	ldrb	r3, [r3, #5]
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f001 f885 	bl	8009784 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	791b      	ldrb	r3, [r3, #4]
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f001 f87f 	bl	8009784 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	701a      	strb	r2, [r3, #0]
      break;
 800868c:	e150      	b.n	8008930 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800868e:	2112      	movs	r1, #18
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f9f1 	bl	8008a78 <USBH_Get_DevDesc>
 8008696:	4603      	mov	r3, r0
 8008698:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800869a:	7bbb      	ldrb	r3, [r7, #14]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d103      	bne.n	80086a8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2202      	movs	r2, #2
 80086a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80086a6:	e145      	b.n	8008934 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	f040 8142 	bne.w	8008934 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086b6:	3301      	adds	r3, #1
 80086b8:	b2da      	uxtb	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086c6:	2b03      	cmp	r3, #3
 80086c8:	d903      	bls.n	80086d2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	220d      	movs	r2, #13
 80086ce:	701a      	strb	r2, [r3, #0]
      break;
 80086d0:	e130      	b.n	8008934 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	795b      	ldrb	r3, [r3, #5]
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f001 f853 	bl	8009784 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	791b      	ldrb	r3, [r3, #4]
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 f84d 	bl	8009784 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	701a      	strb	r2, [r3, #0]
      break;
 80086f6:	e11d      	b.n	8008934 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80086f8:	2101      	movs	r1, #1
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fa68 	bl	8008bd0 <USBH_SetAddress>
 8008700:	4603      	mov	r3, r0
 8008702:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008704:	7bbb      	ldrb	r3, [r7, #14]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d132      	bne.n	8008770 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800870a:	2002      	movs	r0, #2
 800870c:	f001 fb30 	bl	8009d70 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2203      	movs	r2, #3
 800871c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	7919      	ldrb	r1, [r3, #4]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008732:	b292      	uxth	r2, r2
 8008734:	9202      	str	r2, [sp, #8]
 8008736:	2200      	movs	r2, #0
 8008738:	9201      	str	r2, [sp, #4]
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	4603      	mov	r3, r0
 800873e:	2280      	movs	r2, #128	; 0x80
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 ffcf 	bl	80096e4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	7959      	ldrb	r1, [r3, #5]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800875a:	b292      	uxth	r2, r2
 800875c:	9202      	str	r2, [sp, #8]
 800875e:	2200      	movs	r2, #0
 8008760:	9201      	str	r2, [sp, #4]
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	4603      	mov	r3, r0
 8008766:	2200      	movs	r2, #0
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 ffbb 	bl	80096e4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800876e:	e0e3      	b.n	8008938 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008770:	7bbb      	ldrb	r3, [r7, #14]
 8008772:	2b03      	cmp	r3, #3
 8008774:	f040 80e0 	bne.w	8008938 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	220d      	movs	r2, #13
 800877c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	705a      	strb	r2, [r3, #1]
      break;
 8008784:	e0d8      	b.n	8008938 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008786:	2109      	movs	r1, #9
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f99d 	bl	8008ac8 <USBH_Get_CfgDesc>
 800878e:	4603      	mov	r3, r0
 8008790:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008792:	7bbb      	ldrb	r3, [r7, #14]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d103      	bne.n	80087a0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2204      	movs	r2, #4
 800879c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800879e:	e0cd      	b.n	800893c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087a0:	7bbb      	ldrb	r3, [r7, #14]
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	f040 80ca 	bne.w	800893c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087ae:	3301      	adds	r3, #1
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d903      	bls.n	80087ca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	220d      	movs	r2, #13
 80087c6:	701a      	strb	r2, [r3, #0]
      break;
 80087c8:	e0b8      	b.n	800893c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	795b      	ldrb	r3, [r3, #5]
 80087ce:	4619      	mov	r1, r3
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 ffd7 	bl	8009784 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	791b      	ldrb	r3, [r3, #4]
 80087da:	4619      	mov	r1, r3
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 ffd1 	bl	8009784 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	701a      	strb	r2, [r3, #0]
      break;
 80087ee:	e0a5      	b.n	800893c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80087f6:	4619      	mov	r1, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f965 	bl	8008ac8 <USBH_Get_CfgDesc>
 80087fe:	4603      	mov	r3, r0
 8008800:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008802:	7bbb      	ldrb	r3, [r7, #14]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d103      	bne.n	8008810 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2205      	movs	r2, #5
 800880c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800880e:	e097      	b.n	8008940 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008810:	7bbb      	ldrb	r3, [r7, #14]
 8008812:	2b03      	cmp	r3, #3
 8008814:	f040 8094 	bne.w	8008940 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800881e:	3301      	adds	r3, #1
 8008820:	b2da      	uxtb	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800882e:	2b03      	cmp	r3, #3
 8008830:	d903      	bls.n	800883a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	220d      	movs	r2, #13
 8008836:	701a      	strb	r2, [r3, #0]
      break;
 8008838:	e082      	b.n	8008940 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	795b      	ldrb	r3, [r3, #5]
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 ff9f 	bl	8009784 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	791b      	ldrb	r3, [r3, #4]
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 ff99 	bl	8009784 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	701a      	strb	r2, [r3, #0]
      break;
 800885e:	e06f      	b.n	8008940 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008866:	2b00      	cmp	r3, #0
 8008868:	d019      	beq.n	800889e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008876:	23ff      	movs	r3, #255	; 0xff
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f949 	bl	8008b10 <USBH_Get_StringDesc>
 800887e:	4603      	mov	r3, r0
 8008880:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008882:	7bbb      	ldrb	r3, [r7, #14]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d103      	bne.n	8008890 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2206      	movs	r2, #6
 800888c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800888e:	e059      	b.n	8008944 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008890:	7bbb      	ldrb	r3, [r7, #14]
 8008892:	2b03      	cmp	r3, #3
 8008894:	d156      	bne.n	8008944 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2206      	movs	r2, #6
 800889a:	705a      	strb	r2, [r3, #1]
      break;
 800889c:	e052      	b.n	8008944 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2206      	movs	r2, #6
 80088a2:	705a      	strb	r2, [r3, #1]
      break;
 80088a4:	e04e      	b.n	8008944 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d019      	beq.n	80088e4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80088bc:	23ff      	movs	r3, #255	; 0xff
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f926 	bl	8008b10 <USBH_Get_StringDesc>
 80088c4:	4603      	mov	r3, r0
 80088c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80088c8:	7bbb      	ldrb	r3, [r7, #14]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d103      	bne.n	80088d6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2207      	movs	r2, #7
 80088d2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80088d4:	e038      	b.n	8008948 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
 80088d8:	2b03      	cmp	r3, #3
 80088da:	d135      	bne.n	8008948 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2207      	movs	r2, #7
 80088e0:	705a      	strb	r2, [r3, #1]
      break;
 80088e2:	e031      	b.n	8008948 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2207      	movs	r2, #7
 80088e8:	705a      	strb	r2, [r3, #1]
      break;
 80088ea:	e02d      	b.n	8008948 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d017      	beq.n	8008926 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008902:	23ff      	movs	r3, #255	; 0xff
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f903 	bl	8008b10 <USBH_Get_StringDesc>
 800890a:	4603      	mov	r3, r0
 800890c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800890e:	7bbb      	ldrb	r3, [r7, #14]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d102      	bne.n	800891a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008918:	e018      	b.n	800894c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800891a:	7bbb      	ldrb	r3, [r7, #14]
 800891c:	2b03      	cmp	r3, #3
 800891e:	d115      	bne.n	800894c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008920:	2300      	movs	r3, #0
 8008922:	73fb      	strb	r3, [r7, #15]
      break;
 8008924:	e012      	b.n	800894c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	73fb      	strb	r3, [r7, #15]
      break;
 800892a:	e00f      	b.n	800894c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800892c:	bf00      	nop
 800892e:	e00e      	b.n	800894e <USBH_HandleEnum+0x3be>
      break;
 8008930:	bf00      	nop
 8008932:	e00c      	b.n	800894e <USBH_HandleEnum+0x3be>
      break;
 8008934:	bf00      	nop
 8008936:	e00a      	b.n	800894e <USBH_HandleEnum+0x3be>
      break;
 8008938:	bf00      	nop
 800893a:	e008      	b.n	800894e <USBH_HandleEnum+0x3be>
      break;
 800893c:	bf00      	nop
 800893e:	e006      	b.n	800894e <USBH_HandleEnum+0x3be>
      break;
 8008940:	bf00      	nop
 8008942:	e004      	b.n	800894e <USBH_HandleEnum+0x3be>
      break;
 8008944:	bf00      	nop
 8008946:	e002      	b.n	800894e <USBH_HandleEnum+0x3be>
      break;
 8008948:	bf00      	nop
 800894a:	e000      	b.n	800894e <USBH_HandleEnum+0x3be>
      break;
 800894c:	bf00      	nop
  }
  return Status;
 800894e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	683a      	ldr	r2, [r7, #0]
 8008966:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800896a:	bf00      	nop
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b082      	sub	sp, #8
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008984:	1c5a      	adds	r2, r3, #1
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f804 	bl	800899a <USBH_HandleSof>
}
 8008992:	bf00      	nop
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b082      	sub	sp, #8
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b0b      	cmp	r3, #11
 80089aa:	d10a      	bne.n	80089c2 <USBH_HandleSof+0x28>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d005      	beq.n	80089c2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	4798      	blx	r3
  }
}
 80089c2:	bf00      	nop
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b083      	sub	sp, #12
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80089da:	bf00      	nop
}
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b083      	sub	sp, #12
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80089f6:	bf00      	nop
}
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b083      	sub	sp, #12
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f001 f844 	bl	8009ade <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	791b      	ldrb	r3, [r3, #4]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fe91 	bl	8009784 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	795b      	ldrb	r3, [r3, #5]
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fe8b 	bl	8009784 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af02      	add	r7, sp, #8
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	460b      	mov	r3, r1
 8008a82:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008a8a:	78fb      	ldrb	r3, [r7, #3]
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	4613      	mov	r3, r2
 8008a92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a96:	2100      	movs	r1, #0
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f864 	bl	8008b66 <USBH_GetDescriptor>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10a      	bne.n	8008abe <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008ab4:	78fa      	ldrb	r2, [r7, #3]
 8008ab6:	b292      	uxth	r2, r2
 8008ab8:	4619      	mov	r1, r3
 8008aba:	f000 f918 	bl	8008cee <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b086      	sub	sp, #24
 8008acc:	af02      	add	r7, sp, #8
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	331c      	adds	r3, #28
 8008ad8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008ada:	887b      	ldrh	r3, [r7, #2]
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f83d 	bl	8008b66 <USBH_GetDescriptor>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d107      	bne.n	8008b06 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008af6:	887b      	ldrh	r3, [r7, #2]
 8008af8:	461a      	mov	r2, r3
 8008afa:	68b9      	ldr	r1, [r7, #8]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f987 	bl	8008e10 <USBH_ParseCfgDesc>
 8008b02:	4603      	mov	r3, r0
 8008b04:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b088      	sub	sp, #32
 8008b14:	af02      	add	r7, sp, #8
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	607a      	str	r2, [r7, #4]
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	72fb      	strb	r3, [r7, #11]
 8008b20:	4613      	mov	r3, r2
 8008b22:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008b24:	7afb      	ldrb	r3, [r7, #11]
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008b2c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008b34:	893b      	ldrh	r3, [r7, #8]
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 f812 	bl	8008b66 <USBH_GetDescriptor>
 8008b42:	4603      	mov	r3, r0
 8008b44:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d107      	bne.n	8008b5c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008b52:	893a      	ldrh	r2, [r7, #8]
 8008b54:	6879      	ldr	r1, [r7, #4]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 fb24 	bl	80091a4 <USBH_ParseStringDesc>
  }

  return status;
 8008b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b084      	sub	sp, #16
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	60f8      	str	r0, [r7, #12]
 8008b6e:	607b      	str	r3, [r7, #4]
 8008b70:	460b      	mov	r3, r1
 8008b72:	72fb      	strb	r3, [r7, #11]
 8008b74:	4613      	mov	r3, r2
 8008b76:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	789b      	ldrb	r3, [r3, #2]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d11c      	bne.n	8008bba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008b80:	7afb      	ldrb	r3, [r7, #11]
 8008b82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2206      	movs	r2, #6
 8008b90:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	893a      	ldrh	r2, [r7, #8]
 8008b96:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008b98:	893b      	ldrh	r3, [r7, #8]
 8008b9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ba2:	d104      	bne.n	8008bae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f240 4209 	movw	r2, #1033	; 0x409
 8008baa:	829a      	strh	r2, [r3, #20]
 8008bac:	e002      	b.n	8008bb4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	8b3a      	ldrh	r2, [r7, #24]
 8008bb8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008bba:	8b3b      	ldrh	r3, [r7, #24]
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	6879      	ldr	r1, [r7, #4]
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f000 fb3d 	bl	8009240 <USBH_CtlReq>
 8008bc6:	4603      	mov	r3, r0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	789b      	ldrb	r3, [r3, #2]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d10f      	bne.n	8008c04 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2205      	movs	r2, #5
 8008bee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008bf0:	78fb      	ldrb	r3, [r7, #3]
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008c04:	2200      	movs	r2, #0
 8008c06:	2100      	movs	r1, #0
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fb19 	bl	8009240 <USBH_CtlReq>
 8008c0e:	4603      	mov	r3, r0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	789b      	ldrb	r3, [r3, #2]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d10e      	bne.n	8008c4a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2209      	movs	r2, #9
 8008c36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	887a      	ldrh	r2, [r7, #2]
 8008c3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 faf6 	bl	8009240 <USBH_CtlReq>
 8008c54:	4603      	mov	r3, r0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b082      	sub	sp, #8
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	460b      	mov	r3, r1
 8008c68:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	789b      	ldrb	r3, [r3, #2]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d10f      	bne.n	8008c92 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2203      	movs	r2, #3
 8008c7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008c7e:	78fb      	ldrb	r3, [r7, #3]
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008c92:	2200      	movs	r2, #0
 8008c94:	2100      	movs	r1, #0
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fad2 	bl	8009240 <USBH_CtlReq>
 8008c9c:	4603      	mov	r3, r0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b082      	sub	sp, #8
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	460b      	mov	r3, r1
 8008cb0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	789b      	ldrb	r3, [r3, #2]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d10f      	bne.n	8008cda <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008ccc:	78fb      	ldrb	r3, [r7, #3]
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008cda:	2200      	movs	r2, #0
 8008cdc:	2100      	movs	r1, #0
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 faae 	bl	8009240 <USBH_CtlReq>
 8008ce4:	4603      	mov	r3, r0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b085      	sub	sp, #20
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	60f8      	str	r0, [r7, #12]
 8008cf6:	60b9      	str	r1, [r7, #8]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	781a      	ldrb	r2, [r3, #0]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	785a      	ldrb	r2, [r3, #1]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	3302      	adds	r3, #2
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	3303      	adds	r3, #3
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	021b      	lsls	r3, r3, #8
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	4313      	orrs	r3, r2
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	791a      	ldrb	r2, [r3, #4]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	795a      	ldrb	r2, [r3, #5]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	799a      	ldrb	r2, [r3, #6]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	79da      	ldrb	r2, [r3, #7]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	79db      	ldrb	r3, [r3, #7]
 8008d4c:	2b20      	cmp	r3, #32
 8008d4e:	dc11      	bgt.n	8008d74 <USBH_ParseDevDesc+0x86>
 8008d50:	2b08      	cmp	r3, #8
 8008d52:	db16      	blt.n	8008d82 <USBH_ParseDevDesc+0x94>
 8008d54:	3b08      	subs	r3, #8
 8008d56:	2201      	movs	r2, #1
 8008d58:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	bf14      	ite	ne
 8008d68:	2301      	movne	r3, #1
 8008d6a:	2300      	moveq	r3, #0
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d102      	bne.n	8008d78 <USBH_ParseDevDesc+0x8a>
 8008d72:	e006      	b.n	8008d82 <USBH_ParseDevDesc+0x94>
 8008d74:	2b40      	cmp	r3, #64	; 0x40
 8008d76:	d104      	bne.n	8008d82 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	79da      	ldrb	r2, [r3, #7]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	71da      	strb	r2, [r3, #7]
      break;
 8008d80:	e003      	b.n	8008d8a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2240      	movs	r2, #64	; 0x40
 8008d86:	71da      	strb	r2, [r3, #7]
      break;
 8008d88:	bf00      	nop
  }

  if (length > 8U)
 8008d8a:	88fb      	ldrh	r3, [r7, #6]
 8008d8c:	2b08      	cmp	r3, #8
 8008d8e:	d939      	bls.n	8008e04 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	3308      	adds	r3, #8
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	3309      	adds	r3, #9
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	021b      	lsls	r3, r3, #8
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	4313      	orrs	r3, r2
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	330a      	adds	r3, #10
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	330b      	adds	r3, #11
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	021b      	lsls	r3, r3, #8
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	330c      	adds	r3, #12
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	330d      	adds	r3, #13
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	021b      	lsls	r3, r3, #8
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	7b9a      	ldrb	r2, [r3, #14]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	7bda      	ldrb	r2, [r3, #15]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	7c1a      	ldrb	r2, [r3, #16]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	7c5a      	ldrb	r2, [r3, #17]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	745a      	strb	r2, [r3, #17]
  }
}
 8008e04:	bf00      	nop
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b08c      	sub	sp, #48	; 0x30
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008e24:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008e30:	2300      	movs	r3, #0
 8008e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	781a      	ldrb	r2, [r3, #0]
 8008e44:	6a3b      	ldr	r3, [r7, #32]
 8008e46:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	785a      	ldrb	r2, [r3, #1]
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	3302      	adds	r3, #2
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	3303      	adds	r3, #3
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	021b      	lsls	r3, r3, #8
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	4313      	orrs	r3, r2
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e6c:	bf28      	it	cs
 8008e6e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	791a      	ldrb	r2, [r3, #4]
 8008e7c:	6a3b      	ldr	r3, [r7, #32]
 8008e7e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	795a      	ldrb	r2, [r3, #5]
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	799a      	ldrb	r2, [r3, #6]
 8008e8c:	6a3b      	ldr	r3, [r7, #32]
 8008e8e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	79da      	ldrb	r2, [r3, #7]
 8008e94:	6a3b      	ldr	r3, [r7, #32]
 8008e96:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	7a1a      	ldrb	r2, [r3, #8]
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008ea0:	6a3b      	ldr	r3, [r7, #32]
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	2b09      	cmp	r3, #9
 8008ea6:	d002      	beq.n	8008eae <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008ea8:	6a3b      	ldr	r3, [r7, #32]
 8008eaa:	2209      	movs	r2, #9
 8008eac:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008eae:	88fb      	ldrh	r3, [r7, #6]
 8008eb0:	2b09      	cmp	r3, #9
 8008eb2:	f240 809d 	bls.w	8008ff0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008eb6:	2309      	movs	r3, #9
 8008eb8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008ebe:	e081      	b.n	8008fc4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008ec0:	f107 0316 	add.w	r3, r7, #22
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ec8:	f000 f99f 	bl	800920a <USBH_GetNextDesc>
 8008ecc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed0:	785b      	ldrb	r3, [r3, #1]
 8008ed2:	2b04      	cmp	r3, #4
 8008ed4:	d176      	bne.n	8008fc4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	2b09      	cmp	r3, #9
 8008edc:	d002      	beq.n	8008ee4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee0:	2209      	movs	r2, #9
 8008ee2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ee8:	221a      	movs	r2, #26
 8008eea:	fb02 f303 	mul.w	r3, r2, r3
 8008eee:	3308      	adds	r3, #8
 8008ef0:	6a3a      	ldr	r2, [r7, #32]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	3302      	adds	r3, #2
 8008ef6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008ef8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008efa:	69f8      	ldr	r0, [r7, #28]
 8008efc:	f000 f87e 	bl	8008ffc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008f00:	2300      	movs	r3, #0
 8008f02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008f06:	2300      	movs	r3, #0
 8008f08:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008f0a:	e043      	b.n	8008f94 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008f0c:	f107 0316 	add.w	r3, r7, #22
 8008f10:	4619      	mov	r1, r3
 8008f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f14:	f000 f979 	bl	800920a <USBH_GetNextDesc>
 8008f18:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1c:	785b      	ldrb	r3, [r3, #1]
 8008f1e:	2b05      	cmp	r3, #5
 8008f20:	d138      	bne.n	8008f94 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	795b      	ldrb	r3, [r3, #5]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d10f      	bne.n	8008f4a <USBH_ParseCfgDesc+0x13a>
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	799b      	ldrb	r3, [r3, #6]
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d10b      	bne.n	8008f4a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	79db      	ldrb	r3, [r3, #7]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10f      	bne.n	8008f5a <USBH_ParseCfgDesc+0x14a>
 8008f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	2b09      	cmp	r3, #9
 8008f40:	d00b      	beq.n	8008f5a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f44:	2209      	movs	r2, #9
 8008f46:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008f48:	e007      	b.n	8008f5a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b07      	cmp	r3, #7
 8008f50:	d004      	beq.n	8008f5c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f54:	2207      	movs	r2, #7
 8008f56:	701a      	strb	r2, [r3, #0]
 8008f58:	e000      	b.n	8008f5c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008f5a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f60:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008f64:	3201      	adds	r2, #1
 8008f66:	00d2      	lsls	r2, r2, #3
 8008f68:	211a      	movs	r1, #26
 8008f6a:	fb01 f303 	mul.w	r3, r1, r3
 8008f6e:	4413      	add	r3, r2
 8008f70:	3308      	adds	r3, #8
 8008f72:	6a3a      	ldr	r2, [r7, #32]
 8008f74:	4413      	add	r3, r2
 8008f76:	3304      	adds	r3, #4
 8008f78:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f7c:	69b9      	ldr	r1, [r7, #24]
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f000 f86b 	bl	800905a <USBH_ParseEPDesc>
 8008f84:	4603      	mov	r3, r0
 8008f86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008f8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f8e:	3301      	adds	r3, #1
 8008f90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	791b      	ldrb	r3, [r3, #4]
 8008f98:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d204      	bcs.n	8008faa <USBH_ParseCfgDesc+0x19a>
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
 8008fa2:	885a      	ldrh	r2, [r3, #2]
 8008fa4:	8afb      	ldrh	r3, [r7, #22]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d8b0      	bhi.n	8008f0c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	791b      	ldrb	r3, [r3, #4]
 8008fae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d201      	bcs.n	8008fba <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e01c      	b.n	8008ff4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008fba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d805      	bhi.n	8008fd8 <USBH_ParseCfgDesc+0x1c8>
 8008fcc:	6a3b      	ldr	r3, [r7, #32]
 8008fce:	885a      	ldrh	r2, [r3, #2]
 8008fd0:	8afb      	ldrh	r3, [r7, #22]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	f63f af74 	bhi.w	8008ec0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008fd8:	6a3b      	ldr	r3, [r7, #32]
 8008fda:	791b      	ldrb	r3, [r3, #4]
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	bf28      	it	cs
 8008fe0:	2302      	movcs	r3, #2
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d201      	bcs.n	8008ff0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008fec:	2303      	movs	r3, #3
 8008fee:	e001      	b.n	8008ff4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008ff0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3730      	adds	r7, #48	; 0x30
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	781a      	ldrb	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	785a      	ldrb	r2, [r3, #1]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	789a      	ldrb	r2, [r3, #2]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	78da      	ldrb	r2, [r3, #3]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	791a      	ldrb	r2, [r3, #4]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	795a      	ldrb	r2, [r3, #5]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	799a      	ldrb	r2, [r3, #6]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	79da      	ldrb	r2, [r3, #7]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	7a1a      	ldrb	r2, [r3, #8]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	721a      	strb	r2, [r3, #8]
}
 800904e:	bf00      	nop
 8009050:	370c      	adds	r7, #12
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800905a:	b480      	push	{r7}
 800905c:	b087      	sub	sp, #28
 800905e:	af00      	add	r7, sp, #0
 8009060:	60f8      	str	r0, [r7, #12]
 8009062:	60b9      	str	r1, [r7, #8]
 8009064:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	781a      	ldrb	r2, [r3, #0]
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	785a      	ldrb	r2, [r3, #1]
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	789a      	ldrb	r2, [r3, #2]
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	78da      	ldrb	r2, [r3, #3]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	3304      	adds	r3, #4
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	b29a      	uxth	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	3305      	adds	r3, #5
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	b29b      	uxth	r3, r3
 800909a:	021b      	lsls	r3, r3, #8
 800909c:	b29b      	uxth	r3, r3
 800909e:	4313      	orrs	r3, r2
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	799a      	ldrb	r2, [r3, #6]
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	889b      	ldrh	r3, [r3, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d102      	bne.n	80090bc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80090b6:	2303      	movs	r3, #3
 80090b8:	75fb      	strb	r3, [r7, #23]
 80090ba:	e033      	b.n	8009124 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	889b      	ldrh	r3, [r3, #4]
 80090c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80090c4:	f023 0307 	bic.w	r3, r3, #7
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	889b      	ldrh	r3, [r3, #4]
 80090d2:	b21a      	sxth	r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	3304      	adds	r3, #4
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	b299      	uxth	r1, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	3305      	adds	r3, #5
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	021b      	lsls	r3, r3, #8
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	430b      	orrs	r3, r1
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d110      	bne.n	8009116 <USBH_ParseEPDesc+0xbc>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	3304      	adds	r3, #4
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	b299      	uxth	r1, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	3305      	adds	r3, #5
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	b29b      	uxth	r3, r3
 8009104:	021b      	lsls	r3, r3, #8
 8009106:	b29b      	uxth	r3, r3
 8009108:	430b      	orrs	r3, r1
 800910a:	b29b      	uxth	r3, r3
 800910c:	b21b      	sxth	r3, r3
 800910e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009112:	b21b      	sxth	r3, r3
 8009114:	e001      	b.n	800911a <USBH_ParseEPDesc+0xc0>
 8009116:	f44f 7300 	mov.w	r3, #512	; 0x200
 800911a:	4313      	orrs	r3, r2
 800911c:	b21b      	sxth	r3, r3
 800911e:	b29a      	uxth	r2, r3
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800912a:	2b00      	cmp	r3, #0
 800912c:	d116      	bne.n	800915c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	78db      	ldrb	r3, [r3, #3]
 8009132:	f003 0303 	and.w	r3, r3, #3
 8009136:	2b01      	cmp	r3, #1
 8009138:	d005      	beq.n	8009146 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	78db      	ldrb	r3, [r3, #3]
 800913e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009142:	2b03      	cmp	r3, #3
 8009144:	d127      	bne.n	8009196 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	799b      	ldrb	r3, [r3, #6]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d003      	beq.n	8009156 <USBH_ParseEPDesc+0xfc>
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	799b      	ldrb	r3, [r3, #6]
 8009152:	2b10      	cmp	r3, #16
 8009154:	d91f      	bls.n	8009196 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009156:	2303      	movs	r3, #3
 8009158:	75fb      	strb	r3, [r7, #23]
 800915a:	e01c      	b.n	8009196 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	78db      	ldrb	r3, [r3, #3]
 8009160:	f003 0303 	and.w	r3, r3, #3
 8009164:	2b01      	cmp	r3, #1
 8009166:	d10a      	bne.n	800917e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	799b      	ldrb	r3, [r3, #6]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d003      	beq.n	8009178 <USBH_ParseEPDesc+0x11e>
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	799b      	ldrb	r3, [r3, #6]
 8009174:	2b10      	cmp	r3, #16
 8009176:	d90e      	bls.n	8009196 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009178:	2303      	movs	r3, #3
 800917a:	75fb      	strb	r3, [r7, #23]
 800917c:	e00b      	b.n	8009196 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	78db      	ldrb	r3, [r3, #3]
 8009182:	f003 0303 	and.w	r3, r3, #3
 8009186:	2b03      	cmp	r3, #3
 8009188:	d105      	bne.n	8009196 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	799b      	ldrb	r3, [r3, #6]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d101      	bne.n	8009196 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009192:	2303      	movs	r3, #3
 8009194:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009196:	7dfb      	ldrb	r3, [r7, #23]
}
 8009198:	4618      	mov	r0, r3
 800919a:	371c      	adds	r7, #28
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b087      	sub	sp, #28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	4613      	mov	r3, r2
 80091b0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	3301      	adds	r3, #1
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	2b03      	cmp	r3, #3
 80091ba:	d120      	bne.n	80091fe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	1e9a      	subs	r2, r3, #2
 80091c2:	88fb      	ldrh	r3, [r7, #6]
 80091c4:	4293      	cmp	r3, r2
 80091c6:	bf28      	it	cs
 80091c8:	4613      	movcs	r3, r2
 80091ca:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	3302      	adds	r3, #2
 80091d0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80091d2:	2300      	movs	r3, #0
 80091d4:	82fb      	strh	r3, [r7, #22]
 80091d6:	e00b      	b.n	80091f0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80091d8:	8afb      	ldrh	r3, [r7, #22]
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	4413      	add	r3, r2
 80091de:	781a      	ldrb	r2, [r3, #0]
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	3301      	adds	r3, #1
 80091e8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80091ea:	8afb      	ldrh	r3, [r7, #22]
 80091ec:	3302      	adds	r3, #2
 80091ee:	82fb      	strh	r3, [r7, #22]
 80091f0:	8afa      	ldrh	r2, [r7, #22]
 80091f2:	8abb      	ldrh	r3, [r7, #20]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d3ef      	bcc.n	80091d8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	2200      	movs	r2, #0
 80091fc:	701a      	strb	r2, [r3, #0]
  }
}
 80091fe:	bf00      	nop
 8009200:	371c      	adds	r7, #28
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800920a:	b480      	push	{r7}
 800920c:	b085      	sub	sp, #20
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
 8009212:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	881a      	ldrh	r2, [r3, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	b29b      	uxth	r3, r3
 800921e:	4413      	add	r3, r2
 8009220:	b29a      	uxth	r2, r3
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4413      	add	r3, r2
 8009230:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009232:	68fb      	ldr	r3, [r7, #12]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	4613      	mov	r3, r2
 800924c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800924e:	2301      	movs	r3, #1
 8009250:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	789b      	ldrb	r3, [r3, #2]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d002      	beq.n	8009260 <USBH_CtlReq+0x20>
 800925a:	2b02      	cmp	r3, #2
 800925c:	d00f      	beq.n	800927e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800925e:	e027      	b.n	80092b0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	88fa      	ldrh	r2, [r7, #6]
 800926a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2201      	movs	r2, #1
 8009270:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2202      	movs	r2, #2
 8009276:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009278:	2301      	movs	r3, #1
 800927a:	75fb      	strb	r3, [r7, #23]
      break;
 800927c:	e018      	b.n	80092b0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 f81c 	bl	80092bc <USBH_HandleControl>
 8009284:	4603      	mov	r3, r0
 8009286:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009288:	7dfb      	ldrb	r3, [r7, #23]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d002      	beq.n	8009294 <USBH_CtlReq+0x54>
 800928e:	7dfb      	ldrb	r3, [r7, #23]
 8009290:	2b03      	cmp	r3, #3
 8009292:	d106      	bne.n	80092a2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2201      	movs	r2, #1
 8009298:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2200      	movs	r2, #0
 800929e:	761a      	strb	r2, [r3, #24]
      break;
 80092a0:	e005      	b.n	80092ae <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80092a2:	7dfb      	ldrb	r3, [r7, #23]
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d102      	bne.n	80092ae <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2201      	movs	r2, #1
 80092ac:	709a      	strb	r2, [r3, #2]
      break;
 80092ae:	bf00      	nop
  }
  return status;
 80092b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3718      	adds	r7, #24
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
	...

080092bc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af02      	add	r7, sp, #8
 80092c2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80092c4:	2301      	movs	r3, #1
 80092c6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80092c8:	2300      	movs	r3, #0
 80092ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	7e1b      	ldrb	r3, [r3, #24]
 80092d0:	3b01      	subs	r3, #1
 80092d2:	2b0a      	cmp	r3, #10
 80092d4:	f200 8156 	bhi.w	8009584 <USBH_HandleControl+0x2c8>
 80092d8:	a201      	add	r2, pc, #4	; (adr r2, 80092e0 <USBH_HandleControl+0x24>)
 80092da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092de:	bf00      	nop
 80092e0:	0800930d 	.word	0x0800930d
 80092e4:	08009327 	.word	0x08009327
 80092e8:	08009391 	.word	0x08009391
 80092ec:	080093b7 	.word	0x080093b7
 80092f0:	080093ef 	.word	0x080093ef
 80092f4:	08009419 	.word	0x08009419
 80092f8:	0800946b 	.word	0x0800946b
 80092fc:	0800948d 	.word	0x0800948d
 8009300:	080094c9 	.word	0x080094c9
 8009304:	080094ef 	.word	0x080094ef
 8009308:	0800952d 	.word	0x0800952d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f103 0110 	add.w	r1, r3, #16
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	795b      	ldrb	r3, [r3, #5]
 8009316:	461a      	mov	r2, r3
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f943 	bl	80095a4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2202      	movs	r2, #2
 8009322:	761a      	strb	r2, [r3, #24]
      break;
 8009324:	e139      	b.n	800959a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	795b      	ldrb	r3, [r3, #5]
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fcc5 	bl	8009cbc <USBH_LL_GetURBState>
 8009332:	4603      	mov	r3, r0
 8009334:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009336:	7bbb      	ldrb	r3, [r7, #14]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d11e      	bne.n	800937a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	7c1b      	ldrb	r3, [r3, #16]
 8009340:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009344:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	8adb      	ldrh	r3, [r3, #22]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00a      	beq.n	8009364 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800934e:	7b7b      	ldrb	r3, [r7, #13]
 8009350:	2b80      	cmp	r3, #128	; 0x80
 8009352:	d103      	bne.n	800935c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2203      	movs	r2, #3
 8009358:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800935a:	e115      	b.n	8009588 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2205      	movs	r2, #5
 8009360:	761a      	strb	r2, [r3, #24]
      break;
 8009362:	e111      	b.n	8009588 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009364:	7b7b      	ldrb	r3, [r7, #13]
 8009366:	2b80      	cmp	r3, #128	; 0x80
 8009368:	d103      	bne.n	8009372 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2209      	movs	r2, #9
 800936e:	761a      	strb	r2, [r3, #24]
      break;
 8009370:	e10a      	b.n	8009588 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2207      	movs	r2, #7
 8009376:	761a      	strb	r2, [r3, #24]
      break;
 8009378:	e106      	b.n	8009588 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800937a:	7bbb      	ldrb	r3, [r7, #14]
 800937c:	2b04      	cmp	r3, #4
 800937e:	d003      	beq.n	8009388 <USBH_HandleControl+0xcc>
 8009380:	7bbb      	ldrb	r3, [r7, #14]
 8009382:	2b02      	cmp	r3, #2
 8009384:	f040 8100 	bne.w	8009588 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	220b      	movs	r2, #11
 800938c:	761a      	strb	r2, [r3, #24]
      break;
 800938e:	e0fb      	b.n	8009588 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009396:	b29a      	uxth	r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6899      	ldr	r1, [r3, #8]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	899a      	ldrh	r2, [r3, #12]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	791b      	ldrb	r3, [r3, #4]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f93a 	bl	8009622 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2204      	movs	r2, #4
 80093b2:	761a      	strb	r2, [r3, #24]
      break;
 80093b4:	e0f1      	b.n	800959a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	791b      	ldrb	r3, [r3, #4]
 80093ba:	4619      	mov	r1, r3
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 fc7d 	bl	8009cbc <USBH_LL_GetURBState>
 80093c2:	4603      	mov	r3, r0
 80093c4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80093c6:	7bbb      	ldrb	r3, [r7, #14]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d102      	bne.n	80093d2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2209      	movs	r2, #9
 80093d0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80093d2:	7bbb      	ldrb	r3, [r7, #14]
 80093d4:	2b05      	cmp	r3, #5
 80093d6:	d102      	bne.n	80093de <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80093d8:	2303      	movs	r3, #3
 80093da:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80093dc:	e0d6      	b.n	800958c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80093de:	7bbb      	ldrb	r3, [r7, #14]
 80093e0:	2b04      	cmp	r3, #4
 80093e2:	f040 80d3 	bne.w	800958c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	220b      	movs	r2, #11
 80093ea:	761a      	strb	r2, [r3, #24]
      break;
 80093ec:	e0ce      	b.n	800958c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6899      	ldr	r1, [r3, #8]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	899a      	ldrh	r2, [r3, #12]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	795b      	ldrb	r3, [r3, #5]
 80093fa:	2001      	movs	r0, #1
 80093fc:	9000      	str	r0, [sp, #0]
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f8ea 	bl	80095d8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800940a:	b29a      	uxth	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2206      	movs	r2, #6
 8009414:	761a      	strb	r2, [r3, #24]
      break;
 8009416:	e0c0      	b.n	800959a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	795b      	ldrb	r3, [r3, #5]
 800941c:	4619      	mov	r1, r3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fc4c 	bl	8009cbc <USBH_LL_GetURBState>
 8009424:	4603      	mov	r3, r0
 8009426:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009428:	7bbb      	ldrb	r3, [r7, #14]
 800942a:	2b01      	cmp	r3, #1
 800942c:	d103      	bne.n	8009436 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2207      	movs	r2, #7
 8009432:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009434:	e0ac      	b.n	8009590 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009436:	7bbb      	ldrb	r3, [r7, #14]
 8009438:	2b05      	cmp	r3, #5
 800943a:	d105      	bne.n	8009448 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	220c      	movs	r2, #12
 8009440:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009442:	2303      	movs	r3, #3
 8009444:	73fb      	strb	r3, [r7, #15]
      break;
 8009446:	e0a3      	b.n	8009590 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009448:	7bbb      	ldrb	r3, [r7, #14]
 800944a:	2b02      	cmp	r3, #2
 800944c:	d103      	bne.n	8009456 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2205      	movs	r2, #5
 8009452:	761a      	strb	r2, [r3, #24]
      break;
 8009454:	e09c      	b.n	8009590 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009456:	7bbb      	ldrb	r3, [r7, #14]
 8009458:	2b04      	cmp	r3, #4
 800945a:	f040 8099 	bne.w	8009590 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	220b      	movs	r2, #11
 8009462:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009464:	2302      	movs	r3, #2
 8009466:	73fb      	strb	r3, [r7, #15]
      break;
 8009468:	e092      	b.n	8009590 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	791b      	ldrb	r3, [r3, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	2100      	movs	r1, #0
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f8d5 	bl	8009622 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800947e:	b29a      	uxth	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2208      	movs	r2, #8
 8009488:	761a      	strb	r2, [r3, #24]

      break;
 800948a:	e086      	b.n	800959a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	791b      	ldrb	r3, [r3, #4]
 8009490:	4619      	mov	r1, r3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fc12 	bl	8009cbc <USBH_LL_GetURBState>
 8009498:	4603      	mov	r3, r0
 800949a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800949c:	7bbb      	ldrb	r3, [r7, #14]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d105      	bne.n	80094ae <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	220d      	movs	r2, #13
 80094a6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80094a8:	2300      	movs	r3, #0
 80094aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80094ac:	e072      	b.n	8009594 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80094ae:	7bbb      	ldrb	r3, [r7, #14]
 80094b0:	2b04      	cmp	r3, #4
 80094b2:	d103      	bne.n	80094bc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	220b      	movs	r2, #11
 80094b8:	761a      	strb	r2, [r3, #24]
      break;
 80094ba:	e06b      	b.n	8009594 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80094bc:	7bbb      	ldrb	r3, [r7, #14]
 80094be:	2b05      	cmp	r3, #5
 80094c0:	d168      	bne.n	8009594 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80094c2:	2303      	movs	r3, #3
 80094c4:	73fb      	strb	r3, [r7, #15]
      break;
 80094c6:	e065      	b.n	8009594 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	795b      	ldrb	r3, [r3, #5]
 80094cc:	2201      	movs	r2, #1
 80094ce:	9200      	str	r2, [sp, #0]
 80094d0:	2200      	movs	r2, #0
 80094d2:	2100      	movs	r1, #0
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 f87f 	bl	80095d8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	220a      	movs	r2, #10
 80094ea:	761a      	strb	r2, [r3, #24]
      break;
 80094ec:	e055      	b.n	800959a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	795b      	ldrb	r3, [r3, #5]
 80094f2:	4619      	mov	r1, r3
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fbe1 	bl	8009cbc <USBH_LL_GetURBState>
 80094fa:	4603      	mov	r3, r0
 80094fc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80094fe:	7bbb      	ldrb	r3, [r7, #14]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d105      	bne.n	8009510 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009504:	2300      	movs	r3, #0
 8009506:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	220d      	movs	r2, #13
 800950c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800950e:	e043      	b.n	8009598 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009510:	7bbb      	ldrb	r3, [r7, #14]
 8009512:	2b02      	cmp	r3, #2
 8009514:	d103      	bne.n	800951e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2209      	movs	r2, #9
 800951a:	761a      	strb	r2, [r3, #24]
      break;
 800951c:	e03c      	b.n	8009598 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800951e:	7bbb      	ldrb	r3, [r7, #14]
 8009520:	2b04      	cmp	r3, #4
 8009522:	d139      	bne.n	8009598 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	220b      	movs	r2, #11
 8009528:	761a      	strb	r2, [r3, #24]
      break;
 800952a:	e035      	b.n	8009598 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	7e5b      	ldrb	r3, [r3, #25]
 8009530:	3301      	adds	r3, #1
 8009532:	b2da      	uxtb	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	765a      	strb	r2, [r3, #25]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	7e5b      	ldrb	r3, [r3, #25]
 800953c:	2b02      	cmp	r3, #2
 800953e:	d806      	bhi.n	800954e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2201      	movs	r2, #1
 800954a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800954c:	e025      	b.n	800959a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009554:	2106      	movs	r1, #6
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	795b      	ldrb	r3, [r3, #5]
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f90c 	bl	8009784 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	791b      	ldrb	r3, [r3, #4]
 8009570:	4619      	mov	r1, r3
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f906 	bl	8009784 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800957e:	2302      	movs	r3, #2
 8009580:	73fb      	strb	r3, [r7, #15]
      break;
 8009582:	e00a      	b.n	800959a <USBH_HandleControl+0x2de>

    default:
      break;
 8009584:	bf00      	nop
 8009586:	e008      	b.n	800959a <USBH_HandleControl+0x2de>
      break;
 8009588:	bf00      	nop
 800958a:	e006      	b.n	800959a <USBH_HandleControl+0x2de>
      break;
 800958c:	bf00      	nop
 800958e:	e004      	b.n	800959a <USBH_HandleControl+0x2de>
      break;
 8009590:	bf00      	nop
 8009592:	e002      	b.n	800959a <USBH_HandleControl+0x2de>
      break;
 8009594:	bf00      	nop
 8009596:	e000      	b.n	800959a <USBH_HandleControl+0x2de>
      break;
 8009598:	bf00      	nop
  }

  return status;
 800959a:	7bfb      	ldrb	r3, [r7, #15]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b088      	sub	sp, #32
 80095a8:	af04      	add	r7, sp, #16
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	4613      	mov	r3, r2
 80095b0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095b2:	79f9      	ldrb	r1, [r7, #7]
 80095b4:	2300      	movs	r3, #0
 80095b6:	9303      	str	r3, [sp, #12]
 80095b8:	2308      	movs	r3, #8
 80095ba:	9302      	str	r3, [sp, #8]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	9301      	str	r3, [sp, #4]
 80095c0:	2300      	movs	r3, #0
 80095c2:	9300      	str	r3, [sp, #0]
 80095c4:	2300      	movs	r3, #0
 80095c6:	2200      	movs	r2, #0
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f000 fb46 	bl	8009c5a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b088      	sub	sp, #32
 80095dc:	af04      	add	r7, sp, #16
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	4611      	mov	r1, r2
 80095e4:	461a      	mov	r2, r3
 80095e6:	460b      	mov	r3, r1
 80095e8:	80fb      	strh	r3, [r7, #6]
 80095ea:	4613      	mov	r3, r2
 80095ec:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80095f8:	2300      	movs	r3, #0
 80095fa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095fc:	7979      	ldrb	r1, [r7, #5]
 80095fe:	7e3b      	ldrb	r3, [r7, #24]
 8009600:	9303      	str	r3, [sp, #12]
 8009602:	88fb      	ldrh	r3, [r7, #6]
 8009604:	9302      	str	r3, [sp, #8]
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	9301      	str	r3, [sp, #4]
 800960a:	2301      	movs	r3, #1
 800960c:	9300      	str	r3, [sp, #0]
 800960e:	2300      	movs	r3, #0
 8009610:	2200      	movs	r2, #0
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 fb21 	bl	8009c5a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b088      	sub	sp, #32
 8009626:	af04      	add	r7, sp, #16
 8009628:	60f8      	str	r0, [r7, #12]
 800962a:	60b9      	str	r1, [r7, #8]
 800962c:	4611      	mov	r1, r2
 800962e:	461a      	mov	r2, r3
 8009630:	460b      	mov	r3, r1
 8009632:	80fb      	strh	r3, [r7, #6]
 8009634:	4613      	mov	r3, r2
 8009636:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009638:	7979      	ldrb	r1, [r7, #5]
 800963a:	2300      	movs	r3, #0
 800963c:	9303      	str	r3, [sp, #12]
 800963e:	88fb      	ldrh	r3, [r7, #6]
 8009640:	9302      	str	r3, [sp, #8]
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	9301      	str	r3, [sp, #4]
 8009646:	2301      	movs	r3, #1
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	2300      	movs	r3, #0
 800964c:	2201      	movs	r2, #1
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f000 fb03 	bl	8009c5a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009654:	2300      	movs	r3, #0

}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b088      	sub	sp, #32
 8009662:	af04      	add	r7, sp, #16
 8009664:	60f8      	str	r0, [r7, #12]
 8009666:	60b9      	str	r1, [r7, #8]
 8009668:	4611      	mov	r1, r2
 800966a:	461a      	mov	r2, r3
 800966c:	460b      	mov	r3, r1
 800966e:	80fb      	strh	r3, [r7, #6]
 8009670:	4613      	mov	r3, r2
 8009672:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800967a:	2b00      	cmp	r3, #0
 800967c:	d001      	beq.n	8009682 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800967e:	2300      	movs	r3, #0
 8009680:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009682:	7979      	ldrb	r1, [r7, #5]
 8009684:	7e3b      	ldrb	r3, [r7, #24]
 8009686:	9303      	str	r3, [sp, #12]
 8009688:	88fb      	ldrh	r3, [r7, #6]
 800968a:	9302      	str	r3, [sp, #8]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	9301      	str	r3, [sp, #4]
 8009690:	2301      	movs	r3, #1
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	2302      	movs	r3, #2
 8009696:	2200      	movs	r2, #0
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 fade 	bl	8009c5a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3710      	adds	r7, #16
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b088      	sub	sp, #32
 80096ac:	af04      	add	r7, sp, #16
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	4611      	mov	r1, r2
 80096b4:	461a      	mov	r2, r3
 80096b6:	460b      	mov	r3, r1
 80096b8:	80fb      	strh	r3, [r7, #6]
 80096ba:	4613      	mov	r3, r2
 80096bc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80096be:	7979      	ldrb	r1, [r7, #5]
 80096c0:	2300      	movs	r3, #0
 80096c2:	9303      	str	r3, [sp, #12]
 80096c4:	88fb      	ldrh	r3, [r7, #6]
 80096c6:	9302      	str	r3, [sp, #8]
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	9301      	str	r3, [sp, #4]
 80096cc:	2301      	movs	r3, #1
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	2302      	movs	r3, #2
 80096d2:	2201      	movs	r2, #1
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f000 fac0 	bl	8009c5a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af04      	add	r7, sp, #16
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	4608      	mov	r0, r1
 80096ee:	4611      	mov	r1, r2
 80096f0:	461a      	mov	r2, r3
 80096f2:	4603      	mov	r3, r0
 80096f4:	70fb      	strb	r3, [r7, #3]
 80096f6:	460b      	mov	r3, r1
 80096f8:	70bb      	strb	r3, [r7, #2]
 80096fa:	4613      	mov	r3, r2
 80096fc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80096fe:	7878      	ldrb	r0, [r7, #1]
 8009700:	78ba      	ldrb	r2, [r7, #2]
 8009702:	78f9      	ldrb	r1, [r7, #3]
 8009704:	8b3b      	ldrh	r3, [r7, #24]
 8009706:	9302      	str	r3, [sp, #8]
 8009708:	7d3b      	ldrb	r3, [r7, #20]
 800970a:	9301      	str	r3, [sp, #4]
 800970c:	7c3b      	ldrb	r3, [r7, #16]
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	4603      	mov	r3, r0
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fa53 	bl	8009bbe <USBH_LL_OpenPipe>

  return USBH_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b082      	sub	sp, #8
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
 800972a:	460b      	mov	r3, r1
 800972c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800972e:	78fb      	ldrb	r3, [r7, #3]
 8009730:	4619      	mov	r1, r3
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fa72 	bl	8009c1c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b084      	sub	sp, #16
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
 800974a:	460b      	mov	r3, r1
 800974c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 f836 	bl	80097c0 <USBH_GetFreePipe>
 8009754:	4603      	mov	r3, r0
 8009756:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009758:	89fb      	ldrh	r3, [r7, #14]
 800975a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800975e:	4293      	cmp	r3, r2
 8009760:	d00a      	beq.n	8009778 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009762:	78fa      	ldrb	r2, [r7, #3]
 8009764:	89fb      	ldrh	r3, [r7, #14]
 8009766:	f003 030f 	and.w	r3, r3, #15
 800976a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800976e:	6879      	ldr	r1, [r7, #4]
 8009770:	33e0      	adds	r3, #224	; 0xe0
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	440b      	add	r3, r1
 8009776:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009778:	89fb      	ldrh	r3, [r7, #14]
 800977a:	b2db      	uxtb	r3, r3
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009790:	78fb      	ldrb	r3, [r7, #3]
 8009792:	2b0f      	cmp	r3, #15
 8009794:	d80d      	bhi.n	80097b2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009796:	78fb      	ldrb	r3, [r7, #3]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	33e0      	adds	r3, #224	; 0xe0
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	685a      	ldr	r2, [r3, #4]
 80097a2:	78fb      	ldrb	r3, [r7, #3]
 80097a4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80097a8:	6879      	ldr	r1, [r7, #4]
 80097aa:	33e0      	adds	r3, #224	; 0xe0
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	440b      	add	r3, r1
 80097b0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80097c8:	2300      	movs	r3, #0
 80097ca:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80097cc:	2300      	movs	r3, #0
 80097ce:	73fb      	strb	r3, [r7, #15]
 80097d0:	e00f      	b.n	80097f2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80097d2:	7bfb      	ldrb	r3, [r7, #15]
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	33e0      	adds	r3, #224	; 0xe0
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	4413      	add	r3, r2
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d102      	bne.n	80097ec <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80097e6:	7bfb      	ldrb	r3, [r7, #15]
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	e007      	b.n	80097fc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
 80097ee:	3301      	adds	r3, #1
 80097f0:	73fb      	strb	r3, [r7, #15]
 80097f2:	7bfb      	ldrb	r3, [r7, #15]
 80097f4:	2b0f      	cmp	r3, #15
 80097f6:	d9ec      	bls.n	80097d2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80097f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800980c:	2201      	movs	r2, #1
 800980e:	490e      	ldr	r1, [pc, #56]	; (8009848 <MX_USB_HOST_Init+0x40>)
 8009810:	480e      	ldr	r0, [pc, #56]	; (800984c <MX_USB_HOST_Init+0x44>)
 8009812:	f7fe fba7 	bl	8007f64 <USBH_Init>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d001      	beq.n	8009820 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800981c:	f7f7 f984 	bl	8000b28 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009820:	490b      	ldr	r1, [pc, #44]	; (8009850 <MX_USB_HOST_Init+0x48>)
 8009822:	480a      	ldr	r0, [pc, #40]	; (800984c <MX_USB_HOST_Init+0x44>)
 8009824:	f7fe fc2c 	bl	8008080 <USBH_RegisterClass>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d001      	beq.n	8009832 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800982e:	f7f7 f97b 	bl	8000b28 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009832:	4806      	ldr	r0, [pc, #24]	; (800984c <MX_USB_HOST_Init+0x44>)
 8009834:	f7fe fcb0 	bl	8008198 <USBH_Start>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800983e:	f7f7 f973 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009842:	bf00      	nop
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	08009869 	.word	0x08009869
 800984c:	200002a0 	.word	0x200002a0
 8009850:	2000000c 	.word	0x2000000c

08009854 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009858:	4802      	ldr	r0, [pc, #8]	; (8009864 <MX_USB_HOST_Process+0x10>)
 800985a:	f7fe fcad 	bl	80081b8 <USBH_Process>
}
 800985e:	bf00      	nop
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	200002a0 	.word	0x200002a0

08009868 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	460b      	mov	r3, r1
 8009872:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009874:	78fb      	ldrb	r3, [r7, #3]
 8009876:	3b01      	subs	r3, #1
 8009878:	2b04      	cmp	r3, #4
 800987a:	d819      	bhi.n	80098b0 <USBH_UserProcess+0x48>
 800987c:	a201      	add	r2, pc, #4	; (adr r2, 8009884 <USBH_UserProcess+0x1c>)
 800987e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009882:	bf00      	nop
 8009884:	080098b1 	.word	0x080098b1
 8009888:	080098a1 	.word	0x080098a1
 800988c:	080098b1 	.word	0x080098b1
 8009890:	080098a9 	.word	0x080098a9
 8009894:	08009899 	.word	0x08009899
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009898:	4b09      	ldr	r3, [pc, #36]	; (80098c0 <USBH_UserProcess+0x58>)
 800989a:	2203      	movs	r2, #3
 800989c:	701a      	strb	r2, [r3, #0]
  break;
 800989e:	e008      	b.n	80098b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80098a0:	4b07      	ldr	r3, [pc, #28]	; (80098c0 <USBH_UserProcess+0x58>)
 80098a2:	2202      	movs	r2, #2
 80098a4:	701a      	strb	r2, [r3, #0]
  break;
 80098a6:	e004      	b.n	80098b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80098a8:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <USBH_UserProcess+0x58>)
 80098aa:	2201      	movs	r2, #1
 80098ac:	701a      	strb	r2, [r3, #0]
  break;
 80098ae:	e000      	b.n	80098b2 <USBH_UserProcess+0x4a>

  default:
  break;
 80098b0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80098b2:	bf00      	nop
 80098b4:	370c      	adds	r7, #12
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	20000678 	.word	0x20000678

080098c4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b08a      	sub	sp, #40	; 0x28
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098cc:	f107 0314 	add.w	r3, r7, #20
 80098d0:	2200      	movs	r2, #0
 80098d2:	601a      	str	r2, [r3, #0]
 80098d4:	605a      	str	r2, [r3, #4]
 80098d6:	609a      	str	r2, [r3, #8]
 80098d8:	60da      	str	r2, [r3, #12]
 80098da:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098e4:	d147      	bne.n	8009976 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098e6:	2300      	movs	r3, #0
 80098e8:	613b      	str	r3, [r7, #16]
 80098ea:	4b25      	ldr	r3, [pc, #148]	; (8009980 <HAL_HCD_MspInit+0xbc>)
 80098ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ee:	4a24      	ldr	r2, [pc, #144]	; (8009980 <HAL_HCD_MspInit+0xbc>)
 80098f0:	f043 0301 	orr.w	r3, r3, #1
 80098f4:	6313      	str	r3, [r2, #48]	; 0x30
 80098f6:	4b22      	ldr	r3, [pc, #136]	; (8009980 <HAL_HCD_MspInit+0xbc>)
 80098f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	613b      	str	r3, [r7, #16]
 8009900:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009902:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009908:	2300      	movs	r3, #0
 800990a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800990c:	2300      	movs	r3, #0
 800990e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009910:	f107 0314 	add.w	r3, r7, #20
 8009914:	4619      	mov	r1, r3
 8009916:	481b      	ldr	r0, [pc, #108]	; (8009984 <HAL_HCD_MspInit+0xc0>)
 8009918:	f7f8 fddc 	bl	80024d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800991c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009922:	2302      	movs	r3, #2
 8009924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009926:	2300      	movs	r3, #0
 8009928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800992a:	2300      	movs	r3, #0
 800992c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800992e:	230a      	movs	r3, #10
 8009930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009932:	f107 0314 	add.w	r3, r7, #20
 8009936:	4619      	mov	r1, r3
 8009938:	4812      	ldr	r0, [pc, #72]	; (8009984 <HAL_HCD_MspInit+0xc0>)
 800993a:	f7f8 fdcb 	bl	80024d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800993e:	4b10      	ldr	r3, [pc, #64]	; (8009980 <HAL_HCD_MspInit+0xbc>)
 8009940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009942:	4a0f      	ldr	r2, [pc, #60]	; (8009980 <HAL_HCD_MspInit+0xbc>)
 8009944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009948:	6353      	str	r3, [r2, #52]	; 0x34
 800994a:	2300      	movs	r3, #0
 800994c:	60fb      	str	r3, [r7, #12]
 800994e:	4b0c      	ldr	r3, [pc, #48]	; (8009980 <HAL_HCD_MspInit+0xbc>)
 8009950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009952:	4a0b      	ldr	r2, [pc, #44]	; (8009980 <HAL_HCD_MspInit+0xbc>)
 8009954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009958:	6453      	str	r3, [r2, #68]	; 0x44
 800995a:	4b09      	ldr	r3, [pc, #36]	; (8009980 <HAL_HCD_MspInit+0xbc>)
 800995c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800995e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009962:	60fb      	str	r3, [r7, #12]
 8009964:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009966:	2200      	movs	r2, #0
 8009968:	2100      	movs	r1, #0
 800996a:	2043      	movs	r0, #67	; 0x43
 800996c:	f7f8 fa91 	bl	8001e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009970:	2043      	movs	r0, #67	; 0x43
 8009972:	f7f8 faaa 	bl	8001eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009976:	bf00      	nop
 8009978:	3728      	adds	r7, #40	; 0x28
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	40023800 	.word	0x40023800
 8009984:	40020000 	.word	0x40020000

08009988 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009996:	4618      	mov	r0, r3
 8009998:	f7fe ffed 	bl	8008976 <USBH_LL_IncTimer>
}
 800999c:	bf00      	nop
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7ff f825 	bl	8008a02 <USBH_LL_Connect>
}
 80099b8:	bf00      	nop
 80099ba:	3708      	adds	r7, #8
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7ff f82e 	bl	8008a30 <USBH_LL_Disconnect>
}
 80099d4:	bf00      	nop
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	460b      	mov	r3, r1
 80099e6:	70fb      	strb	r3, [r7, #3]
 80099e8:	4613      	mov	r3, r2
 80099ea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80099ec:	bf00      	nop
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fe ffdf 	bl	80089ca <USBH_LL_PortEnabled>
}
 8009a0c:	bf00      	nop
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7fe ffdf 	bl	80089e6 <USBH_LL_PortDisabled>
}
 8009a28:	bf00      	nop
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d12a      	bne.n	8009a98 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009a42:	4a18      	ldr	r2, [pc, #96]	; (8009aa4 <USBH_LL_Init+0x74>)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a15      	ldr	r2, [pc, #84]	; (8009aa4 <USBH_LL_Init+0x74>)
 8009a4e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a52:	4b14      	ldr	r3, [pc, #80]	; (8009aa4 <USBH_LL_Init+0x74>)
 8009a54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009a58:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009a5a:	4b12      	ldr	r3, [pc, #72]	; (8009aa4 <USBH_LL_Init+0x74>)
 8009a5c:	2208      	movs	r2, #8
 8009a5e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009a60:	4b10      	ldr	r3, [pc, #64]	; (8009aa4 <USBH_LL_Init+0x74>)
 8009a62:	2201      	movs	r2, #1
 8009a64:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009a66:	4b0f      	ldr	r3, [pc, #60]	; (8009aa4 <USBH_LL_Init+0x74>)
 8009a68:	2200      	movs	r2, #0
 8009a6a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009a6c:	4b0d      	ldr	r3, [pc, #52]	; (8009aa4 <USBH_LL_Init+0x74>)
 8009a6e:	2202      	movs	r2, #2
 8009a70:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009a72:	4b0c      	ldr	r3, [pc, #48]	; (8009aa4 <USBH_LL_Init+0x74>)
 8009a74:	2200      	movs	r2, #0
 8009a76:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009a78:	480a      	ldr	r0, [pc, #40]	; (8009aa4 <USBH_LL_Init+0x74>)
 8009a7a:	f7f8 fee0 	bl	800283e <HAL_HCD_Init>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009a84:	f7f7 f850 	bl	8000b28 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009a88:	4806      	ldr	r0, [pc, #24]	; (8009aa4 <USBH_LL_Init+0x74>)
 8009a8a:	f7f9 fac4 	bl	8003016 <HAL_HCD_GetCurrentFrame>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	4619      	mov	r1, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7fe ff60 	bl	8008958 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	2000067c 	.word	0x2000067c

08009aa8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7f9 fa33 	bl	8002f2a <HAL_HCD_Start>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f000 f95c 	bl	8009d88 <USBH_Get_USB_Status>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ad4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b084      	sub	sp, #16
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7f9 fa3b 	bl	8002f70 <HAL_HCD_Stop>
 8009afa:	4603      	mov	r3, r0
 8009afc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009afe:	7bfb      	ldrb	r3, [r7, #15]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 f941 	bl	8009d88 <USBH_Get_USB_Status>
 8009b06:	4603      	mov	r3, r0
 8009b08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7f9 fa83 	bl	8003032 <HAL_HCD_GetCurrentSpeed>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d00c      	beq.n	8009b4c <USBH_LL_GetSpeed+0x38>
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d80d      	bhi.n	8009b52 <USBH_LL_GetSpeed+0x3e>
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d002      	beq.n	8009b40 <USBH_LL_GetSpeed+0x2c>
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d003      	beq.n	8009b46 <USBH_LL_GetSpeed+0x32>
 8009b3e:	e008      	b.n	8009b52 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009b40:	2300      	movs	r3, #0
 8009b42:	73fb      	strb	r3, [r7, #15]
    break;
 8009b44:	e008      	b.n	8009b58 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009b46:	2301      	movs	r3, #1
 8009b48:	73fb      	strb	r3, [r7, #15]
    break;
 8009b4a:	e005      	b.n	8009b58 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b50:	e002      	b.n	8009b58 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009b52:	2301      	movs	r3, #1
 8009b54:	73fb      	strb	r3, [r7, #15]
    break;
 8009b56:	bf00      	nop
  }
  return  speed;
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7f9 fa16 	bl	8002faa <HAL_HCD_ResetPort>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b82:	7bfb      	ldrb	r3, [r7, #15]
 8009b84:	4618      	mov	r0, r3
 8009b86:	f000 f8ff 	bl	8009d88 <USBH_Get_USB_Status>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009baa:	78fa      	ldrb	r2, [r7, #3]
 8009bac:	4611      	mov	r1, r2
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7f9 fa1d 	bl	8002fee <HAL_HCD_HC_GetXferCount>
 8009bb4:	4603      	mov	r3, r0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009bbe:	b590      	push	{r4, r7, lr}
 8009bc0:	b089      	sub	sp, #36	; 0x24
 8009bc2:	af04      	add	r7, sp, #16
 8009bc4:	6078      	str	r0, [r7, #4]
 8009bc6:	4608      	mov	r0, r1
 8009bc8:	4611      	mov	r1, r2
 8009bca:	461a      	mov	r2, r3
 8009bcc:	4603      	mov	r3, r0
 8009bce:	70fb      	strb	r3, [r7, #3]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	70bb      	strb	r3, [r7, #2]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009be6:	787c      	ldrb	r4, [r7, #1]
 8009be8:	78ba      	ldrb	r2, [r7, #2]
 8009bea:	78f9      	ldrb	r1, [r7, #3]
 8009bec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009bee:	9302      	str	r3, [sp, #8]
 8009bf0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	4623      	mov	r3, r4
 8009bfe:	f7f8 fe80 	bl	8002902 <HAL_HCD_HC_Init>
 8009c02:	4603      	mov	r3, r0
 8009c04:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c06:	7bfb      	ldrb	r3, [r7, #15]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 f8bd 	bl	8009d88 <USBH_Get_USB_Status>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c12:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd90      	pop	{r4, r7, pc}

08009c1c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	460b      	mov	r3, r1
 8009c26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c36:	78fa      	ldrb	r2, [r7, #3]
 8009c38:	4611      	mov	r1, r2
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7f8 fef0 	bl	8002a20 <HAL_HCD_HC_Halt>
 8009c40:	4603      	mov	r3, r0
 8009c42:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c44:	7bfb      	ldrb	r3, [r7, #15]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f000 f89e 	bl	8009d88 <USBH_Get_USB_Status>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c50:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009c5a:	b590      	push	{r4, r7, lr}
 8009c5c:	b089      	sub	sp, #36	; 0x24
 8009c5e:	af04      	add	r7, sp, #16
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	4608      	mov	r0, r1
 8009c64:	4611      	mov	r1, r2
 8009c66:	461a      	mov	r2, r3
 8009c68:	4603      	mov	r3, r0
 8009c6a:	70fb      	strb	r3, [r7, #3]
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	70bb      	strb	r3, [r7, #2]
 8009c70:	4613      	mov	r3, r2
 8009c72:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009c82:	787c      	ldrb	r4, [r7, #1]
 8009c84:	78ba      	ldrb	r2, [r7, #2]
 8009c86:	78f9      	ldrb	r1, [r7, #3]
 8009c88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c8c:	9303      	str	r3, [sp, #12]
 8009c8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c90:	9302      	str	r3, [sp, #8]
 8009c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c94:	9301      	str	r3, [sp, #4]
 8009c96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	4623      	mov	r3, r4
 8009c9e:	f7f8 fee3 	bl	8002a68 <HAL_HCD_HC_SubmitRequest>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f000 f86d 	bl	8009d88 <USBH_Get_USB_Status>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3714      	adds	r7, #20
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd90      	pop	{r4, r7, pc}

08009cbc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009cce:	78fa      	ldrb	r2, [r7, #3]
 8009cd0:	4611      	mov	r1, r2
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7f9 f977 	bl	8002fc6 <HAL_HCD_HC_GetURBState>
 8009cd8:	4603      	mov	r3, r0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b082      	sub	sp, #8
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	460b      	mov	r3, r1
 8009cec:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d103      	bne.n	8009d00 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009cf8:	78fb      	ldrb	r3, [r7, #3]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f000 f870 	bl	8009de0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009d00:	20c8      	movs	r0, #200	; 0xc8
 8009d02:	f7f7 fa8f 	bl	8001224 <HAL_Delay>
  return USBH_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	70fb      	strb	r3, [r7, #3]
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009d26:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009d28:	78fb      	ldrb	r3, [r7, #3]
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	212c      	movs	r1, #44	; 0x2c
 8009d2e:	fb01 f303 	mul.w	r3, r1, r3
 8009d32:	4413      	add	r3, r2
 8009d34:	333b      	adds	r3, #59	; 0x3b
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d009      	beq.n	8009d50 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009d3c:	78fb      	ldrb	r3, [r7, #3]
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	212c      	movs	r1, #44	; 0x2c
 8009d42:	fb01 f303 	mul.w	r3, r1, r3
 8009d46:	4413      	add	r3, r2
 8009d48:	3354      	adds	r3, #84	; 0x54
 8009d4a:	78ba      	ldrb	r2, [r7, #2]
 8009d4c:	701a      	strb	r2, [r3, #0]
 8009d4e:	e008      	b.n	8009d62 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009d50:	78fb      	ldrb	r3, [r7, #3]
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	212c      	movs	r1, #44	; 0x2c
 8009d56:	fb01 f303 	mul.w	r3, r1, r3
 8009d5a:	4413      	add	r3, r2
 8009d5c:	3355      	adds	r3, #85	; 0x55
 8009d5e:	78ba      	ldrb	r2, [r7, #2]
 8009d60:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3714      	adds	r7, #20
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f7f7 fa53 	bl	8001224 <HAL_Delay>
}
 8009d7e:	bf00      	nop
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
	...

08009d88 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	4603      	mov	r3, r0
 8009d90:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d92:	2300      	movs	r3, #0
 8009d94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d96:	79fb      	ldrb	r3, [r7, #7]
 8009d98:	2b03      	cmp	r3, #3
 8009d9a:	d817      	bhi.n	8009dcc <USBH_Get_USB_Status+0x44>
 8009d9c:	a201      	add	r2, pc, #4	; (adr r2, 8009da4 <USBH_Get_USB_Status+0x1c>)
 8009d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da2:	bf00      	nop
 8009da4:	08009db5 	.word	0x08009db5
 8009da8:	08009dbb 	.word	0x08009dbb
 8009dac:	08009dc1 	.word	0x08009dc1
 8009db0:	08009dc7 	.word	0x08009dc7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009db4:	2300      	movs	r3, #0
 8009db6:	73fb      	strb	r3, [r7, #15]
    break;
 8009db8:	e00b      	b.n	8009dd2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009dba:	2302      	movs	r3, #2
 8009dbc:	73fb      	strb	r3, [r7, #15]
    break;
 8009dbe:	e008      	b.n	8009dd2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	73fb      	strb	r3, [r7, #15]
    break;
 8009dc4:	e005      	b.n	8009dd2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009dc6:	2302      	movs	r3, #2
 8009dc8:	73fb      	strb	r3, [r7, #15]
    break;
 8009dca:	e002      	b.n	8009dd2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009dcc:	2302      	movs	r3, #2
 8009dce:	73fb      	strb	r3, [r7, #15]
    break;
 8009dd0:	bf00      	nop
  }
  return usb_status;
 8009dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	4603      	mov	r3, r0
 8009de8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009dea:	79fb      	ldrb	r3, [r7, #7]
 8009dec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009dee:	79fb      	ldrb	r3, [r7, #7]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d102      	bne.n	8009dfa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009df4:	2300      	movs	r3, #0
 8009df6:	73fb      	strb	r3, [r7, #15]
 8009df8:	e001      	b.n	8009dfe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009dfe:	7bfb      	ldrb	r3, [r7, #15]
 8009e00:	461a      	mov	r2, r3
 8009e02:	2101      	movs	r1, #1
 8009e04:	4803      	ldr	r0, [pc, #12]	; (8009e14 <MX_DriverVbusFS+0x34>)
 8009e06:	f7f8 fd01 	bl	800280c <HAL_GPIO_WritePin>
}
 8009e0a:	bf00      	nop
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	40020800 	.word	0x40020800

08009e18 <__errno>:
 8009e18:	4b01      	ldr	r3, [pc, #4]	; (8009e20 <__errno+0x8>)
 8009e1a:	6818      	ldr	r0, [r3, #0]
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	2000002c 	.word	0x2000002c

08009e24 <__libc_init_array>:
 8009e24:	b570      	push	{r4, r5, r6, lr}
 8009e26:	4d0d      	ldr	r5, [pc, #52]	; (8009e5c <__libc_init_array+0x38>)
 8009e28:	4c0d      	ldr	r4, [pc, #52]	; (8009e60 <__libc_init_array+0x3c>)
 8009e2a:	1b64      	subs	r4, r4, r5
 8009e2c:	10a4      	asrs	r4, r4, #2
 8009e2e:	2600      	movs	r6, #0
 8009e30:	42a6      	cmp	r6, r4
 8009e32:	d109      	bne.n	8009e48 <__libc_init_array+0x24>
 8009e34:	4d0b      	ldr	r5, [pc, #44]	; (8009e64 <__libc_init_array+0x40>)
 8009e36:	4c0c      	ldr	r4, [pc, #48]	; (8009e68 <__libc_init_array+0x44>)
 8009e38:	f000 f92e 	bl	800a098 <_init>
 8009e3c:	1b64      	subs	r4, r4, r5
 8009e3e:	10a4      	asrs	r4, r4, #2
 8009e40:	2600      	movs	r6, #0
 8009e42:	42a6      	cmp	r6, r4
 8009e44:	d105      	bne.n	8009e52 <__libc_init_array+0x2e>
 8009e46:	bd70      	pop	{r4, r5, r6, pc}
 8009e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e4c:	4798      	blx	r3
 8009e4e:	3601      	adds	r6, #1
 8009e50:	e7ee      	b.n	8009e30 <__libc_init_array+0xc>
 8009e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e56:	4798      	blx	r3
 8009e58:	3601      	adds	r6, #1
 8009e5a:	e7f2      	b.n	8009e42 <__libc_init_array+0x1e>
 8009e5c:	0800a0dc 	.word	0x0800a0dc
 8009e60:	0800a0dc 	.word	0x0800a0dc
 8009e64:	0800a0dc 	.word	0x0800a0dc
 8009e68:	0800a0e0 	.word	0x0800a0e0

08009e6c <malloc>:
 8009e6c:	4b02      	ldr	r3, [pc, #8]	; (8009e78 <malloc+0xc>)
 8009e6e:	4601      	mov	r1, r0
 8009e70:	6818      	ldr	r0, [r3, #0]
 8009e72:	f000 b87f 	b.w	8009f74 <_malloc_r>
 8009e76:	bf00      	nop
 8009e78:	2000002c 	.word	0x2000002c

08009e7c <free>:
 8009e7c:	4b02      	ldr	r3, [pc, #8]	; (8009e88 <free+0xc>)
 8009e7e:	4601      	mov	r1, r0
 8009e80:	6818      	ldr	r0, [r3, #0]
 8009e82:	f000 b80b 	b.w	8009e9c <_free_r>
 8009e86:	bf00      	nop
 8009e88:	2000002c 	.word	0x2000002c

08009e8c <memset>:
 8009e8c:	4402      	add	r2, r0
 8009e8e:	4603      	mov	r3, r0
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d100      	bne.n	8009e96 <memset+0xa>
 8009e94:	4770      	bx	lr
 8009e96:	f803 1b01 	strb.w	r1, [r3], #1
 8009e9a:	e7f9      	b.n	8009e90 <memset+0x4>

08009e9c <_free_r>:
 8009e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e9e:	2900      	cmp	r1, #0
 8009ea0:	d044      	beq.n	8009f2c <_free_r+0x90>
 8009ea2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ea6:	9001      	str	r0, [sp, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f1a1 0404 	sub.w	r4, r1, #4
 8009eae:	bfb8      	it	lt
 8009eb0:	18e4      	addlt	r4, r4, r3
 8009eb2:	f000 f8e3 	bl	800a07c <__malloc_lock>
 8009eb6:	4a1e      	ldr	r2, [pc, #120]	; (8009f30 <_free_r+0x94>)
 8009eb8:	9801      	ldr	r0, [sp, #4]
 8009eba:	6813      	ldr	r3, [r2, #0]
 8009ebc:	b933      	cbnz	r3, 8009ecc <_free_r+0x30>
 8009ebe:	6063      	str	r3, [r4, #4]
 8009ec0:	6014      	str	r4, [r2, #0]
 8009ec2:	b003      	add	sp, #12
 8009ec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ec8:	f000 b8de 	b.w	800a088 <__malloc_unlock>
 8009ecc:	42a3      	cmp	r3, r4
 8009ece:	d908      	bls.n	8009ee2 <_free_r+0x46>
 8009ed0:	6825      	ldr	r5, [r4, #0]
 8009ed2:	1961      	adds	r1, r4, r5
 8009ed4:	428b      	cmp	r3, r1
 8009ed6:	bf01      	itttt	eq
 8009ed8:	6819      	ldreq	r1, [r3, #0]
 8009eda:	685b      	ldreq	r3, [r3, #4]
 8009edc:	1949      	addeq	r1, r1, r5
 8009ede:	6021      	streq	r1, [r4, #0]
 8009ee0:	e7ed      	b.n	8009ebe <_free_r+0x22>
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	b10b      	cbz	r3, 8009eec <_free_r+0x50>
 8009ee8:	42a3      	cmp	r3, r4
 8009eea:	d9fa      	bls.n	8009ee2 <_free_r+0x46>
 8009eec:	6811      	ldr	r1, [r2, #0]
 8009eee:	1855      	adds	r5, r2, r1
 8009ef0:	42a5      	cmp	r5, r4
 8009ef2:	d10b      	bne.n	8009f0c <_free_r+0x70>
 8009ef4:	6824      	ldr	r4, [r4, #0]
 8009ef6:	4421      	add	r1, r4
 8009ef8:	1854      	adds	r4, r2, r1
 8009efa:	42a3      	cmp	r3, r4
 8009efc:	6011      	str	r1, [r2, #0]
 8009efe:	d1e0      	bne.n	8009ec2 <_free_r+0x26>
 8009f00:	681c      	ldr	r4, [r3, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	6053      	str	r3, [r2, #4]
 8009f06:	4421      	add	r1, r4
 8009f08:	6011      	str	r1, [r2, #0]
 8009f0a:	e7da      	b.n	8009ec2 <_free_r+0x26>
 8009f0c:	d902      	bls.n	8009f14 <_free_r+0x78>
 8009f0e:	230c      	movs	r3, #12
 8009f10:	6003      	str	r3, [r0, #0]
 8009f12:	e7d6      	b.n	8009ec2 <_free_r+0x26>
 8009f14:	6825      	ldr	r5, [r4, #0]
 8009f16:	1961      	adds	r1, r4, r5
 8009f18:	428b      	cmp	r3, r1
 8009f1a:	bf04      	itt	eq
 8009f1c:	6819      	ldreq	r1, [r3, #0]
 8009f1e:	685b      	ldreq	r3, [r3, #4]
 8009f20:	6063      	str	r3, [r4, #4]
 8009f22:	bf04      	itt	eq
 8009f24:	1949      	addeq	r1, r1, r5
 8009f26:	6021      	streq	r1, [r4, #0]
 8009f28:	6054      	str	r4, [r2, #4]
 8009f2a:	e7ca      	b.n	8009ec2 <_free_r+0x26>
 8009f2c:	b003      	add	sp, #12
 8009f2e:	bd30      	pop	{r4, r5, pc}
 8009f30:	20000980 	.word	0x20000980

08009f34 <sbrk_aligned>:
 8009f34:	b570      	push	{r4, r5, r6, lr}
 8009f36:	4e0e      	ldr	r6, [pc, #56]	; (8009f70 <sbrk_aligned+0x3c>)
 8009f38:	460c      	mov	r4, r1
 8009f3a:	6831      	ldr	r1, [r6, #0]
 8009f3c:	4605      	mov	r5, r0
 8009f3e:	b911      	cbnz	r1, 8009f46 <sbrk_aligned+0x12>
 8009f40:	f000 f88c 	bl	800a05c <_sbrk_r>
 8009f44:	6030      	str	r0, [r6, #0]
 8009f46:	4621      	mov	r1, r4
 8009f48:	4628      	mov	r0, r5
 8009f4a:	f000 f887 	bl	800a05c <_sbrk_r>
 8009f4e:	1c43      	adds	r3, r0, #1
 8009f50:	d00a      	beq.n	8009f68 <sbrk_aligned+0x34>
 8009f52:	1cc4      	adds	r4, r0, #3
 8009f54:	f024 0403 	bic.w	r4, r4, #3
 8009f58:	42a0      	cmp	r0, r4
 8009f5a:	d007      	beq.n	8009f6c <sbrk_aligned+0x38>
 8009f5c:	1a21      	subs	r1, r4, r0
 8009f5e:	4628      	mov	r0, r5
 8009f60:	f000 f87c 	bl	800a05c <_sbrk_r>
 8009f64:	3001      	adds	r0, #1
 8009f66:	d101      	bne.n	8009f6c <sbrk_aligned+0x38>
 8009f68:	f04f 34ff 	mov.w	r4, #4294967295
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	bd70      	pop	{r4, r5, r6, pc}
 8009f70:	20000984 	.word	0x20000984

08009f74 <_malloc_r>:
 8009f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f78:	1ccd      	adds	r5, r1, #3
 8009f7a:	f025 0503 	bic.w	r5, r5, #3
 8009f7e:	3508      	adds	r5, #8
 8009f80:	2d0c      	cmp	r5, #12
 8009f82:	bf38      	it	cc
 8009f84:	250c      	movcc	r5, #12
 8009f86:	2d00      	cmp	r5, #0
 8009f88:	4607      	mov	r7, r0
 8009f8a:	db01      	blt.n	8009f90 <_malloc_r+0x1c>
 8009f8c:	42a9      	cmp	r1, r5
 8009f8e:	d905      	bls.n	8009f9c <_malloc_r+0x28>
 8009f90:	230c      	movs	r3, #12
 8009f92:	603b      	str	r3, [r7, #0]
 8009f94:	2600      	movs	r6, #0
 8009f96:	4630      	mov	r0, r6
 8009f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f9c:	4e2e      	ldr	r6, [pc, #184]	; (800a058 <_malloc_r+0xe4>)
 8009f9e:	f000 f86d 	bl	800a07c <__malloc_lock>
 8009fa2:	6833      	ldr	r3, [r6, #0]
 8009fa4:	461c      	mov	r4, r3
 8009fa6:	bb34      	cbnz	r4, 8009ff6 <_malloc_r+0x82>
 8009fa8:	4629      	mov	r1, r5
 8009faa:	4638      	mov	r0, r7
 8009fac:	f7ff ffc2 	bl	8009f34 <sbrk_aligned>
 8009fb0:	1c43      	adds	r3, r0, #1
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	d14d      	bne.n	800a052 <_malloc_r+0xde>
 8009fb6:	6834      	ldr	r4, [r6, #0]
 8009fb8:	4626      	mov	r6, r4
 8009fba:	2e00      	cmp	r6, #0
 8009fbc:	d140      	bne.n	800a040 <_malloc_r+0xcc>
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	4631      	mov	r1, r6
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	eb04 0803 	add.w	r8, r4, r3
 8009fc8:	f000 f848 	bl	800a05c <_sbrk_r>
 8009fcc:	4580      	cmp	r8, r0
 8009fce:	d13a      	bne.n	800a046 <_malloc_r+0xd2>
 8009fd0:	6821      	ldr	r1, [r4, #0]
 8009fd2:	3503      	adds	r5, #3
 8009fd4:	1a6d      	subs	r5, r5, r1
 8009fd6:	f025 0503 	bic.w	r5, r5, #3
 8009fda:	3508      	adds	r5, #8
 8009fdc:	2d0c      	cmp	r5, #12
 8009fde:	bf38      	it	cc
 8009fe0:	250c      	movcc	r5, #12
 8009fe2:	4629      	mov	r1, r5
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	f7ff ffa5 	bl	8009f34 <sbrk_aligned>
 8009fea:	3001      	adds	r0, #1
 8009fec:	d02b      	beq.n	800a046 <_malloc_r+0xd2>
 8009fee:	6823      	ldr	r3, [r4, #0]
 8009ff0:	442b      	add	r3, r5
 8009ff2:	6023      	str	r3, [r4, #0]
 8009ff4:	e00e      	b.n	800a014 <_malloc_r+0xa0>
 8009ff6:	6822      	ldr	r2, [r4, #0]
 8009ff8:	1b52      	subs	r2, r2, r5
 8009ffa:	d41e      	bmi.n	800a03a <_malloc_r+0xc6>
 8009ffc:	2a0b      	cmp	r2, #11
 8009ffe:	d916      	bls.n	800a02e <_malloc_r+0xba>
 800a000:	1961      	adds	r1, r4, r5
 800a002:	42a3      	cmp	r3, r4
 800a004:	6025      	str	r5, [r4, #0]
 800a006:	bf18      	it	ne
 800a008:	6059      	strne	r1, [r3, #4]
 800a00a:	6863      	ldr	r3, [r4, #4]
 800a00c:	bf08      	it	eq
 800a00e:	6031      	streq	r1, [r6, #0]
 800a010:	5162      	str	r2, [r4, r5]
 800a012:	604b      	str	r3, [r1, #4]
 800a014:	4638      	mov	r0, r7
 800a016:	f104 060b 	add.w	r6, r4, #11
 800a01a:	f000 f835 	bl	800a088 <__malloc_unlock>
 800a01e:	f026 0607 	bic.w	r6, r6, #7
 800a022:	1d23      	adds	r3, r4, #4
 800a024:	1af2      	subs	r2, r6, r3
 800a026:	d0b6      	beq.n	8009f96 <_malloc_r+0x22>
 800a028:	1b9b      	subs	r3, r3, r6
 800a02a:	50a3      	str	r3, [r4, r2]
 800a02c:	e7b3      	b.n	8009f96 <_malloc_r+0x22>
 800a02e:	6862      	ldr	r2, [r4, #4]
 800a030:	42a3      	cmp	r3, r4
 800a032:	bf0c      	ite	eq
 800a034:	6032      	streq	r2, [r6, #0]
 800a036:	605a      	strne	r2, [r3, #4]
 800a038:	e7ec      	b.n	800a014 <_malloc_r+0xa0>
 800a03a:	4623      	mov	r3, r4
 800a03c:	6864      	ldr	r4, [r4, #4]
 800a03e:	e7b2      	b.n	8009fa6 <_malloc_r+0x32>
 800a040:	4634      	mov	r4, r6
 800a042:	6876      	ldr	r6, [r6, #4]
 800a044:	e7b9      	b.n	8009fba <_malloc_r+0x46>
 800a046:	230c      	movs	r3, #12
 800a048:	603b      	str	r3, [r7, #0]
 800a04a:	4638      	mov	r0, r7
 800a04c:	f000 f81c 	bl	800a088 <__malloc_unlock>
 800a050:	e7a1      	b.n	8009f96 <_malloc_r+0x22>
 800a052:	6025      	str	r5, [r4, #0]
 800a054:	e7de      	b.n	800a014 <_malloc_r+0xa0>
 800a056:	bf00      	nop
 800a058:	20000980 	.word	0x20000980

0800a05c <_sbrk_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	4d06      	ldr	r5, [pc, #24]	; (800a078 <_sbrk_r+0x1c>)
 800a060:	2300      	movs	r3, #0
 800a062:	4604      	mov	r4, r0
 800a064:	4608      	mov	r0, r1
 800a066:	602b      	str	r3, [r5, #0]
 800a068:	f7f6 fff8 	bl	800105c <_sbrk>
 800a06c:	1c43      	adds	r3, r0, #1
 800a06e:	d102      	bne.n	800a076 <_sbrk_r+0x1a>
 800a070:	682b      	ldr	r3, [r5, #0]
 800a072:	b103      	cbz	r3, 800a076 <_sbrk_r+0x1a>
 800a074:	6023      	str	r3, [r4, #0]
 800a076:	bd38      	pop	{r3, r4, r5, pc}
 800a078:	20000988 	.word	0x20000988

0800a07c <__malloc_lock>:
 800a07c:	4801      	ldr	r0, [pc, #4]	; (800a084 <__malloc_lock+0x8>)
 800a07e:	f000 b809 	b.w	800a094 <__retarget_lock_acquire_recursive>
 800a082:	bf00      	nop
 800a084:	2000098c 	.word	0x2000098c

0800a088 <__malloc_unlock>:
 800a088:	4801      	ldr	r0, [pc, #4]	; (800a090 <__malloc_unlock+0x8>)
 800a08a:	f000 b804 	b.w	800a096 <__retarget_lock_release_recursive>
 800a08e:	bf00      	nop
 800a090:	2000098c 	.word	0x2000098c

0800a094 <__retarget_lock_acquire_recursive>:
 800a094:	4770      	bx	lr

0800a096 <__retarget_lock_release_recursive>:
 800a096:	4770      	bx	lr

0800a098 <_init>:
 800a098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09a:	bf00      	nop
 800a09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a09e:	bc08      	pop	{r3}
 800a0a0:	469e      	mov	lr, r3
 800a0a2:	4770      	bx	lr

0800a0a4 <_fini>:
 800a0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a6:	bf00      	nop
 800a0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0aa:	bc08      	pop	{r3}
 800a0ac:	469e      	mov	lr, r3
 800a0ae:	4770      	bx	lr
